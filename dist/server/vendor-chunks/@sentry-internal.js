"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sentry-internal";
exports.ids = ["vendor-chunks/@sentry-internal"];
exports.modules = {

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/esm/common/debug-build.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/common/debug-build.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEBUG_BUILD: () => (/* binding */ DEBUG_BUILD)\n/* harmony export */ });\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */ const DEBUG_BUILD =  false || false;\n //# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2VzbS9jb21tb24vZGVidWctYnVpbGQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0NBSUMsR0FDRCxNQUFNQSxjQUFlLE1BQTRCLElBQWVDLEtBQWdCQTtBQUV6RCxDQUN2Qix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2VzbS9jb21tb24vZGVidWctYnVpbGQuanM/OGQ3MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgc2VydmVzIGFzIGEgYnVpbGQgdGltZSBmbGFnIHRoYXQgd2lsbCBiZSB0cnVlIGJ5IGRlZmF1bHQsIGJ1dCBmYWxzZSBpbiBub24tZGVidWcgYnVpbGRzIG9yIGlmIHVzZXJzIHJlcGxhY2UgYF9fU0VOVFJZX0RFQlVHX19gIGluIHRoZWlyIGdlbmVyYXRlZCBjb2RlLlxuICpcbiAqIEFUVEVOVElPTjogVGhpcyBjb25zdGFudCBtdXN0IG5ldmVyIGNyb3NzIHBhY2thZ2UgYm91bmRhcmllcyAoaS5lLiBiZSBleHBvcnRlZCkgdG8gZ3VhcmFudGVlIHRoYXQgaXQgY2FuIGJlIHVzZWQgZm9yIHRyZWUgc2hha2luZy5cbiAqL1xuY29uc3QgREVCVUdfQlVJTEQgPSAodHlwZW9mIF9fU0VOVFJZX0RFQlVHX18gPT09ICd1bmRlZmluZWQnIHx8IF9fU0VOVFJZX0RFQlVHX18pO1xuXG5leHBvcnQgeyBERUJVR19CVUlMRCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVidWctYnVpbGQuanMubWFwXG4iXSwibmFtZXMiOlsiREVCVUdfQlVJTEQiLCJfX1NFTlRSWV9ERUJVR19fIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/esm/common/debug-build.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/apollo.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/node/integrations/apollo.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Apollo: () => (/* binding */ Apollo)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/node.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _common_debug_build_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/debug-build.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/esm/common/debug-build.js\");\n/* harmony import */ var _utils_node_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/node-utils.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/utils/node-utils.js\");\n\n\n\n\n/** Tracing integration for Apollo */ class Apollo {\n    /**\n   * @inheritDoc\n   */ static __initStatic() {\n        this.id = \"Apollo\";\n    }\n    /**\n   * @inheritDoc\n   */ /**\n   * @inheritDoc\n   */ constructor(options = {\n        useNestjs: false\n    }){\n        this.name = Apollo.id;\n        this._useNest = !!options.useNestjs;\n    }\n    /** @inheritdoc */ loadDependency() {\n        if (this._useNest) {\n            this._module = this._module || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.loadModule)(\"@nestjs/graphql\");\n        } else {\n            this._module = this._module || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.loadModule)(\"apollo-server-core\");\n        }\n        return this._module;\n    }\n    /**\n   * @inheritDoc\n   */ setupOnce(_, getCurrentHub) {\n        if ((0,_utils_node_utils_js__WEBPACK_IMPORTED_MODULE_1__.shouldDisableAutoInstrumentation)(getCurrentHub)) {\n            _common_debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.log(\"Apollo Integration is skipped because of instrumenter configuration.\");\n            return;\n        }\n        if (this._useNest) {\n            const pkg = this.loadDependency();\n            if (!pkg) {\n                _common_debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.error(\"Apollo-NestJS Integration was unable to require @nestjs/graphql package.\");\n                return;\n            }\n            /**\n       * Iterate over resolvers of NestJS ResolversExplorerService before schemas are constructed.\n       */ (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.fill)(pkg.GraphQLFactory.prototype, \"mergeWithSchema\", function(orig) {\n                return function(...args) {\n                    (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.fill)(this.resolversExplorerService, \"explore\", function(orig) {\n                        return function() {\n                            const resolvers = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.arrayify)(orig.call(this));\n                            const instrumentedResolvers = instrumentResolvers(resolvers, getCurrentHub);\n                            return instrumentedResolvers;\n                        };\n                    });\n                    return orig.call(this, ...args);\n                };\n            });\n        } else {\n            const pkg = this.loadDependency();\n            if (!pkg) {\n                _common_debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.error(\"Apollo Integration was unable to require apollo-server-core package.\");\n                return;\n            }\n            /**\n       * Iterate over resolvers of the ApolloServer instance before schemas are constructed.\n       */ (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.fill)(pkg.ApolloServerBase.prototype, \"constructSchema\", function(orig) {\n                return function() {\n                    if (!this.config.resolvers) {\n                        if (_common_debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD) {\n                            if (this.config.schema) {\n                                _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.warn(\"Apollo integration is not able to trace `ApolloServer` instances constructed via `schema` property.\" + \"If you are using NestJS with Apollo, please use `Sentry.Integrations.Apollo({ useNestjs: true })` instead.\");\n                                _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.warn();\n                            } else if (this.config.modules) {\n                                _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.warn(\"Apollo integration is not able to trace `ApolloServer` instances constructed via `modules` property.\");\n                            }\n                            _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.error(\"Skipping tracing as no resolvers found on the `ApolloServer` instance.\");\n                        }\n                        return orig.call(this);\n                    }\n                    const resolvers = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.arrayify)(this.config.resolvers);\n                    this.config.resolvers = instrumentResolvers(resolvers, getCurrentHub);\n                    return orig.call(this);\n                };\n            });\n        }\n    }\n}\nApollo.__initStatic();\nfunction instrumentResolvers(resolvers, getCurrentHub) {\n    return resolvers.map((model)=>{\n        Object.keys(model).forEach((resolverGroupName)=>{\n            Object.keys(model[resolverGroupName]).forEach((resolverName)=>{\n                if (typeof model[resolverGroupName][resolverName] !== \"function\") {\n                    return;\n                }\n                wrapResolver(model, resolverGroupName, resolverName, getCurrentHub);\n            });\n        });\n        return model;\n    });\n}\n/**\n * Wrap a single resolver which can be a parent of other resolvers and/or db operations.\n */ function wrapResolver(model, resolverGroupName, resolverName, getCurrentHub) {\n    (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.fill)(model[resolverGroupName], resolverName, function(orig) {\n        return function(...args) {\n            const scope = getCurrentHub().getScope();\n            const parentSpan = scope.getSpan();\n            const span = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__._optionalChain)([\n                parentSpan,\n                \"optionalAccess\",\n                (_2)=>_2.startChild,\n                \"call\",\n                (_3)=>_3({\n                        description: `${resolverGroupName}.${resolverName}`,\n                        op: \"graphql.resolve\",\n                        origin: \"auto.graphql.apollo\"\n                    })\n            ]);\n            const rv = orig.call(this, ...args);\n            if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_7__.isThenable)(rv)) {\n                return rv.then((res)=>{\n                    (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__._optionalChain)([\n                        span,\n                        \"optionalAccess\",\n                        (_4)=>_4.finish,\n                        \"call\",\n                        (_5)=>_5()\n                    ]);\n                    return res;\n                });\n            }\n            (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__._optionalChain)([\n                span,\n                \"optionalAccess\",\n                (_6)=>_6.finish,\n                \"call\",\n                (_7)=>_7()\n            ]);\n            return rv;\n        };\n    });\n}\n //# sourceMappingURL=apollo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/apollo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/express.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/node/integrations/express.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Express: () => (/* binding */ Express),\n/* harmony export */   extractOriginalRoute: () => (/* binding */ extractOriginalRoute),\n/* harmony export */   preventDuplicateSegments: () => (/* binding */ preventDuplicateSegments)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/url.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/requestdata.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/worldwide.js\");\n/* harmony import */ var _common_debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/debug-build.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/esm/common/debug-build.js\");\n/* harmony import */ var _utils_node_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/node-utils.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/utils/node-utils.js\");\n\n\n\n\n/**\n * Express integration\n *\n * Provides an request and error handler for Express framework as well as tracing capabilities\n */ class Express {\n    /**\n   * @inheritDoc\n   */ static __initStatic() {\n        this.id = \"Express\";\n    }\n    /**\n   * @inheritDoc\n   */ /**\n   * Express App instance\n   */ /**\n   * @inheritDoc\n   */ constructor(options = {}){\n        this.name = Express.id;\n        this._router = options.router || options.app;\n        this._methods = (Array.isArray(options.methods) ? options.methods : []).concat(\"use\");\n    }\n    /**\n   * @inheritDoc\n   */ setupOnce(_, getCurrentHub) {\n        if (!this._router) {\n            _common_debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.logger.error(\"ExpressIntegration is missing an Express instance\");\n            return;\n        }\n        if ((0,_utils_node_utils_js__WEBPACK_IMPORTED_MODULE_2__.shouldDisableAutoInstrumentation)(getCurrentHub)) {\n            _common_debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.logger.log(\"Express Integration is skipped because of instrumenter configuration.\");\n            return;\n        }\n        instrumentMiddlewares(this._router, this._methods);\n        instrumentRouter(this._router);\n    }\n}\nExpress.__initStatic();\n/**\n * Wraps original middleware function in a tracing call, which stores the info about the call as a span,\n * and finishes it once the middleware is done invoking.\n *\n * Express middlewares have 3 various forms, thus we have to take care of all of them:\n * // sync\n * app.use(function (req, res) { ... })\n * // async\n * app.use(function (req, res, next) { ... })\n * // error handler\n * app.use(function (err, req, res, next) { ... })\n *\n * They all internally delegate to the `router[method]` of the given application instance.\n */ // eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/no-explicit-any\nfunction wrap(fn, method) {\n    const arity = fn.length;\n    switch(arity){\n        case 2:\n            {\n                return function(req, res) {\n                    const transaction = res.__sentry_transaction;\n                    if (transaction) {\n                        const span = transaction.startChild({\n                            description: fn.name,\n                            op: `middleware.express.${method}`,\n                            origin: \"auto.middleware.express\"\n                        });\n                        res.once(\"finish\", ()=>{\n                            span.finish();\n                        });\n                    }\n                    return fn.call(this, req, res);\n                };\n            }\n        case 3:\n            {\n                return function(req, res, next) {\n                    const transaction = res.__sentry_transaction;\n                    const span = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._optionalChain)([\n                        transaction,\n                        \"optionalAccess\",\n                        (_2)=>_2.startChild,\n                        \"call\",\n                        (_3)=>_3({\n                                description: fn.name,\n                                op: `middleware.express.${method}`,\n                                origin: \"auto.middleware.express\"\n                            })\n                    ]);\n                    fn.call(this, req, res, function(...args) {\n                        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._optionalChain)([\n                            span,\n                            \"optionalAccess\",\n                            (_4)=>_4.finish,\n                            \"call\",\n                            (_5)=>_5()\n                        ]);\n                        next.call(this, ...args);\n                    });\n                };\n            }\n        case 4:\n            {\n                return function(err, req, res, next) {\n                    const transaction = res.__sentry_transaction;\n                    const span = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._optionalChain)([\n                        transaction,\n                        \"optionalAccess\",\n                        (_6)=>_6.startChild,\n                        \"call\",\n                        (_7)=>_7({\n                                description: fn.name,\n                                op: `middleware.express.${method}`,\n                                origin: \"auto.middleware.express\"\n                            })\n                    ]);\n                    fn.call(this, err, req, res, function(...args) {\n                        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._optionalChain)([\n                            span,\n                            \"optionalAccess\",\n                            (_8)=>_8.finish,\n                            \"call\",\n                            (_9)=>_9()\n                        ]);\n                        next.call(this, ...args);\n                    });\n                };\n            }\n        default:\n            {\n                throw new Error(`Express middleware takes 2-4 arguments. Got: ${arity}`);\n            }\n    }\n}\n/**\n * Takes all the function arguments passed to the original `app` or `router` method, eg. `app.use` or `router.use`\n * and wraps every function, as well as array of functions with a call to our `wrap` method.\n * We have to take care of the arrays as well as iterate over all of the arguments,\n * as `app.use` can accept middlewares in few various forms.\n *\n * app.use([<path>], <fn>)\n * app.use([<path>], <fn>, ...<fn>)\n * app.use([<path>], ...<fn>[])\n */ function wrapMiddlewareArgs(args, method) {\n    return args.map((arg)=>{\n        if (typeof arg === \"function\") {\n            return wrap(arg, method);\n        }\n        if (Array.isArray(arg)) {\n            return arg.map((a)=>{\n                if (typeof a === \"function\") {\n                    return wrap(a, method);\n                }\n                return a;\n            });\n        }\n        return arg;\n    });\n}\n/**\n * Patches original router to utilize our tracing functionality\n */ function patchMiddleware(router, method) {\n    const originalCallback = router[method];\n    router[method] = function(...args) {\n        return originalCallback.call(this, ...wrapMiddlewareArgs(args, method));\n    };\n    return router;\n}\n/**\n * Patches original router methods\n */ function instrumentMiddlewares(router, methods = []) {\n    methods.forEach((method)=>patchMiddleware(router, method));\n}\n/**\n * Patches the prototype of Express.Router to accumulate the resolved route\n * if a layer instance's `match` function was called and it returned a successful match.\n *\n * @see https://github.com/expressjs/express/blob/master/lib/router/index.js\n *\n * @param appOrRouter the router instance which can either be an app (i.e. top-level) or a (nested) router.\n */ function instrumentRouter(appOrRouter) {\n    // This is how we can distinguish between app and routers\n    const isApp = \"settings\" in appOrRouter;\n    // In case the app's top-level router hasn't been initialized yet, we have to do it now\n    if (isApp && appOrRouter._router === undefined && appOrRouter.lazyrouter) {\n        appOrRouter.lazyrouter();\n    }\n    const router = isApp ? appOrRouter._router : appOrRouter;\n    if (!router) {\n        /*\n    If we end up here, this means likely that this integration is used with Express 3 or Express 5.\n    For now, we don't support these versions (3 is very old and 5 is still in beta). To support Express 5,\n    we'd need to make more changes to the routing instrumentation because the router is no longer part of\n    the Express core package but maintained in its own package. The new router has different function\n    signatures and works slightly differently, demanding more changes than just taking the router from\n    `app.router` instead of `app._router`.\n    @see https://github.com/pillarjs/router\n\n    TODO: Proper Express 5 support\n    */ _common_debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.logger.debug(\"Cannot instrument router for URL Parameterization (did not find a valid router).\");\n        _common_debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.logger.debug(\"Routing instrumentation is currently only supported in Express 4.\");\n        return;\n    }\n    const routerProto = Object.getPrototypeOf(router);\n    const originalProcessParams = routerProto.process_params;\n    routerProto.process_params = function process_params(layer, called, req, res, done) {\n        // Base case: We're in the first part of the URL (thus we start with the root '/')\n        if (!req._reconstructedRoute) {\n            req._reconstructedRoute = \"\";\n        }\n        // If the layer's partial route has params, is a regex or an array, the route is stored in layer.route.\n        const { layerRoutePath, isRegex, isArray, numExtraSegments } = getLayerRoutePathInfo(layer);\n        if (layerRoutePath || isRegex || isArray) {\n            req._hasParameters = true;\n        }\n        // Otherwise, the hardcoded path (i.e. a partial route without params) is stored in layer.path\n        let partialRoute;\n        if (layerRoutePath) {\n            partialRoute = layerRoutePath;\n        } else {\n            /**\n       * prevent duplicate segment in _reconstructedRoute param if router match multiple routes before final path\n       * example:\n       * original url: /api/v1/1234\n       * prevent: /api/api/v1/:userId\n       * router structure\n       * /api -> middleware\n       * /api/v1 -> middleware\n       * /1234 -> endpoint with param :userId\n       * final _reconstructedRoute is /api/v1/:userId\n       */ partialRoute = preventDuplicateSegments(req.originalUrl, req._reconstructedRoute, layer.path) || \"\";\n        }\n        // Normalize the partial route so that it doesn't contain leading or trailing slashes\n        // and exclude empty or '*' wildcard routes.\n        // The exclusion of '*' routes is our best effort to not \"pollute\" the transaction name\n        // with interim handlers (e.g. ones that check authentication or do other middleware stuff).\n        // We want to end up with the parameterized URL of the incoming request without any extraneous path segments.\n        const finalPartialRoute = partialRoute.split(\"/\").filter((segment)=>segment.length > 0 && (isRegex || isArray || !segment.includes(\"*\"))).join(\"/\");\n        // If we found a valid partial URL, we append it to the reconstructed route\n        if (finalPartialRoute && finalPartialRoute.length > 0) {\n            // If the partial route is from a regex route, we append a '/' to close the regex\n            req._reconstructedRoute += `/${finalPartialRoute}${isRegex ? \"/\" : \"\"}`;\n        }\n        // Now we check if we are in the \"last\" part of the route. We determine this by comparing the\n        // number of URL segments from the original URL to that of our reconstructed parameterized URL.\n        // If we've reached our final destination, we update the transaction name.\n        const urlLength = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.getNumberOfUrlSegments)((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.stripUrlQueryAndFragment)(req.originalUrl || \"\")) + numExtraSegments;\n        const routeLength = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.getNumberOfUrlSegments)(req._reconstructedRoute);\n        if (urlLength === routeLength) {\n            if (!req._hasParameters) {\n                if (req._reconstructedRoute !== req.originalUrl) {\n                    req._reconstructedRoute = req.originalUrl ? (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.stripUrlQueryAndFragment)(req.originalUrl) : req.originalUrl;\n                }\n            }\n            const transaction = res.__sentry_transaction;\n            if (transaction && transaction.metadata.source !== \"custom\") {\n                // If the request URL is '/' or empty, the reconstructed route will be empty.\n                // Therefore, we fall back to setting the final route to '/' in this case.\n                const finalRoute = req._reconstructedRoute || \"/\";\n                transaction.setName(...(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.extractPathForTransaction)(req, {\n                    path: true,\n                    method: true,\n                    customRoute: finalRoute\n                }));\n            }\n        }\n        return originalProcessParams.call(this, layer, called, req, res, done);\n    };\n}\n/**\n * Recreate layer.route.path from layer.regexp and layer.keys.\n * Works until express.js used package path-to-regexp@0.1.7\n * or until layer.keys contain offset attribute\n *\n * @param layer the layer to extract the stringified route from\n *\n * @returns string in layer.route.path structure 'router/:pathParam' or undefined\n */ const extractOriginalRoute = (path, regexp, keys)=>{\n    if (!path || !regexp || !keys || Object.keys(keys).length === 0 || !(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._optionalChain)([\n        keys,\n        \"access\",\n        (_10)=>_10[0],\n        \"optionalAccess\",\n        (_11)=>_11.offset\n    ])) {\n        return undefined;\n    }\n    const orderedKeys = keys.sort((a, b)=>a.offset - b.offset);\n    // add d flag for getting indices from regexp result\n    const pathRegex = new RegExp(regexp, `${regexp.flags}d`);\n    /**\n   * use custom type cause of TS error with missing indices in RegExpExecArray\n   */ const execResult = pathRegex.exec(path);\n    if (!execResult || !execResult.indices) {\n        return undefined;\n    }\n    /**\n   * remove first match from regex cause contain whole layer.path\n   */ const [, ...paramIndices] = execResult.indices;\n    if (paramIndices.length !== orderedKeys.length) {\n        return undefined;\n    }\n    let resultPath = path;\n    let indexShift = 0;\n    /**\n   * iterate param matches from regexp.exec\n   */ paramIndices.forEach((item, index)=>{\n        /** check if offsets is define because in some cases regex d flag returns undefined */ if (item) {\n            const [startOffset, endOffset] = item;\n            /**\n       * isolate part before param\n       */ const substr1 = resultPath.substring(0, startOffset - indexShift);\n            /**\n       * define paramName as replacement in format :pathParam\n       */ const replacement = `:${orderedKeys[index].name}`;\n            /**\n       * isolate part after param\n       */ const substr2 = resultPath.substring(endOffset - indexShift);\n            /**\n       * recreate original path but with param replacement\n       */ resultPath = substr1 + replacement + substr2;\n            /**\n       * calculate new index shift after resultPath was modified\n       */ indexShift = indexShift + (endOffset - startOffset - replacement.length);\n        }\n    });\n    return resultPath;\n};\n/**\n * Extracts and stringifies the layer's route which can either be a string with parameters (`users/:id`),\n * a RegEx (`/test/`) or an array of strings and regexes (`['/path1', /\\/path[2-5]/, /path/:id]`). Additionally\n * returns extra information about the route, such as if the route is defined as regex or as an array.\n *\n * @param layer the layer to extract the stringified route from\n *\n * @returns an object containing the stringified route, a flag determining if the route was a regex\n *          and the number of extra segments to the matched path that are additionally in the route,\n *          if the route was an array (defaults to 0).\n */ function getLayerRoutePathInfo(layer) {\n    let lrp = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._optionalChain)([\n        layer,\n        \"access\",\n        (_12)=>_12.route,\n        \"optionalAccess\",\n        (_13)=>_13.path\n    ]);\n    const isRegex = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__.isRegExp)(lrp);\n    const isArray = Array.isArray(lrp);\n    if (!lrp) {\n        // parse node.js major version\n        // Next.js will complain if we directly use `proces.versions` here because of edge runtime.\n        const [major] = _sentry_utils__WEBPACK_IMPORTED_MODULE_7__.GLOBAL_OBJ.process.versions.node.split(\".\").map(Number);\n        // allow call extractOriginalRoute only if node version support Regex d flag, node 16+\n        if (major >= 16) {\n            /**\n       * If lrp does not exist try to recreate original layer path from route regexp\n       */ lrp = extractOriginalRoute(layer.path, layer.regexp, layer.keys);\n        }\n    }\n    if (!lrp) {\n        return {\n            isRegex,\n            isArray,\n            numExtraSegments: 0\n        };\n    }\n    const numExtraSegments = isArray ? Math.max(getNumberOfArrayUrlSegments(lrp) - (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.getNumberOfUrlSegments)(layer.path || \"\"), 0) : 0;\n    const layerRoutePath = getLayerRoutePathString(isArray, lrp);\n    return {\n        layerRoutePath,\n        isRegex,\n        isArray,\n        numExtraSegments\n    };\n}\n/**\n * Returns the number of URL segments in an array of routes\n *\n * Example: ['/api/test', /\\/api\\/post[0-9]/, '/users/:id/details`] -> 7\n */ function getNumberOfArrayUrlSegments(routesArray) {\n    return routesArray.reduce((accNumSegments, currentRoute)=>{\n        // array members can be a RegEx -> convert them toString\n        return accNumSegments + (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.getNumberOfUrlSegments)(currentRoute.toString());\n    }, 0);\n}\n/**\n * Extracts and returns the stringified version of the layers route path\n * Handles route arrays (by joining the paths together) as well as RegExp and normal\n * string values (in the latter case the toString conversion is technically unnecessary but\n * it doesn't hurt us either).\n */ function getLayerRoutePathString(isArray, lrp) {\n    if (isArray) {\n        return lrp.map((r)=>r.toString()).join(\",\");\n    }\n    return lrp && lrp.toString();\n}\n/**\n * remove duplicate segment contain in layerPath against reconstructedRoute,\n * and return only unique segment that can be added into reconstructedRoute\n */ function preventDuplicateSegments(originalUrl, reconstructedRoute, layerPath) {\n    // filter query params\n    const normalizeURL = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.stripUrlQueryAndFragment)(originalUrl || \"\");\n    const originalUrlSplit = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._optionalChain)([\n        normalizeURL,\n        \"optionalAccess\",\n        (_14)=>_14.split,\n        \"call\",\n        (_15)=>_15(\"/\"),\n        \"access\",\n        (_16)=>_16.filter,\n        \"call\",\n        (_17)=>_17((v)=>!!v)\n    ]);\n    let tempCounter = 0;\n    const currentOffset = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._optionalChain)([\n        reconstructedRoute,\n        \"optionalAccess\",\n        (_18)=>_18.split,\n        \"call\",\n        (_19)=>_19(\"/\"),\n        \"access\",\n        (_20)=>_20.filter,\n        \"call\",\n        (_21)=>_21((v)=>!!v),\n        \"access\",\n        (_22)=>_22.length\n    ]) || 0;\n    const result = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._optionalChain)([\n        layerPath,\n        \"optionalAccess\",\n        (_23)=>_23.split,\n        \"call\",\n        (_24)=>_24(\"/\"),\n        \"access\",\n        (_25)=>_25.filter,\n        \"call\",\n        (_26)=>_26((segment)=>{\n                if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._optionalChain)([\n                    originalUrlSplit,\n                    \"optionalAccess\",\n                    (_27)=>_27[currentOffset + tempCounter]\n                ]) === segment) {\n                    tempCounter += 1;\n                    return true;\n                }\n                return false;\n            }),\n        \"access\",\n        (_28)=>_28.join,\n        \"call\",\n        (_29)=>_29(\"/\")\n    ]);\n    return result;\n}\n //# sourceMappingURL=express.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/express.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/graphql.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/node/integrations/graphql.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GraphQL: () => (/* binding */ GraphQL)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/node.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _common_debug_build_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/debug-build.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/esm/common/debug-build.js\");\n/* harmony import */ var _utils_node_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/node-utils.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/utils/node-utils.js\");\n\n\n\n\n/** Tracing integration for graphql package */ class GraphQL {\n    /**\n   * @inheritDoc\n   */ static __initStatic() {\n        this.id = \"GraphQL\";\n    }\n    /**\n   * @inheritDoc\n   */ constructor(){\n        this.name = GraphQL.id;\n    }\n    /** @inheritdoc */ loadDependency() {\n        return this._module = this._module || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.loadModule)(\"graphql/execution/execute.js\");\n    }\n    /**\n   * @inheritDoc\n   */ setupOnce(_, getCurrentHub) {\n        if ((0,_utils_node_utils_js__WEBPACK_IMPORTED_MODULE_1__.shouldDisableAutoInstrumentation)(getCurrentHub)) {\n            _common_debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.log(\"GraphQL Integration is skipped because of instrumenter configuration.\");\n            return;\n        }\n        const pkg = this.loadDependency();\n        if (!pkg) {\n            _common_debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.error(\"GraphQL Integration was unable to require graphql/execution package.\");\n            return;\n        }\n        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.fill)(pkg, \"execute\", function(orig) {\n            return function(...args) {\n                const scope = getCurrentHub().getScope();\n                const parentSpan = scope.getSpan();\n                const span = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._optionalChain)([\n                    parentSpan,\n                    \"optionalAccess\",\n                    (_2)=>_2.startChild,\n                    \"call\",\n                    (_3)=>_3({\n                            description: \"execute\",\n                            op: \"graphql.execute\",\n                            origin: \"auto.graphql.graphql\"\n                        })\n                ]);\n                (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._optionalChain)([\n                    scope,\n                    \"optionalAccess\",\n                    (_4)=>_4.setSpan,\n                    \"call\",\n                    (_5)=>_5(span)\n                ]);\n                const rv = orig.call(this, ...args);\n                if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__.isThenable)(rv)) {\n                    return rv.then((res)=>{\n                        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._optionalChain)([\n                            span,\n                            \"optionalAccess\",\n                            (_6)=>_6.finish,\n                            \"call\",\n                            (_7)=>_7()\n                        ]);\n                        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._optionalChain)([\n                            scope,\n                            \"optionalAccess\",\n                            (_8)=>_8.setSpan,\n                            \"call\",\n                            (_9)=>_9(parentSpan)\n                        ]);\n                        return res;\n                    });\n                }\n                (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._optionalChain)([\n                    span,\n                    \"optionalAccess\",\n                    (_10)=>_10.finish,\n                    \"call\",\n                    (_11)=>_11()\n                ]);\n                (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._optionalChain)([\n                    scope,\n                    \"optionalAccess\",\n                    (_12)=>_12.setSpan,\n                    \"call\",\n                    (_13)=>_13(parentSpan)\n                ]);\n                return rv;\n            };\n        });\n    }\n}\nGraphQL.__initStatic();\n //# sourceMappingURL=graphql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2VzbS9ub2RlL2ludGVncmF0aW9ucy9ncmFwaHFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQStDO0FBQ3NCO0FBQ1g7QUFDZTtBQUV6RSw0Q0FBNEMsR0FDNUMsTUFBTU87SUFDSjs7R0FFQyxHQUNBLE9BQU9DLGVBQWU7UUFBQyxJQUFJLENBQUNDLEVBQUUsR0FBRztJQUFVO0lBRTVDOztHQUVDLEdBRUFDLGFBQWM7UUFDYixJQUFJLENBQUNDLElBQUksR0FBR0osUUFBUUUsRUFBRTtJQUN4QjtJQUVBLGdCQUFnQixHQUNmRyxpQkFBaUI7UUFDaEIsT0FBUSxJQUFJLENBQUNDLE9BQU8sR0FBRyxJQUFJLENBQUNBLE9BQU8sSUFBSVoseURBQVVBLENBQUM7SUFDcEQ7SUFFQTs7R0FFQyxHQUNBYSxVQUFVQyxDQUFDLEVBQUVDLGFBQWEsRUFBRTtRQUMzQixJQUFJVixzRkFBZ0NBLENBQUNVLGdCQUFnQjtZQUNuRFgsK0RBQVdBLElBQUlILGlEQUFNQSxDQUFDZSxHQUFHLENBQUM7WUFDMUI7UUFDRjtRQUVBLE1BQU1DLE1BQU0sSUFBSSxDQUFDTixjQUFjO1FBRS9CLElBQUksQ0FBQ00sS0FBSztZQUNSYiwrREFBV0EsSUFBSUgsaURBQU1BLENBQUNpQixLQUFLLENBQUM7WUFDNUI7UUFDRjtRQUVBaEIsbURBQUlBLENBQUNlLEtBQUssV0FBVyxTQUFVRSxJQUFJO1lBQ2pDLE9BQU8sU0FBVyxHQUFHQyxJQUFJO2dCQUN2QixNQUFNQyxRQUFRTixnQkFBZ0JPLFFBQVE7Z0JBQ3RDLE1BQU1DLGFBQWFGLE1BQU1HLE9BQU87Z0JBRWhDLE1BQU1DLE9BQU8xQiw2REFBY0EsQ0FBQztvQkFBQ3dCO29CQUFZO29CQUFrQkcsQ0FBQUEsS0FBTUEsR0FBR0MsVUFBVTtvQkFBRTtvQkFBUUMsQ0FBQUEsS0FBTUEsR0FBRzs0QkFDL0ZDLGFBQWE7NEJBQ2JDLElBQUk7NEJBQ0pDLFFBQVE7d0JBQ1Y7aUJBQUc7Z0JBRUhoQyw2REFBY0EsQ0FBQztvQkFBQ3NCO29CQUFPO29CQUFrQlcsQ0FBQUEsS0FBTUEsR0FBR0MsT0FBTztvQkFBRTtvQkFBUUMsQ0FBQUEsS0FBTUEsR0FBR1Q7aUJBQU07Z0JBRWxGLE1BQU1VLEtBQUtoQixLQUFLaUIsSUFBSSxDQUFDLElBQUksS0FBS2hCO2dCQUU5QixJQUFJakIseURBQVVBLENBQUNnQyxLQUFLO29CQUNsQixPQUFPQSxHQUFHRSxJQUFJLENBQUMsQ0FBQ0M7d0JBQ2R2Qyw2REFBY0EsQ0FBQzs0QkFBQzBCOzRCQUFNOzRCQUFrQmMsQ0FBQUEsS0FBTUEsR0FBR0MsTUFBTTs0QkFBRTs0QkFBUUMsQ0FBQUEsS0FBTUE7eUJBQUs7d0JBQzVFMUMsNkRBQWNBLENBQUM7NEJBQUNzQjs0QkFBTzs0QkFBa0JxQixDQUFBQSxLQUFNQSxHQUFHVCxPQUFPOzRCQUFFOzRCQUFRVSxDQUFBQSxLQUFNQSxHQUFHcEI7eUJBQVk7d0JBRXhGLE9BQU9lO29CQUNUO2dCQUNGO2dCQUVBdkMsNkRBQWNBLENBQUM7b0JBQUMwQjtvQkFBTTtvQkFBa0JtQixDQUFBQSxNQUFPQSxJQUFJSixNQUFNO29CQUFFO29CQUFRSyxDQUFBQSxNQUFPQTtpQkFBTTtnQkFDaEY5Qyw2REFBY0EsQ0FBQztvQkFBQ3NCO29CQUFPO29CQUFrQnlCLENBQUFBLE1BQU9BLElBQUliLE9BQU87b0JBQUU7b0JBQVFjLENBQUFBLE1BQU9BLElBQUl4QjtpQkFBWTtnQkFDNUYsT0FBT1k7WUFDVDtRQUNGO0lBQ0Y7QUFDRjtBQUFDN0IsUUFBUUMsWUFBWTtBQUVGLENBQ25CLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5LWludGVybmFsL3RyYWNpbmcvZXNtL25vZGUvaW50ZWdyYXRpb25zL2dyYXBocWwuanM/OWNhMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfb3B0aW9uYWxDaGFpbiB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgbG9hZE1vZHVsZSwgbG9nZ2VyLCBmaWxsLCBpc1RoZW5hYmxlIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBERUJVR19CVUlMRCB9IGZyb20gJy4uLy4uL2NvbW1vbi9kZWJ1Zy1idWlsZC5qcyc7XG5pbXBvcnQgeyBzaG91bGREaXNhYmxlQXV0b0luc3RydW1lbnRhdGlvbiB9IGZyb20gJy4vdXRpbHMvbm9kZS11dGlscy5qcyc7XG5cbi8qKiBUcmFjaW5nIGludGVncmF0aW9uIGZvciBncmFwaHFsIHBhY2thZ2UgKi9cbmNsYXNzIEdyYXBoUUwgIHtcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAgc3RhdGljIF9faW5pdFN0YXRpYygpIHt0aGlzLmlkID0gJ0dyYXBoUUwnO31cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG5cbiAgIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubmFtZSA9IEdyYXBoUUwuaWQ7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgIGxvYWREZXBlbmRlbmN5KCkge1xuICAgIHJldHVybiAodGhpcy5fbW9kdWxlID0gdGhpcy5fbW9kdWxlIHx8IGxvYWRNb2R1bGUoJ2dyYXBocWwvZXhlY3V0aW9uL2V4ZWN1dGUuanMnKSk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBzZXR1cE9uY2UoXywgZ2V0Q3VycmVudEh1Yikge1xuICAgIGlmIChzaG91bGREaXNhYmxlQXV0b0luc3RydW1lbnRhdGlvbihnZXRDdXJyZW50SHViKSkge1xuICAgICAgREVCVUdfQlVJTEQgJiYgbG9nZ2VyLmxvZygnR3JhcGhRTCBJbnRlZ3JhdGlvbiBpcyBza2lwcGVkIGJlY2F1c2Ugb2YgaW5zdHJ1bWVudGVyIGNvbmZpZ3VyYXRpb24uJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcGtnID0gdGhpcy5sb2FkRGVwZW5kZW5jeSgpO1xuXG4gICAgaWYgKCFwa2cpIHtcbiAgICAgIERFQlVHX0JVSUxEICYmIGxvZ2dlci5lcnJvcignR3JhcGhRTCBJbnRlZ3JhdGlvbiB3YXMgdW5hYmxlIHRvIHJlcXVpcmUgZ3JhcGhxbC9leGVjdXRpb24gcGFja2FnZS4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmaWxsKHBrZywgJ2V4ZWN1dGUnLCBmdW5jdGlvbiAob3JpZykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICggLi4uYXJncykge1xuICAgICAgICBjb25zdCBzY29wZSA9IGdldEN1cnJlbnRIdWIoKS5nZXRTY29wZSgpO1xuICAgICAgICBjb25zdCBwYXJlbnRTcGFuID0gc2NvcGUuZ2V0U3BhbigpO1xuXG4gICAgICAgIGNvbnN0IHNwYW4gPSBfb3B0aW9uYWxDaGFpbihbcGFyZW50U3BhbiwgJ29wdGlvbmFsQWNjZXNzJywgXzIgPT4gXzIuc3RhcnRDaGlsZCwgJ2NhbGwnLCBfMyA9PiBfMyh7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdleGVjdXRlJyxcbiAgICAgICAgICBvcDogJ2dyYXBocWwuZXhlY3V0ZScsXG4gICAgICAgICAgb3JpZ2luOiAnYXV0by5ncmFwaHFsLmdyYXBocWwnLFxuICAgICAgICB9KV0pO1xuXG4gICAgICAgIF9vcHRpb25hbENoYWluKFtzY29wZSwgJ29wdGlvbmFsQWNjZXNzJywgXzQgPT4gXzQuc2V0U3BhbiwgJ2NhbGwnLCBfNSA9PiBfNShzcGFuKV0pO1xuXG4gICAgICAgIGNvbnN0IHJ2ID0gb3JpZy5jYWxsKHRoaXMsIC4uLmFyZ3MpO1xuXG4gICAgICAgIGlmIChpc1RoZW5hYmxlKHJ2KSkge1xuICAgICAgICAgIHJldHVybiBydi50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIF9vcHRpb25hbENoYWluKFtzcGFuLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNiA9PiBfNi5maW5pc2gsICdjYWxsJywgXzcgPT4gXzcoKV0pO1xuICAgICAgICAgICAgX29wdGlvbmFsQ2hhaW4oW3Njb3BlLCAnb3B0aW9uYWxBY2Nlc3MnLCBfOCA9PiBfOC5zZXRTcGFuLCAnY2FsbCcsIF85ID0+IF85KHBhcmVudFNwYW4pXSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBfb3B0aW9uYWxDaGFpbihbc3BhbiwgJ29wdGlvbmFsQWNjZXNzJywgXzEwID0+IF8xMC5maW5pc2gsICdjYWxsJywgXzExID0+IF8xMSgpXSk7XG4gICAgICAgIF9vcHRpb25hbENoYWluKFtzY29wZSwgJ29wdGlvbmFsQWNjZXNzJywgXzEyID0+IF8xMi5zZXRTcGFuLCAnY2FsbCcsIF8xMyA9PiBfMTMocGFyZW50U3BhbildKTtcbiAgICAgICAgcmV0dXJuIHJ2O1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxufUdyYXBoUUwuX19pbml0U3RhdGljKCk7XG5cbmV4cG9ydCB7IEdyYXBoUUwgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyYXBocWwuanMubWFwXG4iXSwibmFtZXMiOlsiX29wdGlvbmFsQ2hhaW4iLCJsb2FkTW9kdWxlIiwibG9nZ2VyIiwiZmlsbCIsImlzVGhlbmFibGUiLCJERUJVR19CVUlMRCIsInNob3VsZERpc2FibGVBdXRvSW5zdHJ1bWVudGF0aW9uIiwiR3JhcGhRTCIsIl9faW5pdFN0YXRpYyIsImlkIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibG9hZERlcGVuZGVuY3kiLCJfbW9kdWxlIiwic2V0dXBPbmNlIiwiXyIsImdldEN1cnJlbnRIdWIiLCJsb2ciLCJwa2ciLCJlcnJvciIsIm9yaWciLCJhcmdzIiwic2NvcGUiLCJnZXRTY29wZSIsInBhcmVudFNwYW4iLCJnZXRTcGFuIiwic3BhbiIsIl8yIiwic3RhcnRDaGlsZCIsIl8zIiwiZGVzY3JpcHRpb24iLCJvcCIsIm9yaWdpbiIsIl80Iiwic2V0U3BhbiIsIl81IiwicnYiLCJjYWxsIiwidGhlbiIsInJlcyIsIl82IiwiZmluaXNoIiwiXzciLCJfOCIsIl85IiwiXzEwIiwiXzExIiwiXzEyIiwiXzEzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/graphql.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/lazy.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/node/integrations/lazy.js ***!
  \*****************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   lazyLoadedNodePerformanceMonitoringIntegrations: () => (/* binding */ lazyLoadedNodePerformanceMonitoringIntegrations)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/node.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n\nconst lazyLoadedNodePerformanceMonitoringIntegrations = [\n    ()=>{\n        const integration = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.dynamicRequire)(module, \"./apollo\");\n        return new integration.Apollo();\n    },\n    ()=>{\n        const integration = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.dynamicRequire)(module, \"./apollo\");\n        return new integration.Apollo({\n            useNestjs: true\n        });\n    },\n    ()=>{\n        const integration = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.dynamicRequire)(module, \"./graphql\");\n        return new integration.GraphQL();\n    },\n    ()=>{\n        const integration = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.dynamicRequire)(module, \"./mongo\");\n        return new integration.Mongo();\n    },\n    ()=>{\n        const integration = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.dynamicRequire)(module, \"./mongo\");\n        return new integration.Mongo({\n            mongoose: true\n        });\n    },\n    ()=>{\n        const integration = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.dynamicRequire)(module, \"./mysql\");\n        return new integration.Mysql();\n    },\n    ()=>{\n        const integration = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.dynamicRequire)(module, \"./postgres\");\n        return new integration.Postgres();\n    }\n];\n //# sourceMappingURL=lazy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2VzbS9ub2RlL2ludGVncmF0aW9ucy9sYXp5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErQztBQUUvQyxNQUFNQyxrREFBa0Q7SUFDdEQ7UUFDRSxNQUFNQyxjQUFjRiw2REFBY0EsQ0FBQ0csUUFBUTtRQUczQyxPQUFPLElBQUlELFlBQVlFLE1BQU07SUFDL0I7SUFDQTtRQUNFLE1BQU1GLGNBQWNGLDZEQUFjQSxDQUFDRyxRQUFRO1FBRzNDLE9BQU8sSUFBSUQsWUFBWUUsTUFBTSxDQUFDO1lBQUVDLFdBQVc7UUFBSztJQUNsRDtJQUNBO1FBQ0UsTUFBTUgsY0FBY0YsNkRBQWNBLENBQUNHLFFBQVE7UUFHM0MsT0FBTyxJQUFJRCxZQUFZSSxPQUFPO0lBQ2hDO0lBQ0E7UUFDRSxNQUFNSixjQUFjRiw2REFBY0EsQ0FBQ0csUUFBUTtRQUczQyxPQUFPLElBQUlELFlBQVlLLEtBQUs7SUFDOUI7SUFDQTtRQUNFLE1BQU1MLGNBQWNGLDZEQUFjQSxDQUFDRyxRQUFRO1FBRzNDLE9BQU8sSUFBSUQsWUFBWUssS0FBSyxDQUFDO1lBQUVDLFVBQVU7UUFBSztJQUNoRDtJQUNBO1FBQ0UsTUFBTU4sY0FBY0YsNkRBQWNBLENBQUNHLFFBQVE7UUFHM0MsT0FBTyxJQUFJRCxZQUFZTyxLQUFLO0lBQzlCO0lBQ0E7UUFDRSxNQUFNUCxjQUFjRiw2REFBY0EsQ0FBQ0csUUFBUTtRQUczQyxPQUFPLElBQUlELFlBQVlRLFFBQVE7SUFDakM7Q0FDRDtBQUUwRCxDQUMzRCxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2VzbS9ub2RlL2ludGVncmF0aW9ucy9sYXp5LmpzPzliNjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZHluYW1pY1JlcXVpcmUgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuY29uc3QgbGF6eUxvYWRlZE5vZGVQZXJmb3JtYW5jZU1vbml0b3JpbmdJbnRlZ3JhdGlvbnMgPSBbXG4gICgpID0+IHtcbiAgICBjb25zdCBpbnRlZ3JhdGlvbiA9IGR5bmFtaWNSZXF1aXJlKG1vZHVsZSwgJy4vYXBvbGxvJylcblxuO1xuICAgIHJldHVybiBuZXcgaW50ZWdyYXRpb24uQXBvbGxvKCk7XG4gIH0sXG4gICgpID0+IHtcbiAgICBjb25zdCBpbnRlZ3JhdGlvbiA9IGR5bmFtaWNSZXF1aXJlKG1vZHVsZSwgJy4vYXBvbGxvJylcblxuO1xuICAgIHJldHVybiBuZXcgaW50ZWdyYXRpb24uQXBvbGxvKHsgdXNlTmVzdGpzOiB0cnVlIH0pO1xuICB9LFxuICAoKSA9PiB7XG4gICAgY29uc3QgaW50ZWdyYXRpb24gPSBkeW5hbWljUmVxdWlyZShtb2R1bGUsICcuL2dyYXBocWwnKVxuXG47XG4gICAgcmV0dXJuIG5ldyBpbnRlZ3JhdGlvbi5HcmFwaFFMKCk7XG4gIH0sXG4gICgpID0+IHtcbiAgICBjb25zdCBpbnRlZ3JhdGlvbiA9IGR5bmFtaWNSZXF1aXJlKG1vZHVsZSwgJy4vbW9uZ28nKVxuXG47XG4gICAgcmV0dXJuIG5ldyBpbnRlZ3JhdGlvbi5Nb25nbygpO1xuICB9LFxuICAoKSA9PiB7XG4gICAgY29uc3QgaW50ZWdyYXRpb24gPSBkeW5hbWljUmVxdWlyZShtb2R1bGUsICcuL21vbmdvJylcblxuO1xuICAgIHJldHVybiBuZXcgaW50ZWdyYXRpb24uTW9uZ28oeyBtb25nb29zZTogdHJ1ZSB9KTtcbiAgfSxcbiAgKCkgPT4ge1xuICAgIGNvbnN0IGludGVncmF0aW9uID0gZHluYW1pY1JlcXVpcmUobW9kdWxlLCAnLi9teXNxbCcpXG5cbjtcbiAgICByZXR1cm4gbmV3IGludGVncmF0aW9uLk15c3FsKCk7XG4gIH0sXG4gICgpID0+IHtcbiAgICBjb25zdCBpbnRlZ3JhdGlvbiA9IGR5bmFtaWNSZXF1aXJlKG1vZHVsZSwgJy4vcG9zdGdyZXMnKVxuXG47XG4gICAgcmV0dXJuIG5ldyBpbnRlZ3JhdGlvbi5Qb3N0Z3JlcygpO1xuICB9LFxuXTtcblxuZXhwb3J0IHsgbGF6eUxvYWRlZE5vZGVQZXJmb3JtYW5jZU1vbml0b3JpbmdJbnRlZ3JhdGlvbnMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxhenkuanMubWFwXG4iXSwibmFtZXMiOlsiZHluYW1pY1JlcXVpcmUiLCJsYXp5TG9hZGVkTm9kZVBlcmZvcm1hbmNlTW9uaXRvcmluZ0ludGVncmF0aW9ucyIsImludGVncmF0aW9uIiwibW9kdWxlIiwiQXBvbGxvIiwidXNlTmVzdGpzIiwiR3JhcGhRTCIsIk1vbmdvIiwibW9uZ29vc2UiLCJNeXNxbCIsIlBvc3RncmVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/lazy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/mongo.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/node/integrations/mongo.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mongo: () => (/* binding */ Mongo)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/node.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _common_debug_build_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/debug-build.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/esm/common/debug-build.js\");\n/* harmony import */ var _utils_node_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/node-utils.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/utils/node-utils.js\");\n\n\n\n\n// This allows us to use the same array for both defaults options and the type itself.\n// (note `as const` at the end to make it a union of string literal types (i.e. \"a\" | \"b\" | ... )\n// and not just a string[])\nconst OPERATIONS = [\n    \"aggregate\",\n    \"bulkWrite\",\n    \"countDocuments\",\n    \"createIndex\",\n    \"createIndexes\",\n    \"deleteMany\",\n    \"deleteOne\",\n    \"distinct\",\n    \"drop\",\n    \"dropIndex\",\n    \"dropIndexes\",\n    \"estimatedDocumentCount\",\n    \"find\",\n    \"findOne\",\n    \"findOneAndDelete\",\n    \"findOneAndReplace\",\n    \"findOneAndUpdate\",\n    \"indexes\",\n    \"indexExists\",\n    \"indexInformation\",\n    \"initializeOrderedBulkOp\",\n    \"insertMany\",\n    \"insertOne\",\n    \"isCapped\",\n    \"mapReduce\",\n    \"options\",\n    \"parallelCollectionScan\",\n    \"rename\",\n    \"replaceOne\",\n    \"stats\",\n    \"updateMany\",\n    \"updateOne\"\n];\n// All of the operations above take `options` and `callback` as their final parameters, but some of them\n// take additional parameters as well. For those operations, this is a map of\n// { <operation name>:  [<names of additional parameters>] }, as a way to know what to call the operation's\n// positional arguments when we add them to the span's `data` object later\nconst OPERATION_SIGNATURES = {\n    // aggregate intentionally not included because `pipeline` arguments are too complex to serialize well\n    // see https://github.com/getsentry/sentry-javascript/pull/3102\n    bulkWrite: [\n        \"operations\"\n    ],\n    countDocuments: [\n        \"query\"\n    ],\n    createIndex: [\n        \"fieldOrSpec\"\n    ],\n    createIndexes: [\n        \"indexSpecs\"\n    ],\n    deleteMany: [\n        \"filter\"\n    ],\n    deleteOne: [\n        \"filter\"\n    ],\n    distinct: [\n        \"key\",\n        \"query\"\n    ],\n    dropIndex: [\n        \"indexName\"\n    ],\n    find: [\n        \"query\"\n    ],\n    findOne: [\n        \"query\"\n    ],\n    findOneAndDelete: [\n        \"filter\"\n    ],\n    findOneAndReplace: [\n        \"filter\",\n        \"replacement\"\n    ],\n    findOneAndUpdate: [\n        \"filter\",\n        \"update\"\n    ],\n    indexExists: [\n        \"indexes\"\n    ],\n    insertMany: [\n        \"docs\"\n    ],\n    insertOne: [\n        \"doc\"\n    ],\n    mapReduce: [\n        \"map\",\n        \"reduce\"\n    ],\n    rename: [\n        \"newName\"\n    ],\n    replaceOne: [\n        \"filter\",\n        \"doc\"\n    ],\n    updateMany: [\n        \"filter\",\n        \"update\"\n    ],\n    updateOne: [\n        \"filter\",\n        \"update\"\n    ]\n};\nfunction isCursor(maybeCursor) {\n    return maybeCursor && typeof maybeCursor === \"object\" && maybeCursor.once && typeof maybeCursor.once === \"function\";\n}\n/** Tracing integration for mongo package */ class Mongo {\n    /**\n   * @inheritDoc\n   */ static __initStatic() {\n        this.id = \"Mongo\";\n    }\n    /**\n   * @inheritDoc\n   */ /**\n   * @inheritDoc\n   */ constructor(options = {}){\n        this.name = Mongo.id;\n        this._operations = Array.isArray(options.operations) ? options.operations : OPERATIONS;\n        this._describeOperations = \"describeOperations\" in options ? options.describeOperations : true;\n        this._useMongoose = !!options.useMongoose;\n    }\n    /** @inheritdoc */ loadDependency() {\n        const moduleName = this._useMongoose ? \"mongoose\" : \"mongodb\";\n        return this._module = this._module || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.loadModule)(moduleName);\n    }\n    /**\n   * @inheritDoc\n   */ setupOnce(_, getCurrentHub) {\n        if ((0,_utils_node_utils_js__WEBPACK_IMPORTED_MODULE_1__.shouldDisableAutoInstrumentation)(getCurrentHub)) {\n            _common_debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.log(\"Mongo Integration is skipped because of instrumenter configuration.\");\n            return;\n        }\n        const pkg = this.loadDependency();\n        if (!pkg) {\n            const moduleName = this._useMongoose ? \"mongoose\" : \"mongodb\";\n            _common_debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.error(`Mongo Integration was unable to require \\`${moduleName}\\` package.`);\n            return;\n        }\n        this._instrumentOperations(pkg.Collection, this._operations, getCurrentHub);\n    }\n    /**\n   * Patches original collection methods\n   */ _instrumentOperations(collection, operations, getCurrentHub) {\n        operations.forEach((operation)=>this._patchOperation(collection, operation, getCurrentHub));\n    }\n    /**\n   * Patches original collection to utilize our tracing functionality\n   */ _patchOperation(collection, operation, getCurrentHub) {\n        if (!(operation in collection.prototype)) return;\n        const getSpanContext = this._getSpanContextFromOperationArguments.bind(this);\n        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.fill)(collection.prototype, operation, function(orig) {\n            return function(...args) {\n                const lastArg = args[args.length - 1];\n                const scope = getCurrentHub().getScope();\n                const parentSpan = scope.getSpan();\n                // Check if the operation was passed a callback. (mapReduce requires a different check, as\n                // its (non-callback) arguments can also be functions.)\n                if (typeof lastArg !== \"function\" || operation === \"mapReduce\" && args.length === 2) {\n                    const span = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._optionalChain)([\n                        parentSpan,\n                        \"optionalAccess\",\n                        (_2)=>_2.startChild,\n                        \"call\",\n                        (_3)=>_3(getSpanContext(this, operation, args))\n                    ]);\n                    const maybePromiseOrCursor = orig.call(this, ...args);\n                    if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__.isThenable)(maybePromiseOrCursor)) {\n                        return maybePromiseOrCursor.then((res)=>{\n                            (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._optionalChain)([\n                                span,\n                                \"optionalAccess\",\n                                (_4)=>_4.finish,\n                                \"call\",\n                                (_5)=>_5()\n                            ]);\n                            return res;\n                        });\n                    } else if (isCursor(maybePromiseOrCursor)) {\n                        const cursor = maybePromiseOrCursor;\n                        try {\n                            cursor.once(\"close\", ()=>{\n                                (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._optionalChain)([\n                                    span,\n                                    \"optionalAccess\",\n                                    (_6)=>_6.finish,\n                                    \"call\",\n                                    (_7)=>_7()\n                                ]);\n                            });\n                        } catch (e) {\n                            // If the cursor is already closed, `once` will throw an error. In that case, we can\n                            // finish the span immediately.\n                            (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._optionalChain)([\n                                span,\n                                \"optionalAccess\",\n                                (_8)=>_8.finish,\n                                \"call\",\n                                (_9)=>_9()\n                            ]);\n                        }\n                        return cursor;\n                    } else {\n                        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._optionalChain)([\n                            span,\n                            \"optionalAccess\",\n                            (_10)=>_10.finish,\n                            \"call\",\n                            (_11)=>_11()\n                        ]);\n                        return maybePromiseOrCursor;\n                    }\n                }\n                const span = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._optionalChain)([\n                    parentSpan,\n                    \"optionalAccess\",\n                    (_12)=>_12.startChild,\n                    \"call\",\n                    (_13)=>_13(getSpanContext(this, operation, args.slice(0, -1)))\n                ]);\n                return orig.call(this, ...args.slice(0, -1), function(err, result) {\n                    (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._optionalChain)([\n                        span,\n                        \"optionalAccess\",\n                        (_14)=>_14.finish,\n                        \"call\",\n                        (_15)=>_15()\n                    ]);\n                    lastArg(err, result);\n                });\n            };\n        });\n    }\n    /**\n   * Form a SpanContext based on the user input to a given operation.\n   */ _getSpanContextFromOperationArguments(collection, operation, args) {\n        const data = {\n            \"db.system\": \"mongodb\",\n            \"db.name\": collection.dbName,\n            \"db.operation\": operation,\n            \"db.mongodb.collection\": collection.collectionName\n        };\n        const spanContext = {\n            op: \"db\",\n            // TODO v8: Use `${collection.collectionName}.${operation}`\n            origin: \"auto.db.mongo\",\n            description: operation,\n            data\n        };\n        // If the operation takes no arguments besides `options` and `callback`, or if argument\n        // collection is disabled for this operation, just return early.\n        const signature = OPERATION_SIGNATURES[operation];\n        const shouldDescribe = Array.isArray(this._describeOperations) ? this._describeOperations.includes(operation) : this._describeOperations;\n        if (!signature || !shouldDescribe) {\n            return spanContext;\n        }\n        try {\n            // Special case for `mapReduce`, as the only one accepting functions as arguments.\n            if (operation === \"mapReduce\") {\n                const [map, reduce] = args;\n                data[signature[0]] = typeof map === \"string\" ? map : map.name || \"<anonymous>\";\n                data[signature[1]] = typeof reduce === \"string\" ? reduce : reduce.name || \"<anonymous>\";\n            } else {\n                for(let i = 0; i < signature.length; i++){\n                    data[`db.mongodb.${signature[i]}`] = JSON.stringify(args[i]);\n                }\n            }\n        } catch (_oO) {\n        // no-empty\n        }\n        return spanContext;\n    }\n}\nMongo.__initStatic();\n //# sourceMappingURL=mongo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/mongo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/mysql.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/node/integrations/mysql.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mysql: () => (/* binding */ Mysql)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/node.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _common_debug_build_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/debug-build.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/esm/common/debug-build.js\");\n/* harmony import */ var _utils_node_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/node-utils.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/utils/node-utils.js\");\n\n\n\n\n/** Tracing integration for node-mysql package */ class Mysql {\n    /**\n   * @inheritDoc\n   */ static __initStatic() {\n        this.id = \"Mysql\";\n    }\n    /**\n   * @inheritDoc\n   */ constructor(){\n        this.name = Mysql.id;\n    }\n    /** @inheritdoc */ loadDependency() {\n        return this._module = this._module || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.loadModule)(\"mysql/lib/Connection.js\");\n    }\n    /**\n   * @inheritDoc\n   */ setupOnce(_, getCurrentHub) {\n        if ((0,_utils_node_utils_js__WEBPACK_IMPORTED_MODULE_1__.shouldDisableAutoInstrumentation)(getCurrentHub)) {\n            _common_debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.log(\"Mysql Integration is skipped because of instrumenter configuration.\");\n            return;\n        }\n        const pkg = this.loadDependency();\n        if (!pkg) {\n            _common_debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.error(\"Mysql Integration was unable to require `mysql` package.\");\n            return;\n        }\n        let mySqlConfig = undefined;\n        try {\n            pkg.prototype.connect = new Proxy(pkg.prototype.connect, {\n                apply (wrappingTarget, thisArg, args) {\n                    if (!mySqlConfig) {\n                        mySqlConfig = thisArg.config;\n                    }\n                    return wrappingTarget.apply(thisArg, args);\n                }\n            });\n        } catch (e) {\n            _common_debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.error(\"Mysql Integration was unable to instrument `mysql` config.\");\n        }\n        function spanDataFromConfig() {\n            if (!mySqlConfig) {\n                return {};\n            }\n            return {\n                \"server.address\": mySqlConfig.host,\n                \"server.port\": mySqlConfig.port,\n                \"db.user\": mySqlConfig.user\n            };\n        }\n        function finishSpan(span) {\n            if (!span || span.endTimestamp) {\n                return;\n            }\n            const data = spanDataFromConfig();\n            Object.keys(data).forEach((key)=>{\n                span.setData(key, data[key]);\n            });\n            span.finish();\n        }\n        // The original function will have one of these signatures:\n        //    function (callback) => void\n        //    function (options, callback) => void\n        //    function (options, values, callback) => void\n        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.fill)(pkg, \"createQuery\", function(orig) {\n            return function(options, values, callback) {\n                const scope = getCurrentHub().getScope();\n                const parentSpan = scope.getSpan();\n                const span = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._optionalChain)([\n                    parentSpan,\n                    \"optionalAccess\",\n                    (_2)=>_2.startChild,\n                    \"call\",\n                    (_3)=>_3({\n                            description: typeof options === \"string\" ? options : options.sql,\n                            op: \"db\",\n                            origin: \"auto.db.mysql\",\n                            data: {\n                                \"db.system\": \"mysql\"\n                            }\n                        })\n                ]);\n                if (typeof callback === \"function\") {\n                    return orig.call(this, options, values, function(err, result, fields) {\n                        finishSpan(span);\n                        callback(err, result, fields);\n                    });\n                }\n                if (typeof values === \"function\") {\n                    return orig.call(this, options, function(err, result, fields) {\n                        finishSpan(span);\n                        values(err, result, fields);\n                    });\n                }\n                // streaming, no callback!\n                const query = orig.call(this, options, values);\n                query.on(\"end\", ()=>{\n                    finishSpan(span);\n                });\n                return query;\n            };\n        });\n    }\n}\nMysql.__initStatic();\n //# sourceMappingURL=mysql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/mysql.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/postgres.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/node/integrations/postgres.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Postgres: () => (/* binding */ Postgres)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/node.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _common_debug_build_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/debug-build.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/esm/common/debug-build.js\");\n/* harmony import */ var _utils_node_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/node-utils.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/utils/node-utils.js\");\n\n\n\n\n/** Tracing integration for node-postgres package */ class Postgres {\n    /**\n   * @inheritDoc\n   */ static __initStatic() {\n        this.id = \"Postgres\";\n    }\n    /**\n   * @inheritDoc\n   */ constructor(options = {}){\n        this.name = Postgres.id;\n        this._usePgNative = !!options.usePgNative;\n        this._module = options.module;\n    }\n    /** @inheritdoc */ loadDependency() {\n        return this._module = this._module || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.loadModule)(\"pg\");\n    }\n    /**\n   * @inheritDoc\n   */ setupOnce(_, getCurrentHub) {\n        if ((0,_utils_node_utils_js__WEBPACK_IMPORTED_MODULE_1__.shouldDisableAutoInstrumentation)(getCurrentHub)) {\n            _common_debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.log(\"Postgres Integration is skipped because of instrumenter configuration.\");\n            return;\n        }\n        const pkg = this.loadDependency();\n        if (!pkg) {\n            _common_debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.error(\"Postgres Integration was unable to require `pg` package.\");\n            return;\n        }\n        const Client = this._usePgNative ? (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__._optionalChain)([\n            pkg,\n            \"access\",\n            (_2)=>_2.native,\n            \"optionalAccess\",\n            (_3)=>_3.Client\n        ]) : pkg.Client;\n        if (!Client) {\n            _common_debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.error(\"Postgres Integration was unable to access 'pg-native' bindings.\");\n            return;\n        }\n        /**\n     * function (query, callback) => void\n     * function (query, params, callback) => void\n     * function (query) => Promise\n     * function (query, params) => Promise\n     * function (pg.Cursor) => pg.Cursor\n     */ (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.fill)(Client.prototype, \"query\", function(orig) {\n            return function(config, values, callback) {\n                const scope = getCurrentHub().getScope();\n                const parentSpan = scope.getSpan();\n                const data = {\n                    \"db.system\": \"postgresql\"\n                };\n                try {\n                    if (this.database) {\n                        data[\"db.name\"] = this.database;\n                    }\n                    if (this.host) {\n                        data[\"server.address\"] = this.host;\n                    }\n                    if (this.port) {\n                        data[\"server.port\"] = this.port;\n                    }\n                    if (this.user) {\n                        data[\"db.user\"] = this.user;\n                    }\n                } catch (e) {\n                // ignore\n                }\n                const span = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__._optionalChain)([\n                    parentSpan,\n                    \"optionalAccess\",\n                    (_4)=>_4.startChild,\n                    \"call\",\n                    (_5)=>_5({\n                            description: typeof config === \"string\" ? config : config.text,\n                            op: \"db\",\n                            origin: \"auto.db.postgres\",\n                            data\n                        })\n                ]);\n                if (typeof callback === \"function\") {\n                    return orig.call(this, config, values, function(err, result) {\n                        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__._optionalChain)([\n                            span,\n                            \"optionalAccess\",\n                            (_6)=>_6.finish,\n                            \"call\",\n                            (_7)=>_7()\n                        ]);\n                        callback(err, result);\n                    });\n                }\n                if (typeof values === \"function\") {\n                    return orig.call(this, config, function(err, result) {\n                        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__._optionalChain)([\n                            span,\n                            \"optionalAccess\",\n                            (_8)=>_8.finish,\n                            \"call\",\n                            (_9)=>_9()\n                        ]);\n                        values(err, result);\n                    });\n                }\n                const rv = typeof values !== \"undefined\" ? orig.call(this, config, values) : orig.call(this, config);\n                if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__.isThenable)(rv)) {\n                    return rv.then((res)=>{\n                        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__._optionalChain)([\n                            span,\n                            \"optionalAccess\",\n                            (_10)=>_10.finish,\n                            \"call\",\n                            (_11)=>_11()\n                        ]);\n                        return res;\n                    });\n                }\n                (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__._optionalChain)([\n                    span,\n                    \"optionalAccess\",\n                    (_12)=>_12.finish,\n                    \"call\",\n                    (_13)=>_13()\n                ]);\n                return rv;\n            };\n        });\n    }\n}\nPostgres.__initStatic();\n //# sourceMappingURL=postgres.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/postgres.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/prisma.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/node/integrations/prisma.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Prisma: () => (/* binding */ Prisma)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/trace.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _common_debug_build_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/debug-build.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/esm/common/debug-build.js\");\n/* harmony import */ var _utils_node_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/node-utils.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/utils/node-utils.js\");\n\n\n\n\nfunction isValidPrismaClient(possibleClient) {\n    return !!possibleClient && !!possibleClient[\"$use\"];\n}\n/** Tracing integration for @prisma/client package */ class Prisma {\n    /**\n   * @inheritDoc\n   */ static __initStatic() {\n        this.id = \"Prisma\";\n    }\n    /**\n   * @inheritDoc\n   */ /**\n   * @inheritDoc\n   */ constructor(options = {}){\n        this.name = Prisma.id;\n        // We instrument the PrismaClient inside the constructor and not inside `setupOnce` because in some cases of server-side\n        // bundling (Next.js) multiple Prisma clients can be instantiated, even though users don't intend to. When instrumenting\n        // in setupOnce we can only ever instrument one client.\n        // https://github.com/getsentry/sentry-javascript/issues/7216#issuecomment-1602375012\n        // In the future we might explore providing a dedicated PrismaClient middleware instead of this hack.\n        if (isValidPrismaClient(options.client) && !options.client._sentryInstrumented) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.addNonEnumerableProperty)(options.client, \"_sentryInstrumented\", true);\n            const clientData = {};\n            try {\n                const engineConfig = options.client._engineConfig;\n                if (engineConfig) {\n                    const { activeProvider, clientVersion } = engineConfig;\n                    if (activeProvider) {\n                        clientData[\"db.system\"] = activeProvider;\n                    }\n                    if (clientVersion) {\n                        clientData[\"db.prisma.version\"] = clientVersion;\n                    }\n                }\n            } catch (e) {\n            // ignore\n            }\n            options.client.$use((params, next)=>{\n                if ((0,_utils_node_utils_js__WEBPACK_IMPORTED_MODULE_1__.shouldDisableAutoInstrumentation)(_sentry_core__WEBPACK_IMPORTED_MODULE_2__.getCurrentHub)) {\n                    return next(params);\n                }\n                const action = params.action;\n                const model = params.model;\n                return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.trace)({\n                    name: model ? `${model} ${action}` : action,\n                    op: \"db.prisma\",\n                    origin: \"auto.db.prisma\",\n                    data: {\n                        ...clientData,\n                        \"db.operation\": action\n                    }\n                }, ()=>next(params));\n            });\n        } else {\n            _common_debug_build_js__WEBPACK_IMPORTED_MODULE_4__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.logger.warn(\"Unsupported Prisma client provided to PrismaIntegration. Provided client:\", options.client);\n        }\n    }\n    /**\n   * @inheritDoc\n   */ setupOnce() {\n    // Noop - here for backwards compatibility\n    }\n}\nPrisma.__initStatic();\n //# sourceMappingURL=prisma.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2VzbS9ub2RlL2ludGVncmF0aW9ucy9wcmlzbWEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFvRDtBQUNhO0FBQ1A7QUFDZTtBQUV6RSxTQUFTTSxvQkFBb0JDLGNBQWM7SUFDekMsT0FBTyxDQUFDLENBQUNBLGtCQUFrQixDQUFDLENBQUMsY0FBaUIsQ0FBQyxPQUFPO0FBQ3hEO0FBRUEsbURBQW1ELEdBQ25ELE1BQU1DO0lBQ0o7O0dBRUMsR0FDQSxPQUFPQyxlQUFlO1FBQUMsSUFBSSxDQUFDQyxFQUFFLEdBQUc7SUFBUztJQUUzQzs7R0FFQyxHQUVEOztHQUVDLEdBQ0FDLFlBQVlDLFVBQVUsQ0FBQyxDQUFDLENBQUU7UUFDekIsSUFBSSxDQUFDQyxJQUFJLEdBQUdMLE9BQU9FLEVBQUU7UUFFckIsd0hBQXdIO1FBQ3hILHdIQUF3SDtRQUN4SCx1REFBdUQ7UUFDdkQscUZBQXFGO1FBQ3JGLHFHQUFxRztRQUNyRyxJQUFJSixvQkFBb0JNLFFBQVFFLE1BQU0sS0FBSyxDQUFDRixRQUFRRSxNQUFNLENBQUNDLG1CQUFtQixFQUFFO1lBQzlFLDhEQUE4RDtZQUM5RGIsdUVBQXdCQSxDQUFDVSxRQUFRRSxNQUFNLEVBQUcsdUJBQXVCO1lBRWpFLE1BQU1FLGFBQWEsQ0FBQztZQUNwQixJQUFJO2dCQUNGLE1BQU1DLGVBQWUsUUFBU0gsTUFBTSxDQUFHSSxhQUFhO2dCQUNwRCxJQUFJRCxjQUFjO29CQUNoQixNQUFNLEVBQUVFLGNBQWMsRUFBRUMsYUFBYSxFQUFFLEdBQUdIO29CQUMxQyxJQUFJRSxnQkFBZ0I7d0JBQ2xCSCxVQUFVLENBQUMsWUFBWSxHQUFHRztvQkFDNUI7b0JBQ0EsSUFBSUMsZUFBZTt3QkFDakJKLFVBQVUsQ0FBQyxvQkFBb0IsR0FBR0k7b0JBQ3BDO2dCQUNGO1lBQ0YsRUFBRSxPQUFPQyxHQUFHO1lBQ1YsU0FBUztZQUNYO1lBRUFULFFBQVFFLE1BQU0sQ0FBQ1EsSUFBSSxDQUFDLENBQUNDLFFBQVFDO2dCQUMzQixJQUFJbkIsc0ZBQWdDQSxDQUFDSix1REFBYUEsR0FBRztvQkFDbkQsT0FBT3VCLEtBQUtEO2dCQUNkO2dCQUVBLE1BQU1FLFNBQVNGLE9BQU9FLE1BQU07Z0JBQzVCLE1BQU1DLFFBQVFILE9BQU9HLEtBQUs7Z0JBRTFCLE9BQU8xQixtREFBS0EsQ0FDVjtvQkFDRWEsTUFBTWEsUUFBUSxDQUFDLEVBQUVBLE1BQU0sQ0FBQyxFQUFFRCxPQUFPLENBQUMsR0FBR0E7b0JBQ3JDRSxJQUFJO29CQUNKQyxRQUFRO29CQUNSQyxNQUFNO3dCQUFFLEdBQUdiLFVBQVU7d0JBQUUsZ0JBQWdCUztvQkFBTztnQkFDaEQsR0FDQSxJQUFNRCxLQUFLRDtZQUVmO1FBQ0YsT0FBTztZQUNMbkIsK0RBQVdBLElBQ1RELGlEQUFNQSxDQUFDMkIsSUFBSSxDQUFDLDZFQUE2RWxCLFFBQVFFLE1BQU07UUFDM0c7SUFDRjtJQUVBOztHQUVDLEdBQ0FpQixZQUFZO0lBQ1gsMENBQTBDO0lBQzVDO0FBQ0Y7QUFBRXZCLE9BQU9DLFlBQVk7QUFFSCxDQUNsQixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2VzbS9ub2RlL2ludGVncmF0aW9ucy9wcmlzbWEuanM/OTRhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0cmFjZSwgZ2V0Q3VycmVudEh1YiB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBhZGROb25FbnVtZXJhYmxlUHJvcGVydHksIGxvZ2dlciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgREVCVUdfQlVJTEQgfSBmcm9tICcuLi8uLi9jb21tb24vZGVidWctYnVpbGQuanMnO1xuaW1wb3J0IHsgc2hvdWxkRGlzYWJsZUF1dG9JbnN0cnVtZW50YXRpb24gfSBmcm9tICcuL3V0aWxzL25vZGUtdXRpbHMuanMnO1xuXG5mdW5jdGlvbiBpc1ZhbGlkUHJpc21hQ2xpZW50KHBvc3NpYmxlQ2xpZW50KSB7XG4gIHJldHVybiAhIXBvc3NpYmxlQ2xpZW50ICYmICEhKHBvc3NpYmxlQ2xpZW50IClbJyR1c2UnXTtcbn1cblxuLyoqIFRyYWNpbmcgaW50ZWdyYXRpb24gZm9yIEBwcmlzbWEvY2xpZW50IHBhY2thZ2UgKi9cbmNsYXNzIFByaXNtYSAge1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBzdGF0aWMgX19pbml0U3RhdGljKCkge3RoaXMuaWQgPSAnUHJpc21hJzt9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMubmFtZSA9IFByaXNtYS5pZDtcblxuICAgIC8vIFdlIGluc3RydW1lbnQgdGhlIFByaXNtYUNsaWVudCBpbnNpZGUgdGhlIGNvbnN0cnVjdG9yIGFuZCBub3QgaW5zaWRlIGBzZXR1cE9uY2VgIGJlY2F1c2UgaW4gc29tZSBjYXNlcyBvZiBzZXJ2ZXItc2lkZVxuICAgIC8vIGJ1bmRsaW5nIChOZXh0LmpzKSBtdWx0aXBsZSBQcmlzbWEgY2xpZW50cyBjYW4gYmUgaW5zdGFudGlhdGVkLCBldmVuIHRob3VnaCB1c2VycyBkb24ndCBpbnRlbmQgdG8uIFdoZW4gaW5zdHJ1bWVudGluZ1xuICAgIC8vIGluIHNldHVwT25jZSB3ZSBjYW4gb25seSBldmVyIGluc3RydW1lbnQgb25lIGNsaWVudC5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L2lzc3Vlcy83MjE2I2lzc3VlY29tbWVudC0xNjAyMzc1MDEyXG4gICAgLy8gSW4gdGhlIGZ1dHVyZSB3ZSBtaWdodCBleHBsb3JlIHByb3ZpZGluZyBhIGRlZGljYXRlZCBQcmlzbWFDbGllbnQgbWlkZGxld2FyZSBpbnN0ZWFkIG9mIHRoaXMgaGFjay5cbiAgICBpZiAoaXNWYWxpZFByaXNtYUNsaWVudChvcHRpb25zLmNsaWVudCkgJiYgIW9wdGlvbnMuY2xpZW50Ll9zZW50cnlJbnN0cnVtZW50ZWQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkob3B0aW9ucy5jbGllbnQgLCAnX3NlbnRyeUluc3RydW1lbnRlZCcsIHRydWUpO1xuXG4gICAgICBjb25zdCBjbGllbnREYXRhID0ge307XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBlbmdpbmVDb25maWcgPSAob3B0aW9ucy5jbGllbnQgKS5fZW5naW5lQ29uZmlnO1xuICAgICAgICBpZiAoZW5naW5lQ29uZmlnKSB7XG4gICAgICAgICAgY29uc3QgeyBhY3RpdmVQcm92aWRlciwgY2xpZW50VmVyc2lvbiB9ID0gZW5naW5lQ29uZmlnO1xuICAgICAgICAgIGlmIChhY3RpdmVQcm92aWRlcikge1xuICAgICAgICAgICAgY2xpZW50RGF0YVsnZGIuc3lzdGVtJ10gPSBhY3RpdmVQcm92aWRlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNsaWVudFZlcnNpb24pIHtcbiAgICAgICAgICAgIGNsaWVudERhdGFbJ2RiLnByaXNtYS52ZXJzaW9uJ10gPSBjbGllbnRWZXJzaW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpZ25vcmVcbiAgICAgIH1cblxuICAgICAgb3B0aW9ucy5jbGllbnQuJHVzZSgocGFyYW1zLCBuZXh0KSA9PiB7XG4gICAgICAgIGlmIChzaG91bGREaXNhYmxlQXV0b0luc3RydW1lbnRhdGlvbihnZXRDdXJyZW50SHViKSkge1xuICAgICAgICAgIHJldHVybiBuZXh0KHBhcmFtcyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhY3Rpb24gPSBwYXJhbXMuYWN0aW9uO1xuICAgICAgICBjb25zdCBtb2RlbCA9IHBhcmFtcy5tb2RlbDtcblxuICAgICAgICByZXR1cm4gdHJhY2UoXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogbW9kZWwgPyBgJHttb2RlbH0gJHthY3Rpb259YCA6IGFjdGlvbixcbiAgICAgICAgICAgIG9wOiAnZGIucHJpc21hJyxcbiAgICAgICAgICAgIG9yaWdpbjogJ2F1dG8uZGIucHJpc21hJyxcbiAgICAgICAgICAgIGRhdGE6IHsgLi4uY2xpZW50RGF0YSwgJ2RiLm9wZXJhdGlvbic6IGFjdGlvbiB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgKCkgPT4gbmV4dChwYXJhbXMpLFxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIERFQlVHX0JVSUxEICYmXG4gICAgICAgIGxvZ2dlci53YXJuKCdVbnN1cHBvcnRlZCBQcmlzbWEgY2xpZW50IHByb3ZpZGVkIHRvIFByaXNtYUludGVncmF0aW9uLiBQcm92aWRlZCBjbGllbnQ6Jywgb3B0aW9ucy5jbGllbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgIHNldHVwT25jZSgpIHtcbiAgICAvLyBOb29wIC0gaGVyZSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgfVxufSBQcmlzbWEuX19pbml0U3RhdGljKCk7XG5cbmV4cG9ydCB7IFByaXNtYSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJpc21hLmpzLm1hcFxuIl0sIm5hbWVzIjpbInRyYWNlIiwiZ2V0Q3VycmVudEh1YiIsImFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSIsImxvZ2dlciIsIkRFQlVHX0JVSUxEIiwic2hvdWxkRGlzYWJsZUF1dG9JbnN0cnVtZW50YXRpb24iLCJpc1ZhbGlkUHJpc21hQ2xpZW50IiwicG9zc2libGVDbGllbnQiLCJQcmlzbWEiLCJfX2luaXRTdGF0aWMiLCJpZCIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIm5hbWUiLCJjbGllbnQiLCJfc2VudHJ5SW5zdHJ1bWVudGVkIiwiY2xpZW50RGF0YSIsImVuZ2luZUNvbmZpZyIsIl9lbmdpbmVDb25maWciLCJhY3RpdmVQcm92aWRlciIsImNsaWVudFZlcnNpb24iLCJlIiwiJHVzZSIsInBhcmFtcyIsIm5leHQiLCJhY3Rpb24iLCJtb2RlbCIsIm9wIiwib3JpZ2luIiwiZGF0YSIsIndhcm4iLCJzZXR1cE9uY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/prisma.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/utils/node-utils.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/esm/node/integrations/utils/node-utils.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shouldDisableAutoInstrumentation: () => (/* binding */ shouldDisableAutoInstrumentation)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n\n/**\n * Check if Sentry auto-instrumentation should be disabled.\n *\n * @param getCurrentHub A method to fetch the current hub\n * @returns boolean\n */ function shouldDisableAutoInstrumentation(getCurrentHub) {\n    const clientOptions = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n        getCurrentHub,\n        \"call\",\n        (_)=>_(),\n        \"access\",\n        (_2)=>_2.getClient,\n        \"call\",\n        (_3)=>_3(),\n        \"optionalAccess\",\n        (_4)=>_4.getOptions,\n        \"call\",\n        (_5)=>_5()\n    ]);\n    const instrumenter = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n        clientOptions,\n        \"optionalAccess\",\n        (_6)=>_6.instrumenter\n    ]) || \"sentry\";\n    return instrumenter !== \"sentry\";\n}\n //# sourceMappingURL=node-utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2VzbS9ub2RlL2ludGVncmF0aW9ucy91dGlscy9ub2RlLXV0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQStDO0FBRS9DOzs7OztDQUtDLEdBQ0QsU0FBU0MsaUNBQWlDQyxhQUFhO0lBQ3JELE1BQU1DLGdCQUFnQkgsNkRBQWNBLENBQUM7UUFBQ0U7UUFBZTtRQUFRRSxDQUFBQSxJQUFLQTtRQUFLO1FBQVVDLENBQUFBLEtBQU1BLEdBQUdDLFNBQVM7UUFBRTtRQUFRQyxDQUFBQSxLQUFNQTtRQUFNO1FBQWtCQyxDQUFBQSxLQUFNQSxHQUFHQyxVQUFVO1FBQUU7UUFBUUMsQ0FBQUEsS0FBTUE7S0FBSztJQUNuTCxNQUFNQyxlQUFlWCw2REFBY0EsQ0FBQztRQUFDRztRQUFlO1FBQWtCUyxDQUFBQSxLQUFNQSxHQUFHRCxZQUFZO0tBQUMsS0FBSztJQUVqRyxPQUFPQSxpQkFBaUI7QUFDMUI7QUFFNEMsQ0FDNUMsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnktaW50ZXJuYWwvdHJhY2luZy9lc20vbm9kZS9pbnRlZ3JhdGlvbnMvdXRpbHMvbm9kZS11dGlscy5qcz9iOGVmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9vcHRpb25hbENoYWluIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbi8qKlxuICogQ2hlY2sgaWYgU2VudHJ5IGF1dG8taW5zdHJ1bWVudGF0aW9uIHNob3VsZCBiZSBkaXNhYmxlZC5cbiAqXG4gKiBAcGFyYW0gZ2V0Q3VycmVudEh1YiBBIG1ldGhvZCB0byBmZXRjaCB0aGUgY3VycmVudCBodWJcbiAqIEByZXR1cm5zIGJvb2xlYW5cbiAqL1xuZnVuY3Rpb24gc2hvdWxkRGlzYWJsZUF1dG9JbnN0cnVtZW50YXRpb24oZ2V0Q3VycmVudEh1Yikge1xuICBjb25zdCBjbGllbnRPcHRpb25zID0gX29wdGlvbmFsQ2hhaW4oW2dldEN1cnJlbnRIdWIsICdjYWxsJywgXyA9PiBfKCksICdhY2Nlc3MnLCBfMiA9PiBfMi5nZXRDbGllbnQsICdjYWxsJywgXzMgPT4gXzMoKSwgJ29wdGlvbmFsQWNjZXNzJywgXzQgPT4gXzQuZ2V0T3B0aW9ucywgJ2NhbGwnLCBfNSA9PiBfNSgpXSk7XG4gIGNvbnN0IGluc3RydW1lbnRlciA9IF9vcHRpb25hbENoYWluKFtjbGllbnRPcHRpb25zLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNiA9PiBfNi5pbnN0cnVtZW50ZXJdKSB8fCAnc2VudHJ5JztcblxuICByZXR1cm4gaW5zdHJ1bWVudGVyICE9PSAnc2VudHJ5Jztcbn1cblxuZXhwb3J0IHsgc2hvdWxkRGlzYWJsZUF1dG9JbnN0cnVtZW50YXRpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGUtdXRpbHMuanMubWFwXG4iXSwibmFtZXMiOlsiX29wdGlvbmFsQ2hhaW4iLCJzaG91bGREaXNhYmxlQXV0b0luc3RydW1lbnRhdGlvbiIsImdldEN1cnJlbnRIdWIiLCJjbGllbnRPcHRpb25zIiwiXyIsIl8yIiwiZ2V0Q2xpZW50IiwiXzMiLCJfNCIsImdldE9wdGlvbnMiLCJfNSIsImluc3RydW1lbnRlciIsIl82Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/utils/node-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/browser.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/browser.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDomElement: () => (/* binding */ getDomElement),\n/* harmony export */   getLocationHref: () => (/* binding */ getLocationHref),\n/* harmony export */   htmlTreeAsString: () => (/* binding */ htmlTreeAsString)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/worldwide.js\");\n\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = (0,_worldwide_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalObject)();\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */ function htmlTreeAsString(elem, options = {}) {\n    if (!elem) {\n        return \"<unknown>\";\n    }\n    // try/catch both:\n    // - accessing event.target (see getsentry/raven-js#838, #768)\n    // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n    // - can throw an exception in some circumstances.\n    try {\n        let currentElem = elem;\n        const MAX_TRAVERSE_HEIGHT = 5;\n        const out = [];\n        let height = 0;\n        let len = 0;\n        const separator = \" > \";\n        const sepLength = separator.length;\n        let nextStr;\n        const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n        const maxStringLength = !Array.isArray(options) && options.maxStringLength || DEFAULT_MAX_STRING_LENGTH;\n        while(currentElem && height++ < MAX_TRAVERSE_HEIGHT){\n            nextStr = _htmlElementAsString(currentElem, keyAttrs);\n            // bail out if\n            // - nextStr is the 'html' element\n            // - the length of the string that would be created exceeds maxStringLength\n            //   (ignore this limit if we are on the first iteration)\n            if (nextStr === \"html\" || height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength) {\n                break;\n            }\n            out.push(nextStr);\n            len += nextStr.length;\n            currentElem = currentElem.parentNode;\n        }\n        return out.reverse().join(separator);\n    } catch (_oO) {\n        return \"<unknown>\";\n    }\n}\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */ function _htmlElementAsString(el, keyAttrs) {\n    const elem = el;\n    const out = [];\n    let className;\n    let classes;\n    let key;\n    let attr;\n    let i;\n    if (!elem || !elem.tagName) {\n        return \"\";\n    }\n    out.push(elem.tagName.toLowerCase());\n    // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n    const keyAttrPairs = keyAttrs && keyAttrs.length ? keyAttrs.filter((keyAttr)=>elem.getAttribute(keyAttr)).map((keyAttr)=>[\n            keyAttr,\n            elem.getAttribute(keyAttr)\n        ]) : null;\n    if (keyAttrPairs && keyAttrPairs.length) {\n        keyAttrPairs.forEach((keyAttrPair)=>{\n            out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n        });\n    } else {\n        if (elem.id) {\n            out.push(`#${elem.id}`);\n        }\n        // eslint-disable-next-line prefer-const\n        className = elem.className;\n        if (className && (0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isString)(className)) {\n            classes = className.split(/\\s+/);\n            for(i = 0; i < classes.length; i++){\n                out.push(`.${classes[i]}`);\n            }\n        }\n    }\n    const allowedAttrs = [\n        \"aria-label\",\n        \"type\",\n        \"name\",\n        \"title\",\n        \"alt\"\n    ];\n    for(i = 0; i < allowedAttrs.length; i++){\n        key = allowedAttrs[i];\n        attr = elem.getAttribute(key);\n        if (attr) {\n            out.push(`[${key}=\"${attr}\"]`);\n        }\n    }\n    return out.join(\"\");\n}\n/**\n * A safe form of location.href\n */ function getLocationHref() {\n    try {\n        return WINDOW.document.location.href;\n    } catch (oO) {\n        return \"\";\n    }\n}\n/**\n * Gets a DOM element by using document.querySelector.\n *\n * This wrapper will first check for the existance of the function before\n * actually calling it so that we don't have to take care of this check,\n * every time we want to access the DOM.\n *\n * Reason: DOM/querySelector is not available in all environments.\n *\n * We have to cast to any because utils can be consumed by a variety of environments,\n * and we don't want to break TS users. If you know what element will be selected by\n * `document.querySelector`, specify it as part of the generic call. For example,\n * `const element = getDomElement<Element>('selector');`\n *\n * @param selector the selector string passed on to document.querySelector\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getDomElement(selector) {\n    if (WINDOW.document && WINDOW.document.querySelector) {\n        return WINDOW.document.querySelector(selector);\n    }\n    return null;\n}\n //# sourceMappingURL=browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/browser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _optionalChain: () => (/* binding */ _optionalChain)\n/* harmony export */ });\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n * See https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The value of the expression\n */ function _optionalChain(ops) {\n    let lastAccessLHS = undefined;\n    let value = ops[0];\n    let i = 1;\n    while(i < ops.length){\n        const op = ops[i];\n        const fn = ops[i + 1];\n        i += 2;\n        // by checking for loose equality to `null`, we catch both `null` and `undefined`\n        if ((op === \"optionalAccess\" || op === \"optionalCall\") && value == null) {\n            // really we're meaning to return `undefined` as an actual value here, but it saves bytes not to write it\n            return;\n        }\n        if (op === \"access\" || op === \"optionalAccess\") {\n            lastAccessLHS = value;\n            value = fn(value);\n        } else if (op === \"call\" || op === \"optionalCall\") {\n            value = fn((...args)=>value.call(lastAccessLHS, ...args));\n            lastAccessLHS = undefined;\n        }\n    }\n    return value;\n}\n// Sucrase version\n// function _optionalChain(ops) {\n//   let lastAccessLHS = undefined;\n//   let value = ops[0];\n//   let i = 1;\n//   while (i < ops.length) {\n//     const op = ops[i];\n//     const fn = ops[i + 1];\n//     i += 2;\n//     if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n//       return undefined;\n//     }\n//     if (op === 'access' || op === 'optionalAccess') {\n//       lastAccessLHS = value;\n//       value = fn(value);\n//     } else if (op === 'call' || op === 'optionalCall') {\n//       value = fn((...args) => value.call(lastAccessLHS, ...args));\n//       lastAccessLHS = undefined;\n//     }\n//   }\n//   return value;\n// }\n //# sourceMappingURL=_optionalChain.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9idWlsZFBvbHlmaWxscy9fb3B0aW9uYWxDaGFpbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7OztDQVNDLEdBQ0QsU0FBU0EsZUFBZUMsR0FBRztJQUN6QixJQUFJQyxnQkFBZ0JDO0lBQ3BCLElBQUlDLFFBQVFILEdBQUcsQ0FBQyxFQUFFO0lBQ2xCLElBQUlJLElBQUk7SUFDUixNQUFPQSxJQUFJSixJQUFJSyxNQUFNLENBQUU7UUFDckIsTUFBTUMsS0FBS04sR0FBRyxDQUFDSSxFQUFFO1FBQ2pCLE1BQU1HLEtBQUtQLEdBQUcsQ0FBQ0ksSUFBSSxFQUFFO1FBQ3JCQSxLQUFLO1FBQ0wsaUZBQWlGO1FBQ2pGLElBQUksQ0FBQ0UsT0FBTyxvQkFBb0JBLE9BQU8sY0FBYSxLQUFNSCxTQUFTLE1BQU07WUFDdkUseUdBQXlHO1lBQ3pHO1FBQ0Y7UUFDQSxJQUFJRyxPQUFPLFlBQVlBLE9BQU8sa0JBQWtCO1lBQzlDTCxnQkFBZ0JFO1lBQ2hCQSxRQUFRSSxHQUFHSjtRQUNiLE9BQU8sSUFBSUcsT0FBTyxVQUFVQSxPQUFPLGdCQUFnQjtZQUNqREgsUUFBUUksR0FBRyxDQUFDLEdBQUdDLE9BQVMsTUFBU0MsSUFBSSxDQUFDUixrQkFBa0JPO1lBQ3hEUCxnQkFBZ0JDO1FBQ2xCO0lBQ0Y7SUFDQSxPQUFPQztBQUNUO0FBRUEsa0JBQWtCO0FBQ2xCLGlDQUFpQztBQUNqQyxtQ0FBbUM7QUFDbkMsd0JBQXdCO0FBQ3hCLGVBQWU7QUFDZiw2QkFBNkI7QUFDN0IseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3QixjQUFjO0FBQ2QsaUZBQWlGO0FBQ2pGLDBCQUEwQjtBQUMxQixRQUFRO0FBQ1Isd0RBQXdEO0FBQ3hELCtCQUErQjtBQUMvQiwyQkFBMkI7QUFDM0IsMkRBQTJEO0FBQzNELHFFQUFxRTtBQUNyRSxtQ0FBbUM7QUFDbkMsUUFBUTtBQUNSLE1BQU07QUFDTixrQkFBa0I7QUFDbEIsSUFBSTtBQUVzQixDQUMxQiwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9idWlsZFBvbHlmaWxscy9fb3B0aW9uYWxDaGFpbi5qcz84OWRhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUG9seWZpbGwgZm9yIHRoZSBvcHRpb25hbCBjaGFpbiBvcGVyYXRvciwgYD8uYCwgZ2l2ZW4gcHJldmlvdXMgY29udmVyc2lvbiBvZiB0aGUgZXhwcmVzc2lvbiBpbnRvIGFuIGFycmF5IG9mIHZhbHVlcyxcbiAqIGRlc2NyaXB0b3JzLCBhbmQgZnVuY3Rpb25zLlxuICpcbiAqIEFkYXB0ZWQgZnJvbSBTdWNyYXNlIChodHRwczovL2dpdGh1Yi5jb20vYWxhbmdwaWVyY2Uvc3VjcmFzZSlcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYWxhbmdwaWVyY2Uvc3VjcmFzZS9ibG9iLzI2NTg4Nzg2ODk2NjkxN2YzYjkyNGNlMzhkZmFkMDFmYmFiMTMyOWYvc3JjL3RyYW5zZm9ybWVycy9PcHRpb25hbENoYWluaW5nTnVsbGlzaFRyYW5zZm9ybWVyLnRzI0wxNVxuICpcbiAqIEBwYXJhbSBvcHMgQXJyYXkgcmVzdWx0IG9mIGV4cHJlc3Npb24gY29udmVyc2lvblxuICogQHJldHVybnMgVGhlIHZhbHVlIG9mIHRoZSBleHByZXNzaW9uXG4gKi9cbmZ1bmN0aW9uIF9vcHRpb25hbENoYWluKG9wcykge1xuICBsZXQgbGFzdEFjY2Vzc0xIUyA9IHVuZGVmaW5lZDtcbiAgbGV0IHZhbHVlID0gb3BzWzBdO1xuICBsZXQgaSA9IDE7XG4gIHdoaWxlIChpIDwgb3BzLmxlbmd0aCkge1xuICAgIGNvbnN0IG9wID0gb3BzW2ldIDtcbiAgICBjb25zdCBmbiA9IG9wc1tpICsgMV0gO1xuICAgIGkgKz0gMjtcbiAgICAvLyBieSBjaGVja2luZyBmb3IgbG9vc2UgZXF1YWxpdHkgdG8gYG51bGxgLCB3ZSBjYXRjaCBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICBpZiAoKG9wID09PSAnb3B0aW9uYWxBY2Nlc3MnIHx8IG9wID09PSAnb3B0aW9uYWxDYWxsJykgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgLy8gcmVhbGx5IHdlJ3JlIG1lYW5pbmcgdG8gcmV0dXJuIGB1bmRlZmluZWRgIGFzIGFuIGFjdHVhbCB2YWx1ZSBoZXJlLCBidXQgaXQgc2F2ZXMgYnl0ZXMgbm90IHRvIHdyaXRlIGl0XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvcCA9PT0gJ2FjY2VzcycgfHwgb3AgPT09ICdvcHRpb25hbEFjY2VzcycpIHtcbiAgICAgIGxhc3RBY2Nlc3NMSFMgPSB2YWx1ZTtcbiAgICAgIHZhbHVlID0gZm4odmFsdWUpO1xuICAgIH0gZWxzZSBpZiAob3AgPT09ICdjYWxsJyB8fCBvcCA9PT0gJ29wdGlvbmFsQ2FsbCcpIHtcbiAgICAgIHZhbHVlID0gZm4oKC4uLmFyZ3MpID0+ICh2YWx1ZSApLmNhbGwobGFzdEFjY2Vzc0xIUywgLi4uYXJncykpO1xuICAgICAgbGFzdEFjY2Vzc0xIUyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG4vLyBTdWNyYXNlIHZlcnNpb25cbi8vIGZ1bmN0aW9uIF9vcHRpb25hbENoYWluKG9wcykge1xuLy8gICBsZXQgbGFzdEFjY2Vzc0xIUyA9IHVuZGVmaW5lZDtcbi8vICAgbGV0IHZhbHVlID0gb3BzWzBdO1xuLy8gICBsZXQgaSA9IDE7XG4vLyAgIHdoaWxlIChpIDwgb3BzLmxlbmd0aCkge1xuLy8gICAgIGNvbnN0IG9wID0gb3BzW2ldO1xuLy8gICAgIGNvbnN0IGZuID0gb3BzW2kgKyAxXTtcbi8vICAgICBpICs9IDI7XG4vLyAgICAgaWYgKChvcCA9PT0gJ29wdGlvbmFsQWNjZXNzJyB8fCBvcCA9PT0gJ29wdGlvbmFsQ2FsbCcpICYmIHZhbHVlID09IG51bGwpIHtcbi8vICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4vLyAgICAgfVxuLy8gICAgIGlmIChvcCA9PT0gJ2FjY2VzcycgfHwgb3AgPT09ICdvcHRpb25hbEFjY2VzcycpIHtcbi8vICAgICAgIGxhc3RBY2Nlc3NMSFMgPSB2YWx1ZTtcbi8vICAgICAgIHZhbHVlID0gZm4odmFsdWUpO1xuLy8gICAgIH0gZWxzZSBpZiAob3AgPT09ICdjYWxsJyB8fCBvcCA9PT0gJ29wdGlvbmFsQ2FsbCcpIHtcbi8vICAgICAgIHZhbHVlID0gZm4oKC4uLmFyZ3MpID0+IHZhbHVlLmNhbGwobGFzdEFjY2Vzc0xIUywgLi4uYXJncykpO1xuLy8gICAgICAgbGFzdEFjY2Vzc0xIUyA9IHVuZGVmaW5lZDtcbi8vICAgICB9XG4vLyAgIH1cbi8vICAgcmV0dXJuIHZhbHVlO1xuLy8gfVxuXG5leHBvcnQgeyBfb3B0aW9uYWxDaGFpbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X29wdGlvbmFsQ2hhaW4uanMubWFwXG4iXSwibmFtZXMiOlsiX29wdGlvbmFsQ2hhaW4iLCJvcHMiLCJsYXN0QWNjZXNzTEhTIiwidW5kZWZpbmVkIiwidmFsdWUiLCJpIiwibGVuZ3RoIiwib3AiLCJmbiIsImFyZ3MiLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/cookie.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/cookie.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseCookie: () => (/* binding */ parseCookie)\n/* harmony export */ });\n/**\n * This code was originally copied from the 'cookie` module at v0.5.0 and was simplified for our use case.\n * https://github.com/jshttp/cookie/blob/a0c84147aab6266bdb3996cf4062e93907c0b0fc/index.js\n * It had the following license:\n *\n * (The MIT License)\n *\n * Copyright (c) 2012-2014 Roman Shtylman <shtylman@gmail.com>\n * Copyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */ /**\n * Parses a cookie string\n */ function parseCookie(str) {\n    const obj = {};\n    let index = 0;\n    while(index < str.length){\n        const eqIdx = str.indexOf(\"=\", index);\n        // no more cookie pairs\n        if (eqIdx === -1) {\n            break;\n        }\n        let endIdx = str.indexOf(\";\", index);\n        if (endIdx === -1) {\n            endIdx = str.length;\n        } else if (endIdx < eqIdx) {\n            // backtrack on prior semicolon\n            index = str.lastIndexOf(\";\", eqIdx - 1) + 1;\n            continue;\n        }\n        const key = str.slice(index, eqIdx).trim();\n        // only assign once\n        if (undefined === obj[key]) {\n            let val = str.slice(eqIdx + 1, endIdx).trim();\n            // quoted values\n            if (val.charCodeAt(0) === 0x22) {\n                val = val.slice(1, -1);\n            }\n            try {\n                obj[key] = val.indexOf(\"%\") !== -1 ? decodeURIComponent(val) : val;\n            } catch (e) {\n                obj[key] = val;\n            }\n        }\n        index = endIdx + 1;\n    }\n    return obj;\n}\n //# sourceMappingURL=cookie.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9jb29raWUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBNEJDLEdBRUQ7O0NBRUMsR0FDRCxTQUFTQSxZQUFZQyxHQUFHO0lBQ3RCLE1BQU1DLE1BQU0sQ0FBQztJQUNiLElBQUlDLFFBQVE7SUFFWixNQUFPQSxRQUFRRixJQUFJRyxNQUFNLENBQUU7UUFDekIsTUFBTUMsUUFBUUosSUFBSUssT0FBTyxDQUFDLEtBQUtIO1FBRS9CLHVCQUF1QjtRQUN2QixJQUFJRSxVQUFVLENBQUMsR0FBRztZQUNoQjtRQUNGO1FBRUEsSUFBSUUsU0FBU04sSUFBSUssT0FBTyxDQUFDLEtBQUtIO1FBRTlCLElBQUlJLFdBQVcsQ0FBQyxHQUFHO1lBQ2pCQSxTQUFTTixJQUFJRyxNQUFNO1FBQ3JCLE9BQU8sSUFBSUcsU0FBU0YsT0FBTztZQUN6QiwrQkFBK0I7WUFDL0JGLFFBQVFGLElBQUlPLFdBQVcsQ0FBQyxLQUFLSCxRQUFRLEtBQUs7WUFDMUM7UUFDRjtRQUVBLE1BQU1JLE1BQU1SLElBQUlTLEtBQUssQ0FBQ1AsT0FBT0UsT0FBT00sSUFBSTtRQUV4QyxtQkFBbUI7UUFDbkIsSUFBSUMsY0FBY1YsR0FBRyxDQUFDTyxJQUFJLEVBQUU7WUFDMUIsSUFBSUksTUFBTVosSUFBSVMsS0FBSyxDQUFDTCxRQUFRLEdBQUdFLFFBQVFJLElBQUk7WUFFM0MsZ0JBQWdCO1lBQ2hCLElBQUlFLElBQUlDLFVBQVUsQ0FBQyxPQUFPLE1BQU07Z0JBQzlCRCxNQUFNQSxJQUFJSCxLQUFLLENBQUMsR0FBRyxDQUFDO1lBQ3RCO1lBRUEsSUFBSTtnQkFDRlIsR0FBRyxDQUFDTyxJQUFJLEdBQUdJLElBQUlQLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSVMsbUJBQW1CRixPQUFPQTtZQUNqRSxFQUFFLE9BQU9HLEdBQUc7Z0JBQ1ZkLEdBQUcsQ0FBQ08sSUFBSSxHQUFHSTtZQUNiO1FBQ0Y7UUFFQVYsUUFBUUksU0FBUztJQUNuQjtJQUVBLE9BQU9MO0FBQ1Q7QUFFdUIsQ0FDdkIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnktaW50ZXJuYWwvdHJhY2luZy9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vY29va2llLmpzPzhkMmQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIGNvZGUgd2FzIG9yaWdpbmFsbHkgY29waWVkIGZyb20gdGhlICdjb29raWVgIG1vZHVsZSBhdCB2MC41LjAgYW5kIHdhcyBzaW1wbGlmaWVkIGZvciBvdXIgdXNlIGNhc2UuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vanNodHRwL2Nvb2tpZS9ibG9iL2EwYzg0MTQ3YWFiNjI2NmJkYjM5OTZjZjQwNjJlOTM5MDdjMGIwZmMvaW5kZXguanNcbiAqIEl0IGhhZCB0aGUgZm9sbG93aW5nIGxpY2Vuc2U6XG4gKlxuICogKFRoZSBNSVQgTGljZW5zZSlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNCBSb21hbiBTaHR5bG1hbiA8c2h0eWxtYW5AZ21haWwuY29tPlxuICogQ29weXJpZ2h0IChjKSAyMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uIDxkb3VnQHNvbWV0aGluZ2RvdWcuY29tPlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xuICogYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4gKiAnU29mdHdhcmUnKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4gKiB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4gKiBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbiAqIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0b1xuICogdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgJ0FTIElTJywgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuICogTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULlxuICogSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTllcbiAqIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsXG4gKiBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuICogU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuLyoqXG4gKiBQYXJzZXMgYSBjb29raWUgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIHBhcnNlQ29va2llKHN0cikge1xuICBjb25zdCBvYmogPSB7fTtcbiAgbGV0IGluZGV4ID0gMDtcblxuICB3aGlsZSAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgY29uc3QgZXFJZHggPSBzdHIuaW5kZXhPZignPScsIGluZGV4KTtcblxuICAgIC8vIG5vIG1vcmUgY29va2llIHBhaXJzXG4gICAgaWYgKGVxSWR4ID09PSAtMSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbGV0IGVuZElkeCA9IHN0ci5pbmRleE9mKCc7JywgaW5kZXgpO1xuXG4gICAgaWYgKGVuZElkeCA9PT0gLTEpIHtcbiAgICAgIGVuZElkeCA9IHN0ci5sZW5ndGg7XG4gICAgfSBlbHNlIGlmIChlbmRJZHggPCBlcUlkeCkge1xuICAgICAgLy8gYmFja3RyYWNrIG9uIHByaW9yIHNlbWljb2xvblxuICAgICAgaW5kZXggPSBzdHIubGFzdEluZGV4T2YoJzsnLCBlcUlkeCAtIDEpICsgMTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGtleSA9IHN0ci5zbGljZShpbmRleCwgZXFJZHgpLnRyaW0oKTtcblxuICAgIC8vIG9ubHkgYXNzaWduIG9uY2VcbiAgICBpZiAodW5kZWZpbmVkID09PSBvYmpba2V5XSkge1xuICAgICAgbGV0IHZhbCA9IHN0ci5zbGljZShlcUlkeCArIDEsIGVuZElkeCkudHJpbSgpO1xuXG4gICAgICAvLyBxdW90ZWQgdmFsdWVzXG4gICAgICBpZiAodmFsLmNoYXJDb2RlQXQoMCkgPT09IDB4MjIpIHtcbiAgICAgICAgdmFsID0gdmFsLnNsaWNlKDEsIC0xKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgb2JqW2tleV0gPSB2YWwuaW5kZXhPZignJScpICE9PSAtMSA/IGRlY29kZVVSSUNvbXBvbmVudCh2YWwpIDogdmFsO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBvYmpba2V5XSA9IHZhbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbmRleCA9IGVuZElkeCArIDE7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5leHBvcnQgeyBwYXJzZUNvb2tpZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29va2llLmpzLm1hcFxuIl0sIm5hbWVzIjpbInBhcnNlQ29va2llIiwic3RyIiwib2JqIiwiaW5kZXgiLCJsZW5ndGgiLCJlcUlkeCIsImluZGV4T2YiLCJlbmRJZHgiLCJsYXN0SW5kZXhPZiIsImtleSIsInNsaWNlIiwidHJpbSIsInVuZGVmaW5lZCIsInZhbCIsImNoYXJDb2RlQXQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/cookie.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/debug-build.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/debug-build.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEBUG_BUILD: () => (/* binding */ DEBUG_BUILD)\n/* harmony export */ });\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */ const DEBUG_BUILD =  false || false;\n //# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9kZWJ1Zy1idWlsZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Q0FJQyxHQUNELE1BQU1BLGNBQWUsTUFBNEIsSUFBZUMsS0FBZ0JBO0FBRXpELENBQ3ZCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5LWludGVybmFsL3RyYWNpbmcvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2RlYnVnLWJ1aWxkLmpzP2RmY2UiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIHNlcnZlcyBhcyBhIGJ1aWxkIHRpbWUgZmxhZyB0aGF0IHdpbGwgYmUgdHJ1ZSBieSBkZWZhdWx0LCBidXQgZmFsc2UgaW4gbm9uLWRlYnVnIGJ1aWxkcyBvciBpZiB1c2VycyByZXBsYWNlIGBfX1NFTlRSWV9ERUJVR19fYCBpbiB0aGVpciBnZW5lcmF0ZWQgY29kZS5cbiAqXG4gKiBBVFRFTlRJT046IFRoaXMgY29uc3RhbnQgbXVzdCBuZXZlciBjcm9zcyBwYWNrYWdlIGJvdW5kYXJpZXMgKGkuZS4gYmUgZXhwb3J0ZWQpIHRvIGd1YXJhbnRlZSB0aGF0IGl0IGNhbiBiZSB1c2VkIGZvciB0cmVlIHNoYWtpbmcuXG4gKi9cbmNvbnN0IERFQlVHX0JVSUxEID0gKHR5cGVvZiBfX1NFTlRSWV9ERUJVR19fID09PSAndW5kZWZpbmVkJyB8fCBfX1NFTlRSWV9ERUJVR19fKTtcblxuZXhwb3J0IHsgREVCVUdfQlVJTEQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLWJ1aWxkLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkRFQlVHX0JVSUxEIiwiX19TRU5UUllfREVCVUdfXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/debug-build.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/env.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/env.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSDKSource: () => (/* binding */ getSDKSource),\n/* harmony export */   isBrowserBundle: () => (/* binding */ isBrowserBundle)\n/* harmony export */ });\n/*\n * This module exists for optimizations in the build process through rollup and terser.  We define some global\n * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these\n * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will\n * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to\n * `logger` and preventing node-related code from appearing in browser bundles.\n *\n * Attention:\n * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by\n * users. These flags should live in their respective packages, as we identified user tooling (specifically webpack)\n * having issues tree-shaking these constants across package boundaries.\n * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want\n * users to be able to shake away expressions that it guards.\n */ /**\n * Figures out if we're building a browser bundle.\n *\n * @returns true if this is a browser bundle build.\n */ function isBrowserBundle() {\n    return typeof __SENTRY_BROWSER_BUNDLE__ !== \"undefined\" && !!__SENTRY_BROWSER_BUNDLE__;\n}\n/**\n * Get source of SDK.\n */ function getSDKSource() {\n    // @ts-expect-error \"npm\" is injected by rollup during build process\n    return \"npm\";\n}\n //# sourceMappingURL=env.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9lbnYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7OztDQWFDLEdBRUQ7Ozs7Q0FJQyxHQUNELFNBQVNBO0lBQ1AsT0FBTyxPQUFPQyw4QkFBOEIsZUFBZSxDQUFDLENBQUNBO0FBQy9EO0FBRUE7O0NBRUMsR0FDRCxTQUFTQztJQUNQLG9FQUFvRTtJQUNwRSxPQUFPO0FBQ1Q7QUFFeUMsQ0FDekMsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnktaW50ZXJuYWwvdHJhY2luZy9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vZW52LmpzPzM2NDMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFRoaXMgbW9kdWxlIGV4aXN0cyBmb3Igb3B0aW1pemF0aW9ucyBpbiB0aGUgYnVpbGQgcHJvY2VzcyB0aHJvdWdoIHJvbGx1cCBhbmQgdGVyc2VyLiAgV2UgZGVmaW5lIHNvbWUgZ2xvYmFsXG4gKiBjb25zdGFudHMsIHdoaWNoIGNhbiBiZSBvdmVycmlkZGVuIGR1cmluZyBidWlsZC4gQnkgZ3VhcmRpbmcgY2VydGFpbiBwaWVjZXMgb2YgY29kZSB3aXRoIGZ1bmN0aW9ucyB0aGF0IHJldHVybiB0aGVzZVxuICogY29uc3RhbnRzLCB3ZSBjYW4gY29udHJvbCB3aGV0aGVyIG9yIG5vdCB0aGV5IGFwcGVhciBpbiB0aGUgZmluYWwgYnVuZGxlLiAoQW55IGNvZGUgZ3VhcmRlZCBieSBhIGZhbHNlIGNvbmRpdGlvbiB3aWxsXG4gKiBuZXZlciBydW4sIGFuZCB3aWxsIGhlbmNlIGJlIGRyb3BwZWQgZHVyaW5nIHRyZWVzaGFraW5nLikgVGhlIHR3byBwcmltYXJ5IHVzZXMgZm9yIHRoaXMgYXJlIHN0cmlwcGluZyBvdXQgY2FsbHMgdG9cbiAqIGBsb2dnZXJgIGFuZCBwcmV2ZW50aW5nIG5vZGUtcmVsYXRlZCBjb2RlIGZyb20gYXBwZWFyaW5nIGluIGJyb3dzZXIgYnVuZGxlcy5cbiAqXG4gKiBBdHRlbnRpb246XG4gKiBUaGlzIGZpbGUgc2hvdWxkIG5vdCBiZSB1c2VkIHRvIGRlZmluZSBjb25zdGFudHMvZmxhZ3MgdGhhdCBhcmUgaW50ZW5kZWQgdG8gYmUgdXNlZCBmb3IgdHJlZS1zaGFraW5nIGNvbmR1Y3RlZCBieVxuICogdXNlcnMuIFRoZXNlIGZsYWdzIHNob3VsZCBsaXZlIGluIHRoZWlyIHJlc3BlY3RpdmUgcGFja2FnZXMsIGFzIHdlIGlkZW50aWZpZWQgdXNlciB0b29saW5nIChzcGVjaWZpY2FsbHkgd2VicGFjaylcbiAqIGhhdmluZyBpc3N1ZXMgdHJlZS1zaGFraW5nIHRoZXNlIGNvbnN0YW50cyBhY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzLlxuICogQW4gZXhhbXBsZSBmb3IgdGhpcyBpcyB0aGUgX19TRU5UUllfREVCVUdfXyBjb25zdGFudC4gSXQgaXMgZGVjbGFyZWQgaW4gZWFjaCBwYWNrYWdlIGluZGl2aWR1YWxseSBiZWNhdXNlIHdlIHdhbnRcbiAqIHVzZXJzIHRvIGJlIGFibGUgdG8gc2hha2UgYXdheSBleHByZXNzaW9ucyB0aGF0IGl0IGd1YXJkcy5cbiAqL1xuXG4vKipcbiAqIEZpZ3VyZXMgb3V0IGlmIHdlJ3JlIGJ1aWxkaW5nIGEgYnJvd3NlciBidW5kbGUuXG4gKlxuICogQHJldHVybnMgdHJ1ZSBpZiB0aGlzIGlzIGEgYnJvd3NlciBidW5kbGUgYnVpbGQuXG4gKi9cbmZ1bmN0aW9uIGlzQnJvd3NlckJ1bmRsZSgpIHtcbiAgcmV0dXJuIHR5cGVvZiBfX1NFTlRSWV9CUk9XU0VSX0JVTkRMRV9fICE9PSAndW5kZWZpbmVkJyAmJiAhIV9fU0VOVFJZX0JST1dTRVJfQlVORExFX187XG59XG5cbi8qKlxuICogR2V0IHNvdXJjZSBvZiBTREsuXG4gKi9cbmZ1bmN0aW9uIGdldFNES1NvdXJjZSgpIHtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBcIm5wbVwiIGlzIGluamVjdGVkIGJ5IHJvbGx1cCBkdXJpbmcgYnVpbGQgcHJvY2Vzc1xuICByZXR1cm4gXCJucG1cIjtcbn1cblxuZXhwb3J0IHsgZ2V0U0RLU291cmNlLCBpc0Jyb3dzZXJCdW5kbGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJpc0Jyb3dzZXJCdW5kbGUiLCJfX1NFTlRSWV9CUk9XU0VSX0JVTkRMRV9fIiwiZ2V0U0RLU291cmNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/env.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/is.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/is.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDOMError: () => (/* binding */ isDOMError),\n/* harmony export */   isDOMException: () => (/* binding */ isDOMException),\n/* harmony export */   isElement: () => (/* binding */ isElement),\n/* harmony export */   isError: () => (/* binding */ isError),\n/* harmony export */   isErrorEvent: () => (/* binding */ isErrorEvent),\n/* harmony export */   isEvent: () => (/* binding */ isEvent),\n/* harmony export */   isInstanceOf: () => (/* binding */ isInstanceOf),\n/* harmony export */   isNaN: () => (/* binding */ isNaN),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isPrimitive: () => (/* binding */ isPrimitive),\n/* harmony export */   isRegExp: () => (/* binding */ isRegExp),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isSyntheticEvent: () => (/* binding */ isSyntheticEvent),\n/* harmony export */   isThenable: () => (/* binding */ isThenable),\n/* harmony export */   isVueViewModel: () => (/* binding */ isVueViewModel)\n/* harmony export */ });\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isError(wat) {\n    switch(objectToString.call(wat)){\n        case \"[object Error]\":\n        case \"[object Exception]\":\n        case \"[object DOMException]\":\n            return true;\n        default:\n            return isInstanceOf(wat, Error);\n    }\n}\n/**\n * Checks whether given value is an instance of the given built-in class.\n *\n * @param wat The value to be checked\n * @param className\n * @returns A boolean representing the result.\n */ function isBuiltin(wat, className) {\n    return objectToString.call(wat) === `[object ${className}]`;\n}\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isErrorEvent(wat) {\n    return isBuiltin(wat, \"ErrorEvent\");\n}\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isDOMError(wat) {\n    return isBuiltin(wat, \"DOMError\");\n}\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isDOMException(wat) {\n    return isBuiltin(wat, \"DOMException\");\n}\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isString(wat) {\n    return isBuiltin(wat, \"String\");\n}\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isPrimitive(wat) {\n    return wat === null || typeof wat !== \"object\" && typeof wat !== \"function\";\n}\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isPlainObject(wat) {\n    return isBuiltin(wat, \"Object\");\n}\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isEvent(wat) {\n    return typeof Event !== \"undefined\" && isInstanceOf(wat, Event);\n}\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isElement(wat) {\n    return typeof Element !== \"undefined\" && isInstanceOf(wat, Element);\n}\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isRegExp(wat) {\n    return isBuiltin(wat, \"RegExp\");\n}\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */ function isThenable(wat) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return Boolean(wat && wat.then && typeof wat.then === \"function\");\n}\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isSyntheticEvent(wat) {\n    return isPlainObject(wat) && \"nativeEvent\" in wat && \"preventDefault\" in wat && \"stopPropagation\" in wat;\n}\n/**\n * Checks whether given value is NaN\n * {@link isNaN}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isNaN(wat) {\n    return typeof wat === \"number\" && wat !== wat;\n}\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */ function isInstanceOf(wat, base) {\n    try {\n        return wat instanceof base;\n    } catch (_e) {\n        return false;\n    }\n}\n/**\n * Checks whether given value's type is a Vue ViewModel.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isVueViewModel(wat) {\n    // Not using Object.prototype.toString because in Vue 3 it would read the instance's Symbol(Symbol.toStringTag) property.\n    return !!(typeof wat === \"object\" && wat !== null && (wat.__isVue || wat._isVue));\n}\n //# sourceMappingURL=is.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/is.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/logger.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/logger.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONSOLE_LEVELS: () => (/* binding */ CONSOLE_LEVELS),\n/* harmony export */   consoleSandbox: () => (/* binding */ consoleSandbox),\n/* harmony export */   logger: () => (/* binding */ logger),\n/* harmony export */   originalConsoleMethods: () => (/* binding */ originalConsoleMethods)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/debug-build.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/worldwide.js\");\n\n\n/** Prefix for logging strings */ const PREFIX = \"Sentry Logger \";\nconst CONSOLE_LEVELS = [\n    \"debug\",\n    \"info\",\n    \"warn\",\n    \"error\",\n    \"log\",\n    \"assert\",\n    \"trace\"\n];\n/** This may be mutated by the console instrumentation. */ const originalConsoleMethods = {};\n/** JSDoc */ /**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */ function consoleSandbox(callback) {\n    if (!(\"console\" in _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ)) {\n        return callback();\n    }\n    const console = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ.console;\n    const wrappedFuncs = {};\n    const wrappedLevels = Object.keys(originalConsoleMethods);\n    // Restore all wrapped console methods\n    wrappedLevels.forEach((level)=>{\n        const originalConsoleMethod = originalConsoleMethods[level];\n        wrappedFuncs[level] = console[level];\n        console[level] = originalConsoleMethod;\n    });\n    try {\n        return callback();\n    } finally{\n        // Revert restoration to wrapped state\n        wrappedLevels.forEach((level)=>{\n            console[level] = wrappedFuncs[level];\n        });\n    }\n}\nfunction makeLogger() {\n    let enabled = false;\n    const logger = {\n        enable: ()=>{\n            enabled = true;\n        },\n        disable: ()=>{\n            enabled = false;\n        },\n        isEnabled: ()=>enabled\n    };\n    if (_debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD) {\n        CONSOLE_LEVELS.forEach((name)=>{\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            logger[name] = (...args)=>{\n                if (enabled) {\n                    consoleSandbox(()=>{\n                        _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n                    });\n                }\n            };\n        });\n    } else {\n        CONSOLE_LEVELS.forEach((name)=>{\n            logger[name] = ()=>undefined;\n        });\n    }\n    return logger;\n}\nconst logger = makeLogger();\n //# sourceMappingURL=logger.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9sb2dnZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQStDO0FBQ0g7QUFFNUMsK0JBQStCLEdBQy9CLE1BQU1FLFNBQVM7QUFFZixNQUFNQyxpQkFBaUI7SUFDckI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRDtBQUVELHdEQUF3RCxHQUN4RCxNQUFNQyx5QkFFSCxDQUFDO0FBRUosVUFBVSxHQUVWOzs7OztDQUtDLEdBQ0QsU0FBU0MsZUFBZUMsUUFBUTtJQUM5QixJQUFJLENBQUUsbUVBQXNCLEdBQUk7UUFDOUIsT0FBT0E7SUFDVDtJQUVBLE1BQU1DLFVBQVVOLHFEQUFVQSxDQUFDTSxPQUFPO0lBQ2xDLE1BQU1DLGVBQWUsQ0FBQztJQUV0QixNQUFNQyxnQkFBZ0JDLE9BQU9DLElBQUksQ0FBQ1A7SUFFbEMsc0NBQXNDO0lBQ3RDSyxjQUFjRyxPQUFPLENBQUNDLENBQUFBO1FBQ3BCLE1BQU1DLHdCQUF3QlYsc0JBQXNCLENBQUNTLE1BQU07UUFDM0RMLFlBQVksQ0FBQ0ssTUFBTSxHQUFHTixPQUFPLENBQUNNLE1BQU07UUFDcENOLE9BQU8sQ0FBQ00sTUFBTSxHQUFHQztJQUNuQjtJQUVBLElBQUk7UUFDRixPQUFPUjtJQUNULFNBQVU7UUFDUixzQ0FBc0M7UUFDdENHLGNBQWNHLE9BQU8sQ0FBQ0MsQ0FBQUE7WUFDcEJOLE9BQU8sQ0FBQ00sTUFBTSxHQUFHTCxZQUFZLENBQUNLLE1BQU07UUFDdEM7SUFDRjtBQUNGO0FBRUEsU0FBU0U7SUFDUCxJQUFJQyxVQUFVO0lBQ2QsTUFBTUMsU0FBUztRQUNiQyxRQUFRO1lBQ05GLFVBQVU7UUFDWjtRQUNBRyxTQUFTO1lBQ1BILFVBQVU7UUFDWjtRQUNBSSxXQUFXLElBQU1KO0lBQ25CO0lBRUEsSUFBSWhCLHdEQUFXQSxFQUFFO1FBQ2ZHLGVBQWVTLE9BQU8sQ0FBQ1MsQ0FBQUE7WUFDckIsOERBQThEO1lBQzlESixNQUFNLENBQUNJLEtBQUssR0FBRyxDQUFDLEdBQUdDO2dCQUNqQixJQUFJTixTQUFTO29CQUNYWCxlQUFlO3dCQUNiSixxREFBVUEsQ0FBQ00sT0FBTyxDQUFDYyxLQUFLLENBQUMsQ0FBQyxFQUFFbkIsT0FBTyxDQUFDLEVBQUVtQixLQUFLLEVBQUUsQ0FBQyxLQUFLQztvQkFDckQ7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0YsT0FBTztRQUNMbkIsZUFBZVMsT0FBTyxDQUFDUyxDQUFBQTtZQUNyQkosTUFBTSxDQUFDSSxLQUFLLEdBQUcsSUFBTUU7UUFDdkI7SUFDRjtJQUVBLE9BQU9OO0FBQ1Q7QUFFQSxNQUFNQSxTQUFTRjtBQUUyRCxDQUMxRSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9sb2dnZXIuanM/ZTE0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBERUJVR19CVUlMRCB9IGZyb20gJy4vZGVidWctYnVpbGQuanMnO1xuaW1wb3J0IHsgR0xPQkFMX09CSiB9IGZyb20gJy4vd29ybGR3aWRlLmpzJztcblxuLyoqIFByZWZpeCBmb3IgbG9nZ2luZyBzdHJpbmdzICovXG5jb25zdCBQUkVGSVggPSAnU2VudHJ5IExvZ2dlciAnO1xuXG5jb25zdCBDT05TT0xFX0xFVkVMUyA9IFtcbiAgJ2RlYnVnJyxcbiAgJ2luZm8nLFxuICAnd2FybicsXG4gICdlcnJvcicsXG4gICdsb2cnLFxuICAnYXNzZXJ0JyxcbiAgJ3RyYWNlJyxcbl0gO1xuXG4vKiogVGhpcyBtYXkgYmUgbXV0YXRlZCBieSB0aGUgY29uc29sZSBpbnN0cnVtZW50YXRpb24uICovXG5jb25zdCBvcmlnaW5hbENvbnNvbGVNZXRob2RzXG5cbiA9IHt9O1xuXG4vKiogSlNEb2MgKi9cblxuLyoqXG4gKiBUZW1wb3JhcmlseSBkaXNhYmxlIHNlbnRyeSBjb25zb2xlIGluc3RydW1lbnRhdGlvbnMuXG4gKlxuICogQHBhcmFtIGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBydW4gYWdhaW5zdCB0aGUgb3JpZ2luYWwgYGNvbnNvbGVgIG1lc3NhZ2VzXG4gKiBAcmV0dXJucyBUaGUgcmVzdWx0cyBvZiB0aGUgY2FsbGJhY2tcbiAqL1xuZnVuY3Rpb24gY29uc29sZVNhbmRib3goY2FsbGJhY2spIHtcbiAgaWYgKCEoJ2NvbnNvbGUnIGluIEdMT0JBTF9PQkopKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gIH1cblxuICBjb25zdCBjb25zb2xlID0gR0xPQkFMX09CSi5jb25zb2xlIDtcbiAgY29uc3Qgd3JhcHBlZEZ1bmNzID0ge307XG5cbiAgY29uc3Qgd3JhcHBlZExldmVscyA9IE9iamVjdC5rZXlzKG9yaWdpbmFsQ29uc29sZU1ldGhvZHMpIDtcblxuICAvLyBSZXN0b3JlIGFsbCB3cmFwcGVkIGNvbnNvbGUgbWV0aG9kc1xuICB3cmFwcGVkTGV2ZWxzLmZvckVhY2gobGV2ZWwgPT4ge1xuICAgIGNvbnN0IG9yaWdpbmFsQ29uc29sZU1ldGhvZCA9IG9yaWdpbmFsQ29uc29sZU1ldGhvZHNbbGV2ZWxdIDtcbiAgICB3cmFwcGVkRnVuY3NbbGV2ZWxdID0gY29uc29sZVtsZXZlbF0gO1xuICAgIGNvbnNvbGVbbGV2ZWxdID0gb3JpZ2luYWxDb25zb2xlTWV0aG9kO1xuICB9KTtcblxuICB0cnkge1xuICAgIHJldHVybiBjYWxsYmFjaygpO1xuICB9IGZpbmFsbHkge1xuICAgIC8vIFJldmVydCByZXN0b3JhdGlvbiB0byB3cmFwcGVkIHN0YXRlXG4gICAgd3JhcHBlZExldmVscy5mb3JFYWNoKGxldmVsID0+IHtcbiAgICAgIGNvbnNvbGVbbGV2ZWxdID0gd3JhcHBlZEZ1bmNzW2xldmVsXSA7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZUxvZ2dlcigpIHtcbiAgbGV0IGVuYWJsZWQgPSBmYWxzZTtcbiAgY29uc3QgbG9nZ2VyID0ge1xuICAgIGVuYWJsZTogKCkgPT4ge1xuICAgICAgZW5hYmxlZCA9IHRydWU7XG4gICAgfSxcbiAgICBkaXNhYmxlOiAoKSA9PiB7XG4gICAgICBlbmFibGVkID0gZmFsc2U7XG4gICAgfSxcbiAgICBpc0VuYWJsZWQ6ICgpID0+IGVuYWJsZWQsXG4gIH07XG5cbiAgaWYgKERFQlVHX0JVSUxEKSB7XG4gICAgQ09OU09MRV9MRVZFTFMuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICBsb2dnZXJbbmFtZV0gPSAoLi4uYXJncykgPT4ge1xuICAgICAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgICAgIGNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgICAgICAgIEdMT0JBTF9PQkouY29uc29sZVtuYW1lXShgJHtQUkVGSVh9WyR7bmFtZX1dOmAsIC4uLmFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIENPTlNPTEVfTEVWRUxTLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICBsb2dnZXJbbmFtZV0gPSAoKSA9PiB1bmRlZmluZWQ7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbG9nZ2VyIDtcbn1cblxuY29uc3QgbG9nZ2VyID0gbWFrZUxvZ2dlcigpO1xuXG5leHBvcnQgeyBDT05TT0xFX0xFVkVMUywgY29uc29sZVNhbmRib3gsIGxvZ2dlciwgb3JpZ2luYWxDb25zb2xlTWV0aG9kcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2VyLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkRFQlVHX0JVSUxEIiwiR0xPQkFMX09CSiIsIlBSRUZJWCIsIkNPTlNPTEVfTEVWRUxTIiwib3JpZ2luYWxDb25zb2xlTWV0aG9kcyIsImNvbnNvbGVTYW5kYm94IiwiY2FsbGJhY2siLCJjb25zb2xlIiwid3JhcHBlZEZ1bmNzIiwid3JhcHBlZExldmVscyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwibGV2ZWwiLCJvcmlnaW5hbENvbnNvbGVNZXRob2QiLCJtYWtlTG9nZ2VyIiwiZW5hYmxlZCIsImxvZ2dlciIsImVuYWJsZSIsImRpc2FibGUiLCJpc0VuYWJsZWQiLCJuYW1lIiwiYXJncyIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/logger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/memo.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/memo.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   memoBuilder: () => (/* binding */ memoBuilder)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */ /* eslint-disable @typescript-eslint/no-explicit-any */ /**\n * Helper to decycle json objects\n */ function memoBuilder() {\n    const hasWeakSet = typeof WeakSet === \"function\";\n    const inner = hasWeakSet ? new WeakSet() : [];\n    function memoize(obj) {\n        if (hasWeakSet) {\n            if (inner.has(obj)) {\n                return true;\n            }\n            inner.add(obj);\n            return false;\n        }\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for(let i = 0; i < inner.length; i++){\n            const value = inner[i];\n            if (value === obj) {\n                return true;\n            }\n        }\n        inner.push(obj);\n        return false;\n    }\n    function unmemoize(obj) {\n        if (hasWeakSet) {\n            inner.delete(obj);\n        } else {\n            for(let i = 0; i < inner.length; i++){\n                if (inner[i] === obj) {\n                    inner.splice(i, 1);\n                    break;\n                }\n            }\n        }\n    }\n    return [\n        memoize,\n        unmemoize\n    ];\n}\n //# sourceMappingURL=memo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9tZW1vLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSw2REFBNkQsR0FDN0QscURBQXFELEdBRXJEOztDQUVDLEdBQ0QsU0FBU0E7SUFDUCxNQUFNQyxhQUFhLE9BQU9DLFlBQVk7SUFDdEMsTUFBTUMsUUFBUUYsYUFBYSxJQUFJQyxZQUFZLEVBQUU7SUFDN0MsU0FBU0UsUUFBUUMsR0FBRztRQUNsQixJQUFJSixZQUFZO1lBQ2QsSUFBSUUsTUFBTUcsR0FBRyxDQUFDRCxNQUFNO2dCQUNsQixPQUFPO1lBQ1Q7WUFDQUYsTUFBTUksR0FBRyxDQUFDRjtZQUNWLE9BQU87UUFDVDtRQUNBLDREQUE0RDtRQUM1RCxJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSUwsTUFBTU0sTUFBTSxFQUFFRCxJQUFLO1lBQ3JDLE1BQU1FLFFBQVFQLEtBQUssQ0FBQ0ssRUFBRTtZQUN0QixJQUFJRSxVQUFVTCxLQUFLO2dCQUNqQixPQUFPO1lBQ1Q7UUFDRjtRQUNBRixNQUFNUSxJQUFJLENBQUNOO1FBQ1gsT0FBTztJQUNUO0lBRUEsU0FBU08sVUFBVVAsR0FBRztRQUNwQixJQUFJSixZQUFZO1lBQ2RFLE1BQU1VLE1BQU0sQ0FBQ1I7UUFDZixPQUFPO1lBQ0wsSUFBSyxJQUFJRyxJQUFJLEdBQUdBLElBQUlMLE1BQU1NLE1BQU0sRUFBRUQsSUFBSztnQkFDckMsSUFBSUwsS0FBSyxDQUFDSyxFQUFFLEtBQUtILEtBQUs7b0JBQ3BCRixNQUFNVyxNQUFNLENBQUNOLEdBQUc7b0JBQ2hCO2dCQUNGO1lBQ0Y7UUFDRjtJQUNGO0lBQ0EsT0FBTztRQUFDSjtRQUFTUTtLQUFVO0FBQzdCO0FBRXVCLENBQ3ZCLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5LWludGVybmFsL3RyYWNpbmcvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL21lbW8uanM/MDAxZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cblxuLyoqXG4gKiBIZWxwZXIgdG8gZGVjeWNsZSBqc29uIG9iamVjdHNcbiAqL1xuZnVuY3Rpb24gbWVtb0J1aWxkZXIoKSB7XG4gIGNvbnN0IGhhc1dlYWtTZXQgPSB0eXBlb2YgV2Vha1NldCA9PT0gJ2Z1bmN0aW9uJztcbiAgY29uc3QgaW5uZXIgPSBoYXNXZWFrU2V0ID8gbmV3IFdlYWtTZXQoKSA6IFtdO1xuICBmdW5jdGlvbiBtZW1vaXplKG9iaikge1xuICAgIGlmIChoYXNXZWFrU2V0KSB7XG4gICAgICBpZiAoaW5uZXIuaGFzKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpbm5lci5hZGQob2JqKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9wcmVmZXItZm9yLW9mXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbm5lci5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgdmFsdWUgPSBpbm5lcltpXTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gb2JqKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpbm5lci5wdXNoKG9iaik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gdW5tZW1vaXplKG9iaikge1xuICAgIGlmIChoYXNXZWFrU2V0KSB7XG4gICAgICBpbm5lci5kZWxldGUob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbm5lci5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaW5uZXJbaV0gPT09IG9iaikge1xuICAgICAgICAgIGlubmVyLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gW21lbW9pemUsIHVubWVtb2l6ZV07XG59XG5cbmV4cG9ydCB7IG1lbW9CdWlsZGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZW1vLmpzLm1hcFxuIl0sIm5hbWVzIjpbIm1lbW9CdWlsZGVyIiwiaGFzV2Vha1NldCIsIldlYWtTZXQiLCJpbm5lciIsIm1lbW9pemUiLCJvYmoiLCJoYXMiLCJhZGQiLCJpIiwibGVuZ3RoIiwidmFsdWUiLCJwdXNoIiwidW5tZW1vaXplIiwiZGVsZXRlIiwic3BsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/memo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/misc.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/misc.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addContextToFrame: () => (/* binding */ addContextToFrame),\n/* harmony export */   addExceptionMechanism: () => (/* binding */ addExceptionMechanism),\n/* harmony export */   addExceptionTypeValue: () => (/* binding */ addExceptionTypeValue),\n/* harmony export */   arrayify: () => (/* binding */ arrayify),\n/* harmony export */   checkOrSetAlreadyCaught: () => (/* binding */ checkOrSetAlreadyCaught),\n/* harmony export */   getEventDescription: () => (/* binding */ getEventDescription),\n/* harmony export */   parseSemver: () => (/* binding */ parseSemver),\n/* harmony export */   uuid4: () => (/* binding */ uuid4)\n/* harmony export */ });\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./string.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/string.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/worldwide.js\");\n\n\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */ function uuid4() {\n    const gbl = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ;\n    const crypto = gbl.crypto || gbl.msCrypto;\n    let getRandomByte = ()=>Math.random() * 16;\n    try {\n        if (crypto && crypto.randomUUID) {\n            return crypto.randomUUID().replace(/-/g, \"\");\n        }\n        if (crypto && crypto.getRandomValues) {\n            getRandomByte = ()=>crypto.getRandomValues(new Uint8Array(1))[0];\n        }\n    } catch (_) {\n    // some runtimes can crash invoking crypto\n    // https://github.com/getsentry/sentry-javascript/issues/8935\n    }\n    // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n    // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n    return ([\n        1e7\n    ] + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, (c)=>// eslint-disable-next-line no-bitwise\n        (c ^ (getRandomByte() & 15) >> c / 4).toString(16));\n}\nfunction getFirstException(event) {\n    return event.exception && event.exception.values ? event.exception.values[0] : undefined;\n}\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */ function getEventDescription(event) {\n    const { message, event_id: eventId } = event;\n    if (message) {\n        return message;\n    }\n    const firstException = getFirstException(event);\n    if (firstException) {\n        if (firstException.type && firstException.value) {\n            return `${firstException.type}: ${firstException.value}`;\n        }\n        return firstException.type || firstException.value || eventId || \"<unknown>\";\n    }\n    return eventId || \"<unknown>\";\n}\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */ function addExceptionTypeValue(event, value, type) {\n    const exception = event.exception = event.exception || {};\n    const values = exception.values = exception.values || [];\n    const firstException = values[0] = values[0] || {};\n    if (!firstException.value) {\n        firstException.value = value || \"\";\n    }\n    if (!firstException.type) {\n        firstException.type = type || \"Error\";\n    }\n}\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */ function addExceptionMechanism(event, newMechanism) {\n    const firstException = getFirstException(event);\n    if (!firstException) {\n        return;\n    }\n    const defaultMechanism = {\n        type: \"generic\",\n        handled: true\n    };\n    const currentMechanism = firstException.mechanism;\n    firstException.mechanism = {\n        ...defaultMechanism,\n        ...currentMechanism,\n        ...newMechanism\n    };\n    if (newMechanism && \"data\" in newMechanism) {\n        const mergedData = {\n            ...currentMechanism && currentMechanism.data,\n            ...newMechanism.data\n        };\n        firstException.mechanism.data = mergedData;\n    }\n}\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n/**\n * Represents Semantic Versioning object\n */ /**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */ function parseSemver(input) {\n    const match = input.match(SEMVER_REGEXP) || [];\n    const major = parseInt(match[1], 10);\n    const minor = parseInt(match[2], 10);\n    const patch = parseInt(match[3], 10);\n    return {\n        buildmetadata: match[5],\n        major: isNaN(major) ? undefined : major,\n        minor: isNaN(minor) ? undefined : minor,\n        patch: isNaN(patch) ? undefined : patch,\n        prerelease: match[4]\n    };\n}\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */ function addContextToFrame(lines, frame, linesOfContext = 5) {\n    // When there is no line number in the frame, attaching context is nonsensical and will even break grouping\n    if (frame.lineno === undefined) {\n        return;\n    }\n    const maxLines = lines.length;\n    const sourceLine = Math.max(Math.min(maxLines - 1, frame.lineno - 1), 0);\n    frame.pre_context = lines.slice(Math.max(0, sourceLine - linesOfContext), sourceLine).map((line)=>(0,_string_js__WEBPACK_IMPORTED_MODULE_1__.snipLine)(line, 0));\n    frame.context_line = (0,_string_js__WEBPACK_IMPORTED_MODULE_1__.snipLine)(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n    frame.post_context = lines.slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext).map((line)=>(0,_string_js__WEBPACK_IMPORTED_MODULE_1__.snipLine)(line, 0));\n}\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */ function checkOrSetAlreadyCaught(exception) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (exception && exception.__sentry_captured__) {\n        return true;\n    }\n    try {\n        // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n        // `ExtraErrorData` integration\n        (0,_object_js__WEBPACK_IMPORTED_MODULE_2__.addNonEnumerableProperty)(exception, \"__sentry_captured__\", true);\n    } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n    }\n    return false;\n}\n/**\n * Checks whether the given input is already an array, and if it isn't, wraps it in one.\n *\n * @param maybeArray Input to turn into an array, if necessary\n * @returns The input, if already an array, or an array with the input as the only element, if not\n */ function arrayify(maybeArray) {\n    return Array.isArray(maybeArray) ? maybeArray : [\n        maybeArray\n    ];\n}\n //# sourceMappingURL=misc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/misc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/node-stack-trace.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/node-stack-trace.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filenameIsInApp: () => (/* binding */ filenameIsInApp),\n/* harmony export */   node: () => (/* binding */ node)\n/* harmony export */ });\n/**\n * Does this filename look like it's part of the app code?\n */ function filenameIsInApp(filename, isNative = false) {\n    const isInternal = isNative || filename && // It's not internal if it's an absolute linux path\n    !filename.startsWith(\"/\") && // It's not internal if it's an absolute windows path\n    !filename.includes(\":\\\\\") && // It's not internal if the path is starting with a dot\n    !filename.startsWith(\".\") && // It's not internal if the frame has a protocol. In node, this is usually the case if the file got pre-processed with a bundler like webpack\n    !filename.match(/^[a-zA-Z]([a-zA-Z0-9.\\-+])*:\\/\\//); // Schema from: https://stackoverflow.com/a/3641782\n    // in_app is all that's not an internal Node function or a module within node_modules\n    // note that isNative appears to return true even for node core libraries\n    // see https://github.com/getsentry/raven-node/issues/176\n    return !isInternal && filename !== undefined && !filename.includes(\"node_modules/\");\n}\n/** Node Stack line parser */ // eslint-disable-next-line complexity\nfunction node(getModule) {\n    const FILENAME_MATCH = /^\\s*[-]{4,}$/;\n    const FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+):(\\d+):(\\d+)?|([^)]+))\\)?/;\n    // eslint-disable-next-line complexity\n    return (line)=>{\n        const lineMatch = line.match(FULL_MATCH);\n        if (lineMatch) {\n            let object;\n            let method;\n            let functionName;\n            let typeName;\n            let methodName;\n            if (lineMatch[1]) {\n                functionName = lineMatch[1];\n                let methodStart = functionName.lastIndexOf(\".\");\n                if (functionName[methodStart - 1] === \".\") {\n                    methodStart--;\n                }\n                if (methodStart > 0) {\n                    object = functionName.slice(0, methodStart);\n                    method = functionName.slice(methodStart + 1);\n                    const objectEnd = object.indexOf(\".Module\");\n                    if (objectEnd > 0) {\n                        functionName = functionName.slice(objectEnd + 1);\n                        object = object.slice(0, objectEnd);\n                    }\n                }\n                typeName = undefined;\n            }\n            if (method) {\n                typeName = object;\n                methodName = method;\n            }\n            if (method === \"<anonymous>\") {\n                methodName = undefined;\n                functionName = undefined;\n            }\n            if (functionName === undefined) {\n                methodName = methodName || \"<anonymous>\";\n                functionName = typeName ? `${typeName}.${methodName}` : methodName;\n            }\n            let filename = lineMatch[2] && lineMatch[2].startsWith(\"file://\") ? lineMatch[2].slice(7) : lineMatch[2];\n            const isNative = lineMatch[5] === \"native\";\n            if (!filename && lineMatch[5] && !isNative) {\n                filename = lineMatch[5];\n            }\n            return {\n                filename,\n                module: getModule ? getModule(filename) : undefined,\n                function: functionName,\n                lineno: parseInt(lineMatch[3], 10) || undefined,\n                colno: parseInt(lineMatch[4], 10) || undefined,\n                in_app: filenameIsInApp(filename, isNative)\n            };\n        }\n        if (line.match(FILENAME_MATCH)) {\n            return {\n                filename: line\n            };\n        }\n        return undefined;\n    };\n}\n //# sourceMappingURL=node-stack-trace.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9ub2RlLXN0YWNrLXRyYWNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7O0NBRUMsR0FDRCxTQUFTQSxnQkFBZ0JDLFFBQVEsRUFBRUMsV0FBVyxLQUFLO0lBQ2pELE1BQU1DLGFBQ0pELFlBQ0NELFlBQ0MsbURBQW1EO0lBQ25ELENBQUNBLFNBQVNHLFVBQVUsQ0FBQyxRQUNyQixxREFBcUQ7SUFDckQsQ0FBQ0gsU0FBU0ksUUFBUSxDQUFDLFVBQ25CLHVEQUF1RDtJQUN2RCxDQUFDSixTQUFTRyxVQUFVLENBQUMsUUFDckIsNklBQTZJO0lBQzdJLENBQUNILFNBQVNLLEtBQUssQ0FBQyxxQ0FBc0MsbURBQW1EO0lBRTdHLHFGQUFxRjtJQUNyRix5RUFBeUU7SUFDekUseURBQXlEO0lBRXpELE9BQU8sQ0FBQ0gsY0FBY0YsYUFBYU0sYUFBYSxDQUFDTixTQUFTSSxRQUFRLENBQUM7QUFDckU7QUFFQSwyQkFBMkIsR0FDM0Isc0NBQXNDO0FBQ3RDLFNBQVNHLEtBQUtDLFNBQVM7SUFDckIsTUFBTUMsaUJBQWlCO0lBQ3ZCLE1BQU1DLGFBQWE7SUFFbkIsc0NBQXNDO0lBQ3RDLE9BQU8sQ0FBQ0M7UUFDTixNQUFNQyxZQUFZRCxLQUFLTixLQUFLLENBQUNLO1FBRTdCLElBQUlFLFdBQVc7WUFDYixJQUFJQztZQUNKLElBQUlDO1lBQ0osSUFBSUM7WUFDSixJQUFJQztZQUNKLElBQUlDO1lBRUosSUFBSUwsU0FBUyxDQUFDLEVBQUUsRUFBRTtnQkFDaEJHLGVBQWVILFNBQVMsQ0FBQyxFQUFFO2dCQUUzQixJQUFJTSxjQUFjSCxhQUFhSSxXQUFXLENBQUM7Z0JBQzNDLElBQUlKLFlBQVksQ0FBQ0csY0FBYyxFQUFFLEtBQUssS0FBSztvQkFDekNBO2dCQUNGO2dCQUVBLElBQUlBLGNBQWMsR0FBRztvQkFDbkJMLFNBQVNFLGFBQWFLLEtBQUssQ0FBQyxHQUFHRjtvQkFDL0JKLFNBQVNDLGFBQWFLLEtBQUssQ0FBQ0YsY0FBYztvQkFDMUMsTUFBTUcsWUFBWVIsT0FBT1MsT0FBTyxDQUFDO29CQUNqQyxJQUFJRCxZQUFZLEdBQUc7d0JBQ2pCTixlQUFlQSxhQUFhSyxLQUFLLENBQUNDLFlBQVk7d0JBQzlDUixTQUFTQSxPQUFPTyxLQUFLLENBQUMsR0FBR0M7b0JBQzNCO2dCQUNGO2dCQUNBTCxXQUFXVjtZQUNiO1lBRUEsSUFBSVEsUUFBUTtnQkFDVkUsV0FBV0g7Z0JBQ1hJLGFBQWFIO1lBQ2Y7WUFFQSxJQUFJQSxXQUFXLGVBQWU7Z0JBQzVCRyxhQUFhWDtnQkFDYlMsZUFBZVQ7WUFDakI7WUFFQSxJQUFJUyxpQkFBaUJULFdBQVc7Z0JBQzlCVyxhQUFhQSxjQUFjO2dCQUMzQkYsZUFBZUMsV0FBVyxDQUFDLEVBQUVBLFNBQVMsQ0FBQyxFQUFFQyxXQUFXLENBQUMsR0FBR0E7WUFDMUQ7WUFFQSxJQUFJakIsV0FBV1ksU0FBUyxDQUFDLEVBQUUsSUFBSUEsU0FBUyxDQUFDLEVBQUUsQ0FBQ1QsVUFBVSxDQUFDLGFBQWFTLFNBQVMsQ0FBQyxFQUFFLENBQUNRLEtBQUssQ0FBQyxLQUFLUixTQUFTLENBQUMsRUFBRTtZQUN4RyxNQUFNWCxXQUFXVyxTQUFTLENBQUMsRUFBRSxLQUFLO1lBRWxDLElBQUksQ0FBQ1osWUFBWVksU0FBUyxDQUFDLEVBQUUsSUFBSSxDQUFDWCxVQUFVO2dCQUMxQ0QsV0FBV1ksU0FBUyxDQUFDLEVBQUU7WUFDekI7WUFFQSxPQUFPO2dCQUNMWjtnQkFDQXVCLFFBQVFmLFlBQVlBLFVBQVVSLFlBQVlNO2dCQUMxQ2tCLFVBQVVUO2dCQUNWVSxRQUFRQyxTQUFTZCxTQUFTLENBQUMsRUFBRSxFQUFFLE9BQU9OO2dCQUN0Q3FCLE9BQU9ELFNBQVNkLFNBQVMsQ0FBQyxFQUFFLEVBQUUsT0FBT047Z0JBQ3JDc0IsUUFBUTdCLGdCQUFnQkMsVUFBVUM7WUFDcEM7UUFDRjtRQUVBLElBQUlVLEtBQUtOLEtBQUssQ0FBQ0ksaUJBQWlCO1lBQzlCLE9BQU87Z0JBQ0xULFVBQVVXO1lBQ1o7UUFDRjtRQUVBLE9BQU9MO0lBQ1Q7QUFDRjtBQUVpQyxDQUNqQyw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9ub2RlLXN0YWNrLXRyYWNlLmpzPzM2MDAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEb2VzIHRoaXMgZmlsZW5hbWUgbG9vayBsaWtlIGl0J3MgcGFydCBvZiB0aGUgYXBwIGNvZGU/XG4gKi9cbmZ1bmN0aW9uIGZpbGVuYW1lSXNJbkFwcChmaWxlbmFtZSwgaXNOYXRpdmUgPSBmYWxzZSkge1xuICBjb25zdCBpc0ludGVybmFsID1cbiAgICBpc05hdGl2ZSB8fFxuICAgIChmaWxlbmFtZSAmJlxuICAgICAgLy8gSXQncyBub3QgaW50ZXJuYWwgaWYgaXQncyBhbiBhYnNvbHV0ZSBsaW51eCBwYXRoXG4gICAgICAhZmlsZW5hbWUuc3RhcnRzV2l0aCgnLycpICYmXG4gICAgICAvLyBJdCdzIG5vdCBpbnRlcm5hbCBpZiBpdCdzIGFuIGFic29sdXRlIHdpbmRvd3MgcGF0aFxuICAgICAgIWZpbGVuYW1lLmluY2x1ZGVzKCc6XFxcXCcpICYmXG4gICAgICAvLyBJdCdzIG5vdCBpbnRlcm5hbCBpZiB0aGUgcGF0aCBpcyBzdGFydGluZyB3aXRoIGEgZG90XG4gICAgICAhZmlsZW5hbWUuc3RhcnRzV2l0aCgnLicpICYmXG4gICAgICAvLyBJdCdzIG5vdCBpbnRlcm5hbCBpZiB0aGUgZnJhbWUgaGFzIGEgcHJvdG9jb2wuIEluIG5vZGUsIHRoaXMgaXMgdXN1YWxseSB0aGUgY2FzZSBpZiB0aGUgZmlsZSBnb3QgcHJlLXByb2Nlc3NlZCB3aXRoIGEgYnVuZGxlciBsaWtlIHdlYnBhY2tcbiAgICAgICFmaWxlbmFtZS5tYXRjaCgvXlthLXpBLVpdKFthLXpBLVowLTkuXFwtK10pKjpcXC9cXC8vKSk7IC8vIFNjaGVtYSBmcm9tOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzY0MTc4MlxuXG4gIC8vIGluX2FwcCBpcyBhbGwgdGhhdCdzIG5vdCBhbiBpbnRlcm5hbCBOb2RlIGZ1bmN0aW9uIG9yIGEgbW9kdWxlIHdpdGhpbiBub2RlX21vZHVsZXNcbiAgLy8gbm90ZSB0aGF0IGlzTmF0aXZlIGFwcGVhcnMgdG8gcmV0dXJuIHRydWUgZXZlbiBmb3Igbm9kZSBjb3JlIGxpYnJhcmllc1xuICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9yYXZlbi1ub2RlL2lzc3Vlcy8xNzZcblxuICByZXR1cm4gIWlzSW50ZXJuYWwgJiYgZmlsZW5hbWUgIT09IHVuZGVmaW5lZCAmJiAhZmlsZW5hbWUuaW5jbHVkZXMoJ25vZGVfbW9kdWxlcy8nKTtcbn1cblxuLyoqIE5vZGUgU3RhY2sgbGluZSBwYXJzZXIgKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiBub2RlKGdldE1vZHVsZSkge1xuICBjb25zdCBGSUxFTkFNRV9NQVRDSCA9IC9eXFxzKlstXXs0LH0kLztcbiAgY29uc3QgRlVMTF9NQVRDSCA9IC9hdCAoPzphc3luYyApPyg/OiguKz8pXFxzK1xcKCk/KD86KC4rKTooXFxkKyk6KFxcZCspP3woW14pXSspKVxcKT8vO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gIHJldHVybiAobGluZSkgPT4ge1xuICAgIGNvbnN0IGxpbmVNYXRjaCA9IGxpbmUubWF0Y2goRlVMTF9NQVRDSCk7XG5cbiAgICBpZiAobGluZU1hdGNoKSB7XG4gICAgICBsZXQgb2JqZWN0O1xuICAgICAgbGV0IG1ldGhvZDtcbiAgICAgIGxldCBmdW5jdGlvbk5hbWU7XG4gICAgICBsZXQgdHlwZU5hbWU7XG4gICAgICBsZXQgbWV0aG9kTmFtZTtcblxuICAgICAgaWYgKGxpbmVNYXRjaFsxXSkge1xuICAgICAgICBmdW5jdGlvbk5hbWUgPSBsaW5lTWF0Y2hbMV07XG5cbiAgICAgICAgbGV0IG1ldGhvZFN0YXJ0ID0gZnVuY3Rpb25OYW1lLmxhc3RJbmRleE9mKCcuJyk7XG4gICAgICAgIGlmIChmdW5jdGlvbk5hbWVbbWV0aG9kU3RhcnQgLSAxXSA9PT0gJy4nKSB7XG4gICAgICAgICAgbWV0aG9kU3RhcnQtLTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtZXRob2RTdGFydCA+IDApIHtcbiAgICAgICAgICBvYmplY3QgPSBmdW5jdGlvbk5hbWUuc2xpY2UoMCwgbWV0aG9kU3RhcnQpO1xuICAgICAgICAgIG1ldGhvZCA9IGZ1bmN0aW9uTmFtZS5zbGljZShtZXRob2RTdGFydCArIDEpO1xuICAgICAgICAgIGNvbnN0IG9iamVjdEVuZCA9IG9iamVjdC5pbmRleE9mKCcuTW9kdWxlJyk7XG4gICAgICAgICAgaWYgKG9iamVjdEVuZCA+IDApIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uTmFtZSA9IGZ1bmN0aW9uTmFtZS5zbGljZShvYmplY3RFbmQgKyAxKTtcbiAgICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5zbGljZSgwLCBvYmplY3RFbmQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0eXBlTmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgaWYgKG1ldGhvZCkge1xuICAgICAgICB0eXBlTmFtZSA9IG9iamVjdDtcbiAgICAgICAgbWV0aG9kTmFtZSA9IG1ldGhvZDtcbiAgICAgIH1cblxuICAgICAgaWYgKG1ldGhvZCA9PT0gJzxhbm9ueW1vdXM+Jykge1xuICAgICAgICBtZXRob2ROYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICBmdW5jdGlvbk5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChmdW5jdGlvbk5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtZXRob2ROYW1lID0gbWV0aG9kTmFtZSB8fCAnPGFub255bW91cz4nO1xuICAgICAgICBmdW5jdGlvbk5hbWUgPSB0eXBlTmFtZSA/IGAke3R5cGVOYW1lfS4ke21ldGhvZE5hbWV9YCA6IG1ldGhvZE5hbWU7XG4gICAgICB9XG5cbiAgICAgIGxldCBmaWxlbmFtZSA9IGxpbmVNYXRjaFsyXSAmJiBsaW5lTWF0Y2hbMl0uc3RhcnRzV2l0aCgnZmlsZTovLycpID8gbGluZU1hdGNoWzJdLnNsaWNlKDcpIDogbGluZU1hdGNoWzJdO1xuICAgICAgY29uc3QgaXNOYXRpdmUgPSBsaW5lTWF0Y2hbNV0gPT09ICduYXRpdmUnO1xuXG4gICAgICBpZiAoIWZpbGVuYW1lICYmIGxpbmVNYXRjaFs1XSAmJiAhaXNOYXRpdmUpIHtcbiAgICAgICAgZmlsZW5hbWUgPSBsaW5lTWF0Y2hbNV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZpbGVuYW1lLFxuICAgICAgICBtb2R1bGU6IGdldE1vZHVsZSA/IGdldE1vZHVsZShmaWxlbmFtZSkgOiB1bmRlZmluZWQsXG4gICAgICAgIGZ1bmN0aW9uOiBmdW5jdGlvbk5hbWUsXG4gICAgICAgIGxpbmVubzogcGFyc2VJbnQobGluZU1hdGNoWzNdLCAxMCkgfHwgdW5kZWZpbmVkLFxuICAgICAgICBjb2xubzogcGFyc2VJbnQobGluZU1hdGNoWzRdLCAxMCkgfHwgdW5kZWZpbmVkLFxuICAgICAgICBpbl9hcHA6IGZpbGVuYW1lSXNJbkFwcChmaWxlbmFtZSwgaXNOYXRpdmUpLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAobGluZS5tYXRjaChGSUxFTkFNRV9NQVRDSCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZpbGVuYW1lOiBsaW5lLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xufVxuXG5leHBvcnQgeyBmaWxlbmFtZUlzSW5BcHAsIG5vZGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGUtc3RhY2stdHJhY2UuanMubWFwXG4iXSwibmFtZXMiOlsiZmlsZW5hbWVJc0luQXBwIiwiZmlsZW5hbWUiLCJpc05hdGl2ZSIsImlzSW50ZXJuYWwiLCJzdGFydHNXaXRoIiwiaW5jbHVkZXMiLCJtYXRjaCIsInVuZGVmaW5lZCIsIm5vZGUiLCJnZXRNb2R1bGUiLCJGSUxFTkFNRV9NQVRDSCIsIkZVTExfTUFUQ0giLCJsaW5lIiwibGluZU1hdGNoIiwib2JqZWN0IiwibWV0aG9kIiwiZnVuY3Rpb25OYW1lIiwidHlwZU5hbWUiLCJtZXRob2ROYW1lIiwibWV0aG9kU3RhcnQiLCJsYXN0SW5kZXhPZiIsInNsaWNlIiwib2JqZWN0RW5kIiwiaW5kZXhPZiIsIm1vZHVsZSIsImZ1bmN0aW9uIiwibGluZW5vIiwicGFyc2VJbnQiLCJjb2xubyIsImluX2FwcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/node-stack-trace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/node.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/node.js ***!
  \**************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dynamicRequire: () => (/* binding */ dynamicRequire),\n/* harmony export */   isNodeEnv: () => (/* binding */ isNodeEnv),\n/* harmony export */   loadModule: () => (/* binding */ loadModule)\n/* harmony export */ });\n/* harmony import */ var _env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./env.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/env.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */ /**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */ function isNodeEnv() {\n    // explicitly check for browser bundles as those can be optimized statically\n    // by terser/rollup.\n    return !(0,_env_js__WEBPACK_IMPORTED_MODULE_0__.isBrowserBundle)() && Object.prototype.toString.call(typeof process !== \"undefined\" ? process : 0) === \"[object process]\";\n}\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */ // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nfunction dynamicRequire(mod, request) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return mod.require(request);\n}\n/**\n * Helper for dynamically loading module that should work with linked dependencies.\n * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`\n * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during\n * build time. `require.resolve` is also not available in any other way, so we cannot create,\n * a fake helper like we do with `dynamicRequire`.\n *\n * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.\n * That is to mimic the behavior of `require.resolve` exactly.\n *\n * @param moduleName module name to require\n * @returns possibly required module\n */ function loadModule(moduleName) {\n    let mod;\n    try {\n        mod = dynamicRequire(module, moduleName);\n    } catch (e) {\n    // no-empty\n    }\n    try {\n        const { cwd } = dynamicRequire(module, \"process\");\n        mod = dynamicRequire(module, `${cwd()}/node_modules/${moduleName}`);\n    } catch (e) {\n    // no-empty\n    }\n    return mod;\n}\n //# sourceMappingURL=node.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9ub2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTJDO0FBRTNDOzs7Q0FHQyxHQUVEOzs7O0NBSUMsR0FDRCxTQUFTQztJQUNQLDRFQUE0RTtJQUM1RSxvQkFBb0I7SUFDcEIsT0FDRSxDQUFDRCx3REFBZUEsTUFDaEJFLE9BQU9DLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDQyxJQUFJLENBQUMsT0FBT0MsWUFBWSxjQUFjQSxVQUFVLE9BQU87QUFFckY7QUFFQTs7OztDQUlDLEdBQ0QsaUhBQWlIO0FBQ2pILFNBQVNDLGVBQWVDLEdBQUcsRUFBRUMsT0FBTztJQUNsQyxzRUFBc0U7SUFDdEUsT0FBT0QsSUFBSUUsT0FBTyxDQUFDRDtBQUNyQjtBQUVBOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUNELFNBQVNFLFdBQVdDLFVBQVU7SUFDNUIsSUFBSUo7SUFFSixJQUFJO1FBQ0ZBLE1BQU1ELGVBQWVNLFFBQVFEO0lBQy9CLEVBQUUsT0FBT0UsR0FBRztJQUNWLFdBQVc7SUFDYjtJQUVBLElBQUk7UUFDRixNQUFNLEVBQUVDLEdBQUcsRUFBRSxHQUFHUixlQUFlTSxRQUFRO1FBQ3ZDTCxNQUFNRCxlQUFlTSxRQUFRLENBQUMsRUFBRUUsTUFBTSxjQUFjLEVBQUVILFdBQVcsQ0FBQztJQUNwRSxFQUFFLE9BQU9FLEdBQUc7SUFDVixXQUFXO0lBQ2I7SUFFQSxPQUFPTjtBQUNUO0FBRWlELENBQ2pELGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5LWludGVybmFsL3RyYWNpbmcvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL25vZGUuanM/YzBiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0Jyb3dzZXJCdW5kbGUgfSBmcm9tICcuL2Vudi5qcyc7XG5cbi8qKlxuICogTk9URTogSW4gb3JkZXIgdG8gYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLCBpZiB5b3UgYWRkIGEgZnVuY3Rpb24gdG8gdGhpcyBtb2R1bGUgYW5kIGl0IG5lZWRzIHRvIHByaW50IHNvbWV0aGluZyxcbiAqIHlvdSBtdXN0IGVpdGhlciBhKSB1c2UgYGNvbnNvbGUubG9nYCByYXRoZXIgdGhhbiB0aGUgbG9nZ2VyLCBvciBiKSBwdXQgeW91ciBmdW5jdGlvbiBlbHNld2hlcmUuXG4gKi9cblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB3ZSdyZSBpbiB0aGUgTm9kZS5qcyBvciBCcm93c2VyIGVudmlyb25tZW50XG4gKlxuICogQHJldHVybnMgQW5zd2VyIHRvIGdpdmVuIHF1ZXN0aW9uXG4gKi9cbmZ1bmN0aW9uIGlzTm9kZUVudigpIHtcbiAgLy8gZXhwbGljaXRseSBjaGVjayBmb3IgYnJvd3NlciBidW5kbGVzIGFzIHRob3NlIGNhbiBiZSBvcHRpbWl6ZWQgc3RhdGljYWxseVxuICAvLyBieSB0ZXJzZXIvcm9sbHVwLlxuICByZXR1cm4gKFxuICAgICFpc0Jyb3dzZXJCdW5kbGUoKSAmJlxuICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgPyBwcm9jZXNzIDogMCkgPT09ICdbb2JqZWN0IHByb2Nlc3NdJ1xuICApO1xufVxuXG4vKipcbiAqIFJlcXVpcmVzIGEgbW9kdWxlIHdoaWNoIGlzIHByb3RlY3RlZCBhZ2FpbnN0IGJ1bmRsZXIgbWluaWZpY2F0aW9uLlxuICpcbiAqIEBwYXJhbSByZXF1ZXN0IFRoZSBtb2R1bGUgcGF0aCB0byByZXNvbHZlXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBkeW5hbWljUmVxdWlyZShtb2QsIHJlcXVlc3QpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICByZXR1cm4gbW9kLnJlcXVpcmUocmVxdWVzdCk7XG59XG5cbi8qKlxuICogSGVscGVyIGZvciBkeW5hbWljYWxseSBsb2FkaW5nIG1vZHVsZSB0aGF0IHNob3VsZCB3b3JrIHdpdGggbGlua2VkIGRlcGVuZGVuY2llcy5cbiAqIFRoZSBwcm9ibGVtIGlzIHRoYXQgd2UgX3Nob3VsZF8gYmUgdXNpbmcgYHJlcXVpcmUocmVxdWlyZS5yZXNvbHZlKG1vZHVsZU5hbWUsIHsgcGF0aHM6IFtjd2QoKV0gfSkpYFxuICogSG93ZXZlciBpdCdzIF9ub3QgcG9zc2libGVfIHRvIGRvIHRoYXQgd2l0aCBXZWJwYWNrLCBhcyBpdCBoYXMgdG8ga25vdyBhbGwgdGhlIGRlcGVuZGVuY2llcyBkdXJpbmdcbiAqIGJ1aWxkIHRpbWUuIGByZXF1aXJlLnJlc29sdmVgIGlzIGFsc28gbm90IGF2YWlsYWJsZSBpbiBhbnkgb3RoZXIgd2F5LCBzbyB3ZSBjYW5ub3QgY3JlYXRlLFxuICogYSBmYWtlIGhlbHBlciBsaWtlIHdlIGRvIHdpdGggYGR5bmFtaWNSZXF1aXJlYC5cbiAqXG4gKiBXZSBhbHdheXMgcHJlZmVyIHRvIHVzZSBsb2NhbCBwYWNrYWdlLCB0aHVzIHRoZSB2YWx1ZSBpcyBub3QgcmV0dXJuZWQgZWFybHkgZnJvbSBlYWNoIGB0cnkvY2F0Y2hgIGJsb2NrLlxuICogVGhhdCBpcyB0byBtaW1pYyB0aGUgYmVoYXZpb3Igb2YgYHJlcXVpcmUucmVzb2x2ZWAgZXhhY3RseS5cbiAqXG4gKiBAcGFyYW0gbW9kdWxlTmFtZSBtb2R1bGUgbmFtZSB0byByZXF1aXJlXG4gKiBAcmV0dXJucyBwb3NzaWJseSByZXF1aXJlZCBtb2R1bGVcbiAqL1xuZnVuY3Rpb24gbG9hZE1vZHVsZShtb2R1bGVOYW1lKSB7XG4gIGxldCBtb2Q7XG5cbiAgdHJ5IHtcbiAgICBtb2QgPSBkeW5hbWljUmVxdWlyZShtb2R1bGUsIG1vZHVsZU5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gbm8tZW1wdHlcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBjd2QgfSA9IGR5bmFtaWNSZXF1aXJlKG1vZHVsZSwgJ3Byb2Nlc3MnKTtcbiAgICBtb2QgPSBkeW5hbWljUmVxdWlyZShtb2R1bGUsIGAke2N3ZCgpfS9ub2RlX21vZHVsZXMvJHttb2R1bGVOYW1lfWApIDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIG5vLWVtcHR5XG4gIH1cblxuICByZXR1cm4gbW9kO1xufVxuXG5leHBvcnQgeyBkeW5hbWljUmVxdWlyZSwgaXNOb2RlRW52LCBsb2FkTW9kdWxlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLmpzLm1hcFxuIl0sIm5hbWVzIjpbImlzQnJvd3NlckJ1bmRsZSIsImlzTm9kZUVudiIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsInByb2Nlc3MiLCJkeW5hbWljUmVxdWlyZSIsIm1vZCIsInJlcXVlc3QiLCJyZXF1aXJlIiwibG9hZE1vZHVsZSIsIm1vZHVsZU5hbWUiLCJtb2R1bGUiLCJlIiwiY3dkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/normalize.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/normalize.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   normalizeToSize: () => (/* binding */ normalizeToSize),\n/* harmony export */   walk: () => (/* binding */ visit)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _memo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./memo.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/memo.js\");\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _stacktrace_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stacktrace.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/stacktrace.js\");\n\n\n\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction normalize(input, depth = 100, maxProperties = +Infinity) {\n    try {\n        // since we're at the outermost level, we don't provide a key\n        return visit(\"\", input, depth, maxProperties);\n    } catch (err) {\n        return {\n            ERROR: `**non-serializable** (${err})`\n        };\n    }\n}\n/** JSDoc */ function normalizeToSize(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nobject, // Default Node.js REPL depth\ndepth = 3, // 100kB, as 200kB is max payload size, so half sounds reasonable\nmaxSize = 100 * 1024) {\n    const normalized = normalize(object, depth);\n    if (jsonSize(normalized) > maxSize) {\n        return normalizeToSize(object, depth - 1, maxSize);\n    }\n    return normalized;\n}\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */ function visit(key, value, depth = +Infinity, maxProperties = +Infinity, memo = (0,_memo_js__WEBPACK_IMPORTED_MODULE_0__.memoBuilder)()) {\n    const [memoize, unmemoize] = memo;\n    // Get the simple cases out of the way first\n    if (value == null || // this matches null and undefined -> eqeq not eqeqeq\n    [\n        \"number\",\n        \"boolean\",\n        \"string\"\n    ].includes(typeof value) && !(0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isNaN)(value)) {\n        return value;\n    }\n    const stringified = stringifyValue(key, value);\n    // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n    // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n    if (!stringified.startsWith(\"[object \")) {\n        return stringified;\n    }\n    // From here on, we can assert that `value` is either an object or an array.\n    // Do not normalize objects that we know have already been normalized. As a general rule, the\n    // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n    // have already been normalized.\n    if (value[\"__sentry_skip_normalization__\"]) {\n        return value;\n    }\n    // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n    // We keep a certain amount of depth.\n    // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n    const remainingDepth = typeof value[\"__sentry_override_normalization_depth__\"] === \"number\" ? value[\"__sentry_override_normalization_depth__\"] : depth;\n    // We're also done if we've reached the max depth\n    if (remainingDepth === 0) {\n        // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n        return stringified.replace(\"object \", \"\");\n    }\n    // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n    if (memoize(value)) {\n        return \"[Circular ~]\";\n    }\n    // If the value has a `toJSON` method, we call it to extract more information\n    const valueWithToJSON = value;\n    if (valueWithToJSON && typeof valueWithToJSON.toJSON === \"function\") {\n        try {\n            const jsonValue = valueWithToJSON.toJSON();\n            // We need to normalize the return value of `.toJSON()` in case it has circular references\n            return visit(\"\", jsonValue, remainingDepth - 1, maxProperties, memo);\n        } catch (err) {\n        // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n        }\n    }\n    // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n    // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n    // property/entry, and keep track of the number of items we add to it.\n    const normalized = Array.isArray(value) ? [] : {};\n    let numAdded = 0;\n    // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n    // properties are non-enumerable and otherwise would get missed.\n    const visitable = (0,_object_js__WEBPACK_IMPORTED_MODULE_2__.convertToPlainObject)(value);\n    for(const visitKey in visitable){\n        // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n        if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n            continue;\n        }\n        if (numAdded >= maxProperties) {\n            normalized[visitKey] = \"[MaxProperties ~]\";\n            break;\n        }\n        // Recursively visit all the child nodes\n        const visitValue = visitable[visitKey];\n        normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo);\n        numAdded++;\n    }\n    // Once we've visited all the branches, remove the parent from memo storage\n    unmemoize(value);\n    // Return accumulated values\n    return normalized;\n}\n/* eslint-disable complexity */ /**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */ function stringifyValue(key, // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n// our internal use, it'll do\nvalue) {\n    try {\n        if (key === \"domain\" && value && typeof value === \"object\" && value._events) {\n            return \"[Domain]\";\n        }\n        if (key === \"domainEmitter\") {\n            return \"[DomainEmitter]\";\n        }\n        // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n        // which won't throw if they are not present.\n        if (typeof global !== \"undefined\" && value === global) {\n            return \"[Global]\";\n        }\n        // eslint-disable-next-line no-restricted-globals\n        if (false) {}\n        // eslint-disable-next-line no-restricted-globals\n        if (typeof document !== \"undefined\" && value === document) {\n            return \"[Document]\";\n        }\n        if ((0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isVueViewModel)(value)) {\n            return \"[VueViewModel]\";\n        }\n        // React's SyntheticEvent thingy\n        if ((0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isSyntheticEvent)(value)) {\n            return \"[SyntheticEvent]\";\n        }\n        if (typeof value === \"number\" && value !== value) {\n            return \"[NaN]\";\n        }\n        if (typeof value === \"function\") {\n            return `[Function: ${(0,_stacktrace_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(value)}]`;\n        }\n        if (typeof value === \"symbol\") {\n            return `[${String(value)}]`;\n        }\n        // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n        if (typeof value === \"bigint\") {\n            return `[BigInt: ${String(value)}]`;\n        }\n        // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n        // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n        // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n        // we can make sure that only plain objects come out that way.\n        const objName = getConstructorName(value);\n        // Handle HTML Elements\n        if (/^HTML(\\w*)Element$/.test(objName)) {\n            return `[HTMLElement: ${objName}]`;\n        }\n        return `[object ${objName}]`;\n    } catch (err) {\n        return `**non-serializable** (${err})`;\n    }\n}\n/* eslint-enable complexity */ function getConstructorName(value) {\n    const prototype = Object.getPrototypeOf(value);\n    return prototype ? prototype.constructor.name : \"null prototype\";\n}\n/** Calculates bytes size of input string */ function utf8Length(value) {\n    // eslint-disable-next-line no-bitwise\n    return ~-encodeURI(value).split(/%..|./).length;\n}\n/** Calculates bytes size of input object */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value) {\n    return utf8Length(JSON.stringify(value));\n}\n //# sourceMappingURL=normalize.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/normalize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/object.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/object.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addNonEnumerableProperty: () => (/* binding */ addNonEnumerableProperty),\n/* harmony export */   convertToPlainObject: () => (/* binding */ convertToPlainObject),\n/* harmony export */   dropUndefinedKeys: () => (/* binding */ dropUndefinedKeys),\n/* harmony export */   extractExceptionKeysForMessage: () => (/* binding */ extractExceptionKeysForMessage),\n/* harmony export */   fill: () => (/* binding */ fill),\n/* harmony export */   getOriginalFunction: () => (/* binding */ getOriginalFunction),\n/* harmony export */   markFunctionWrapped: () => (/* binding */ markFunctionWrapped),\n/* harmony export */   objectify: () => (/* binding */ objectify),\n/* harmony export */   urlEncode: () => (/* binding */ urlEncode)\n/* harmony export */ });\n/* harmony import */ var _browser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./browser.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/browser.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/debug-build.js\");\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./string.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/string.js\");\n\n\n\n\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */ function fill(source, name, replacementFactory) {\n    if (!(name in source)) {\n        return;\n    }\n    const original = source[name];\n    const wrapped = replacementFactory(original);\n    // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n    // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n    if (typeof wrapped === \"function\") {\n        markFunctionWrapped(wrapped, original);\n    }\n    source[name] = wrapped;\n}\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */ function addNonEnumerableProperty(obj, name, value) {\n    try {\n        Object.defineProperty(obj, name, {\n            // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n            value: value,\n            writable: true,\n            configurable: true\n        });\n    } catch (o_O) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Failed to add non-enumerable property \"${name}\" to object`, obj);\n    }\n}\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */ function markFunctionWrapped(wrapped, original) {\n    try {\n        const proto = original.prototype || {};\n        wrapped.prototype = original.prototype = proto;\n        addNonEnumerableProperty(wrapped, \"__sentry_original__\", original);\n    } catch (o_O) {} // eslint-disable-line no-empty\n}\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */ function getOriginalFunction(func) {\n    return func.__sentry_original__;\n}\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */ function urlEncode(object) {\n    return Object.keys(object).map((key)=>`${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`).join(\"&\");\n}\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argurment itself, when value is neither an Event nor\n *  an Error.\n */ function convertToPlainObject(value) {\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isError)(value)) {\n        return {\n            message: value.message,\n            name: value.name,\n            stack: value.stack,\n            ...getOwnProperties(value)\n        };\n    } else if ((0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isEvent)(value)) {\n        const newObj = {\n            type: value.type,\n            target: serializeEventTarget(value.target),\n            currentTarget: serializeEventTarget(value.currentTarget),\n            ...getOwnProperties(value)\n        };\n        if (typeof CustomEvent !== \"undefined\" && (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isInstanceOf)(value, CustomEvent)) {\n            newObj.detail = value.detail;\n        }\n        return newObj;\n    } else {\n        return value;\n    }\n}\n/** Creates a string representation of the target of an `Event` object */ function serializeEventTarget(target) {\n    try {\n        return (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isElement)(target) ? (0,_browser_js__WEBPACK_IMPORTED_MODULE_3__.htmlTreeAsString)(target) : Object.prototype.toString.call(target);\n    } catch (_oO) {\n        return \"<unknown>\";\n    }\n}\n/** Filters out all but an object's own properties */ function getOwnProperties(obj) {\n    if (typeof obj === \"object\" && obj !== null) {\n        const extractedProps = {};\n        for(const property in obj){\n            if (Object.prototype.hasOwnProperty.call(obj, property)) {\n                extractedProps[property] = obj[property];\n            }\n        }\n        return extractedProps;\n    } else {\n        return {};\n    }\n}\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */ function extractExceptionKeysForMessage(exception, maxLength = 40) {\n    const keys = Object.keys(convertToPlainObject(exception));\n    keys.sort();\n    if (!keys.length) {\n        return \"[object has no keys]\";\n    }\n    if (keys[0].length >= maxLength) {\n        return (0,_string_js__WEBPACK_IMPORTED_MODULE_4__.truncate)(keys[0], maxLength);\n    }\n    for(let includedKeys = keys.length; includedKeys > 0; includedKeys--){\n        const serialized = keys.slice(0, includedKeys).join(\", \");\n        if (serialized.length > maxLength) {\n            continue;\n        }\n        if (includedKeys === keys.length) {\n            return serialized;\n        }\n        return (0,_string_js__WEBPACK_IMPORTED_MODULE_4__.truncate)(serialized, maxLength);\n    }\n    return \"\";\n}\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n */ function dropUndefinedKeys(inputValue) {\n    // This map keeps track of what already visited nodes map to.\n    // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n    // references as the input object.\n    const memoizationMap = new Map();\n    // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n    return _dropUndefinedKeys(inputValue, memoizationMap);\n}\nfunction _dropUndefinedKeys(inputValue, memoizationMap) {\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(inputValue)) {\n        // If this node has already been visited due to a circular reference, return the object it was mapped to in the new object\n        const memoVal = memoizationMap.get(inputValue);\n        if (memoVal !== undefined) {\n            return memoVal;\n        }\n        const returnValue = {};\n        // Store the mapping of this value in case we visit it again, in case of circular data\n        memoizationMap.set(inputValue, returnValue);\n        for (const key of Object.keys(inputValue)){\n            if (typeof inputValue[key] !== \"undefined\") {\n                returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);\n            }\n        }\n        return returnValue;\n    }\n    if (Array.isArray(inputValue)) {\n        // If this node has already been visited due to a circular reference, return the array it was mapped to in the new object\n        const memoVal = memoizationMap.get(inputValue);\n        if (memoVal !== undefined) {\n            return memoVal;\n        }\n        const returnValue = [];\n        // Store the mapping of this value in case we visit it again, in case of circular data\n        memoizationMap.set(inputValue, returnValue);\n        inputValue.forEach((item)=>{\n            returnValue.push(_dropUndefinedKeys(item, memoizationMap));\n        });\n        return returnValue;\n    }\n    return inputValue;\n}\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */ function objectify(wat) {\n    let objectified;\n    switch(true){\n        case wat === undefined || wat === null:\n            objectified = new String(wat);\n            break;\n        // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n        // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n        // an object in order to wrap it.\n        case typeof wat === \"symbol\" || typeof wat === \"bigint\":\n            objectified = Object(wat);\n            break;\n        // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n        case (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isPrimitive)(wat):\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            objectified = new wat.constructor(wat);\n            break;\n        // by process of elimination, at this point we know that `wat` must already be an object\n        default:\n            objectified = wat;\n            break;\n    }\n    return objectified;\n}\n //# sourceMappingURL=object.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/object.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/requestdata.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/requestdata.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_USER_INCLUDES: () => (/* binding */ DEFAULT_USER_INCLUDES),\n/* harmony export */   addRequestDataToEvent: () => (/* binding */ addRequestDataToEvent),\n/* harmony export */   addRequestDataToTransaction: () => (/* binding */ addRequestDataToTransaction),\n/* harmony export */   extractPathForTransaction: () => (/* binding */ extractPathForTransaction),\n/* harmony export */   extractRequestData: () => (/* binding */ extractRequestData),\n/* harmony export */   winterCGHeadersToDict: () => (/* binding */ winterCGHeadersToDict),\n/* harmony export */   winterCGRequestToRequestData: () => (/* binding */ winterCGRequestToRequestData)\n/* harmony export */ });\n/* harmony import */ var _cookie_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cookie.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/cookie.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/debug-build.js\");\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./logger.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _normalize_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./normalize.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/normalize.js\");\n/* harmony import */ var _url_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./url.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/url.js\");\n\n\n\n\n\n\nconst DEFAULT_INCLUDES = {\n    ip: false,\n    request: true,\n    transaction: true,\n    user: true\n};\nconst DEFAULT_REQUEST_INCLUDES = [\n    \"cookies\",\n    \"data\",\n    \"headers\",\n    \"method\",\n    \"query_string\",\n    \"url\"\n];\nconst DEFAULT_USER_INCLUDES = [\n    \"id\",\n    \"username\",\n    \"email\"\n];\n/**\n * Sets parameterized route as transaction name e.g.: `GET /users/:id`\n * Also adds more context data on the transaction from the request\n */ function addRequestDataToTransaction(transaction, req, deps) {\n    if (!transaction) return;\n    if (!transaction.metadata.source || transaction.metadata.source === \"url\") {\n        // Attempt to grab a parameterized route off of the request\n        transaction.setName(...extractPathForTransaction(req, {\n            path: true,\n            method: true\n        }));\n    }\n    transaction.setData(\"url\", req.originalUrl || req.url);\n    if (req.baseUrl) {\n        transaction.setData(\"baseUrl\", req.baseUrl);\n    }\n    transaction.setData(\"query\", extractQueryParams(req, deps));\n}\n/**\n * Extracts a complete and parameterized path from the request object and uses it to construct transaction name.\n * If the parameterized transaction name cannot be extracted, we fall back to the raw URL.\n *\n * Additionally, this function determines and returns the transaction name source\n *\n * eg. GET /mountpoint/user/:id\n *\n * @param req A request object\n * @param options What to include in the transaction name (method, path, or a custom route name to be\n *                used instead of the request's route)\n *\n * @returns A tuple of the fully constructed transaction name [0] and its source [1] (can be either 'route' or 'url')\n */ function extractPathForTransaction(req, options = {}) {\n    const method = req.method && req.method.toUpperCase();\n    let path = \"\";\n    let source = \"url\";\n    // Check to see if there's a parameterized route we can use (as there is in Express)\n    if (options.customRoute || req.route) {\n        path = options.customRoute || `${req.baseUrl || \"\"}${req.route && req.route.path}`;\n        source = \"route\";\n    } else if (req.originalUrl || req.url) {\n        path = (0,_url_js__WEBPACK_IMPORTED_MODULE_0__.stripUrlQueryAndFragment)(req.originalUrl || req.url || \"\");\n    }\n    let name = \"\";\n    if (options.method && method) {\n        name += method;\n    }\n    if (options.method && options.path) {\n        name += \" \";\n    }\n    if (options.path && path) {\n        name += path;\n    }\n    return [\n        name,\n        source\n    ];\n}\n/** JSDoc */ function extractTransaction(req, type) {\n    switch(type){\n        case \"path\":\n            {\n                return extractPathForTransaction(req, {\n                    path: true\n                })[0];\n            }\n        case \"handler\":\n            {\n                return req.route && req.route.stack && req.route.stack[0] && req.route.stack[0].name || \"<anonymous>\";\n            }\n        case \"methodPath\":\n        default:\n            {\n                // if exist _reconstructedRoute return that path instead of route.path\n                const customRoute = req._reconstructedRoute ? req._reconstructedRoute : undefined;\n                return extractPathForTransaction(req, {\n                    path: true,\n                    method: true,\n                    customRoute\n                })[0];\n            }\n    }\n}\n/** JSDoc */ function extractUserData(user, keys) {\n    const extractedUser = {};\n    const attributes = Array.isArray(keys) ? keys : DEFAULT_USER_INCLUDES;\n    attributes.forEach((key)=>{\n        if (user && key in user) {\n            extractedUser[key] = user[key];\n        }\n    });\n    return extractedUser;\n}\n/**\n * Normalize data from the request object, accounting for framework differences.\n *\n * @param req The request object from which to extract data\n * @param options.include An optional array of keys to include in the normalized data. Defaults to\n * DEFAULT_REQUEST_INCLUDES if not provided.\n * @param options.deps Injected, platform-specific dependencies\n * @returns An object containing normalized request data\n */ function extractRequestData(req, options) {\n    const { include = DEFAULT_REQUEST_INCLUDES, deps } = options || {};\n    const requestData = {};\n    // headers:\n    //   node, express, koa, nextjs: req.headers\n    const headers = req.headers || {};\n    // method:\n    //   node, express, koa, nextjs: req.method\n    const method = req.method;\n    // host:\n    //   express: req.hostname in > 4 and req.host in < 4\n    //   koa: req.host\n    //   node, nextjs: req.headers.host\n    const host = req.hostname || req.host || headers.host || \"<no host>\";\n    // protocol:\n    //   node, nextjs: <n/a>\n    //   express, koa: req.protocol\n    const protocol = req.protocol === \"https\" || req.socket && req.socket.encrypted ? \"https\" : \"http\";\n    // url (including path and query string):\n    //   node, express: req.originalUrl\n    //   koa, nextjs: req.url\n    const originalUrl = req.originalUrl || req.url || \"\";\n    // absolute url\n    const absoluteUrl = originalUrl.startsWith(protocol) ? originalUrl : `${protocol}://${host}${originalUrl}`;\n    include.forEach((key)=>{\n        switch(key){\n            case \"headers\":\n                {\n                    requestData.headers = headers;\n                    // Remove the Cookie header in case cookie data should not be included in the event\n                    if (!include.includes(\"cookies\")) {\n                        delete requestData.headers.cookie;\n                    }\n                    break;\n                }\n            case \"method\":\n                {\n                    requestData.method = method;\n                    break;\n                }\n            case \"url\":\n                {\n                    requestData.url = absoluteUrl;\n                    break;\n                }\n            case \"cookies\":\n                {\n                    // cookies:\n                    //   node, express, koa: req.headers.cookie\n                    //   vercel, sails.js, express (w/ cookie middleware), nextjs: req.cookies\n                    requestData.cookies = // TODO (v8 / #5257): We're only sending the empty object for backwards compatibility, so the last bit can\n                    // come off in v8\n                    req.cookies || headers.cookie && (0,_cookie_js__WEBPACK_IMPORTED_MODULE_1__.parseCookie)(headers.cookie) || {};\n                    break;\n                }\n            case \"query_string\":\n                {\n                    // query string:\n                    //   node: req.url (raw)\n                    //   express, koa, nextjs: req.query\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                    requestData.query_string = extractQueryParams(req, deps);\n                    break;\n                }\n            case \"data\":\n                {\n                    if (method === \"GET\" || method === \"HEAD\") {\n                        break;\n                    }\n                    // body data:\n                    //   express, koa, nextjs: req.body\n                    //\n                    //   when using node by itself, you have to read the incoming stream(see\n                    //   https://nodejs.dev/learn/get-http-request-body-data-using-nodejs); if a user is doing that, we can't know\n                    //   where they're going to store the final result, so they'll have to capture this data themselves\n                    if (req.body !== undefined) {\n                        requestData.data = (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isString)(req.body) ? req.body : JSON.stringify((0,_normalize_js__WEBPACK_IMPORTED_MODULE_3__.normalize)(req.body));\n                    }\n                    break;\n                }\n            default:\n                {\n                    if (({}).hasOwnProperty.call(req, key)) {\n                        requestData[key] = req[key];\n                    }\n                }\n        }\n    });\n    return requestData;\n}\n/**\n * Add data from the given request to the given event\n *\n * @param event The event to which the request data will be added\n * @param req Request object\n * @param options.include Flags to control what data is included\n * @param options.deps Injected platform-specific dependencies\n * @returns The mutated `Event` object\n */ function addRequestDataToEvent(event, req, options) {\n    const include = {\n        ...DEFAULT_INCLUDES,\n        ...options && options.include\n    };\n    if (include.request) {\n        const extractedRequestData = Array.isArray(include.request) ? extractRequestData(req, {\n            include: include.request,\n            deps: options && options.deps\n        }) : extractRequestData(req, {\n            deps: options && options.deps\n        });\n        event.request = {\n            ...event.request,\n            ...extractedRequestData\n        };\n    }\n    if (include.user) {\n        const extractedUser = req.user && (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(req.user) ? extractUserData(req.user, include.user) : {};\n        if (Object.keys(extractedUser).length) {\n            event.user = {\n                ...event.user,\n                ...extractedUser\n            };\n        }\n    }\n    // client ip:\n    //   node, nextjs: req.socket.remoteAddress\n    //   express, koa: req.ip\n    if (include.ip) {\n        const ip = req.ip || req.socket && req.socket.remoteAddress;\n        if (ip) {\n            event.user = {\n                ...event.user,\n                ip_address: ip\n            };\n        }\n    }\n    if (include.transaction && !event.transaction) {\n        // TODO do we even need this anymore?\n        // TODO make this work for nextjs\n        event.transaction = extractTransaction(req, include.transaction);\n    }\n    return event;\n}\nfunction extractQueryParams(req, deps) {\n    // url (including path and query string):\n    //   node, express: req.originalUrl\n    //   koa, nextjs: req.url\n    let originalUrl = req.originalUrl || req.url || \"\";\n    if (!originalUrl) {\n        return;\n    }\n    // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and\n    // hostname on the beginning. Since the point here is just to grab the query string, it doesn't matter what we use.\n    if (originalUrl.startsWith(\"/\")) {\n        originalUrl = `http://dogs.are.great${originalUrl}`;\n    }\n    try {\n        return req.query || typeof URL !== undefined && new URL(originalUrl).search.slice(1) || // In Node 8, `URL` isn't in the global scope, so we have to use the built-in module from Node\n        deps && deps.url && deps.url.parse(originalUrl).query || undefined;\n    } catch (e2) {\n        return undefined;\n    }\n}\n/**\n * Transforms a `Headers` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into a simple key-value dict.\n * The header keys will be lower case: e.g. A \"Content-Type\" header will be stored as \"content-type\".\n */ function winterCGHeadersToDict(winterCGHeaders) {\n    const headers = {};\n    try {\n        winterCGHeaders.forEach((value, key)=>{\n            if (typeof value === \"string\") {\n                // We check that value is a string even though it might be redundant to make sure prototype pollution is not possible.\n                headers[key] = value;\n            }\n        });\n    } catch (e) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_4__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_5__.logger.warn(\"Sentry failed extracting headers from a request object. If you see this, please file an issue.\");\n    }\n    return headers;\n}\n/**\n * Converts a `Request` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into the format that the `RequestData` integration understands.\n */ function winterCGRequestToRequestData(req) {\n    const headers = winterCGHeadersToDict(req.headers);\n    return {\n        method: req.method,\n        url: req.url,\n        headers\n    };\n}\n //# sourceMappingURL=requestdata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/requestdata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/stacktrace.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/stacktrace.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createStackParser: () => (/* binding */ createStackParser),\n/* harmony export */   filenameIsInApp: () => (/* reexport safe */ _node_stack_trace_js__WEBPACK_IMPORTED_MODULE_0__.filenameIsInApp),\n/* harmony export */   getFunctionName: () => (/* binding */ getFunctionName),\n/* harmony export */   nodeStackLineParser: () => (/* binding */ nodeStackLineParser),\n/* harmony export */   stackParserFromStackParserOptions: () => (/* binding */ stackParserFromStackParserOptions),\n/* harmony export */   stripSentryFramesAndReverse: () => (/* binding */ stripSentryFramesAndReverse)\n/* harmony export */ });\n/* harmony import */ var _node_stack_trace_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node-stack-trace.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/node-stack-trace.js\");\n\n\nconst STACKTRACE_FRAME_LIMIT = 50;\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\nconst STRIP_FRAME_REGEXP = /captureMessage|captureException/;\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */ function createStackParser(...parsers) {\n    const sortedParsers = parsers.sort((a, b)=>a[0] - b[0]).map((p)=>p[1]);\n    return (stack, skipFirst = 0)=>{\n        const frames = [];\n        const lines = stack.split(\"\\n\");\n        for(let i = skipFirst; i < lines.length; i++){\n            const line = lines[i];\n            // Ignore lines over 1kb as they are unlikely to be stack frames.\n            // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n            // input size. Huge strings can result in hangs/Denial of Service:\n            // https://github.com/getsentry/sentry-javascript/issues/2286\n            if (line.length > 1024) {\n                continue;\n            }\n            // https://github.com/getsentry/sentry-javascript/issues/5459\n            // Remove webpack (error: *) wrappers\n            const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, \"$1\") : line;\n            // https://github.com/getsentry/sentry-javascript/issues/7813\n            // Skip Error: lines\n            if (cleanedLine.match(/\\S*Error: /)) {\n                continue;\n            }\n            for (const parser of sortedParsers){\n                const frame = parser(cleanedLine);\n                if (frame) {\n                    frames.push(frame);\n                    break;\n                }\n            }\n            if (frames.length >= STACKTRACE_FRAME_LIMIT) {\n                break;\n            }\n        }\n        return stripSentryFramesAndReverse(frames);\n    };\n}\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */ function stackParserFromStackParserOptions(stackParser) {\n    if (Array.isArray(stackParser)) {\n        return createStackParser(...stackParser);\n    }\n    return stackParser;\n}\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */ function stripSentryFramesAndReverse(stack) {\n    if (!stack.length) {\n        return [];\n    }\n    const localStack = Array.from(stack);\n    // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n    if (/sentryWrapped/.test(localStack[localStack.length - 1].function || \"\")) {\n        localStack.pop();\n    }\n    // Reversing in the middle of the procedure allows us to just pop the values off the stack\n    localStack.reverse();\n    // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n    if (STRIP_FRAME_REGEXP.test(localStack[localStack.length - 1].function || \"\")) {\n        localStack.pop();\n        // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Sentry syntheticException')`\n        // is produced within the hub itself, making it:\n        //\n        //   Sentry.captureException()\n        //   getCurrentHub().captureException()\n        //\n        // instead of just the top `Sentry` call itself.\n        // This forces us to possibly strip an additional frame in the exact same was as above.\n        if (STRIP_FRAME_REGEXP.test(localStack[localStack.length - 1].function || \"\")) {\n            localStack.pop();\n        }\n    }\n    return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map((frame)=>({\n            ...frame,\n            filename: frame.filename || localStack[localStack.length - 1].filename,\n            function: frame.function || \"?\"\n        }));\n}\nconst defaultFunctionName = \"<anonymous>\";\n/**\n * Safely extract function name from itself\n */ function getFunctionName(fn) {\n    try {\n        if (!fn || typeof fn !== \"function\") {\n            return defaultFunctionName;\n        }\n        return fn.name || defaultFunctionName;\n    } catch (e) {\n        // Just accessing custom props in some Selenium environments\n        // can cause a \"Permission denied\" exception (see raven-js#495).\n        return defaultFunctionName;\n    }\n}\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/utils so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */ function nodeStackLineParser(getModule) {\n    return [\n        90,\n        (0,_node_stack_trace_js__WEBPACK_IMPORTED_MODULE_0__.node)(getModule)\n    ];\n}\n //# sourceMappingURL=stacktrace.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/stacktrace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/string.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/string.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isMatchingPattern: () => (/* binding */ isMatchingPattern),\n/* harmony export */   safeJoin: () => (/* binding */ safeJoin),\n/* harmony export */   snipLine: () => (/* binding */ snipLine),\n/* harmony export */   stringMatchesSomePattern: () => (/* binding */ stringMatchesSomePattern),\n/* harmony export */   truncate: () => (/* binding */ truncate)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/is.js\");\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */ function truncate(str, max = 0) {\n    if (typeof str !== \"string\" || max === 0) {\n        return str;\n    }\n    return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */ function snipLine(line, colno) {\n    let newLine = line;\n    const lineLength = newLine.length;\n    if (lineLength <= 150) {\n        return newLine;\n    }\n    if (colno > lineLength) {\n        // eslint-disable-next-line no-param-reassign\n        colno = lineLength;\n    }\n    let start = Math.max(colno - 60, 0);\n    if (start < 5) {\n        start = 0;\n    }\n    let end = Math.min(start + 140, lineLength);\n    if (end > lineLength - 5) {\n        end = lineLength;\n    }\n    if (end === lineLength) {\n        start = Math.max(end - 140, 0);\n    }\n    newLine = newLine.slice(start, end);\n    if (start > 0) {\n        newLine = `'{snip} ${newLine}`;\n    }\n    if (end < lineLength) {\n        newLine += \" {snip}\";\n    }\n    return newLine;\n}\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction safeJoin(input, delimiter) {\n    if (!Array.isArray(input)) {\n        return \"\";\n    }\n    const output = [];\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for(let i = 0; i < input.length; i++){\n        const value = input[i];\n        try {\n            // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n            // console warnings. This happens when a Vue template is rendered with\n            // an undeclared variable, which we try to stringify, ultimately causing\n            // Vue to issue another warning which repeats indefinitely.\n            // see: https://github.com/getsentry/sentry-javascript/pull/8981\n            if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isVueViewModel)(value)) {\n                output.push(\"[VueViewModel]\");\n            } else {\n                output.push(String(value));\n            }\n        } catch (e) {\n            output.push(\"[value cannot be serialized]\");\n        }\n    }\n    return output.join(delimiter);\n}\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */ function isMatchingPattern(value, pattern, requireExactStringMatch = false) {\n    if (!(0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isString)(value)) {\n        return false;\n    }\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isRegExp)(pattern)) {\n        return pattern.test(value);\n    }\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isString)(pattern)) {\n        return requireExactStringMatch ? value === pattern : value.includes(pattern);\n    }\n    return false;\n}\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */ function stringMatchesSomePattern(testString, patterns = [], requireExactStringMatch = false) {\n    return patterns.some((pattern)=>isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\n //# sourceMappingURL=string.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/string.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/url.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/url.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getNumberOfUrlSegments: () => (/* binding */ getNumberOfUrlSegments),\n/* harmony export */   getSanitizedUrlString: () => (/* binding */ getSanitizedUrlString),\n/* harmony export */   parseUrl: () => (/* binding */ parseUrl),\n/* harmony export */   stripUrlQueryAndFragment: () => (/* binding */ stripUrlQueryAndFragment)\n/* harmony export */ });\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */ function parseUrl(url) {\n    if (!url) {\n        return {};\n    }\n    const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n    if (!match) {\n        return {};\n    }\n    // coerce to undefined values to empty string so we don't get 'undefined'\n    const query = match[6] || \"\";\n    const fragment = match[8] || \"\";\n    return {\n        host: match[4],\n        path: match[5],\n        protocol: match[2],\n        search: query,\n        hash: fragment,\n        relative: match[5] + query + fragment\n    };\n}\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */ function stripUrlQueryAndFragment(urlPath) {\n    // eslint-disable-next-line no-useless-escape\n    return urlPath.split(/[\\?#]/, 1)[0];\n}\n/**\n * Returns number of URL segments of a passed string URL.\n */ function getNumberOfUrlSegments(url) {\n    // split at '/' or at '\\/' to split regex urls correctly\n    return url.split(/\\\\?\\//).filter((s)=>s.length > 0 && s !== \",\").length;\n}\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span description\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */ function getSanitizedUrlString(url) {\n    const { protocol, host, path } = url;\n    const filteredHost = host && host// Always filter out authority\n    .replace(/^.*@/, \"[filtered]:[filtered]@\")// Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n    // TODO: Use new URL global if it exists\n    .replace(/(:80)$/, \"\").replace(/(:443)$/, \"\") || \"\";\n    return `${protocol ? `${protocol}://` : \"\"}${filteredHost}${path}`;\n}\n //# sourceMappingURL=url.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS91cmwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7Q0FNQyxHQUNELFNBQVNBLFNBQVNDLEdBQUc7SUFDbkIsSUFBSSxDQUFDQSxLQUFLO1FBQ1IsT0FBTyxDQUFDO0lBQ1Y7SUFFQSxNQUFNQyxRQUFRRCxJQUFJQyxLQUFLLENBQUM7SUFFeEIsSUFBSSxDQUFDQSxPQUFPO1FBQ1YsT0FBTyxDQUFDO0lBQ1Y7SUFFQSx5RUFBeUU7SUFDekUsTUFBTUMsUUFBUUQsS0FBSyxDQUFDLEVBQUUsSUFBSTtJQUMxQixNQUFNRSxXQUFXRixLQUFLLENBQUMsRUFBRSxJQUFJO0lBQzdCLE9BQU87UUFDTEcsTUFBTUgsS0FBSyxDQUFDLEVBQUU7UUFDZEksTUFBTUosS0FBSyxDQUFDLEVBQUU7UUFDZEssVUFBVUwsS0FBSyxDQUFDLEVBQUU7UUFDbEJNLFFBQVFMO1FBQ1JNLE1BQU1MO1FBQ05NLFVBQVVSLEtBQUssQ0FBQyxFQUFFLEdBQUdDLFFBQVFDO0lBQy9CO0FBQ0Y7QUFFQTs7Ozs7Q0FLQyxHQUNELFNBQVNPLHlCQUF5QkMsT0FBTztJQUN2Qyw2Q0FBNkM7SUFDN0MsT0FBT0EsUUFBUUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUU7QUFDckM7QUFFQTs7Q0FFQyxHQUNELFNBQVNDLHVCQUF1QmIsR0FBRztJQUNqQyx3REFBd0Q7SUFDeEQsT0FBT0EsSUFBSVksS0FBSyxDQUFDLFNBQVNFLE1BQU0sQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRUMsTUFBTSxHQUFHLEtBQUtELE1BQU0sS0FBS0MsTUFBTTtBQUN6RTtBQUVBOzs7Q0FHQyxHQUNELFNBQVNDLHNCQUFzQmpCLEdBQUc7SUFDaEMsTUFBTSxFQUFFTSxRQUFRLEVBQUVGLElBQUksRUFBRUMsSUFBSSxFQUFFLEdBQUdMO0lBRWpDLE1BQU1rQixlQUNKLFFBQ0VkLElBQ0UsOEJBQThCO0tBQzdCZSxPQUFPLENBQUMsUUFBUSx5QkFDakIsNEVBQTRFO0lBQzVFLHdDQUF3QztLQUN2Q0EsT0FBTyxDQUFDLFVBQVUsSUFDbEJBLE9BQU8sQ0FBQyxXQUFXLE9BQ3hCO0lBRUYsT0FBTyxDQUFDLEVBQUViLFdBQVcsQ0FBQyxFQUFFQSxTQUFTLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRVksYUFBYSxFQUFFYixLQUFLLENBQUM7QUFDcEU7QUFFNkYsQ0FDN0YsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnktaW50ZXJuYWwvdHJhY2luZy9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vdXJsLmpzPzZjZmMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQYXJzZXMgc3RyaW5nIGZvcm0gb2YgVVJMIGludG8gYW4gb2JqZWN0XG4gKiAvLyBib3Jyb3dlZCBmcm9tIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I2FwcGVuZGl4LUJcbiAqIC8vIGludGVudGlvbmFsbHkgdXNpbmcgcmVnZXggYW5kIG5vdCA8YS8+IGhyZWYgcGFyc2luZyB0cmljayBiZWNhdXNlIFJlYWN0IE5hdGl2ZSBhbmQgb3RoZXJcbiAqIC8vIGVudmlyb25tZW50cyB3aGVyZSBET00gbWlnaHQgbm90IGJlIGF2YWlsYWJsZVxuICogQHJldHVybnMgcGFyc2VkIFVSTCBvYmplY3RcbiAqL1xuZnVuY3Rpb24gcGFyc2VVcmwodXJsKSB7XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgY29uc3QgbWF0Y2ggPSB1cmwubWF0Y2goL14oKFteOi8/I10rKTopPyhcXC9cXC8oW14vPyNdKikpPyhbXj8jXSopKFxcPyhbXiNdKikpPygjKC4qKSk/JC8pO1xuXG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICAvLyBjb2VyY2UgdG8gdW5kZWZpbmVkIHZhbHVlcyB0byBlbXB0eSBzdHJpbmcgc28gd2UgZG9uJ3QgZ2V0ICd1bmRlZmluZWQnXG4gIGNvbnN0IHF1ZXJ5ID0gbWF0Y2hbNl0gfHwgJyc7XG4gIGNvbnN0IGZyYWdtZW50ID0gbWF0Y2hbOF0gfHwgJyc7XG4gIHJldHVybiB7XG4gICAgaG9zdDogbWF0Y2hbNF0sXG4gICAgcGF0aDogbWF0Y2hbNV0sXG4gICAgcHJvdG9jb2w6IG1hdGNoWzJdLFxuICAgIHNlYXJjaDogcXVlcnksXG4gICAgaGFzaDogZnJhZ21lbnQsXG4gICAgcmVsYXRpdmU6IG1hdGNoWzVdICsgcXVlcnkgKyBmcmFnbWVudCwgLy8gZXZlcnl0aGluZyBtaW51cyBvcmlnaW5cbiAgfTtcbn1cblxuLyoqXG4gKiBTdHJpcCB0aGUgcXVlcnkgc3RyaW5nIGFuZCBmcmFnbWVudCBvZmYgb2YgYSBnaXZlbiBVUkwgb3IgcGF0aCAoaWYgcHJlc2VudClcbiAqXG4gKiBAcGFyYW0gdXJsUGF0aCBGdWxsIFVSTCBvciBwYXRoLCBpbmNsdWRpbmcgcG9zc2libGUgcXVlcnkgc3RyaW5nIGFuZC9vciBmcmFnbWVudFxuICogQHJldHVybnMgVVJMIG9yIHBhdGggd2l0aG91dCBxdWVyeSBzdHJpbmcgb3IgZnJhZ21lbnRcbiAqL1xuZnVuY3Rpb24gc3RyaXBVcmxRdWVyeUFuZEZyYWdtZW50KHVybFBhdGgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG4gIHJldHVybiB1cmxQYXRoLnNwbGl0KC9bXFw/I10vLCAxKVswXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIG51bWJlciBvZiBVUkwgc2VnbWVudHMgb2YgYSBwYXNzZWQgc3RyaW5nIFVSTC5cbiAqL1xuZnVuY3Rpb24gZ2V0TnVtYmVyT2ZVcmxTZWdtZW50cyh1cmwpIHtcbiAgLy8gc3BsaXQgYXQgJy8nIG9yIGF0ICdcXC8nIHRvIHNwbGl0IHJlZ2V4IHVybHMgY29ycmVjdGx5XG4gIHJldHVybiB1cmwuc3BsaXQoL1xcXFw/XFwvLykuZmlsdGVyKHMgPT4gcy5sZW5ndGggPiAwICYmIHMgIT09ICcsJykubGVuZ3RoO1xufVxuXG4vKipcbiAqIFRha2VzIGEgVVJMIG9iamVjdCBhbmQgcmV0dXJucyBhIHNhbml0aXplZCBzdHJpbmcgd2hpY2ggaXMgc2FmZSB0byB1c2UgYXMgc3BhbiBkZXNjcmlwdGlvblxuICogc2VlOiBodHRwczovL2RldmVsb3Auc2VudHJ5LmRldi9zZGsvZGF0YS1oYW5kbGluZy8jc3RydWN0dXJpbmctZGF0YVxuICovXG5mdW5jdGlvbiBnZXRTYW5pdGl6ZWRVcmxTdHJpbmcodXJsKSB7XG4gIGNvbnN0IHsgcHJvdG9jb2wsIGhvc3QsIHBhdGggfSA9IHVybDtcblxuICBjb25zdCBmaWx0ZXJlZEhvc3QgPVxuICAgIChob3N0ICYmXG4gICAgICBob3N0XG4gICAgICAgIC8vIEFsd2F5cyBmaWx0ZXIgb3V0IGF1dGhvcml0eVxuICAgICAgICAucmVwbGFjZSgvXi4qQC8sICdbZmlsdGVyZWRdOltmaWx0ZXJlZF1AJylcbiAgICAgICAgLy8gRG9uJ3Qgc2hvdyBzdGFuZGFyZCA6ODAgKGh0dHApIGFuZCA6NDQzIChodHRwcykgcG9ydHMgdG8gcmVkdWNlIHRoZSBub2lzZVxuICAgICAgICAvLyBUT0RPOiBVc2UgbmV3IFVSTCBnbG9iYWwgaWYgaXQgZXhpc3RzXG4gICAgICAgIC5yZXBsYWNlKC8oOjgwKSQvLCAnJylcbiAgICAgICAgLnJlcGxhY2UoLyg6NDQzKSQvLCAnJykpIHx8XG4gICAgJyc7XG5cbiAgcmV0dXJuIGAke3Byb3RvY29sID8gYCR7cHJvdG9jb2x9Oi8vYCA6ICcnfSR7ZmlsdGVyZWRIb3N0fSR7cGF0aH1gO1xufVxuXG5leHBvcnQgeyBnZXROdW1iZXJPZlVybFNlZ21lbnRzLCBnZXRTYW5pdGl6ZWRVcmxTdHJpbmcsIHBhcnNlVXJsLCBzdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVybC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJwYXJzZVVybCIsInVybCIsIm1hdGNoIiwicXVlcnkiLCJmcmFnbWVudCIsImhvc3QiLCJwYXRoIiwicHJvdG9jb2wiLCJzZWFyY2giLCJoYXNoIiwicmVsYXRpdmUiLCJzdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQiLCJ1cmxQYXRoIiwic3BsaXQiLCJnZXROdW1iZXJPZlVybFNlZ21lbnRzIiwiZmlsdGVyIiwicyIsImxlbmd0aCIsImdldFNhbml0aXplZFVybFN0cmluZyIsImZpbHRlcmVkSG9zdCIsInJlcGxhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/url.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/worldwide.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/worldwide.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GLOBAL_OBJ: () => (/* binding */ GLOBAL_OBJ),\n/* harmony export */   getGlobalObject: () => (/* binding */ getGlobalObject),\n/* harmony export */   getGlobalSingleton: () => (/* binding */ getGlobalSingleton)\n/* harmony export */ });\n/** Internal global with common properties and Sentry extensions  */ // The code below for 'isGlobalObj' and 'GLOBAL_OBJ' was copied from core-js before modification\n// https://github.com/zloirock/core-js/blob/1b944df55282cdc99c90db5f49eb0b6eda2cc0a3/packages/core-js/internals/global.js\n// core-js has the following licence:\n//\n// Copyright (c) 2014-2022 Denis Pushkarev\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/** Returns 'obj' if it's the global object, otherwise returns undefined */ function isGlobalObj(obj) {\n    return obj && obj.Math == Math ? obj : undefined;\n}\n/** Get's the global object for the current JavaScript runtime */ const GLOBAL_OBJ = typeof globalThis == \"object\" && isGlobalObj(globalThis) || // eslint-disable-next-line no-restricted-globals\n false && 0 || typeof self == \"object\" && isGlobalObj(self) || typeof global == \"object\" && isGlobalObj(global) || function() {\n    return this;\n}() || {};\n/**\n * @deprecated Use GLOBAL_OBJ instead or WINDOW from @sentry/browser. This will be removed in v8\n */ function getGlobalObject() {\n    return GLOBAL_OBJ;\n}\n/**\n * Returns a global singleton contained in the global `__SENTRY__` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value\n * @returns the singleton\n */ function getGlobalSingleton(name, creator, obj) {\n    const gbl = obj || GLOBAL_OBJ;\n    const __SENTRY__ = gbl.__SENTRY__ = gbl.__SENTRY__ || {};\n    const singleton = __SENTRY__[name] || (__SENTRY__[name] = creator());\n    return singleton;\n}\n //# sourceMappingURL=worldwide.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS93b3JsZHdpZGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsa0VBQWtFLEdBRWxFLGdHQUFnRztBQUNoRyx5SEFBeUg7QUFDekgscUNBQXFDO0FBQ3JDLEVBQUU7QUFDRiwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLCtFQUErRTtBQUMvRSxnRkFBZ0Y7QUFDaEYsK0VBQStFO0FBQy9FLDRFQUE0RTtBQUM1RSx3RUFBd0U7QUFDeEUsMkRBQTJEO0FBQzNELEVBQUU7QUFDRiw2RUFBNkU7QUFDN0Usc0RBQXNEO0FBQ3RELEVBQUU7QUFDRiw2RUFBNkU7QUFDN0UsMkVBQTJFO0FBQzNFLDhFQUE4RTtBQUM5RSx5RUFBeUU7QUFDekUsZ0ZBQWdGO0FBQ2hGLDRFQUE0RTtBQUM1RSxnQkFBZ0I7QUFFaEIseUVBQXlFLEdBQ3pFLFNBQVNBLFlBQVlDLEdBQUc7SUFDdEIsT0FBT0EsT0FBT0EsSUFBSUMsSUFBSSxJQUFJQSxPQUFPRCxNQUFNRTtBQUN6QztBQUVBLCtEQUErRCxHQUMvRCxNQUFNQyxhQUNKLE9BQVFDLGNBQWMsWUFBWUwsWUFBWUssZUFDOUMsaURBQWlEO0FBQ2hELE1BQWlCLElBQVlMLENBQW1CTSxJQUNoRCxPQUFPQyxRQUFRLFlBQVlQLFlBQVlPLFNBQ3ZDLE9BQU9DLFVBQVUsWUFBWVIsWUFBWVEsV0FDMUM7SUFDRSxPQUFPLElBQUk7QUFDYixPQUNBLENBQUM7QUFFSDs7Q0FFQyxHQUNELFNBQVNDO0lBQ1AsT0FBT0w7QUFDVDtBQUVBOzs7Ozs7Ozs7O0NBVUMsR0FDRCxTQUFTTSxtQkFBbUJDLElBQUksRUFBRUMsT0FBTyxFQUFFWCxHQUFHO0lBQzVDLE1BQU1ZLE1BQU9aLE9BQU9HO0lBQ3BCLE1BQU1VLGFBQWNELElBQUlDLFVBQVUsR0FBR0QsSUFBSUMsVUFBVSxJQUFJLENBQUM7SUFDeEQsTUFBTUMsWUFBWUQsVUFBVSxDQUFDSCxLQUFLLElBQUtHLENBQUFBLFVBQVUsQ0FBQ0gsS0FBSyxHQUFHQyxTQUFRO0lBQ2xFLE9BQU9HO0FBQ1Q7QUFFMkQsQ0FDM0QscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnktaW50ZXJuYWwvdHJhY2luZy9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vd29ybGR3aWRlLmpzPzkyNzgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIEludGVybmFsIGdsb2JhbCB3aXRoIGNvbW1vbiBwcm9wZXJ0aWVzIGFuZCBTZW50cnkgZXh0ZW5zaW9ucyAgKi9cblxuLy8gVGhlIGNvZGUgYmVsb3cgZm9yICdpc0dsb2JhbE9iaicgYW5kICdHTE9CQUxfT0JKJyB3YXMgY29waWVkIGZyb20gY29yZS1qcyBiZWZvcmUgbW9kaWZpY2F0aW9uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9ibG9iLzFiOTQ0ZGY1NTI4MmNkYzk5YzkwZGI1ZjQ5ZWIwYjZlZGEyY2MwYTMvcGFja2FnZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzXG4vLyBjb3JlLWpzIGhhcyB0aGUgZm9sbG93aW5nIGxpY2VuY2U6XG4vL1xuLy8gQ29weXJpZ2h0IChjKSAyMDE0LTIwMjIgRGVuaXMgUHVzaGthcmV2XG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuLyoqIFJldHVybnMgJ29iaicgaWYgaXQncyB0aGUgZ2xvYmFsIG9iamVjdCwgb3RoZXJ3aXNlIHJldHVybnMgdW5kZWZpbmVkICovXG5mdW5jdGlvbiBpc0dsb2JhbE9iaihvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouTWF0aCA9PSBNYXRoID8gb2JqIDogdW5kZWZpbmVkO1xufVxuXG4vKiogR2V0J3MgdGhlIGdsb2JhbCBvYmplY3QgZm9yIHRoZSBjdXJyZW50IEphdmFTY3JpcHQgcnVudGltZSAqL1xuY29uc3QgR0xPQkFMX09CSiA9XG4gICh0eXBlb2YgZ2xvYmFsVGhpcyA9PSAnb2JqZWN0JyAmJiBpc0dsb2JhbE9iaihnbG9iYWxUaGlzKSkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiBpc0dsb2JhbE9iaih3aW5kb3cpKSB8fFxuICAodHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgaXNHbG9iYWxPYmooc2VsZikpIHx8XG4gICh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGlzR2xvYmFsT2JqKGdsb2JhbCkpIHx8XG4gIChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pKCkgfHxcbiAge307XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIEdMT0JBTF9PQkogaW5zdGVhZCBvciBXSU5ET1cgZnJvbSBAc2VudHJ5L2Jyb3dzZXIuIFRoaXMgd2lsbCBiZSByZW1vdmVkIGluIHY4XG4gKi9cbmZ1bmN0aW9uIGdldEdsb2JhbE9iamVjdCgpIHtcbiAgcmV0dXJuIEdMT0JBTF9PQkogO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBnbG9iYWwgc2luZ2xldG9uIGNvbnRhaW5lZCBpbiB0aGUgZ2xvYmFsIGBfX1NFTlRSWV9fYCBvYmplY3QuXG4gKlxuICogSWYgdGhlIHNpbmdsZXRvbiBkb2Vzbid0IGFscmVhZHkgZXhpc3QgaW4gYF9fU0VOVFJZX19gLCBpdCB3aWxsIGJlIGNyZWF0ZWQgdXNpbmcgdGhlIGdpdmVuIGZhY3RvcnlcbiAqIGZ1bmN0aW9uIGFuZCBhZGRlZCB0byB0aGUgYF9fU0VOVFJZX19gIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gbmFtZSBuYW1lIG9mIHRoZSBnbG9iYWwgc2luZ2xldG9uIG9uIF9fU0VOVFJZX19cbiAqIEBwYXJhbSBjcmVhdG9yIGNyZWF0b3IgRmFjdG9yeSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIHNpbmdsZXRvbiBpZiBpdCBkb2Vzbid0IGFscmVhZHkgZXhpc3Qgb24gYF9fU0VOVFJZX19gXG4gKiBAcGFyYW0gb2JqIChPcHRpb25hbCkgVGhlIGdsb2JhbCBvYmplY3Qgb24gd2hpY2ggdG8gbG9vayBmb3IgYF9fU0VOVFJZX19gLCBpZiBub3QgYEdMT0JBTF9PQkpgJ3MgcmV0dXJuIHZhbHVlXG4gKiBAcmV0dXJucyB0aGUgc2luZ2xldG9uXG4gKi9cbmZ1bmN0aW9uIGdldEdsb2JhbFNpbmdsZXRvbihuYW1lLCBjcmVhdG9yLCBvYmopIHtcbiAgY29uc3QgZ2JsID0gKG9iaiB8fCBHTE9CQUxfT0JKKSA7XG4gIGNvbnN0IF9fU0VOVFJZX18gPSAoZ2JsLl9fU0VOVFJZX18gPSBnYmwuX19TRU5UUllfXyB8fCB7fSk7XG4gIGNvbnN0IHNpbmdsZXRvbiA9IF9fU0VOVFJZX19bbmFtZV0gfHwgKF9fU0VOVFJZX19bbmFtZV0gPSBjcmVhdG9yKCkpO1xuICByZXR1cm4gc2luZ2xldG9uO1xufVxuXG5leHBvcnQgeyBHTE9CQUxfT0JKLCBnZXRHbG9iYWxPYmplY3QsIGdldEdsb2JhbFNpbmdsZXRvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d29ybGR3aWRlLmpzLm1hcFxuIl0sIm5hbWVzIjpbImlzR2xvYmFsT2JqIiwib2JqIiwiTWF0aCIsInVuZGVmaW5lZCIsIkdMT0JBTF9PQkoiLCJnbG9iYWxUaGlzIiwid2luZG93Iiwic2VsZiIsImdsb2JhbCIsImdldEdsb2JhbE9iamVjdCIsImdldEdsb2JhbFNpbmdsZXRvbiIsIm5hbWUiLCJjcmVhdG9yIiwiZ2JsIiwiX19TRU5UUllfXyIsInNpbmdsZXRvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/tracing/node_modules/@sentry/utils/esm/worldwide.js\n");

/***/ })

};
;