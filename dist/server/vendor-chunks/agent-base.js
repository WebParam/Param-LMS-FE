"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/agent-base";
exports.ids = ["vendor-chunks/agent-base"];
exports.modules = {

/***/ "(ssr)/./node_modules/agent-base/dist/src/index.js":
/*!***************************************************!*\
  !*** ./node_modules/agent-base/dist/src/index.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst promisify_1 = __importDefault(__webpack_require__(/*! ./promisify */ \"(ssr)/./node_modules/agent-base/dist/src/promisify.js\"));\nconst debug = debug_1.default(\"agent-base\");\nfunction isAgent(v) {\n    return Boolean(v) && typeof v.addRequest === \"function\";\n}\nfunction isSecureEndpoint() {\n    const { stack } = new Error();\n    if (typeof stack !== \"string\") return false;\n    return stack.split(\"\\n\").some((l)=>l.indexOf(\"(https.js:\") !== -1 || l.indexOf(\"node:https:\") !== -1);\n}\nfunction createAgent(callback, opts) {\n    return new createAgent.Agent(callback, opts);\n}\n(function(createAgent) {\n    /**\n     * Base `http.Agent` implementation.\n     * No pooling/keep-alive is implemented by default.\n     *\n     * @param {Function} callback\n     * @api public\n     */ class Agent extends events_1.EventEmitter {\n        constructor(callback, _opts){\n            super();\n            let opts = _opts;\n            if (typeof callback === \"function\") {\n                this.callback = callback;\n            } else if (callback) {\n                opts = callback;\n            }\n            // Timeout for the socket to be returned from the callback\n            this.timeout = null;\n            if (opts && typeof opts.timeout === \"number\") {\n                this.timeout = opts.timeout;\n            }\n            // These aren't actually used by `agent-base`, but are required\n            // for the TypeScript definition files in `@types/node` :/\n            this.maxFreeSockets = 1;\n            this.maxSockets = 1;\n            this.maxTotalSockets = Infinity;\n            this.sockets = {};\n            this.freeSockets = {};\n            this.requests = {};\n            this.options = {};\n        }\n        get defaultPort() {\n            if (typeof this.explicitDefaultPort === \"number\") {\n                return this.explicitDefaultPort;\n            }\n            return isSecureEndpoint() ? 443 : 80;\n        }\n        set defaultPort(v) {\n            this.explicitDefaultPort = v;\n        }\n        get protocol() {\n            if (typeof this.explicitProtocol === \"string\") {\n                return this.explicitProtocol;\n            }\n            return isSecureEndpoint() ? \"https:\" : \"http:\";\n        }\n        set protocol(v) {\n            this.explicitProtocol = v;\n        }\n        callback(req, opts, fn) {\n            throw new Error('\"agent-base\" has no default implementation, you must subclass and override `callback()`');\n        }\n        /**\n         * Called by node-core's \"_http_client.js\" module when creating\n         * a new HTTP request with this Agent instance.\n         *\n         * @api public\n         */ addRequest(req, _opts) {\n            const opts = Object.assign({}, _opts);\n            if (typeof opts.secureEndpoint !== \"boolean\") {\n                opts.secureEndpoint = isSecureEndpoint();\n            }\n            if (opts.host == null) {\n                opts.host = \"localhost\";\n            }\n            if (opts.port == null) {\n                opts.port = opts.secureEndpoint ? 443 : 80;\n            }\n            if (opts.protocol == null) {\n                opts.protocol = opts.secureEndpoint ? \"https:\" : \"http:\";\n            }\n            if (opts.host && opts.path) {\n                // If both a `host` and `path` are specified then it's most\n                // likely the result of a `url.parse()` call... we need to\n                // remove the `path` portion so that `net.connect()` doesn't\n                // attempt to open that as a unix socket file.\n                delete opts.path;\n            }\n            delete opts.agent;\n            delete opts.hostname;\n            delete opts._defaultAgent;\n            delete opts.defaultPort;\n            delete opts.createConnection;\n            // Hint to use \"Connection: close\"\n            // XXX: non-documented `http` module API :(\n            req._last = true;\n            req.shouldKeepAlive = false;\n            let timedOut = false;\n            let timeoutId = null;\n            const timeoutMs = opts.timeout || this.timeout;\n            const onerror = (err)=>{\n                if (req._hadError) return;\n                req.emit(\"error\", err);\n                // For Safety. Some additional errors might fire later on\n                // and we need to make sure we don't double-fire the error event.\n                req._hadError = true;\n            };\n            const ontimeout = ()=>{\n                timeoutId = null;\n                timedOut = true;\n                const err = new Error(`A \"socket\" was not created for HTTP request before ${timeoutMs}ms`);\n                err.code = \"ETIMEOUT\";\n                onerror(err);\n            };\n            const callbackError = (err)=>{\n                if (timedOut) return;\n                if (timeoutId !== null) {\n                    clearTimeout(timeoutId);\n                    timeoutId = null;\n                }\n                onerror(err);\n            };\n            const onsocket = (socket)=>{\n                if (timedOut) return;\n                if (timeoutId != null) {\n                    clearTimeout(timeoutId);\n                    timeoutId = null;\n                }\n                if (isAgent(socket)) {\n                    // `socket` is actually an `http.Agent` instance, so\n                    // relinquish responsibility for this `req` to the Agent\n                    // from here on\n                    debug(\"Callback returned another Agent instance %o\", socket.constructor.name);\n                    socket.addRequest(req, opts);\n                    return;\n                }\n                if (socket) {\n                    socket.once(\"free\", ()=>{\n                        this.freeSocket(socket, opts);\n                    });\n                    req.onSocket(socket);\n                    return;\n                }\n                const err = new Error(`no Duplex stream was returned to agent-base for \\`${req.method} ${req.path}\\``);\n                onerror(err);\n            };\n            if (typeof this.callback !== \"function\") {\n                onerror(new Error(\"`callback` is not defined\"));\n                return;\n            }\n            if (!this.promisifiedCallback) {\n                if (this.callback.length >= 3) {\n                    debug(\"Converting legacy callback function to promise\");\n                    this.promisifiedCallback = promisify_1.default(this.callback);\n                } else {\n                    this.promisifiedCallback = this.callback;\n                }\n            }\n            if (typeof timeoutMs === \"number\" && timeoutMs > 0) {\n                timeoutId = setTimeout(ontimeout, timeoutMs);\n            }\n            if (\"port\" in opts && typeof opts.port !== \"number\") {\n                opts.port = Number(opts.port);\n            }\n            try {\n                debug(\"Resolving socket for %o request: %o\", opts.protocol, `${req.method} ${req.path}`);\n                Promise.resolve(this.promisifiedCallback(req, opts)).then(onsocket, callbackError);\n            } catch (err) {\n                Promise.reject(err).catch(callbackError);\n            }\n        }\n        freeSocket(socket, opts) {\n            debug(\"Freeing socket %o %o\", socket.constructor.name, opts);\n            socket.destroy();\n        }\n        destroy() {\n            debug(\"Destroying agent %o\", this.constructor.name);\n        }\n    }\n    createAgent.Agent = Agent;\n    // So that `instanceof` works correctly\n    createAgent.prototype = createAgent.Agent.prototype;\n})(createAgent || (createAgent = {}));\nmodule.exports = createAgent; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWdlbnQtYmFzZS9kaXN0L3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixJQUFLLElBQUksSUFBSSxDQUFDQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQSxNQUFNRSxXQUFXQyxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqQyxNQUFNQyxVQUFVTCxnQkFBZ0JJLG1CQUFPQSxDQUFDLHNEQUFPO0FBQy9DLE1BQU1FLGNBQWNOLGdCQUFnQkksbUJBQU9BLENBQUMsMEVBQWE7QUFDekQsTUFBTUcsUUFBUUYsUUFBUUcsT0FBTyxDQUFDO0FBQzlCLFNBQVNDLFFBQVFDLENBQUM7SUFDZCxPQUFPQyxRQUFRRCxNQUFNLE9BQU9BLEVBQUVFLFVBQVUsS0FBSztBQUNqRDtBQUNBLFNBQVNDO0lBQ0wsTUFBTSxFQUFFQyxLQUFLLEVBQUUsR0FBRyxJQUFJQztJQUN0QixJQUFJLE9BQU9ELFVBQVUsVUFDakIsT0FBTztJQUNYLE9BQU9BLE1BQU1FLEtBQUssQ0FBQyxNQUFNQyxJQUFJLENBQUNDLENBQUFBLElBQUtBLEVBQUVDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLRCxFQUFFQyxPQUFPLENBQUMsbUJBQW1CLENBQUM7QUFDdkc7QUFDQSxTQUFTQyxZQUFZQyxRQUFRLEVBQUVDLElBQUk7SUFDL0IsT0FBTyxJQUFJRixZQUFZRyxLQUFLLENBQUNGLFVBQVVDO0FBQzNDO0FBQ0MsVUFBVUYsV0FBVztJQUNsQjs7Ozs7O0tBTUMsR0FDRCxNQUFNRyxjQUFjcEIsU0FBU3FCLFlBQVk7UUFDckNDLFlBQVlKLFFBQVEsRUFBRUssS0FBSyxDQUFFO1lBQ3pCLEtBQUs7WUFDTCxJQUFJSixPQUFPSTtZQUNYLElBQUksT0FBT0wsYUFBYSxZQUFZO2dCQUNoQyxJQUFJLENBQUNBLFFBQVEsR0FB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QVMsR0FBRzlELFlBQVlHLEtBQUssQ0FBQzJELFNBQVM7QUFDdkQsR0FBRzlELGVBQWdCQSxDQUFBQSxjQUFjLENBQUM7QUFDbEMrRCxPQUFPQyxPQUFPLEdBQUdoRSxhQUNqQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvYWdlbnQtYmFzZS9kaXN0L3NyYy9pbmRleC5qcz80NWZjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuY29uc3QgZXZlbnRzXzEgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xuY29uc3QgZGVidWdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZGVidWdcIikpO1xuY29uc3QgcHJvbWlzaWZ5XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vcHJvbWlzaWZ5XCIpKTtcbmNvbnN0IGRlYnVnID0gZGVidWdfMS5kZWZhdWx0KCdhZ2VudC1iYXNlJyk7XG5mdW5jdGlvbiBpc0FnZW50KHYpIHtcbiAgICByZXR1cm4gQm9vbGVhbih2KSAmJiB0eXBlb2Ygdi5hZGRSZXF1ZXN0ID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gaXNTZWN1cmVFbmRwb2ludCgpIHtcbiAgICBjb25zdCB7IHN0YWNrIH0gPSBuZXcgRXJyb3IoKTtcbiAgICBpZiAodHlwZW9mIHN0YWNrICE9PSAnc3RyaW5nJylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBzdGFjay5zcGxpdCgnXFxuJykuc29tZShsID0+IGwuaW5kZXhPZignKGh0dHBzLmpzOicpICE9PSAtMSB8fCBsLmluZGV4T2YoJ25vZGU6aHR0cHM6JykgIT09IC0xKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUFnZW50KGNhbGxiYWNrLCBvcHRzKSB7XG4gICAgcmV0dXJuIG5ldyBjcmVhdGVBZ2VudC5BZ2VudChjYWxsYmFjaywgb3B0cyk7XG59XG4oZnVuY3Rpb24gKGNyZWF0ZUFnZW50KSB7XG4gICAgLyoqXG4gICAgICogQmFzZSBgaHR0cC5BZ2VudGAgaW1wbGVtZW50YXRpb24uXG4gICAgICogTm8gcG9vbGluZy9rZWVwLWFsaXZlIGlzIGltcGxlbWVudGVkIGJ5IGRlZmF1bHQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG4gICAgY2xhc3MgQWdlbnQgZXh0ZW5kcyBldmVudHNfMS5FdmVudEVtaXR0ZXIge1xuICAgICAgICBjb25zdHJ1Y3RvcihjYWxsYmFjaywgX29wdHMpIHtcbiAgICAgICAgICAgIHN1cGVyKCk7XG4gICAgICAgICAgICBsZXQgb3B0cyA9IF9vcHRzO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgb3B0cyA9IGNhbGxiYWNrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGltZW91dCBmb3IgdGhlIHNvY2tldCB0byBiZSByZXR1cm5lZCBmcm9tIHRoZSBjYWxsYmFja1xuICAgICAgICAgICAgdGhpcy50aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChvcHRzICYmIHR5cGVvZiBvcHRzLnRpbWVvdXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50aW1lb3V0ID0gb3B0cy50aW1lb3V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGhlc2UgYXJlbid0IGFjdHVhbGx5IHVzZWQgYnkgYGFnZW50LWJhc2VgLCBidXQgYXJlIHJlcXVpcmVkXG4gICAgICAgICAgICAvLyBmb3IgdGhlIFR5cGVTY3JpcHQgZGVmaW5pdGlvbiBmaWxlcyBpbiBgQHR5cGVzL25vZGVgIDovXG4gICAgICAgICAgICB0aGlzLm1heEZyZWVTb2NrZXRzID0gMTtcbiAgICAgICAgICAgIHRoaXMubWF4U29ja2V0cyA9IDE7XG4gICAgICAgICAgICB0aGlzLm1heFRvdGFsU29ja2V0cyA9IEluZmluaXR5O1xuICAgICAgICAgICAgdGhpcy5zb2NrZXRzID0ge307XG4gICAgICAgICAgICB0aGlzLmZyZWVTb2NrZXRzID0ge307XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RzID0ge307XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBnZXQgZGVmYXVsdFBvcnQoKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuZXhwbGljaXREZWZhdWx0UG9ydCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5leHBsaWNpdERlZmF1bHRQb3J0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGlzU2VjdXJlRW5kcG9pbnQoKSA/IDQ0MyA6IDgwO1xuICAgICAgICB9XG4gICAgICAgIHNldCBkZWZhdWx0UG9ydCh2KSB7XG4gICAgICAgICAgICB0aGlzLmV4cGxpY2l0RGVmYXVsdFBvcnQgPSB2O1xuICAgICAgICB9XG4gICAgICAgIGdldCBwcm90b2NvbCgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5leHBsaWNpdFByb3RvY29sID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmV4cGxpY2l0UHJvdG9jb2w7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXNTZWN1cmVFbmRwb2ludCgpID8gJ2h0dHBzOicgOiAnaHR0cDonO1xuICAgICAgICB9XG4gICAgICAgIHNldCBwcm90b2NvbCh2KSB7XG4gICAgICAgICAgICB0aGlzLmV4cGxpY2l0UHJvdG9jb2wgPSB2O1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKHJlcSwgb3B0cywgZm4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignXCJhZ2VudC1iYXNlXCIgaGFzIG5vIGRlZmF1bHQgaW1wbGVtZW50YXRpb24sIHlvdSBtdXN0IHN1YmNsYXNzIGFuZCBvdmVycmlkZSBgY2FsbGJhY2soKWAnKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbGVkIGJ5IG5vZGUtY29yZSdzIFwiX2h0dHBfY2xpZW50LmpzXCIgbW9kdWxlIHdoZW4gY3JlYXRpbmdcbiAgICAgICAgICogYSBuZXcgSFRUUCByZXF1ZXN0IHdpdGggdGhpcyBBZ2VudCBpbnN0YW5jZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQGFwaSBwdWJsaWNcbiAgICAgICAgICovXG4gICAgICAgIGFkZFJlcXVlc3QocmVxLCBfb3B0cykge1xuICAgICAgICAgICAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIF9vcHRzKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0cy5zZWN1cmVFbmRwb2ludCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgICAgb3B0cy5zZWN1cmVFbmRwb2ludCA9IGlzU2VjdXJlRW5kcG9pbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRzLmhvc3QgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG9wdHMuaG9zdCA9ICdsb2NhbGhvc3QnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdHMucG9ydCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgb3B0cy5wb3J0ID0gb3B0cy5zZWN1cmVFbmRwb2ludCA/IDQ0MyA6IDgwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdHMucHJvdG9jb2wgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG9wdHMucHJvdG9jb2wgPSBvcHRzLnNlY3VyZUVuZHBvaW50ID8gJ2h0dHBzOicgOiAnaHR0cDonO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdHMuaG9zdCAmJiBvcHRzLnBhdGgpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBib3RoIGEgYGhvc3RgIGFuZCBgcGF0aGAgYXJlIHNwZWNpZmllZCB0aGVuIGl0J3MgbW9zdFxuICAgICAgICAgICAgICAgIC8vIGxpa2VseSB0aGUgcmVzdWx0IG9mIGEgYHVybC5wYXJzZSgpYCBjYWxsLi4uIHdlIG5lZWQgdG9cbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgdGhlIGBwYXRoYCBwb3J0aW9uIHNvIHRoYXQgYG5ldC5jb25uZWN0KClgIGRvZXNuJ3RcbiAgICAgICAgICAgICAgICAvLyBhdHRlbXB0IHRvIG9wZW4gdGhhdCBhcyBhIHVuaXggc29ja2V0IGZpbGUuXG4gICAgICAgICAgICAgICAgZGVsZXRlIG9wdHMucGF0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbGV0ZSBvcHRzLmFnZW50O1xuICAgICAgICAgICAgZGVsZXRlIG9wdHMuaG9zdG5hbWU7XG4gICAgICAgICAgICBkZWxldGUgb3B0cy5fZGVmYXVsdEFnZW50O1xuICAgICAgICAgICAgZGVsZXRlIG9wdHMuZGVmYXVsdFBvcnQ7XG4gICAgICAgICAgICBkZWxldGUgb3B0cy5jcmVhdGVDb25uZWN0aW9uO1xuICAgICAgICAgICAgLy8gSGludCB0byB1c2UgXCJDb25uZWN0aW9uOiBjbG9zZVwiXG4gICAgICAgICAgICAvLyBYWFg6IG5vbi1kb2N1bWVudGVkIGBodHRwYCBtb2R1bGUgQVBJIDooXG4gICAgICAgICAgICByZXEuX2xhc3QgPSB0cnVlO1xuICAgICAgICAgICAgcmVxLnNob3VsZEtlZXBBbGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IHRpbWVkT3V0ID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgdGltZW91dElkID0gbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVvdXRNcyA9IG9wdHMudGltZW91dCB8fCB0aGlzLnRpbWVvdXQ7XG4gICAgICAgICAgICBjb25zdCBvbmVycm9yID0gKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXEuX2hhZEVycm9yKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgcmVxLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgICAgICAgICAvLyBGb3IgU2FmZXR5LiBTb21lIGFkZGl0aW9uYWwgZXJyb3JzIG1pZ2h0IGZpcmUgbGF0ZXIgb25cbiAgICAgICAgICAgICAgICAvLyBhbmQgd2UgbmVlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3QgZG91YmxlLWZpcmUgdGhlIGVycm9yIGV2ZW50LlxuICAgICAgICAgICAgICAgIHJlcS5faGFkRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IG9udGltZW91dCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aW1lb3V0SWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRpbWVkT3V0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoYEEgXCJzb2NrZXRcIiB3YXMgbm90IGNyZWF0ZWQgZm9yIEhUVFAgcmVxdWVzdCBiZWZvcmUgJHt0aW1lb3V0TXN9bXNgKTtcbiAgICAgICAgICAgICAgICBlcnIuY29kZSA9ICdFVElNRU9VVCc7XG4gICAgICAgICAgICAgICAgb25lcnJvcihlcnIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrRXJyb3IgPSAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRpbWVkT3V0KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKHRpbWVvdXRJZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dElkID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb25lcnJvcihlcnIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IG9uc29ja2V0ID0gKHNvY2tldCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aW1lZE91dClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0SWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dElkID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzQWdlbnQoc29ja2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBgc29ja2V0YCBpcyBhY3R1YWxseSBhbiBgaHR0cC5BZ2VudGAgaW5zdGFuY2UsIHNvXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbGlucXVpc2ggcmVzcG9uc2liaWxpdHkgZm9yIHRoaXMgYHJlcWAgdG8gdGhlIEFnZW50XG4gICAgICAgICAgICAgICAgICAgIC8vIGZyb20gaGVyZSBvblxuICAgICAgICAgICAgICAgICAgICBkZWJ1ZygnQ2FsbGJhY2sgcmV0dXJuZWQgYW5vdGhlciBBZ2VudCBpbnN0YW5jZSAlbycsIHNvY2tldC5jb25zdHJ1Y3Rvci5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgc29ja2V0LmFkZFJlcXVlc3QocmVxLCBvcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc29ja2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHNvY2tldC5vbmNlKCdmcmVlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mcmVlU29ja2V0KHNvY2tldCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXEub25Tb2NrZXQoc29ja2V0KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoYG5vIER1cGxleCBzdHJlYW0gd2FzIHJldHVybmVkIHRvIGFnZW50LWJhc2UgZm9yIFxcYCR7cmVxLm1ldGhvZH0gJHtyZXEucGF0aH1cXGBgKTtcbiAgICAgICAgICAgICAgICBvbmVycm9yKGVycik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgb25lcnJvcihuZXcgRXJyb3IoJ2BjYWxsYmFja2AgaXMgbm90IGRlZmluZWQnKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLnByb21pc2lmaWVkQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jYWxsYmFjay5sZW5ndGggPj0gMykge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1ZygnQ29udmVydGluZyBsZWdhY3kgY2FsbGJhY2sgZnVuY3Rpb24gdG8gcHJvbWlzZScpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb21pc2lmaWVkQ2FsbGJhY2sgPSBwcm9taXNpZnlfMS5kZWZhdWx0KHRoaXMuY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9taXNpZmllZENhbGxiYWNrID0gdGhpcy5jYWxsYmFjaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRpbWVvdXRNcyA9PT0gJ251bWJlcicgJiYgdGltZW91dE1zID4gMCkge1xuICAgICAgICAgICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQob250aW1lb3V0LCB0aW1lb3V0TXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdwb3J0JyBpbiBvcHRzICYmIHR5cGVvZiBvcHRzLnBvcnQgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgb3B0cy5wb3J0ID0gTnVtYmVyKG9wdHMucG9ydCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGRlYnVnKCdSZXNvbHZpbmcgc29ja2V0IGZvciAlbyByZXF1ZXN0OiAlbycsIG9wdHMucHJvdG9jb2wsIGAke3JlcS5tZXRob2R9ICR7cmVxLnBhdGh9YCk7XG4gICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHRoaXMucHJvbWlzaWZpZWRDYWxsYmFjayhyZXEsIG9wdHMpKS50aGVuKG9uc29ja2V0LCBjYWxsYmFja0Vycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBQcm9taXNlLnJlamVjdChlcnIpLmNhdGNoKGNhbGxiYWNrRXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZyZWVTb2NrZXQoc29ja2V0LCBvcHRzKSB7XG4gICAgICAgICAgICBkZWJ1ZygnRnJlZWluZyBzb2NrZXQgJW8gJW8nLCBzb2NrZXQuY29uc3RydWN0b3IubmFtZSwgb3B0cyk7XG4gICAgICAgICAgICBzb2NrZXQuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICBkZWJ1ZygnRGVzdHJveWluZyBhZ2VudCAlbycsIHRoaXMuY29uc3RydWN0b3IubmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3JlYXRlQWdlbnQuQWdlbnQgPSBBZ2VudDtcbiAgICAvLyBTbyB0aGF0IGBpbnN0YW5jZW9mYCB3b3JrcyBjb3JyZWN0bHlcbiAgICBjcmVhdGVBZ2VudC5wcm90b3R5cGUgPSBjcmVhdGVBZ2VudC5BZ2VudC5wcm90b3R5cGU7XG59KShjcmVhdGVBZ2VudCB8fCAoY3JlYXRlQWdlbnQgPSB7fSkpO1xubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVBZ2VudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiZXZlbnRzXzEiLCJyZXF1aXJlIiwiZGVidWdfMSIsInByb21pc2lmeV8xIiwiZGVidWciLCJkZWZhdWx0IiwiaXNBZ2VudCIsInYiLCJCb29sZWFuIiwiYWRkUmVxdWVzdCIsImlzU2VjdXJlRW5kcG9pbnQiLCJzdGFjayIsIkVycm9yIiwic3BsaXQiLCJzb21lIiwibCIsImluZGV4T2YiLCJjcmVhdGVBZ2VudCIsImNhbGxiYWNrIiwib3B0cyIsIkFnZW50IiwiRXZlbnRFbWl0dGVyIiwiY29uc3RydWN0b3IiLCJfb3B0cyIsInRpbWVvdXQiLCJtYXhGcmVlU29ja2V0cyIsIm1heFNvY2tldHMiLCJtYXhUb3RhbFNvY2tldHMiLCJJbmZpbml0eSIsInNvY2tldHMiLCJmcmVlU29ja2V0cyIsInJlcXVlc3RzIiwib3B0aW9ucyIsImRlZmF1bHRQb3J0IiwiZXhwbGljaXREZWZhdWx0UG9ydCIsInByb3RvY29sIiwiZXhwbGljaXRQcm90b2NvbCIsInJlcSIsImZuIiwiT2JqZWN0IiwiYXNzaWduIiwic2VjdXJlRW5kcG9pbnQiLCJob3N0IiwicG9ydCIsInBhdGgiLCJhZ2VudCIsImhvc3RuYW1lIiwiX2RlZmF1bHRBZ2VudCIsImNyZWF0ZUNvbm5lY3Rpb24iLCJfbGFzdCIsInNob3VsZEtlZXBBbGl2ZSIsInRpbWVkT3V0IiwidGltZW91dElkIiwidGltZW91dE1zIiwib25lcnJvciIsImVyciIsIl9oYWRFcnJvciIsImVtaXQiLCJvbnRpbWVvdXQiLCJjb2RlIiwiY2FsbGJhY2tFcnJvciIsImNsZWFyVGltZW91dCIsIm9uc29ja2V0Iiwic29ja2V0IiwibmFtZSIsIm9uY2UiLCJmcmVlU29ja2V0Iiwib25Tb2NrZXQiLCJtZXRob2QiLCJwcm9taXNpZmllZENhbGxiYWNrIiwibGVuZ3RoIiwic2V0VGltZW91dCIsIk51bWJlciIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsInJlamVjdCIsImNhdGNoIiwiZGVzdHJveSIsInByb3RvdHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/agent-base/dist/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/agent-base/dist/src/promisify.js":
/*!*******************************************************!*\
  !*** ./node_modules/agent-base/dist/src/promisify.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nfunction promisify(fn) {\n    return function(req, opts) {\n        return new Promise((resolve, reject)=>{\n            fn.call(this, req, opts, (err, rtn)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(rtn);\n                }\n            });\n        });\n    };\n}\nexports[\"default\"] = promisify; //# sourceMappingURL=promisify.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWdlbnQtYmFzZS9kaXN0L3NyYy9wcm9taXNpZnkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsU0FBU0MsVUFBVUMsRUFBRTtJQUNqQixPQUFPLFNBQVVDLEdBQUcsRUFBRUMsSUFBSTtRQUN0QixPQUFPLElBQUlDLFFBQVEsQ0FBQ0MsU0FBU0M7WUFDekJMLEdBQUdNLElBQUksQ0FBQyxJQUFJLEVBQUVMLEtBQUtDLE1BQU0sQ0FBQ0ssS0FBS0M7Z0JBQzNCLElBQUlELEtBQUs7b0JBQ0xGLE9BQU9FO2dCQUNYLE9BQ0s7b0JBQ0RILFFBQVFJO2dCQUNaO1lBQ0o7UUFDSjtJQUNKO0FBQ0o7QUFDQVgsa0JBQWUsR0FBR0UsV0FDbEIscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL2FnZW50LWJhc2UvZGlzdC9zcmMvcHJvbWlzaWZ5LmpzPzViMjEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBwcm9taXNpZnkoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHJlcSwgb3B0cykge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgZm4uY2FsbCh0aGlzLCByZXEsIG9wdHMsIChlcnIsIHJ0bikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJ0bik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG59XG5leHBvcnRzLmRlZmF1bHQgPSBwcm9taXNpZnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9taXNpZnkuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicHJvbWlzaWZ5IiwiZm4iLCJyZXEiLCJvcHRzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjYWxsIiwiZXJyIiwicnRuIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/agent-base/dist/src/promisify.js\n");

/***/ })

};
;