"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sentry";
exports.ids = ["vendor-chunks/@sentry"];
exports.modules = {

/***/ "(ssr)/./node_modules/@sentry/core/esm/api.js":
/*!**********************************************!*\
  !*** ./node_modules/@sentry/core/esm/api.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnvelopeEndpointWithUrlEncodedAuth: () => (/* binding */ getEnvelopeEndpointWithUrlEncodedAuth),\n/* harmony export */   getReportDialogEndpoint: () => (/* binding */ getReportDialogEndpoint)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/dsn.js\");\n\nconst SENTRY_API_VERSION = \"7\";\n/** Returns the prefix to construct Sentry ingestion API endpoints. */ function getBaseApiEndpoint(dsn) {\n    const protocol = dsn.protocol ? `${dsn.protocol}:` : \"\";\n    const port = dsn.port ? `:${dsn.port}` : \"\";\n    return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : \"\"}/api/`;\n}\n/** Returns the ingest API endpoint for target. */ function _getIngestEndpoint(dsn) {\n    return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n/** Returns a URL-encoded string with auth config suitable for a query string. */ function _encodedAuth(dsn, sdkInfo) {\n    return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.urlEncode)({\n        // We send only the minimum set of required information. See\n        // https://github.com/getsentry/sentry-javascript/issues/2572.\n        sentry_key: dsn.publicKey,\n        sentry_version: SENTRY_API_VERSION,\n        ...sdkInfo && {\n            sentry_client: `${sdkInfo.name}/${sdkInfo.version}`\n        }\n    });\n}\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */ function getEnvelopeEndpointWithUrlEncodedAuth(dsn, // TODO (v8): Remove `tunnelOrOptions` in favor of `options`, and use the substitute code below\n// options: ClientOptions = {} as ClientOptions,\ntunnelOrOptions = {}) {\n    // TODO (v8): Use this code instead\n    // const { tunnel, _metadata = {} } = options;\n    // return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, _metadata.sdk)}`;\n    const tunnel = typeof tunnelOrOptions === \"string\" ? tunnelOrOptions : tunnelOrOptions.tunnel;\n    const sdkInfo = typeof tunnelOrOptions === \"string\" || !tunnelOrOptions._metadata ? undefined : tunnelOrOptions._metadata.sdk;\n    return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n/** Returns the url to the report dialog endpoint. */ function getReportDialogEndpoint(dsnLike, dialogOptions) {\n    const dsn = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.makeDsn)(dsnLike);\n    if (!dsn) {\n        return \"\";\n    }\n    const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n    let encodedOptions = `dsn=${(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.dsnToString)(dsn)}`;\n    for(const key in dialogOptions){\n        if (key === \"dsn\") {\n            continue;\n        }\n        if (key === \"onClose\") {\n            continue;\n        }\n        if (key === \"user\") {\n            const user = dialogOptions.user;\n            if (!user) {\n                continue;\n            }\n            if (user.name) {\n                encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n            }\n            if (user.email) {\n                encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n            }\n        } else {\n            encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key])}`;\n        }\n    }\n    return `${endpoint}?${encodedOptions}`;\n}\n //# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9hcGkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFnRTtBQUVoRSxNQUFNRyxxQkFBcUI7QUFFM0Isb0VBQW9FLEdBQ3BFLFNBQVNDLG1CQUFtQkMsR0FBRztJQUM3QixNQUFNQyxXQUFXRCxJQUFJQyxRQUFRLEdBQUcsQ0FBQyxFQUFFRCxJQUFJQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUc7SUFDckQsTUFBTUMsT0FBT0YsSUFBSUUsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFRixJQUFJRSxJQUFJLENBQUMsQ0FBQyxHQUFHO0lBQ3pDLE9BQU8sQ0FBQyxFQUFFRCxTQUFTLEVBQUUsRUFBRUQsSUFBSUcsSUFBSSxDQUFDLEVBQUVELEtBQUssRUFBRUYsSUFBSUksSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFSixJQUFJSSxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ2hGO0FBRUEsZ0RBQWdELEdBQ2hELFNBQVNDLG1CQUFtQkwsR0FBRztJQUM3QixPQUFPLENBQUMsRUFBRUQsbUJBQW1CQyxLQUFLLEVBQUVBLElBQUlNLFNBQVMsQ0FBQyxVQUFVLENBQUM7QUFDL0Q7QUFFQSwrRUFBK0UsR0FDL0UsU0FBU0MsYUFBYVAsR0FBRyxFQUFFUSxPQUFPO0lBQ2hDLE9BQU9YLHdEQUFTQSxDQUFDO1FBQ2YsNERBQTREO1FBQzVELDhEQUE4RDtRQUM5RFksWUFBWVQsSUFBSVUsU0FBUztRQUN6QkMsZ0JBQWdCYjtRQUNoQixHQUFJVSxXQUFXO1lBQUVJLGVBQWUsQ0FBQyxFQUFFSixRQUFRSyxJQUFJLENBQUMsQ0FBQyxFQUFFTCxRQUFRTSxPQUFPLENBQUMsQ0FBQztRQUFDLENBQUM7SUFDeEU7QUFDRjtBQUVBOzs7O0NBSUMsR0FDRCxTQUFTQyxzQ0FDUGYsR0FBRyxFQUNILCtGQUErRjtBQUMvRixnREFBZ0Q7QUFDaERnQixrQkFBa0IsQ0FBQyxDQUFDO0lBRXBCLG1DQUFtQztJQUNuQyw4Q0FBOEM7SUFDOUMsNkZBQTZGO0lBRTdGLE1BQU1DLFNBQVMsT0FBT0Qsb0JBQW9CLFdBQVdBLGtCQUFrQkEsZ0JBQWdCQyxNQUFNO0lBQzdGLE1BQU1ULFVBQ0osT0FBT1Esb0JBQW9CLFlBQVksQ0FBQ0EsZ0JBQWdCRSxTQUFTLEdBQUdDLFlBQVlILGdCQUFnQkUsU0FBUyxDQUFDRSxHQUFHO0lBRS9HLE9BQU9ILFNBQVNBLFNBQVMsQ0FBQyxFQUFFWixtQkFBbUJMLEtBQUssQ0FBQyxFQUFFTyxhQUFhUCxLQUFLUSxTQUFTLENBQUM7QUFDckY7QUFFQSxtREFBbUQsR0FDbkQsU0FBU2Esd0JBQ1BDLE9BQU8sRUFDUEMsYUFBYTtJQUliLE1BQU12QixNQUFNTCxzREFBT0EsQ0FBQzJCO0lBQ3BCLElBQUksQ0FBQ3RCLEtBQUs7UUFDUixPQUFPO0lBQ1Q7SUFFQSxNQUFNd0IsV0FBVyxDQUFDLEVBQUV6QixtQkFBbUJDLEtBQUssaUJBQWlCLENBQUM7SUFFOUQsSUFBSXlCLGlCQUFpQixDQUFDLElBQUksRUFBRTdCLDBEQUFXQSxDQUFDSSxLQUFLLENBQUM7SUFDOUMsSUFBSyxNQUFNMEIsT0FBT0gsY0FBZTtRQUMvQixJQUFJRyxRQUFRLE9BQU87WUFDakI7UUFDRjtRQUVBLElBQUlBLFFBQVEsV0FBVztZQUNyQjtRQUNGO1FBRUEsSUFBSUEsUUFBUSxRQUFRO1lBQ2xCLE1BQU1DLE9BQU9KLGNBQWNJLElBQUk7WUFDL0IsSUFBSSxDQUFDQSxNQUFNO2dCQUNUO1lBQ0Y7WUFDQSxJQUFJQSxLQUFLZCxJQUFJLEVBQUU7Z0JBQ2JZLGtCQUFrQixDQUFDLE1BQU0sRUFBRUcsbUJBQW1CRCxLQUFLZCxJQUFJLEVBQUUsQ0FBQztZQUM1RDtZQUNBLElBQUljLEtBQUtFLEtBQUssRUFBRTtnQkFDZEosa0JBQWtCLENBQUMsT0FBTyxFQUFFRyxtQkFBbUJELEtBQUtFLEtBQUssRUFBRSxDQUFDO1lBQzlEO1FBQ0YsT0FBTztZQUNMSixrQkFBa0IsQ0FBQyxDQUFDLEVBQUVHLG1CQUFtQkYsS0FBSyxDQUFDLEVBQUVFLG1CQUFtQkwsYUFBYSxDQUFDRyxJQUFJLEVBQUcsQ0FBQztRQUM1RjtJQUNGO0lBRUEsT0FBTyxDQUFDLEVBQUVGLFNBQVMsQ0FBQyxFQUFFQyxlQUFlLENBQUM7QUFDeEM7QUFFMEUsQ0FDMUUsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vYXBpLmpzPzFjMDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWFrZURzbiwgZHNuVG9TdHJpbmcsIHVybEVuY29kZSB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuXG5jb25zdCBTRU5UUllfQVBJX1ZFUlNJT04gPSAnNyc7XG5cbi8qKiBSZXR1cm5zIHRoZSBwcmVmaXggdG8gY29uc3RydWN0IFNlbnRyeSBpbmdlc3Rpb24gQVBJIGVuZHBvaW50cy4gKi9cbmZ1bmN0aW9uIGdldEJhc2VBcGlFbmRwb2ludChkc24pIHtcbiAgY29uc3QgcHJvdG9jb2wgPSBkc24ucHJvdG9jb2wgPyBgJHtkc24ucHJvdG9jb2x9OmAgOiAnJztcbiAgY29uc3QgcG9ydCA9IGRzbi5wb3J0ID8gYDoke2Rzbi5wb3J0fWAgOiAnJztcbiAgcmV0dXJuIGAke3Byb3RvY29sfS8vJHtkc24uaG9zdH0ke3BvcnR9JHtkc24ucGF0aCA/IGAvJHtkc24ucGF0aH1gIDogJyd9L2FwaS9gO1xufVxuXG4vKiogUmV0dXJucyB0aGUgaW5nZXN0IEFQSSBlbmRwb2ludCBmb3IgdGFyZ2V0LiAqL1xuZnVuY3Rpb24gX2dldEluZ2VzdEVuZHBvaW50KGRzbikge1xuICByZXR1cm4gYCR7Z2V0QmFzZUFwaUVuZHBvaW50KGRzbil9JHtkc24ucHJvamVjdElkfS9lbnZlbG9wZS9gO1xufVxuXG4vKiogUmV0dXJucyBhIFVSTC1lbmNvZGVkIHN0cmluZyB3aXRoIGF1dGggY29uZmlnIHN1aXRhYmxlIGZvciBhIHF1ZXJ5IHN0cmluZy4gKi9cbmZ1bmN0aW9uIF9lbmNvZGVkQXV0aChkc24sIHNka0luZm8pIHtcbiAgcmV0dXJuIHVybEVuY29kZSh7XG4gICAgLy8gV2Ugc2VuZCBvbmx5IHRoZSBtaW5pbXVtIHNldCBvZiByZXF1aXJlZCBpbmZvcm1hdGlvbi4gU2VlXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMjU3Mi5cbiAgICBzZW50cnlfa2V5OiBkc24ucHVibGljS2V5LFxuICAgIHNlbnRyeV92ZXJzaW9uOiBTRU5UUllfQVBJX1ZFUlNJT04sXG4gICAgLi4uKHNka0luZm8gJiYgeyBzZW50cnlfY2xpZW50OiBgJHtzZGtJbmZvLm5hbWV9LyR7c2RrSW5mby52ZXJzaW9ufWAgfSksXG4gIH0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVudmVsb3BlIGVuZHBvaW50IFVSTCB3aXRoIGF1dGggaW4gdGhlIHF1ZXJ5IHN0cmluZy5cbiAqXG4gKiBTZW5kaW5nIGF1dGggYXMgcGFydCBvZiB0aGUgcXVlcnkgc3RyaW5nIGFuZCBub3QgYXMgY3VzdG9tIEhUVFAgaGVhZGVycyBhdm9pZHMgQ09SUyBwcmVmbGlnaHQgcmVxdWVzdHMuXG4gKi9cbmZ1bmN0aW9uIGdldEVudmVsb3BlRW5kcG9pbnRXaXRoVXJsRW5jb2RlZEF1dGgoXG4gIGRzbixcbiAgLy8gVE9ETyAodjgpOiBSZW1vdmUgYHR1bm5lbE9yT3B0aW9uc2AgaW4gZmF2b3Igb2YgYG9wdGlvbnNgLCBhbmQgdXNlIHRoZSBzdWJzdGl0dXRlIGNvZGUgYmVsb3dcbiAgLy8gb3B0aW9uczogQ2xpZW50T3B0aW9ucyA9IHt9IGFzIENsaWVudE9wdGlvbnMsXG4gIHR1bm5lbE9yT3B0aW9ucyA9IHt9ICxcbikge1xuICAvLyBUT0RPICh2OCk6IFVzZSB0aGlzIGNvZGUgaW5zdGVhZFxuICAvLyBjb25zdCB7IHR1bm5lbCwgX21ldGFkYXRhID0ge30gfSA9IG9wdGlvbnM7XG4gIC8vIHJldHVybiB0dW5uZWwgPyB0dW5uZWwgOiBgJHtfZ2V0SW5nZXN0RW5kcG9pbnQoZHNuKX0/JHtfZW5jb2RlZEF1dGgoZHNuLCBfbWV0YWRhdGEuc2RrKX1gO1xuXG4gIGNvbnN0IHR1bm5lbCA9IHR5cGVvZiB0dW5uZWxPck9wdGlvbnMgPT09ICdzdHJpbmcnID8gdHVubmVsT3JPcHRpb25zIDogdHVubmVsT3JPcHRpb25zLnR1bm5lbDtcbiAgY29uc3Qgc2RrSW5mbyA9XG4gICAgdHlwZW9mIHR1bm5lbE9yT3B0aW9ucyA9PT0gJ3N0cmluZycgfHwgIXR1bm5lbE9yT3B0aW9ucy5fbWV0YWRhdGEgPyB1bmRlZmluZWQgOiB0dW5uZWxPck9wdGlvbnMuX21ldGFkYXRhLnNkaztcblxuICByZXR1cm4gdHVubmVsID8gdHVubmVsIDogYCR7X2dldEluZ2VzdEVuZHBvaW50KGRzbil9PyR7X2VuY29kZWRBdXRoKGRzbiwgc2RrSW5mbyl9YDtcbn1cblxuLyoqIFJldHVybnMgdGhlIHVybCB0byB0aGUgcmVwb3J0IGRpYWxvZyBlbmRwb2ludC4gKi9cbmZ1bmN0aW9uIGdldFJlcG9ydERpYWxvZ0VuZHBvaW50KFxuICBkc25MaWtlLFxuICBkaWFsb2dPcHRpb25zXG5cbixcbikge1xuICBjb25zdCBkc24gPSBtYWtlRHNuKGRzbkxpa2UpO1xuICBpZiAoIWRzbikge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGNvbnN0IGVuZHBvaW50ID0gYCR7Z2V0QmFzZUFwaUVuZHBvaW50KGRzbil9ZW1iZWQvZXJyb3ItcGFnZS9gO1xuXG4gIGxldCBlbmNvZGVkT3B0aW9ucyA9IGBkc249JHtkc25Ub1N0cmluZyhkc24pfWA7XG4gIGZvciAoY29uc3Qga2V5IGluIGRpYWxvZ09wdGlvbnMpIHtcbiAgICBpZiAoa2V5ID09PSAnZHNuJykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ29uQ2xvc2UnKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAndXNlcicpIHtcbiAgICAgIGNvbnN0IHVzZXIgPSBkaWFsb2dPcHRpb25zLnVzZXI7XG4gICAgICBpZiAoIXVzZXIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodXNlci5uYW1lKSB7XG4gICAgICAgIGVuY29kZWRPcHRpb25zICs9IGAmbmFtZT0ke2VuY29kZVVSSUNvbXBvbmVudCh1c2VyLm5hbWUpfWA7XG4gICAgICB9XG4gICAgICBpZiAodXNlci5lbWFpbCkge1xuICAgICAgICBlbmNvZGVkT3B0aW9ucyArPSBgJmVtYWlsPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHVzZXIuZW1haWwpfWA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kZWRPcHRpb25zICs9IGAmJHtlbmNvZGVVUklDb21wb25lbnQoa2V5KX09JHtlbmNvZGVVUklDb21wb25lbnQoZGlhbG9nT3B0aW9uc1trZXldICl9YDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYCR7ZW5kcG9pbnR9PyR7ZW5jb2RlZE9wdGlvbnN9YDtcbn1cblxuZXhwb3J0IHsgZ2V0RW52ZWxvcGVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCwgZ2V0UmVwb3J0RGlhbG9nRW5kcG9pbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwaS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJtYWtlRHNuIiwiZHNuVG9TdHJpbmciLCJ1cmxFbmNvZGUiLCJTRU5UUllfQVBJX1ZFUlNJT04iLCJnZXRCYXNlQXBpRW5kcG9pbnQiLCJkc24iLCJwcm90b2NvbCIsInBvcnQiLCJob3N0IiwicGF0aCIsIl9nZXRJbmdlc3RFbmRwb2ludCIsInByb2plY3RJZCIsIl9lbmNvZGVkQXV0aCIsInNka0luZm8iLCJzZW50cnlfa2V5IiwicHVibGljS2V5Iiwic2VudHJ5X3ZlcnNpb24iLCJzZW50cnlfY2xpZW50IiwibmFtZSIsInZlcnNpb24iLCJnZXRFbnZlbG9wZUVuZHBvaW50V2l0aFVybEVuY29kZWRBdXRoIiwidHVubmVsT3JPcHRpb25zIiwidHVubmVsIiwiX21ldGFkYXRhIiwidW5kZWZpbmVkIiwic2RrIiwiZ2V0UmVwb3J0RGlhbG9nRW5kcG9pbnQiLCJkc25MaWtlIiwiZGlhbG9nT3B0aW9ucyIsImVuZHBvaW50IiwiZW5jb2RlZE9wdGlvbnMiLCJrZXkiLCJ1c2VyIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZW1haWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/baseclient.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/core/esm/baseclient.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseClient: () => (/* binding */ BaseClient),\n/* harmony export */   addEventProcessor: () => (/* binding */ addEventProcessor)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/dsn.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/syncpromise.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/envelope.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/error.js\");\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./api.js */ \"(ssr)/./node_modules/@sentry/core/esm/api.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/esm/debug-build.js\");\n/* harmony import */ var _envelope_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./envelope.js */ \"(ssr)/./node_modules/@sentry/core/esm/envelope.js\");\n/* harmony import */ var _hub_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./hub.js */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _integration_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./integration.js */ \"(ssr)/./node_modules/@sentry/core/esm/integration.js\");\n/* harmony import */ var _metrics_envelope_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./metrics/envelope.js */ \"(ssr)/./node_modules/@sentry/core/esm/metrics/envelope.js\");\n/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./session.js */ \"(ssr)/./node_modules/@sentry/core/esm/session.js\");\n/* harmony import */ var _tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./tracing/dynamicSamplingContext.js */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/dynamicSamplingContext.js\");\n/* harmony import */ var _utils_prepareEvent_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/prepareEvent.js */ \"(ssr)/./node_modules/@sentry/core/esm/utils/prepareEvent.js\");\n\n\n\n\n\n\n\n\n\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(options);\n *   }\n *\n *   // ...\n * }\n */ class BaseClient {\n    /**\n   * A reference to a metrics aggregator\n   *\n   * @experimental Note this is alpha API. It may experience breaking changes in the future.\n   */ /** Options passed to the SDK. */ /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */ /** Array of set up integrations. */ /** Indicates whether this client's integrations have been set up. */ /** Number of calls being processed */ /** Holds flushable  */ // eslint-disable-next-line @typescript-eslint/ban-types\n    /**\n   * Initializes this client instance.\n   *\n   * @param options Options for the client.\n   */ constructor(options){\n        this._options = options;\n        this._integrations = {};\n        this._integrationsInitialized = false;\n        this._numProcessing = 0;\n        this._outcomes = {};\n        this._hooks = {};\n        this._eventProcessors = [];\n        if (options.dsn) {\n            this._dsn = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.makeDsn)(options.dsn);\n        } else {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.warn(\"No DSN provided, client will not send events.\");\n        }\n        if (this._dsn) {\n            const url = (0,_api_js__WEBPACK_IMPORTED_MODULE_3__.getEnvelopeEndpointWithUrlEncodedAuth)(this._dsn, options);\n            this._transport = options.transport({\n                recordDroppedEvent: this.recordDroppedEvent.bind(this),\n                ...options.transportOptions,\n                url\n            });\n        }\n    }\n    /**\n   * @inheritDoc\n   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n    captureException(exception, hint, scope) {\n        // ensure we haven't captured this very object before\n        if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.checkOrSetAlreadyCaught)(exception)) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.log(ALREADY_SEEN_ERROR);\n            return;\n        }\n        let eventId = hint && hint.event_id;\n        this._process(this.eventFromException(exception, hint).then((event)=>this._captureEvent(event, hint, scope)).then((result)=>{\n            eventId = result;\n        }));\n        return eventId;\n    }\n    /**\n   * @inheritDoc\n   */ captureMessage(message, // eslint-disable-next-line deprecation/deprecation\n    level, hint, scope) {\n        let eventId = hint && hint.event_id;\n        const promisedEvent = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.isPrimitive)(message) ? this.eventFromMessage(String(message), level, hint) : this.eventFromException(message, hint);\n        this._process(promisedEvent.then((event)=>this._captureEvent(event, hint, scope)).then((result)=>{\n            eventId = result;\n        }));\n        return eventId;\n    }\n    /**\n   * @inheritDoc\n   */ captureEvent(event, hint, scope) {\n        // ensure we haven't captured this very object before\n        if (hint && hint.originalException && (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.checkOrSetAlreadyCaught)(hint.originalException)) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.log(ALREADY_SEEN_ERROR);\n            return;\n        }\n        let eventId = hint && hint.event_id;\n        this._process(this._captureEvent(event, hint, scope).then((result)=>{\n            eventId = result;\n        }));\n        return eventId;\n    }\n    /**\n   * @inheritDoc\n   */ captureSession(session) {\n        if (!(typeof session.release === \"string\")) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.warn(\"Discarded session because of missing or non-string release\");\n        } else {\n            this.sendSession(session);\n            // After sending, we set init false to indicate it's not the first occurrence\n            (0,_session_js__WEBPACK_IMPORTED_MODULE_6__.updateSession)(session, {\n                init: false\n            });\n        }\n    }\n    /**\n   * @inheritDoc\n   */ getDsn() {\n        return this._dsn;\n    }\n    /**\n   * @inheritDoc\n   */ getOptions() {\n        return this._options;\n    }\n    /**\n   * @see SdkMetadata in @sentry/types\n   *\n   * @return The metadata of the SDK\n   */ getSdkMetadata() {\n        return this._options._metadata;\n    }\n    /**\n   * @inheritDoc\n   */ getTransport() {\n        return this._transport;\n    }\n    /**\n   * @inheritDoc\n   */ flush(timeout) {\n        const transport = this._transport;\n        if (transport) {\n            if (this.metricsAggregator) {\n                this.metricsAggregator.flush();\n            }\n            return this._isClientDoneProcessing(timeout).then((clientFinished)=>{\n                return transport.flush(timeout).then((transportFlushed)=>clientFinished && transportFlushed);\n            });\n        } else {\n            return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_7__.resolvedSyncPromise)(true);\n        }\n    }\n    /**\n   * @inheritDoc\n   */ close(timeout) {\n        return this.flush(timeout).then((result)=>{\n            this.getOptions().enabled = false;\n            if (this.metricsAggregator) {\n                this.metricsAggregator.close();\n            }\n            return result;\n        });\n    }\n    /** Get all installed event processors. */ getEventProcessors() {\n        return this._eventProcessors;\n    }\n    /** @inheritDoc */ addEventProcessor(eventProcessor) {\n        this._eventProcessors.push(eventProcessor);\n    }\n    /**\n   * Sets up the integrations\n   */ setupIntegrations(forceInitialize) {\n        if (forceInitialize && !this._integrationsInitialized || this._isEnabled() && !this._integrationsInitialized) {\n            this._integrations = (0,_integration_js__WEBPACK_IMPORTED_MODULE_8__.setupIntegrations)(this, this._options.integrations);\n            this._integrationsInitialized = true;\n        }\n    }\n    /**\n   * Gets an installed integration by its `id`.\n   *\n   * @returns The installed integration or `undefined` if no integration with that `id` was installed.\n   */ getIntegrationById(integrationId) {\n        return this._integrations[integrationId];\n    }\n    /**\n   * @inheritDoc\n   */ getIntegration(integration) {\n        try {\n            return this._integrations[integration.id] || null;\n        } catch (_oO) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n            return null;\n        }\n    }\n    /**\n   * @inheritDoc\n   */ addIntegration(integration) {\n        (0,_integration_js__WEBPACK_IMPORTED_MODULE_8__.setupIntegration)(this, integration, this._integrations);\n    }\n    /**\n   * @inheritDoc\n   */ sendEvent(event, hint = {}) {\n        this.emit(\"beforeSendEvent\", event, hint);\n        let env = (0,_envelope_js__WEBPACK_IMPORTED_MODULE_9__.createEventEnvelope)(event, this._dsn, this._options._metadata, this._options.tunnel);\n        for (const attachment of hint.attachments || []){\n            env = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_10__.addItemToEnvelope)(env, (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_10__.createAttachmentEnvelopeItem)(attachment, this._options.transportOptions && this._options.transportOptions.textEncoder));\n        }\n        const promise = this._sendEnvelope(env);\n        if (promise) {\n            promise.then((sendResponse)=>this.emit(\"afterSendEvent\", event, sendResponse), null);\n        }\n    }\n    /**\n   * @inheritDoc\n   */ sendSession(session) {\n        const env = (0,_envelope_js__WEBPACK_IMPORTED_MODULE_9__.createSessionEnvelope)(session, this._dsn, this._options._metadata, this._options.tunnel);\n        void this._sendEnvelope(env);\n    }\n    /**\n   * @inheritDoc\n   */ recordDroppedEvent(reason, category, _event) {\n        // Note: we use `event` in replay, where we overwrite this hook.\n        if (this._options.sendClientReports) {\n            // We want to track each category (error, transaction, session, replay_event) separately\n            // but still keep the distinction between different type of outcomes.\n            // We could use nested maps, but it's much easier to read and type this way.\n            // A correct type for map-based implementation if we want to go that route\n            // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n            // With typescript 4.1 we could even use template literal types\n            const key = `${reason}:${category}`;\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.log(`Adding outcome: \"${key}\"`);\n            // The following works because undefined + 1 === NaN and NaN is falsy\n            this._outcomes[key] = this._outcomes[key] + 1 || 1;\n        }\n    }\n    /**\n   * @inheritDoc\n   */ captureAggregateMetrics(metricBucketItems) {\n        const metricsEnvelope = (0,_metrics_envelope_js__WEBPACK_IMPORTED_MODULE_11__.createMetricEnvelope)(metricBucketItems, this._dsn, this._options._metadata, this._options.tunnel);\n        void this._sendEnvelope(metricsEnvelope);\n    }\n    // Keep on() & emit() signatures in sync with types' client.ts interface\n    /* eslint-disable @typescript-eslint/unified-signatures */ /** @inheritdoc */ /** @inheritdoc */ on(hook, callback) {\n        if (!this._hooks[hook]) {\n            this._hooks[hook] = [];\n        }\n        // @ts-expect-error We assue the types are correct\n        this._hooks[hook].push(callback);\n    }\n    /** @inheritdoc */ /** @inheritdoc */ emit(hook, ...rest) {\n        if (this._hooks[hook]) {\n            this._hooks[hook].forEach((callback)=>callback(...rest));\n        }\n    }\n    /* eslint-enable @typescript-eslint/unified-signatures */ /** Updates existing session based on the provided event */ _updateSessionFromEvent(session, event) {\n        let crashed = false;\n        let errored = false;\n        const exceptions = event.exception && event.exception.values;\n        if (exceptions) {\n            errored = true;\n            for (const ex of exceptions){\n                const mechanism = ex.mechanism;\n                if (mechanism && mechanism.handled === false) {\n                    crashed = true;\n                    break;\n                }\n            }\n        }\n        // A session is updated and that session update is sent in only one of the two following scenarios:\n        // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n        // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n        const sessionNonTerminal = session.status === \"ok\";\n        const shouldUpdateAndSend = sessionNonTerminal && session.errors === 0 || sessionNonTerminal && crashed;\n        if (shouldUpdateAndSend) {\n            (0,_session_js__WEBPACK_IMPORTED_MODULE_6__.updateSession)(session, {\n                ...crashed && {\n                    status: \"crashed\"\n                },\n                errors: session.errors || Number(errored || crashed)\n            });\n            this.captureSession(session);\n        }\n    }\n    /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */ _isClientDoneProcessing(timeout) {\n        return new _sentry_utils__WEBPACK_IMPORTED_MODULE_7__.SyncPromise((resolve)=>{\n            let ticked = 0;\n            const tick = 1;\n            const interval = setInterval(()=>{\n                if (this._numProcessing == 0) {\n                    clearInterval(interval);\n                    resolve(true);\n                } else {\n                    ticked += tick;\n                    if (timeout && ticked >= timeout) {\n                        clearInterval(interval);\n                        resolve(false);\n                    }\n                }\n            }, tick);\n        });\n    }\n    /** Determines whether this SDK is enabled and a transport is present. */ _isEnabled() {\n        return this.getOptions().enabled !== false && this._transport !== undefined;\n    }\n    /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */ _prepareEvent(event, hint, scope) {\n        const options = this.getOptions();\n        const integrations = Object.keys(this._integrations);\n        if (!hint.integrations && integrations.length > 0) {\n            hint.integrations = integrations;\n        }\n        this.emit(\"preprocessEvent\", event, hint);\n        return (0,_utils_prepareEvent_js__WEBPACK_IMPORTED_MODULE_12__.prepareEvent)(options, event, hint, scope, this).then((evt)=>{\n            if (evt === null) {\n                return evt;\n            }\n            // If a trace context is not set on the event, we use the propagationContext set on the event to\n            // generate a trace context. If the propagationContext does not have a dynamic sampling context, we\n            // also generate one for it.\n            const { propagationContext } = evt.sdkProcessingMetadata || {};\n            const trace = evt.contexts && evt.contexts.trace;\n            if (!trace && propagationContext) {\n                const { traceId: trace_id, spanId, parentSpanId, dsc } = propagationContext;\n                evt.contexts = {\n                    trace: {\n                        trace_id,\n                        span_id: spanId,\n                        parent_span_id: parentSpanId\n                    },\n                    ...evt.contexts\n                };\n                const dynamicSamplingContext = dsc ? dsc : (0,_tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_13__.getDynamicSamplingContextFromClient)(trace_id, this, scope);\n                evt.sdkProcessingMetadata = {\n                    dynamicSamplingContext,\n                    ...evt.sdkProcessingMetadata\n                };\n            }\n            return evt;\n        });\n    }\n    /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */ _captureEvent(event, hint = {}, scope) {\n        return this._processEvent(event, hint, scope).then((finalEvent)=>{\n            return finalEvent.event_id;\n        }, (reason)=>{\n            if (_debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD) {\n                // If something's gone wrong, log the error as a warning. If it's just us having used a `SentryError` for\n                // control flow, log just the message (no stack) as a log-level log.\n                const sentryError = reason;\n                if (sentryError.logLevel === \"log\") {\n                    _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.log(sentryError.message);\n                } else {\n                    _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.warn(sentryError);\n                }\n            }\n            return undefined;\n        });\n    }\n    /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */ _processEvent(event, hint, scope) {\n        const options = this.getOptions();\n        const { sampleRate } = options;\n        const isTransaction = isTransactionEvent(event);\n        const isError = isErrorEvent(event);\n        const eventType = event.type || \"error\";\n        const beforeSendLabel = `before send for type \\`${eventType}\\``;\n        // 1.0 === 100% events are sent\n        // 0.0 === 0% events are sent\n        // Sampling for transaction happens somewhere else\n        if (isError && typeof sampleRate === \"number\" && Math.random() > sampleRate) {\n            this.recordDroppedEvent(\"sample_rate\", \"error\", event);\n            return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_7__.rejectedSyncPromise)(new _sentry_utils__WEBPACK_IMPORTED_MODULE_14__.SentryError(`Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`, \"log\"));\n        }\n        const dataCategory = eventType === \"replay_event\" ? \"replay\" : eventType;\n        return this._prepareEvent(event, hint, scope).then((prepared)=>{\n            if (prepared === null) {\n                this.recordDroppedEvent(\"event_processor\", dataCategory, event);\n                throw new _sentry_utils__WEBPACK_IMPORTED_MODULE_14__.SentryError(\"An event processor returned `null`, will not send event.\", \"log\");\n            }\n            const isInternalException = hint.data && hint.data.__sentry__ === true;\n            if (isInternalException) {\n                return prepared;\n            }\n            const result = processBeforeSend(options, prepared, hint);\n            return _validateBeforeSendResult(result, beforeSendLabel);\n        }).then((processedEvent)=>{\n            if (processedEvent === null) {\n                this.recordDroppedEvent(\"before_send\", dataCategory, event);\n                throw new _sentry_utils__WEBPACK_IMPORTED_MODULE_14__.SentryError(`${beforeSendLabel} returned \\`null\\`, will not send event.`, \"log\");\n            }\n            const session = scope && scope.getSession();\n            if (!isTransaction && session) {\n                this._updateSessionFromEvent(session, processedEvent);\n            }\n            // None of the Sentry built event processor will update transaction name,\n            // so if the transaction name has been changed by an event processor, we know\n            // it has to come from custom event processor added by a user\n            const transactionInfo = processedEvent.transaction_info;\n            if (isTransaction && transactionInfo && processedEvent.transaction !== event.transaction) {\n                const source = \"custom\";\n                processedEvent.transaction_info = {\n                    ...transactionInfo,\n                    source\n                };\n            }\n            this.sendEvent(processedEvent, hint);\n            return processedEvent;\n        }).then(null, (reason)=>{\n            if (reason instanceof _sentry_utils__WEBPACK_IMPORTED_MODULE_14__.SentryError) {\n                throw reason;\n            }\n            this.captureException(reason, {\n                data: {\n                    __sentry__: true\n                },\n                originalException: reason\n            });\n            throw new _sentry_utils__WEBPACK_IMPORTED_MODULE_14__.SentryError(`Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`);\n        });\n    }\n    /**\n   * Occupies the client with processing and event\n   */ _process(promise) {\n        this._numProcessing++;\n        void promise.then((value)=>{\n            this._numProcessing--;\n            return value;\n        }, (reason)=>{\n            this._numProcessing--;\n            return reason;\n        });\n    }\n    /**\n   * @inheritdoc\n   */ _sendEnvelope(envelope) {\n        this.emit(\"beforeEnvelope\", envelope);\n        if (this._isEnabled() && this._transport) {\n            return this._transport.send(envelope).then(null, (reason)=>{\n                _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Error while sending event:\", reason);\n            });\n        } else {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Transport disabled\");\n        }\n    }\n    /**\n   * Clears outcomes on this client and returns them.\n   */ _clearOutcomes() {\n        const outcomes = this._outcomes;\n        this._outcomes = {};\n        return Object.keys(outcomes).map((key)=>{\n            const [reason, category] = key.split(\":\");\n            return {\n                reason,\n                category,\n                quantity: outcomes[key]\n            };\n        });\n    }\n}\n/**\n * Verifies that return value of configured `beforeSend` or `beforeSendTransaction` is of expected type, and returns the value if so.\n */ function _validateBeforeSendResult(beforeSendResult, beforeSendLabel) {\n    const invalidValueError = `${beforeSendLabel} must return \\`null\\` or a valid event.`;\n    if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.isThenable)(beforeSendResult)) {\n        return beforeSendResult.then((event)=>{\n            if (!(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.isPlainObject)(event) && event !== null) {\n                throw new _sentry_utils__WEBPACK_IMPORTED_MODULE_14__.SentryError(invalidValueError);\n            }\n            return event;\n        }, (e)=>{\n            throw new _sentry_utils__WEBPACK_IMPORTED_MODULE_14__.SentryError(`${beforeSendLabel} rejected with ${e}`);\n        });\n    } else if (!(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.isPlainObject)(beforeSendResult) && beforeSendResult !== null) {\n        throw new _sentry_utils__WEBPACK_IMPORTED_MODULE_14__.SentryError(invalidValueError);\n    }\n    return beforeSendResult;\n}\n/**\n * Process the matching `beforeSendXXX` callback.\n */ function processBeforeSend(options, event, hint) {\n    const { beforeSend, beforeSendTransaction } = options;\n    if (isErrorEvent(event) && beforeSend) {\n        return beforeSend(event, hint);\n    }\n    if (isTransactionEvent(event) && beforeSendTransaction) {\n        return beforeSendTransaction(event, hint);\n    }\n    return event;\n}\nfunction isErrorEvent(event) {\n    return event.type === undefined;\n}\nfunction isTransactionEvent(event) {\n    return event.type === \"transaction\";\n}\n/**\n * Add an event processor to the current client.\n * This event processor will run for all events processed by this client.\n */ function addEventProcessor(callback) {\n    const client = (0,_hub_js__WEBPACK_IMPORTED_MODULE_15__.getCurrentHub)().getClient();\n    if (!client || !client.addEventProcessor) {\n        return;\n    }\n    client.addEventProcessor(callback);\n}\n //# sourceMappingURL=baseclient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/baseclient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/checkin.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/core/esm/checkin.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCheckInEnvelope: () => (/* binding */ createCheckInEnvelope)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/dsn.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/envelope.js\");\n\n/**\n * Create envelope from check in item.\n */ function createCheckInEnvelope(checkIn, dynamicSamplingContext, metadata, tunnel, dsn) {\n    const headers = {\n        sent_at: new Date().toISOString()\n    };\n    if (metadata && metadata.sdk) {\n        headers.sdk = {\n            name: metadata.sdk.name,\n            version: metadata.sdk.version\n        };\n    }\n    if (!!tunnel && !!dsn) {\n        headers.dsn = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.dsnToString)(dsn);\n    }\n    if (dynamicSamplingContext) {\n        headers.trace = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.dropUndefinedKeys)(dynamicSamplingContext);\n    }\n    const item = createCheckInEnvelopeItem(checkIn);\n    return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.createEnvelope)(headers, [\n        item\n    ]);\n}\nfunction createCheckInEnvelopeItem(checkIn) {\n    const checkInHeaders = {\n        type: \"check_in\"\n    };\n    return [\n        checkInHeaders,\n        checkIn\n    ];\n}\n //# sourceMappingURL=checkin.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9jaGVja2luLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBK0U7QUFFL0U7O0NBRUMsR0FDRCxTQUFTRyxzQkFDUEMsT0FBTyxFQUNQQyxzQkFBc0IsRUFDdEJDLFFBQVEsRUFDUkMsTUFBTSxFQUNOQyxHQUFHO0lBRUgsTUFBTUMsVUFBVTtRQUNkQyxTQUFTLElBQUlDLE9BQU9DLFdBQVc7SUFDakM7SUFFQSxJQUFJTixZQUFZQSxTQUFTTyxHQUFHLEVBQUU7UUFDNUJKLFFBQVFJLEdBQUcsR0FBRztZQUNaQyxNQUFNUixTQUFTTyxHQUFHLENBQUNDLElBQUk7WUFDdkJDLFNBQVNULFNBQVNPLEdBQUcsQ0FBQ0UsT0FBTztRQUMvQjtJQUNGO0lBRUEsSUFBSSxDQUFDLENBQUNSLFVBQVUsQ0FBQyxDQUFDQyxLQUFLO1FBQ3JCQyxRQUFRRCxHQUFHLEdBQUdSLDBEQUFXQSxDQUFDUTtJQUM1QjtJQUVBLElBQUlILHdCQUF3QjtRQUMxQkksUUFBUU8sS0FBSyxHQUFHZixnRUFBaUJBLENBQUNJO0lBQ3BDO0lBRUEsTUFBTVksT0FBT0MsMEJBQTBCZDtJQUN2QyxPQUFPRiw2REFBY0EsQ0FBQ08sU0FBUztRQUFDUTtLQUFLO0FBQ3ZDO0FBRUEsU0FBU0MsMEJBQTBCZCxPQUFPO0lBQ3hDLE1BQU1lLGlCQUFpQjtRQUNyQkMsTUFBTTtJQUNSO0lBQ0EsT0FBTztRQUFDRDtRQUFnQmY7S0FBUTtBQUNsQztBQUVpQyxDQUNqQyxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9jaGVja2luLmpzP2U5ZjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZHNuVG9TdHJpbmcsIGRyb3BVbmRlZmluZWRLZXlzLCBjcmVhdGVFbnZlbG9wZSB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuXG4vKipcbiAqIENyZWF0ZSBlbnZlbG9wZSBmcm9tIGNoZWNrIGluIGl0ZW0uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNoZWNrSW5FbnZlbG9wZShcbiAgY2hlY2tJbixcbiAgZHluYW1pY1NhbXBsaW5nQ29udGV4dCxcbiAgbWV0YWRhdGEsXG4gIHR1bm5lbCxcbiAgZHNuLFxuKSB7XG4gIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgc2VudF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICB9O1xuXG4gIGlmIChtZXRhZGF0YSAmJiBtZXRhZGF0YS5zZGspIHtcbiAgICBoZWFkZXJzLnNkayA9IHtcbiAgICAgIG5hbWU6IG1ldGFkYXRhLnNkay5uYW1lLFxuICAgICAgdmVyc2lvbjogbWV0YWRhdGEuc2RrLnZlcnNpb24sXG4gICAgfTtcbiAgfVxuXG4gIGlmICghIXR1bm5lbCAmJiAhIWRzbikge1xuICAgIGhlYWRlcnMuZHNuID0gZHNuVG9TdHJpbmcoZHNuKTtcbiAgfVxuXG4gIGlmIChkeW5hbWljU2FtcGxpbmdDb250ZXh0KSB7XG4gICAgaGVhZGVycy50cmFjZSA9IGRyb3BVbmRlZmluZWRLZXlzKGR5bmFtaWNTYW1wbGluZ0NvbnRleHQpIDtcbiAgfVxuXG4gIGNvbnN0IGl0ZW0gPSBjcmVhdGVDaGVja0luRW52ZWxvcGVJdGVtKGNoZWNrSW4pO1xuICByZXR1cm4gY3JlYXRlRW52ZWxvcGUoaGVhZGVycywgW2l0ZW1dKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ2hlY2tJbkVudmVsb3BlSXRlbShjaGVja0luKSB7XG4gIGNvbnN0IGNoZWNrSW5IZWFkZXJzID0ge1xuICAgIHR5cGU6ICdjaGVja19pbicsXG4gIH07XG4gIHJldHVybiBbY2hlY2tJbkhlYWRlcnMsIGNoZWNrSW5dO1xufVxuXG5leHBvcnQgeyBjcmVhdGVDaGVja0luRW52ZWxvcGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoZWNraW4uanMubWFwXG4iXSwibmFtZXMiOlsiZHNuVG9TdHJpbmciLCJkcm9wVW5kZWZpbmVkS2V5cyIsImNyZWF0ZUVudmVsb3BlIiwiY3JlYXRlQ2hlY2tJbkVudmVsb3BlIiwiY2hlY2tJbiIsImR5bmFtaWNTYW1wbGluZ0NvbnRleHQiLCJtZXRhZGF0YSIsInR1bm5lbCIsImRzbiIsImhlYWRlcnMiLCJzZW50X2F0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwic2RrIiwibmFtZSIsInZlcnNpb24iLCJ0cmFjZSIsIml0ZW0iLCJjcmVhdGVDaGVja0luRW52ZWxvcGVJdGVtIiwiY2hlY2tJbkhlYWRlcnMiLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/checkin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/constants.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/core/esm/constants.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ENVIRONMENT: () => (/* binding */ DEFAULT_ENVIRONMENT)\n/* harmony export */ });\nconst DEFAULT_ENVIRONMENT = \"production\";\n //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLHNCQUFzQjtBQUVHLENBQy9CLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZXNtL2NvbnN0YW50cy5qcz8yZTdmIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IERFRkFVTFRfRU5WSVJPTk1FTlQgPSAncHJvZHVjdGlvbic7XG5cbmV4cG9ydCB7IERFRkFVTFRfRU5WSVJPTk1FTlQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJERUZBVUxUX0VOVklST05NRU5UIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/debug-build.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/core/esm/debug-build.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEBUG_BUILD: () => (/* binding */ DEBUG_BUILD)\n/* harmony export */ });\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */ const DEBUG_BUILD =  false || false;\n //# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9kZWJ1Zy1idWlsZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Q0FJQyxHQUNELE1BQU1BLGNBQWUsTUFBNEIsSUFBZUMsS0FBZ0JBO0FBRXpELENBQ3ZCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZXNtL2RlYnVnLWJ1aWxkLmpzPzA3ZWYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIHNlcnZlcyBhcyBhIGJ1aWxkIHRpbWUgZmxhZyB0aGF0IHdpbGwgYmUgdHJ1ZSBieSBkZWZhdWx0LCBidXQgZmFsc2UgaW4gbm9uLWRlYnVnIGJ1aWxkcyBvciBpZiB1c2VycyByZXBsYWNlIGBfX1NFTlRSWV9ERUJVR19fYCBpbiB0aGVpciBnZW5lcmF0ZWQgY29kZS5cbiAqXG4gKiBBVFRFTlRJT046IFRoaXMgY29uc3RhbnQgbXVzdCBuZXZlciBjcm9zcyBwYWNrYWdlIGJvdW5kYXJpZXMgKGkuZS4gYmUgZXhwb3J0ZWQpIHRvIGd1YXJhbnRlZSB0aGF0IGl0IGNhbiBiZSB1c2VkIGZvciB0cmVlIHNoYWtpbmcuXG4gKi9cbmNvbnN0IERFQlVHX0JVSUxEID0gKHR5cGVvZiBfX1NFTlRSWV9ERUJVR19fID09PSAndW5kZWZpbmVkJyB8fCBfX1NFTlRSWV9ERUJVR19fKTtcblxuZXhwb3J0IHsgREVCVUdfQlVJTEQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLWJ1aWxkLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkRFQlVHX0JVSUxEIiwiX19TRU5UUllfREVCVUdfXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/debug-build.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/envelope.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/core/esm/envelope.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEventEnvelope: () => (/* binding */ createEventEnvelope),\n/* harmony export */   createSessionEnvelope: () => (/* binding */ createSessionEnvelope)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/envelope.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/dsn.js\");\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/ function enhanceEventWithSdkInfo(event, sdkInfo) {\n    if (!sdkInfo) {\n        return event;\n    }\n    event.sdk = event.sdk || {};\n    event.sdk.name = event.sdk.name || sdkInfo.name;\n    event.sdk.version = event.sdk.version || sdkInfo.version;\n    event.sdk.integrations = [\n        ...event.sdk.integrations || [],\n        ...sdkInfo.integrations || []\n    ];\n    event.sdk.packages = [\n        ...event.sdk.packages || [],\n        ...sdkInfo.packages || []\n    ];\n    return event;\n}\n/** Creates an envelope from a Session */ function createSessionEnvelope(session, dsn, metadata, tunnel) {\n    const sdkInfo = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.getSdkMetadataForEnvelopeHeader)(metadata);\n    const envelopeHeaders = {\n        sent_at: new Date().toISOString(),\n        ...sdkInfo && {\n            sdk: sdkInfo\n        },\n        ...!!tunnel && dsn && {\n            dsn: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.dsnToString)(dsn)\n        }\n    };\n    const envelopeItem = \"aggregates\" in session ? [\n        {\n            type: \"sessions\"\n        },\n        session\n    ] : [\n        {\n            type: \"session\"\n        },\n        session.toJSON()\n    ];\n    return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.createEnvelope)(envelopeHeaders, [\n        envelopeItem\n    ]);\n}\n/**\n * Create an Envelope from an event.\n */ function createEventEnvelope(event, dsn, metadata, tunnel) {\n    const sdkInfo = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.getSdkMetadataForEnvelopeHeader)(metadata);\n    /*\n    Note: Due to TS, event.type may be `replay_event`, theoretically.\n    In practice, we never call `createEventEnvelope` with `replay_event` type,\n    and we'd have to adjut a looot of types to make this work properly.\n    We want to avoid casting this around, as that could lead to bugs (e.g. when we add another type)\n    So the safe choice is to really guard against the replay_event type here.\n  */ const eventType = event.type && event.type !== \"replay_event\" ? event.type : \"event\";\n    enhanceEventWithSdkInfo(event, metadata && metadata.sdk);\n    const envelopeHeaders = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.createEventEnvelopeHeaders)(event, sdkInfo, tunnel, dsn);\n    // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n    // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n    // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n    // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n    delete event.sdkProcessingMetadata;\n    const eventItem = [\n        {\n            type: eventType\n        },\n        event\n    ];\n    return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.createEnvelope)(envelopeHeaders, [\n        eventItem\n    ]);\n}\n //# sourceMappingURL=envelope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9lbnZlbG9wZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXlIO0FBRXpIOzs7RUFHRSxHQUNGLFNBQVNJLHdCQUF3QkMsS0FBSyxFQUFFQyxPQUFPO0lBQzdDLElBQUksQ0FBQ0EsU0FBUztRQUNaLE9BQU9EO0lBQ1Q7SUFDQUEsTUFBTUUsR0FBRyxHQUFHRixNQUFNRSxHQUFHLElBQUksQ0FBQztJQUMxQkYsTUFBTUUsR0FBRyxDQUFDQyxJQUFJLEdBQUdILE1BQU1FLEdBQUcsQ0FBQ0MsSUFBSSxJQUFJRixRQUFRRSxJQUFJO0lBQy9DSCxNQUFNRSxHQUFHLENBQUNFLE9BQU8sR0FBR0osTUFBTUUsR0FBRyxDQUFDRSxPQUFPLElBQUlILFFBQVFHLE9BQU87SUFDeERKLE1BQU1FLEdBQUcsQ0FBQ0csWUFBWSxHQUFHO1dBQUtMLE1BQU1FLEdBQUcsQ0FBQ0csWUFBWSxJQUFJLEVBQUU7V0FBT0osUUFBUUksWUFBWSxJQUFJLEVBQUU7S0FBRTtJQUM3RkwsTUFBTUUsR0FBRyxDQUFDSSxRQUFRLEdBQUc7V0FBS04sTUFBTUUsR0FBRyxDQUFDSSxRQUFRLElBQUksRUFBRTtXQUFPTCxRQUFRSyxRQUFRLElBQUksRUFBRTtLQUFFO0lBQ2pGLE9BQU9OO0FBQ1Q7QUFFQSx1Q0FBdUMsR0FDdkMsU0FBU08sc0JBQ1BDLE9BQU8sRUFDUEMsR0FBRyxFQUNIQyxRQUFRLEVBQ1JDLE1BQU07SUFFTixNQUFNVixVQUFVTiw4RUFBK0JBLENBQUNlO0lBQ2hELE1BQU1FLGtCQUFrQjtRQUN0QkMsU0FBUyxJQUFJQyxPQUFPQyxXQUFXO1FBQy9CLEdBQUlkLFdBQVc7WUFBRUMsS0FBS0Q7UUFBUSxDQUFDO1FBQy9CLEdBQUksQ0FBQyxDQUFDVSxVQUFVRixPQUFPO1lBQUVBLEtBQUtYLDBEQUFXQSxDQUFDVztRQUFLLENBQUM7SUFDbEQ7SUFFQSxNQUFNTyxlQUNKLGdCQUFnQlIsVUFBVTtRQUFDO1lBQUVTLE1BQU07UUFBVztRQUFHVDtLQUFRLEdBQUc7UUFBQztZQUFFUyxNQUFNO1FBQVU7UUFBR1QsUUFBUVUsTUFBTTtLQUFHO0lBRXJHLE9BQU9yQiw2REFBY0EsQ0FBQ2UsaUJBQWlCO1FBQUNJO0tBQWE7QUFDdkQ7QUFFQTs7Q0FFQyxHQUNELFNBQVNHLG9CQUNQbkIsS0FBSyxFQUNMUyxHQUFHLEVBQ0hDLFFBQVEsRUFDUkMsTUFBTTtJQUVOLE1BQU1WLFVBQVVOLDhFQUErQkEsQ0FBQ2U7SUFFaEQ7Ozs7OztFQU1BLEdBQ0EsTUFBTVUsWUFBWXBCLE1BQU1pQixJQUFJLElBQUlqQixNQUFNaUIsSUFBSSxLQUFLLGlCQUFpQmpCLE1BQU1pQixJQUFJLEdBQUc7SUFFN0VsQix3QkFBd0JDLE9BQU9VLFlBQVlBLFNBQVNSLEdBQUc7SUFFdkQsTUFBTVUsa0JBQWtCaEIseUVBQTBCQSxDQUFDSSxPQUFPQyxTQUFTVSxRQUFRRjtJQUUzRSxtSEFBbUg7SUFDbkgsb0hBQW9IO0lBQ3BILHFIQUFxSDtJQUNySCwyRkFBMkY7SUFDM0YsT0FBT1QsTUFBTXFCLHFCQUFxQjtJQUVsQyxNQUFNQyxZQUFZO1FBQUM7WUFBRUwsTUFBTUc7UUFBVTtRQUFHcEI7S0FBTTtJQUM5QyxPQUFPSCw2REFBY0EsQ0FBQ2UsaUJBQWlCO1FBQUNVO0tBQVU7QUFDcEQ7QUFFc0QsQ0FDdEQsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vZW52ZWxvcGUuanM/YTQzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRTZGtNZXRhZGF0YUZvckVudmVsb3BlSGVhZGVyLCBjcmVhdGVFdmVudEVudmVsb3BlSGVhZGVycywgY3JlYXRlRW52ZWxvcGUsIGRzblRvU3RyaW5nIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbi8qKlxuICogQXBwbHkgU2RrSW5mbyAobmFtZSwgdmVyc2lvbiwgcGFja2FnZXMsIGludGVncmF0aW9ucykgdG8gdGhlIGNvcnJlc3BvbmRpbmcgZXZlbnQga2V5LlxuICogTWVyZ2Ugd2l0aCBleGlzdGluZyBkYXRhIGlmIGFueS5cbiAqKi9cbmZ1bmN0aW9uIGVuaGFuY2VFdmVudFdpdGhTZGtJbmZvKGV2ZW50LCBzZGtJbmZvKSB7XG4gIGlmICghc2RrSW5mbykge1xuICAgIHJldHVybiBldmVudDtcbiAgfVxuICBldmVudC5zZGsgPSBldmVudC5zZGsgfHwge307XG4gIGV2ZW50LnNkay5uYW1lID0gZXZlbnQuc2RrLm5hbWUgfHwgc2RrSW5mby5uYW1lO1xuICBldmVudC5zZGsudmVyc2lvbiA9IGV2ZW50LnNkay52ZXJzaW9uIHx8IHNka0luZm8udmVyc2lvbjtcbiAgZXZlbnQuc2RrLmludGVncmF0aW9ucyA9IFsuLi4oZXZlbnQuc2RrLmludGVncmF0aW9ucyB8fCBbXSksIC4uLihzZGtJbmZvLmludGVncmF0aW9ucyB8fCBbXSldO1xuICBldmVudC5zZGsucGFja2FnZXMgPSBbLi4uKGV2ZW50LnNkay5wYWNrYWdlcyB8fCBbXSksIC4uLihzZGtJbmZvLnBhY2thZ2VzIHx8IFtdKV07XG4gIHJldHVybiBldmVudDtcbn1cblxuLyoqIENyZWF0ZXMgYW4gZW52ZWxvcGUgZnJvbSBhIFNlc3Npb24gKi9cbmZ1bmN0aW9uIGNyZWF0ZVNlc3Npb25FbnZlbG9wZShcbiAgc2Vzc2lvbixcbiAgZHNuLFxuICBtZXRhZGF0YSxcbiAgdHVubmVsLFxuKSB7XG4gIGNvbnN0IHNka0luZm8gPSBnZXRTZGtNZXRhZGF0YUZvckVudmVsb3BlSGVhZGVyKG1ldGFkYXRhKTtcbiAgY29uc3QgZW52ZWxvcGVIZWFkZXJzID0ge1xuICAgIHNlbnRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAuLi4oc2RrSW5mbyAmJiB7IHNkazogc2RrSW5mbyB9KSxcbiAgICAuLi4oISF0dW5uZWwgJiYgZHNuICYmIHsgZHNuOiBkc25Ub1N0cmluZyhkc24pIH0pLFxuICB9O1xuXG4gIGNvbnN0IGVudmVsb3BlSXRlbSA9XG4gICAgJ2FnZ3JlZ2F0ZXMnIGluIHNlc3Npb24gPyBbeyB0eXBlOiAnc2Vzc2lvbnMnIH0sIHNlc3Npb25dIDogW3sgdHlwZTogJ3Nlc3Npb24nIH0sIHNlc3Npb24udG9KU09OKCldO1xuXG4gIHJldHVybiBjcmVhdGVFbnZlbG9wZShlbnZlbG9wZUhlYWRlcnMsIFtlbnZlbG9wZUl0ZW1dKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gRW52ZWxvcGUgZnJvbSBhbiBldmVudC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRXZlbnRFbnZlbG9wZShcbiAgZXZlbnQsXG4gIGRzbixcbiAgbWV0YWRhdGEsXG4gIHR1bm5lbCxcbikge1xuICBjb25zdCBzZGtJbmZvID0gZ2V0U2RrTWV0YWRhdGFGb3JFbnZlbG9wZUhlYWRlcihtZXRhZGF0YSk7XG5cbiAgLypcbiAgICBOb3RlOiBEdWUgdG8gVFMsIGV2ZW50LnR5cGUgbWF5IGJlIGByZXBsYXlfZXZlbnRgLCB0aGVvcmV0aWNhbGx5LlxuICAgIEluIHByYWN0aWNlLCB3ZSBuZXZlciBjYWxsIGBjcmVhdGVFdmVudEVudmVsb3BlYCB3aXRoIGByZXBsYXlfZXZlbnRgIHR5cGUsXG4gICAgYW5kIHdlJ2QgaGF2ZSB0byBhZGp1dCBhIGxvb290IG9mIHR5cGVzIHRvIG1ha2UgdGhpcyB3b3JrIHByb3Blcmx5LlxuICAgIFdlIHdhbnQgdG8gYXZvaWQgY2FzdGluZyB0aGlzIGFyb3VuZCwgYXMgdGhhdCBjb3VsZCBsZWFkIHRvIGJ1Z3MgKGUuZy4gd2hlbiB3ZSBhZGQgYW5vdGhlciB0eXBlKVxuICAgIFNvIHRoZSBzYWZlIGNob2ljZSBpcyB0byByZWFsbHkgZ3VhcmQgYWdhaW5zdCB0aGUgcmVwbGF5X2V2ZW50IHR5cGUgaGVyZS5cbiAgKi9cbiAgY29uc3QgZXZlbnRUeXBlID0gZXZlbnQudHlwZSAmJiBldmVudC50eXBlICE9PSAncmVwbGF5X2V2ZW50JyA/IGV2ZW50LnR5cGUgOiAnZXZlbnQnO1xuXG4gIGVuaGFuY2VFdmVudFdpdGhTZGtJbmZvKGV2ZW50LCBtZXRhZGF0YSAmJiBtZXRhZGF0YS5zZGspO1xuXG4gIGNvbnN0IGVudmVsb3BlSGVhZGVycyA9IGNyZWF0ZUV2ZW50RW52ZWxvcGVIZWFkZXJzKGV2ZW50LCBzZGtJbmZvLCB0dW5uZWwsIGRzbik7XG5cbiAgLy8gUHJldmVudCB0aGlzIGRhdGEgKHdoaWNoLCBpZiBpdCBleGlzdHMsIHdhcyB1c2VkIGluIGVhcmxpZXIgc3RlcHMgaW4gdGhlIHByb2Nlc3NpbmcgcGlwZWxpbmUpIGZyb20gYmVpbmcgc2VudCB0b1xuICAvLyBzZW50cnkuIChOb3RlOiBPdXIgdXNlIG9mIHRoaXMgcHJvcGVydHkgY29tZXMgYW5kIGdvZXMgd2l0aCB3aGF0ZXZlciB3ZSBtaWdodCBiZSBkZWJ1Z2dpbmcsIHdoYXRldmVyIGhhY2tzIHdlIG1heVxuICAvLyBoYXZlIHRlbXBvcmFyaWx5IGFkZGVkLCBldGMuIEV2ZW4gaWYgd2UgZG9uJ3QgaGFwcGVuIHRvIGJlIHVzaW5nIGl0IGF0IHNvbWUgcG9pbnQgaW4gdGhlIGZ1dHVyZSwgbGV0J3Mgbm90IGdldCByaWRcbiAgLy8gb2YgdGhpcyBgZGVsZXRlYCwgbGVzdCB3ZSBtaXNzIHB1dHRpbmcgaXQgYmFjayBpbiB0aGUgbmV4dCB0aW1lIHRoZSBwcm9wZXJ0eSBpcyBpbiB1c2UuKVxuICBkZWxldGUgZXZlbnQuc2RrUHJvY2Vzc2luZ01ldGFkYXRhO1xuXG4gIGNvbnN0IGV2ZW50SXRlbSA9IFt7IHR5cGU6IGV2ZW50VHlwZSB9LCBldmVudF07XG4gIHJldHVybiBjcmVhdGVFbnZlbG9wZShlbnZlbG9wZUhlYWRlcnMsIFtldmVudEl0ZW1dKTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlRXZlbnRFbnZlbG9wZSwgY3JlYXRlU2Vzc2lvbkVudmVsb3BlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnZlbG9wZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJnZXRTZGtNZXRhZGF0YUZvckVudmVsb3BlSGVhZGVyIiwiY3JlYXRlRXZlbnRFbnZlbG9wZUhlYWRlcnMiLCJjcmVhdGVFbnZlbG9wZSIsImRzblRvU3RyaW5nIiwiZW5oYW5jZUV2ZW50V2l0aFNka0luZm8iLCJldmVudCIsInNka0luZm8iLCJzZGsiLCJuYW1lIiwidmVyc2lvbiIsImludGVncmF0aW9ucyIsInBhY2thZ2VzIiwiY3JlYXRlU2Vzc2lvbkVudmVsb3BlIiwic2Vzc2lvbiIsImRzbiIsIm1ldGFkYXRhIiwidHVubmVsIiwiZW52ZWxvcGVIZWFkZXJzIiwic2VudF9hdCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImVudmVsb3BlSXRlbSIsInR5cGUiLCJ0b0pTT04iLCJjcmVhdGVFdmVudEVudmVsb3BlIiwiZXZlbnRUeXBlIiwic2RrUHJvY2Vzc2luZ01ldGFkYXRhIiwiZXZlbnRJdGVtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/envelope.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/eventProcessors.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/core/esm/eventProcessors.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addGlobalEventProcessor: () => (/* binding */ addGlobalEventProcessor),\n/* harmony export */   getGlobalEventProcessors: () => (/* binding */ getGlobalEventProcessors),\n/* harmony export */   notifyEventProcessors: () => (/* binding */ notifyEventProcessors)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/worldwide.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/syncpromise.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/esm/debug-build.js\");\n\n\n/**\n * Returns the global event processors.\n * @deprecated Global event processors will be removed in v8.\n */ function getGlobalEventProcessors() {\n    return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.getGlobalSingleton)(\"globalEventProcessors\", ()=>[]);\n}\n/**\n * Add a EventProcessor to be kept globally.\n * @deprecated Use `addEventProcessor` instead. Global event processors will be removed in v8.\n */ function addGlobalEventProcessor(callback) {\n    // eslint-disable-next-line deprecation/deprecation\n    getGlobalEventProcessors().push(callback);\n}\n/**\n * Process an array of event processors, returning the processed event (or `null` if the event was dropped).\n */ function notifyEventProcessors(processors, event, hint, index = 0) {\n    return new _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.SyncPromise((resolve, reject)=>{\n        const processor = processors[index];\n        if (event === null || typeof processor !== \"function\") {\n            resolve(event);\n        } else {\n            const result = processor({\n                ...event\n            }, hint);\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && processor.id && result === null && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.log(`Event processor \"${processor.id}\" dropped event`);\n            if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.isThenable)(result)) {\n                void result.then((final)=>notifyEventProcessors(processors, final, hint, index + 1).then(resolve)).then(null, reject);\n            } else {\n                void notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);\n            }\n        }\n    });\n}\n //# sourceMappingURL=eventProcessors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9ldmVudFByb2Nlc3NvcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBb0Y7QUFDckM7QUFFL0M7OztDQUdDLEdBQ0QsU0FBU0s7SUFDUCxPQUFPTCxpRUFBa0JBLENBQUMseUJBQXlCLElBQU0sRUFBRTtBQUM3RDtBQUVBOzs7Q0FHQyxHQUNELFNBQVNNLHdCQUF3QkMsUUFBUTtJQUN2QyxtREFBbUQ7SUFDbkRGLDJCQUEyQkcsSUFBSSxDQUFDRDtBQUNsQztBQUVBOztDQUVDLEdBQ0QsU0FBU0Usc0JBQ1BDLFVBQVUsRUFDVkMsS0FBSyxFQUNMQyxJQUFJLEVBQ0pDLFFBQVEsQ0FBQztJQUVULE9BQU8sSUFBSVosc0RBQVdBLENBQUMsQ0FBQ2EsU0FBU0M7UUFDL0IsTUFBTUMsWUFBWU4sVUFBVSxDQUFDRyxNQUFNO1FBQ25DLElBQUlGLFVBQVUsUUFBUSxPQUFPSyxjQUFjLFlBQVk7WUFDckRGLFFBQVFIO1FBQ1YsT0FBTztZQUNMLE1BQU1NLFNBQVNELFVBQVU7Z0JBQUUsR0FBR0wsS0FBSztZQUFDLEdBQUdDO1lBRXZDUix3REFBV0EsSUFBSVksVUFBVUUsRUFBRSxJQUFJRCxXQUFXLFFBQVFmLGlEQUFNQSxDQUFDaUIsR0FBRyxDQUFDLENBQUMsaUJBQWlCLEVBQUVILFVBQVVFLEVBQUUsQ0FBQyxlQUFlLENBQUM7WUFFOUcsSUFBSWYseURBQVVBLENBQUNjLFNBQVM7Z0JBQ3RCLEtBQUtBLE9BQ0ZHLElBQUksQ0FBQ0MsQ0FBQUEsUUFBU1osc0JBQXNCQyxZQUFZVyxPQUFPVCxNQUFNQyxRQUFRLEdBQUdPLElBQUksQ0FBQ04sVUFDN0VNLElBQUksQ0FBQyxNQUFNTDtZQUNoQixPQUFPO2dCQUNMLEtBQUtOLHNCQUFzQkMsWUFBWU8sUUFBUUwsTUFBTUMsUUFBUSxHQUMxRE8sSUFBSSxDQUFDTixTQUNMTSxJQUFJLENBQUMsTUFBTUw7WUFDaEI7UUFDRjtJQUNGO0FBQ0Y7QUFFb0YsQ0FDcEYsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vZXZlbnRQcm9jZXNzb3JzLmpzPzA2NDEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0R2xvYmFsU2luZ2xldG9uLCBTeW5jUHJvbWlzZSwgbG9nZ2VyLCBpc1RoZW5hYmxlIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBERUJVR19CVUlMRCB9IGZyb20gJy4vZGVidWctYnVpbGQuanMnO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGdsb2JhbCBldmVudCBwcm9jZXNzb3JzLlxuICogQGRlcHJlY2F0ZWQgR2xvYmFsIGV2ZW50IHByb2Nlc3NvcnMgd2lsbCBiZSByZW1vdmVkIGluIHY4LlxuICovXG5mdW5jdGlvbiBnZXRHbG9iYWxFdmVudFByb2Nlc3NvcnMoKSB7XG4gIHJldHVybiBnZXRHbG9iYWxTaW5nbGV0b24oJ2dsb2JhbEV2ZW50UHJvY2Vzc29ycycsICgpID0+IFtdKTtcbn1cblxuLyoqXG4gKiBBZGQgYSBFdmVudFByb2Nlc3NvciB0byBiZSBrZXB0IGdsb2JhbGx5LlxuICogQGRlcHJlY2F0ZWQgVXNlIGBhZGRFdmVudFByb2Nlc3NvcmAgaW5zdGVhZC4gR2xvYmFsIGV2ZW50IHByb2Nlc3NvcnMgd2lsbCBiZSByZW1vdmVkIGluIHY4LlxuICovXG5mdW5jdGlvbiBhZGRHbG9iYWxFdmVudFByb2Nlc3NvcihjYWxsYmFjaykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgZ2V0R2xvYmFsRXZlbnRQcm9jZXNzb3JzKCkucHVzaChjYWxsYmFjayk7XG59XG5cbi8qKlxuICogUHJvY2VzcyBhbiBhcnJheSBvZiBldmVudCBwcm9jZXNzb3JzLCByZXR1cm5pbmcgdGhlIHByb2Nlc3NlZCBldmVudCAob3IgYG51bGxgIGlmIHRoZSBldmVudCB3YXMgZHJvcHBlZCkuXG4gKi9cbmZ1bmN0aW9uIG5vdGlmeUV2ZW50UHJvY2Vzc29ycyhcbiAgcHJvY2Vzc29ycyxcbiAgZXZlbnQsXG4gIGhpbnQsXG4gIGluZGV4ID0gMCxcbikge1xuICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBwcm9jZXNzb3IgPSBwcm9jZXNzb3JzW2luZGV4XTtcbiAgICBpZiAoZXZlbnQgPT09IG51bGwgfHwgdHlwZW9mIHByb2Nlc3NvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVzb2x2ZShldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHByb2Nlc3Nvcih7IC4uLmV2ZW50IH0sIGhpbnQpIDtcblxuICAgICAgREVCVUdfQlVJTEQgJiYgcHJvY2Vzc29yLmlkICYmIHJlc3VsdCA9PT0gbnVsbCAmJiBsb2dnZXIubG9nKGBFdmVudCBwcm9jZXNzb3IgXCIke3Byb2Nlc3Nvci5pZH1cIiBkcm9wcGVkIGV2ZW50YCk7XG5cbiAgICAgIGlmIChpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgdm9pZCByZXN1bHRcbiAgICAgICAgICAudGhlbihmaW5hbCA9PiBub3RpZnlFdmVudFByb2Nlc3NvcnMocHJvY2Vzc29ycywgZmluYWwsIGhpbnQsIGluZGV4ICsgMSkudGhlbihyZXNvbHZlKSlcbiAgICAgICAgICAudGhlbihudWxsLCByZWplY3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm9pZCBub3RpZnlFdmVudFByb2Nlc3NvcnMocHJvY2Vzc29ycywgcmVzdWx0LCBoaW50LCBpbmRleCArIDEpXG4gICAgICAgICAgLnRoZW4ocmVzb2x2ZSlcbiAgICAgICAgICAudGhlbihudWxsLCByZWplY3QpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCB7IGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yLCBnZXRHbG9iYWxFdmVudFByb2Nlc3NvcnMsIG5vdGlmeUV2ZW50UHJvY2Vzc29ycyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRQcm9jZXNzb3JzLmpzLm1hcFxuIl0sIm5hbWVzIjpbImdldEdsb2JhbFNpbmdsZXRvbiIsIlN5bmNQcm9taXNlIiwibG9nZ2VyIiwiaXNUaGVuYWJsZSIsIkRFQlVHX0JVSUxEIiwiZ2V0R2xvYmFsRXZlbnRQcm9jZXNzb3JzIiwiYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IiLCJjYWxsYmFjayIsInB1c2giLCJub3RpZnlFdmVudFByb2Nlc3NvcnMiLCJwcm9jZXNzb3JzIiwiZXZlbnQiLCJoaW50IiwiaW5kZXgiLCJyZXNvbHZlIiwicmVqZWN0IiwicHJvY2Vzc29yIiwicmVzdWx0IiwiaWQiLCJsb2ciLCJ0aGVuIiwiZmluYWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/eventProcessors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/exports.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/core/esm/exports.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addBreadcrumb: () => (/* binding */ addBreadcrumb),\n/* harmony export */   captureCheckIn: () => (/* binding */ captureCheckIn),\n/* harmony export */   captureEvent: () => (/* binding */ captureEvent),\n/* harmony export */   captureException: () => (/* binding */ captureException),\n/* harmony export */   captureMessage: () => (/* binding */ captureMessage),\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   configureScope: () => (/* binding */ configureScope),\n/* harmony export */   flush: () => (/* binding */ flush),\n/* harmony export */   getClient: () => (/* binding */ getClient),\n/* harmony export */   getCurrentScope: () => (/* binding */ getCurrentScope),\n/* harmony export */   lastEventId: () => (/* binding */ lastEventId),\n/* harmony export */   setContext: () => (/* binding */ setContext),\n/* harmony export */   setExtra: () => (/* binding */ setExtra),\n/* harmony export */   setExtras: () => (/* binding */ setExtras),\n/* harmony export */   setTag: () => (/* binding */ setTag),\n/* harmony export */   setTags: () => (/* binding */ setTags),\n/* harmony export */   setUser: () => (/* binding */ setUser),\n/* harmony export */   startTransaction: () => (/* binding */ startTransaction),\n/* harmony export */   withMonitor: () => (/* binding */ withMonitor),\n/* harmony export */   withScope: () => (/* binding */ withScope)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/time.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/esm/debug-build.js\");\n/* harmony import */ var _hub_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hub.js */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _utils_prepareEvent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/prepareEvent.js */ \"(ssr)/./node_modules/@sentry/core/esm/utils/prepareEvent.js\");\n\n\n\n\n// Note: All functions in this file are typed with a return value of `ReturnType<Hub[HUB_FUNCTION]>`,\n// where HUB_FUNCTION is some method on the Hub class.\n//\n// This is done to make sure the top level SDK methods stay in sync with the hub methods.\n// Although every method here has an explicit return type, some of them (that map to void returns) do not\n// contain `return` keywords. This is done to save on bundle size, as `return` is not minifiable.\n/**\n * Captures an exception event and sends it to Sentry.\n * This accepts an event hint as optional second parameter.\n * Alternatively, you can also pass a CaptureContext directly as second parameter.\n */ function captureException(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexception, hint) {\n    return (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().captureException(exception, (0,_utils_prepareEvent_js__WEBPACK_IMPORTED_MODULE_1__.parseEventHintOrCaptureContext)(hint));\n}\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param Severity Define the level of the message.\n * @returns The generated eventId.\n */ function captureMessage(message, // eslint-disable-next-line deprecation/deprecation\ncaptureContext) {\n    // This is necessary to provide explicit scopes upgrade, without changing the original\n    // arity of the `captureMessage(message, level)` method.\n    const level = typeof captureContext === \"string\" ? captureContext : undefined;\n    const context = typeof captureContext !== \"string\" ? {\n        captureContext\n    } : undefined;\n    return (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().captureMessage(message, level, context);\n}\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */ function captureEvent(event, hint) {\n    return (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().captureEvent(event, hint);\n}\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */ function configureScope(callback) {\n    (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().configureScope(callback);\n}\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */ function addBreadcrumb(breadcrumb) {\n    (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().addBreadcrumb(breadcrumb);\n}\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setContext(name, context) {\n    (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().setContext(name, context);\n}\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */ function setExtras(extras) {\n    (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().setExtras(extras);\n}\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */ function setExtra(key, extra) {\n    (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().setExtra(key, extra);\n}\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */ function setTags(tags) {\n    (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().setTags(tags);\n}\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */ function setTag(key, value) {\n    (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().setTag(key, value);\n}\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */ function setUser(user) {\n    (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().setUser(user);\n}\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */ function withScope(callback) {\n    (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().withScope(callback);\n}\n/**\n * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n *\n * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n * new child span within the transaction or any span, call the respective `.startChild()` method.\n *\n * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n *\n * The transaction must be finished with a call to its `.finish()` method, at which point the transaction with all its\n * finished child spans will be sent to Sentry.\n *\n * NOTE: This function should only be used for *manual* instrumentation. Auto-instrumentation should call\n * `startTransaction` directly on the hub.\n *\n * @param context Properties of the new `Transaction`.\n * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n * default values). See {@link Options.tracesSampler}.\n *\n * @returns The transaction which was just started\n */ function startTransaction(context, customSamplingContext) {\n    return (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().startTransaction({\n        ...context\n    }, customSamplingContext);\n}\n/**\n * Create a cron monitor check in and send it to Sentry.\n *\n * @param checkIn An object that describes a check in.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */ function captureCheckIn(checkIn, upsertMonitorConfig) {\n    const hub = (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)();\n    const scope = hub.getScope();\n    const client = hub.getClient();\n    if (!client) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.warn(\"Cannot capture check-in. No client defined.\");\n    } else if (!client.captureCheckIn) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.warn(\"Cannot capture check-in. Client does not support sending check-ins.\");\n    } else {\n        return client.captureCheckIn(checkIn, upsertMonitorConfig, scope);\n    }\n    return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.uuid4)();\n}\n/**\n * Wraps a callback with a cron monitor check in. The check in will be sent to Sentry when the callback finishes.\n *\n * @param monitorSlug The distinct slug of the monitor.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */ function withMonitor(monitorSlug, callback, upsertMonitorConfig) {\n    const checkInId = captureCheckIn({\n        monitorSlug,\n        status: \"in_progress\"\n    }, upsertMonitorConfig);\n    const now = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.timestampInSeconds)();\n    function finishCheckIn(status) {\n        captureCheckIn({\n            monitorSlug,\n            status,\n            checkInId,\n            duration: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.timestampInSeconds)() - now\n        });\n    }\n    let maybePromiseResult;\n    try {\n        maybePromiseResult = callback();\n    } catch (e) {\n        finishCheckIn(\"error\");\n        throw e;\n    }\n    if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__.isThenable)(maybePromiseResult)) {\n        Promise.resolve(maybePromiseResult).then(()=>{\n            finishCheckIn(\"ok\");\n        }, ()=>{\n            finishCheckIn(\"error\");\n        });\n    } else {\n        finishCheckIn(\"ok\");\n    }\n    return maybePromiseResult;\n}\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */ async function flush(timeout) {\n    const client = getClient();\n    if (client) {\n        return client.flush(timeout);\n    }\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.warn(\"Cannot flush events. No client defined.\");\n    return Promise.resolve(false);\n}\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */ async function close(timeout) {\n    const client = getClient();\n    if (client) {\n        return client.close(timeout);\n    }\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.warn(\"Cannot flush events and disable SDK. No client defined.\");\n    return Promise.resolve(false);\n}\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */ function lastEventId() {\n    return (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().lastEventId();\n}\n/**\n * Get the currently active client.\n */ function getClient() {\n    return (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().getClient();\n}\n/**\n * Get the currently active scope.\n */ function getCurrentScope() {\n    return (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().getScope();\n}\n //# sourceMappingURL=exports.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/exports.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/hub.js":
/*!**********************************************!*\
  !*** ./node_modules/@sentry/core/esm/hub.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_VERSION: () => (/* binding */ API_VERSION),\n/* harmony export */   Hub: () => (/* binding */ Hub),\n/* harmony export */   ensureHubOnCarrier: () => (/* binding */ ensureHubOnCarrier),\n/* harmony export */   getCurrentHub: () => (/* binding */ getCurrentHub),\n/* harmony export */   getHubFromCarrier: () => (/* binding */ getHubFromCarrier),\n/* harmony export */   getMainCarrier: () => (/* binding */ getMainCarrier),\n/* harmony export */   makeMain: () => (/* binding */ makeMain),\n/* harmony export */   runWithAsyncContext: () => (/* binding */ runWithAsyncContext),\n/* harmony export */   setAsyncContextStrategy: () => (/* binding */ setAsyncContextStrategy),\n/* harmony export */   setHubOnCarrier: () => (/* binding */ setHubOnCarrier)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/time.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/worldwide.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@sentry/core/esm/constants.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/esm/debug-build.js\");\n/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scope.js */ \"(ssr)/./node_modules/@sentry/core/esm/scope.js\");\n/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./session.js */ \"(ssr)/./node_modules/@sentry/core/esm/session.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version.js */ \"(ssr)/./node_modules/@sentry/core/esm/version.js\");\n\n\n\n\n\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */ const API_VERSION = parseFloat(_version_js__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION);\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */ const DEFAULT_BREADCRUMBS = 100;\n/**\n * @inheritDoc\n */ class Hub {\n    /** Is a {@link Layer}[] containing the client and scope */ /** Contains the last event id of a captured event.  */ /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */ constructor(client, scope = new _scope_js__WEBPACK_IMPORTED_MODULE_1__.Scope(), _version = API_VERSION){\n        this._version = _version;\n        this._stack = [\n            {\n                scope\n            }\n        ];\n        if (client) {\n            this.bindClient(client);\n        }\n    }\n    /**\n   * @inheritDoc\n   */ isOlderThan(version) {\n        return this._version < version;\n    }\n    /**\n   * @inheritDoc\n   */ bindClient(client) {\n        const top = this.getStackTop();\n        top.client = client;\n        if (client && client.setupIntegrations) {\n            client.setupIntegrations();\n        }\n    }\n    /**\n   * @inheritDoc\n   */ pushScope() {\n        // We want to clone the content of prev scope\n        const scope = this.getScope().clone();\n        this.getStack().push({\n            client: this.getClient(),\n            scope\n        });\n        return scope;\n    }\n    /**\n   * @inheritDoc\n   */ popScope() {\n        if (this.getStack().length <= 1) return false;\n        return !!this.getStack().pop();\n    }\n    /**\n   * @inheritDoc\n   */ withScope(callback) {\n        const scope = this.pushScope();\n        try {\n            callback(scope);\n        } finally{\n            this.popScope();\n        }\n    }\n    /**\n   * @inheritDoc\n   */ getClient() {\n        return this.getStackTop().client;\n    }\n    /** Returns the scope of the top stack. */ getScope() {\n        return this.getStackTop().scope;\n    }\n    /** Returns the scope stack for domains or the process. */ getStack() {\n        return this._stack;\n    }\n    /** Returns the topmost scope layer in the order domain > local > process. */ getStackTop() {\n        return this._stack[this._stack.length - 1];\n    }\n    /**\n   * @inheritDoc\n   */ captureException(exception, hint) {\n        const eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.uuid4)();\n        const syntheticException = new Error(\"Sentry syntheticException\");\n        this._withClient((client, scope)=>{\n            client.captureException(exception, {\n                originalException: exception,\n                syntheticException,\n                ...hint,\n                event_id: eventId\n            }, scope);\n        });\n        return eventId;\n    }\n    /**\n   * @inheritDoc\n   */ captureMessage(message, // eslint-disable-next-line deprecation/deprecation\n    level, hint) {\n        const eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.uuid4)();\n        const syntheticException = new Error(message);\n        this._withClient((client, scope)=>{\n            client.captureMessage(message, level, {\n                originalException: message,\n                syntheticException,\n                ...hint,\n                event_id: eventId\n            }, scope);\n        });\n        return eventId;\n    }\n    /**\n   * @inheritDoc\n   */ captureEvent(event, hint) {\n        const eventId = hint && hint.event_id ? hint.event_id : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.uuid4)();\n        if (!event.type) {\n            this._lastEventId = eventId;\n        }\n        this._withClient((client, scope)=>{\n            client.captureEvent(event, {\n                ...hint,\n                event_id: eventId\n            }, scope);\n        });\n        return eventId;\n    }\n    /**\n   * @inheritDoc\n   */ lastEventId() {\n        return this._lastEventId;\n    }\n    /**\n   * @inheritDoc\n   */ addBreadcrumb(breadcrumb, hint) {\n        const { scope, client } = this.getStackTop();\n        if (!client) return;\n        const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } = client.getOptions && client.getOptions() || {};\n        if (maxBreadcrumbs <= 0) return;\n        const timestamp = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.dateTimestampInSeconds)();\n        const mergedBreadcrumb = {\n            timestamp,\n            ...breadcrumb\n        };\n        const finalBreadcrumb = beforeBreadcrumb ? (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.consoleSandbox)(()=>beforeBreadcrumb(mergedBreadcrumb, hint)) : mergedBreadcrumb;\n        if (finalBreadcrumb === null) return;\n        if (client.emit) {\n            client.emit(\"beforeAddBreadcrumb\", finalBreadcrumb, hint);\n        }\n        scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n    }\n    /**\n   * @inheritDoc\n   */ setUser(user) {\n        this.getScope().setUser(user);\n    }\n    /**\n   * @inheritDoc\n   */ setTags(tags) {\n        this.getScope().setTags(tags);\n    }\n    /**\n   * @inheritDoc\n   */ setExtras(extras) {\n        this.getScope().setExtras(extras);\n    }\n    /**\n   * @inheritDoc\n   */ setTag(key, value) {\n        this.getScope().setTag(key, value);\n    }\n    /**\n   * @inheritDoc\n   */ setExtra(key, extra) {\n        this.getScope().setExtra(key, extra);\n    }\n    /**\n   * @inheritDoc\n   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    setContext(name, context) {\n        this.getScope().setContext(name, context);\n    }\n    /**\n   * @inheritDoc\n   */ configureScope(callback) {\n        const { scope, client } = this.getStackTop();\n        if (client) {\n            callback(scope);\n        }\n    }\n    /**\n   * @inheritDoc\n   */ run(callback) {\n        const oldHub = makeMain(this);\n        try {\n            callback(this);\n        } finally{\n            makeMain(oldHub);\n        }\n    }\n    /**\n   * @inheritDoc\n   */ getIntegration(integration) {\n        const client = this.getClient();\n        if (!client) return null;\n        try {\n            return client.getIntegration(integration);\n        } catch (_oO) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_5__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n            return null;\n        }\n    }\n    /**\n   * @inheritDoc\n   */ startTransaction(context, customSamplingContext) {\n        const result = this._callExtensionMethod(\"startTransaction\", context, customSamplingContext);\n        if (_debug_build_js__WEBPACK_IMPORTED_MODULE_5__.DEBUG_BUILD && !result) {\n            const client = this.getClient();\n            if (!client) {\n                _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.warn(\"Tracing extension 'startTransaction' is missing. You should 'init' the SDK before calling 'startTransaction'\");\n            } else {\n                _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.warn(`Tracing extension 'startTransaction' has not been added. Call 'addTracingExtensions' before calling 'init':\nSentry.addTracingExtensions();\nSentry.init({...});\n`);\n            }\n        }\n        return result;\n    }\n    /**\n   * @inheritDoc\n   */ traceHeaders() {\n        return this._callExtensionMethod(\"traceHeaders\");\n    }\n    /**\n   * @inheritDoc\n   */ captureSession(endSession = false) {\n        // both send the update and pull the session from the scope\n        if (endSession) {\n            return this.endSession();\n        }\n        // only send the update\n        this._sendSessionUpdate();\n    }\n    /**\n   * @inheritDoc\n   */ endSession() {\n        const layer = this.getStackTop();\n        const scope = layer.scope;\n        const session = scope.getSession();\n        if (session) {\n            (0,_session_js__WEBPACK_IMPORTED_MODULE_6__.closeSession)(session);\n        }\n        this._sendSessionUpdate();\n        // the session is over; take it off of the scope\n        scope.setSession();\n    }\n    /**\n   * @inheritDoc\n   */ startSession(context) {\n        const { scope, client } = this.getStackTop();\n        const { release, environment = _constants_js__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_ENVIRONMENT } = client && client.getOptions() || {};\n        // Will fetch userAgent if called from browser sdk\n        const { userAgent } = _sentry_utils__WEBPACK_IMPORTED_MODULE_8__.GLOBAL_OBJ.navigator || {};\n        const session = (0,_session_js__WEBPACK_IMPORTED_MODULE_6__.makeSession)({\n            release,\n            environment,\n            user: scope.getUser(),\n            ...userAgent && {\n                userAgent\n            },\n            ...context\n        });\n        // End existing session if there's one\n        const currentSession = scope.getSession && scope.getSession();\n        if (currentSession && currentSession.status === \"ok\") {\n            (0,_session_js__WEBPACK_IMPORTED_MODULE_6__.updateSession)(currentSession, {\n                status: \"exited\"\n            });\n        }\n        this.endSession();\n        // Afterwards we set the new session on the scope\n        scope.setSession(session);\n        return session;\n    }\n    /**\n   * Returns if default PII should be sent to Sentry and propagated in ourgoing requests\n   * when Tracing is used.\n   */ shouldSendDefaultPii() {\n        const client = this.getClient();\n        const options = client && client.getOptions();\n        return Boolean(options && options.sendDefaultPii);\n    }\n    /**\n   * Sends the current Session on the scope\n   */ _sendSessionUpdate() {\n        const { scope, client } = this.getStackTop();\n        const session = scope.getSession();\n        if (session && client && client.captureSession) {\n            client.captureSession(session);\n        }\n    }\n    /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */ _withClient(callback) {\n        const { scope, client } = this.getStackTop();\n        if (client) {\n            callback(client, scope);\n        }\n    }\n    /**\n   * Calls global extension method and binding current instance to the function call\n   */ // @ts-expect-error Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _callExtensionMethod(method, ...args) {\n        const carrier = getMainCarrier();\n        const sentry = carrier.__SENTRY__;\n        if (sentry && sentry.extensions && typeof sentry.extensions[method] === \"function\") {\n            return sentry.extensions[method].apply(this, args);\n        }\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_5__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n    }\n}\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/ function getMainCarrier() {\n    _sentry_utils__WEBPACK_IMPORTED_MODULE_8__.GLOBAL_OBJ.__SENTRY__ = _sentry_utils__WEBPACK_IMPORTED_MODULE_8__.GLOBAL_OBJ.__SENTRY__ || {\n        extensions: {},\n        hub: undefined\n    };\n    return _sentry_utils__WEBPACK_IMPORTED_MODULE_8__.GLOBAL_OBJ;\n}\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */ function makeMain(hub) {\n    const registry = getMainCarrier();\n    const oldHub = getHubFromCarrier(registry);\n    setHubOnCarrier(registry, hub);\n    return oldHub;\n}\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */ function getCurrentHub() {\n    // Get main carrier (global for every environment)\n    const registry = getMainCarrier();\n    if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n        const hub = registry.__SENTRY__.acs.getCurrentHub();\n        if (hub) {\n            return hub;\n        }\n    }\n    // Return hub that lives on a global object\n    return getGlobalHub(registry);\n}\nfunction getGlobalHub(registry = getMainCarrier()) {\n    // If there's no hub, or its an old API, assign a new one\n    if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n        setHubOnCarrier(registry, new Hub());\n    }\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n}\n/**\n * @private Private API with no semver guarantees!\n *\n * If the carrier does not contain a hub, a new hub is created with the global hub client and scope.\n */ function ensureHubOnCarrier(carrier, parent = getGlobalHub()) {\n    // If there's no hub on current domain, or it's an old API, assign a new one\n    if (!hasHubOnCarrier(carrier) || getHubFromCarrier(carrier).isOlderThan(API_VERSION)) {\n        const globalHubTopStack = parent.getStackTop();\n        setHubOnCarrier(carrier, new Hub(globalHubTopStack.client, globalHubTopStack.scope.clone()));\n    }\n}\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */ function setAsyncContextStrategy(strategy) {\n    // Get main carrier (global for every environment)\n    const registry = getMainCarrier();\n    registry.__SENTRY__ = registry.__SENTRY__ || {};\n    registry.__SENTRY__.acs = strategy;\n}\n/**\n * Runs the supplied callback in its own async context. Async Context strategies are defined per SDK.\n *\n * @param callback The callback to run in its own async context\n * @param options Options to pass to the async context strategy\n * @returns The result of the callback\n */ function runWithAsyncContext(callback, options = {}) {\n    const registry = getMainCarrier();\n    if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n        return registry.__SENTRY__.acs.runWithAsyncContext(callback, options);\n    }\n    // if there was no strategy, fallback to just calling the callback\n    return callback();\n}\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */ function hasHubOnCarrier(carrier) {\n    return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */ function getHubFromCarrier(carrier) {\n    return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_8__.getGlobalSingleton)(\"hub\", ()=>new Hub(), carrier);\n}\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */ function setHubOnCarrier(carrier, hub) {\n    if (!carrier) return false;\n    const __SENTRY__ = carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n    __SENTRY__.hub = hub;\n    return true;\n}\n //# sourceMappingURL=hub.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/hub.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/integration.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/core/esm/integration.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addIntegration: () => (/* binding */ addIntegration),\n/* harmony export */   getIntegrationsToSetup: () => (/* binding */ getIntegrationsToSetup),\n/* harmony export */   installedIntegrations: () => (/* binding */ installedIntegrations),\n/* harmony export */   setupIntegration: () => (/* binding */ setupIntegration),\n/* harmony export */   setupIntegrations: () => (/* binding */ setupIntegrations)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/esm/debug-build.js\");\n/* harmony import */ var _eventProcessors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./eventProcessors.js */ \"(ssr)/./node_modules/@sentry/core/esm/eventProcessors.js\");\n/* harmony import */ var _exports_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./exports.js */ \"(ssr)/./node_modules/@sentry/core/esm/exports.js\");\n/* harmony import */ var _hub_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hub.js */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n\n\n\n\n\nconst installedIntegrations = [];\n/** Map of integrations assigned to a client */ /**\n * Remove duplicates from the given array, preferring the last instance of any duplicate. Not guaranteed to\n * preseve the order of integrations in the array.\n *\n * @private\n */ function filterDuplicates(integrations) {\n    const integrationsByName = {};\n    integrations.forEach((currentInstance)=>{\n        const { name } = currentInstance;\n        const existingInstance = integrationsByName[name];\n        // We want integrations later in the array to overwrite earlier ones of the same type, except that we never want a\n        // default instance to overwrite an existing user instance\n        if (existingInstance && !existingInstance.isDefaultInstance && currentInstance.isDefaultInstance) {\n            return;\n        }\n        integrationsByName[name] = currentInstance;\n    });\n    return Object.keys(integrationsByName).map((k)=>integrationsByName[k]);\n}\n/** Gets integrations to install */ function getIntegrationsToSetup(options) {\n    const defaultIntegrations = options.defaultIntegrations || [];\n    const userIntegrations = options.integrations;\n    // We flag default instances, so that later we can tell them apart from any user-created instances of the same class\n    defaultIntegrations.forEach((integration)=>{\n        integration.isDefaultInstance = true;\n    });\n    let integrations;\n    if (Array.isArray(userIntegrations)) {\n        integrations = [\n            ...defaultIntegrations,\n            ...userIntegrations\n        ];\n    } else if (typeof userIntegrations === \"function\") {\n        integrations = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.arrayify)(userIntegrations(defaultIntegrations));\n    } else {\n        integrations = defaultIntegrations;\n    }\n    const finalIntegrations = filterDuplicates(integrations);\n    // The `Debug` integration prints copies of the `event` and `hint` which will be passed to `beforeSend` or\n    // `beforeSendTransaction`. It therefore has to run after all other integrations, so that the changes of all event\n    // processors will be reflected in the printed values. For lack of a more elegant way to guarantee that, we therefore\n    // locate it and, assuming it exists, pop it out of its current spot and shove it onto the end of the array.\n    const debugIndex = findIndex(finalIntegrations, (integration)=>integration.name === \"Debug\");\n    if (debugIndex !== -1) {\n        const [debugInstance] = finalIntegrations.splice(debugIndex, 1);\n        finalIntegrations.push(debugInstance);\n    }\n    return finalIntegrations;\n}\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */ function setupIntegrations(client, integrations) {\n    const integrationIndex = {};\n    integrations.forEach((integration)=>{\n        // guard against empty provided integrations\n        if (integration) {\n            setupIntegration(client, integration, integrationIndex);\n        }\n    });\n    return integrationIndex;\n}\n/** Setup a single integration.  */ function setupIntegration(client, integration, integrationIndex) {\n    integrationIndex[integration.name] = integration;\n    // `setupOnce` is only called the first time\n    if (installedIntegrations.indexOf(integration.name) === -1) {\n        // eslint-disable-next-line deprecation/deprecation\n        integration.setupOnce(_eventProcessors_js__WEBPACK_IMPORTED_MODULE_1__.addGlobalEventProcessor, _hub_js__WEBPACK_IMPORTED_MODULE_2__.getCurrentHub);\n        installedIntegrations.push(integration.name);\n    }\n    // `setup` is run for each client\n    if (integration.setup && typeof integration.setup === \"function\") {\n        integration.setup(client);\n    }\n    if (client.on && typeof integration.preprocessEvent === \"function\") {\n        const callback = integration.preprocessEvent.bind(integration);\n        client.on(\"preprocessEvent\", (event, hint)=>callback(event, hint, client));\n    }\n    if (client.addEventProcessor && typeof integration.processEvent === \"function\") {\n        const callback = integration.processEvent.bind(integration);\n        const processor = Object.assign((event, hint)=>callback(event, hint, client), {\n            id: integration.name\n        });\n        client.addEventProcessor(processor);\n    }\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_3__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log(`Integration installed: ${integration.name}`);\n}\n/** Add an integration to the current hub's client. */ function addIntegration(integration) {\n    const client = (0,_exports_js__WEBPACK_IMPORTED_MODULE_5__.getClient)();\n    if (!client || !client.addIntegration) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_3__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.warn(`Cannot add integration \"${integration.name}\" because no SDK Client is available.`);\n        return;\n    }\n    client.addIntegration(integration);\n}\n// Polyfill for Array.findIndex(), which is not supported in ES5\nfunction findIndex(arr, callback) {\n    for(let i = 0; i < arr.length; i++){\n        if (callback(arr[i]) === true) {\n            return i;\n        }\n    }\n    return -1;\n}\n //# sourceMappingURL=integration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9pbnRlZ3JhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFpRDtBQUNGO0FBQ2dCO0FBQ3RCO0FBQ0E7QUFFekMsTUFBTU0sd0JBQXdCLEVBQUU7QUFFaEMsNkNBQTZDLEdBRTdDOzs7OztDQUtDLEdBQ0QsU0FBU0MsaUJBQWlCQyxZQUFZO0lBQ3BDLE1BQU1DLHFCQUFxQixDQUFDO0lBRTVCRCxhQUFhRSxPQUFPLENBQUNDLENBQUFBO1FBQ25CLE1BQU0sRUFBRUMsSUFBSSxFQUFFLEdBQUdEO1FBRWpCLE1BQU1FLG1CQUFtQkosa0JBQWtCLENBQUNHLEtBQUs7UUFFakQsa0hBQWtIO1FBQ2xILDBEQUEwRDtRQUMxRCxJQUFJQyxvQkFBb0IsQ0FBQ0EsaUJBQWlCQyxpQkFBaUIsSUFBSUgsZ0JBQWdCRyxpQkFBaUIsRUFBRTtZQUNoRztRQUNGO1FBRUFMLGtCQUFrQixDQUFDRyxLQUFLLEdBQUdEO0lBQzdCO0lBRUEsT0FBT0ksT0FBT0MsSUFBSSxDQUFDUCxvQkFBb0JRLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBS1Qsa0JBQWtCLENBQUNTLEVBQUU7QUFDdkU7QUFFQSxpQ0FBaUMsR0FDakMsU0FBU0MsdUJBQXVCQyxPQUFPO0lBQ3JDLE1BQU1DLHNCQUFzQkQsUUFBUUMsbUJBQW1CLElBQUksRUFBRTtJQUM3RCxNQUFNQyxtQkFBbUJGLFFBQVFaLFlBQVk7SUFFN0Msb0hBQW9IO0lBQ3BIYSxvQkFBb0JYLE9BQU8sQ0FBQ2EsQ0FBQUE7UUFDMUJBLFlBQVlULGlCQUFpQixHQUFHO0lBQ2xDO0lBRUEsSUFBSU47SUFFSixJQUFJZ0IsTUFBTUMsT0FBTyxDQUFDSCxtQkFBbUI7UUFDbkNkLGVBQWU7ZUFBSWE7ZUFBd0JDO1NBQWlCO0lBQzlELE9BQU8sSUFBSSxPQUFPQSxxQkFBcUIsWUFBWTtRQUNqRGQsZUFBZVIsdURBQVFBLENBQUNzQixpQkFBaUJEO0lBQzNDLE9BQU87UUFDTGIsZUFBZWE7SUFDakI7SUFFQSxNQUFNSyxvQkFBb0JuQixpQkFBaUJDO0lBRTNDLDBHQUEwRztJQUMxRyxrSEFBa0g7SUFDbEgscUhBQXFIO0lBQ3JILDRHQUE0RztJQUM1RyxNQUFNbUIsYUFBYUMsVUFBVUYsbUJBQW1CSCxDQUFBQSxjQUFlQSxZQUFZWCxJQUFJLEtBQUs7SUFDcEYsSUFBSWUsZUFBZSxDQUFDLEdBQUc7UUFDckIsTUFBTSxDQUFDRSxjQUFjLEdBQUdILGtCQUFrQkksTUFBTSxDQUFDSCxZQUFZO1FBQzdERCxrQkFBa0JLLElBQUksQ0FBQ0Y7SUFDekI7SUFFQSxPQUFPSDtBQUNUO0FBRUE7Ozs7O0NBS0MsR0FDRCxTQUFTTSxrQkFBa0JDLE1BQU0sRUFBRXpCLFlBQVk7SUFDN0MsTUFBTTBCLG1CQUFtQixDQUFDO0lBRTFCMUIsYUFBYUUsT0FBTyxDQUFDYSxDQUFBQTtRQUNuQiw0Q0FBNEM7UUFDNUMsSUFBSUEsYUFBYTtZQUNmWSxpQkFBaUJGLFFBQVFWLGFBQWFXO1FBQ3hDO0lBQ0Y7SUFFQSxPQUFPQTtBQUNUO0FBRUEsaUNBQWlDLEdBQ2pDLFNBQVNDLGlCQUFpQkYsTUFBTSxFQUFFVixXQUFXLEVBQUVXLGdCQUFnQjtJQUM3REEsZ0JBQWdCLENBQUNYLFlBQVlYLElBQUksQ0FBQyxHQUFHVztJQUVyQyw0Q0FBNEM7SUFDNUMsSUFBSWpCLHNCQUFzQjhCLE9BQU8sQ0FBQ2IsWUFBWVgsSUFBSSxNQUFNLENBQUMsR0FBRztRQUMxRCxtREFBbUQ7UUFDbkRXLFlBQVljLFNBQVMsQ0FBQ2xDLHdFQUF1QkEsRUFBRUUsa0RBQWFBO1FBQzVEQyxzQkFBc0J5QixJQUFJLENBQUNSLFlBQVlYLElBQUk7SUFDN0M7SUFFQSxpQ0FBaUM7SUFDakMsSUFBSVcsWUFBWWUsS0FBSyxJQUFJLE9BQU9mLFlBQVllLEtBQUssS0FBSyxZQUFZO1FBQ2hFZixZQUFZZSxLQUFLLENBQUNMO0lBQ3BCO0lBRUEsSUFBSUEsT0FBT00sRUFBRSxJQUFJLE9BQU9oQixZQUFZaUIsZUFBZSxLQUFLLFlBQVk7UUFDbEUsTUFBTUMsV0FBV2xCLFlBQVlpQixlQUFlLENBQUNFLElBQUksQ0FBQ25CO1FBQ2xEVSxPQUFPTSxFQUFFLENBQUMsbUJBQW1CLENBQUNJLE9BQU9DLE9BQVNILFNBQVNFLE9BQU9DLE1BQU1YO0lBQ3RFO0lBRUEsSUFBSUEsT0FBT1ksaUJBQWlCLElBQUksT0FBT3RCLFlBQVl1QixZQUFZLEtBQUssWUFBWTtRQUM5RSxNQUFNTCxXQUFXbEIsWUFBWXVCLFlBQVksQ0FBQ0osSUFBSSxDQUFDbkI7UUFFL0MsTUFBTXdCLFlBQVloQyxPQUFPaUMsTUFBTSxDQUFDLENBQUNMLE9BQU9DLE9BQVNILFNBQVNFLE9BQU9DLE1BQU1YLFNBQVM7WUFDOUVnQixJQUFJMUIsWUFBWVgsSUFBSTtRQUN0QjtRQUVBcUIsT0FBT1ksaUJBQWlCLENBQUNFO0lBQzNCO0lBRUE3Qyx3REFBV0EsSUFBSUQsaURBQU1BLENBQUNpRCxHQUFHLENBQUMsQ0FBQyx1QkFBdUIsRUFBRTNCLFlBQVlYLElBQUksQ0FBQyxDQUFDO0FBQ3hFO0FBRUEsb0RBQW9ELEdBQ3BELFNBQVN1QyxlQUFlNUIsV0FBVztJQUNqQyxNQUFNVSxTQUFTN0Isc0RBQVNBO0lBRXhCLElBQUksQ0FBQzZCLFVBQVUsQ0FBQ0EsT0FBT2tCLGNBQWMsRUFBRTtRQUNyQ2pELHdEQUFXQSxJQUFJRCxpREFBTUEsQ0FBQ21ELElBQUksQ0FBQyxDQUFDLHdCQUF3QixFQUFFN0IsWUFBWVgsSUFBSSxDQUFDLHFDQUFxQyxDQUFDO1FBQzdHO0lBQ0Y7SUFFQXFCLE9BQU9rQixjQUFjLENBQUM1QjtBQUN4QjtBQUVBLGdFQUFnRTtBQUNoRSxTQUFTSyxVQUFVeUIsR0FBRyxFQUFFWixRQUFRO0lBQzlCLElBQUssSUFBSWEsSUFBSSxHQUFHQSxJQUFJRCxJQUFJRSxNQUFNLEVBQUVELElBQUs7UUFDbkMsSUFBSWIsU0FBU1ksR0FBRyxDQUFDQyxFQUFFLE1BQU0sTUFBTTtZQUM3QixPQUFPQTtRQUNUO0lBQ0Y7SUFFQSxPQUFPLENBQUM7QUFDVjtBQUU4RyxDQUM5Ryx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9pbnRlZ3JhdGlvbi5qcz8zZjQxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFycmF5aWZ5LCBsb2dnZXIgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IERFQlVHX0JVSUxEIH0gZnJvbSAnLi9kZWJ1Zy1idWlsZC5qcyc7XG5pbXBvcnQgeyBhZGRHbG9iYWxFdmVudFByb2Nlc3NvciB9IGZyb20gJy4vZXZlbnRQcm9jZXNzb3JzLmpzJztcbmltcG9ydCB7IGdldENsaWVudCB9IGZyb20gJy4vZXhwb3J0cy5qcyc7XG5pbXBvcnQgeyBnZXRDdXJyZW50SHViIH0gZnJvbSAnLi9odWIuanMnO1xuXG5jb25zdCBpbnN0YWxsZWRJbnRlZ3JhdGlvbnMgPSBbXTtcblxuLyoqIE1hcCBvZiBpbnRlZ3JhdGlvbnMgYXNzaWduZWQgdG8gYSBjbGllbnQgKi9cblxuLyoqXG4gKiBSZW1vdmUgZHVwbGljYXRlcyBmcm9tIHRoZSBnaXZlbiBhcnJheSwgcHJlZmVycmluZyB0aGUgbGFzdCBpbnN0YW5jZSBvZiBhbnkgZHVwbGljYXRlLiBOb3QgZ3VhcmFudGVlZCB0b1xuICogcHJlc2V2ZSB0aGUgb3JkZXIgb2YgaW50ZWdyYXRpb25zIGluIHRoZSBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBmaWx0ZXJEdXBsaWNhdGVzKGludGVncmF0aW9ucykge1xuICBjb25zdCBpbnRlZ3JhdGlvbnNCeU5hbWUgPSB7fTtcblxuICBpbnRlZ3JhdGlvbnMuZm9yRWFjaChjdXJyZW50SW5zdGFuY2UgPT4ge1xuICAgIGNvbnN0IHsgbmFtZSB9ID0gY3VycmVudEluc3RhbmNlO1xuXG4gICAgY29uc3QgZXhpc3RpbmdJbnN0YW5jZSA9IGludGVncmF0aW9uc0J5TmFtZVtuYW1lXTtcblxuICAgIC8vIFdlIHdhbnQgaW50ZWdyYXRpb25zIGxhdGVyIGluIHRoZSBhcnJheSB0byBvdmVyd3JpdGUgZWFybGllciBvbmVzIG9mIHRoZSBzYW1lIHR5cGUsIGV4Y2VwdCB0aGF0IHdlIG5ldmVyIHdhbnQgYVxuICAgIC8vIGRlZmF1bHQgaW5zdGFuY2UgdG8gb3ZlcndyaXRlIGFuIGV4aXN0aW5nIHVzZXIgaW5zdGFuY2VcbiAgICBpZiAoZXhpc3RpbmdJbnN0YW5jZSAmJiAhZXhpc3RpbmdJbnN0YW5jZS5pc0RlZmF1bHRJbnN0YW5jZSAmJiBjdXJyZW50SW5zdGFuY2UuaXNEZWZhdWx0SW5zdGFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnRlZ3JhdGlvbnNCeU5hbWVbbmFtZV0gPSBjdXJyZW50SW5zdGFuY2U7XG4gIH0pO1xuXG4gIHJldHVybiBPYmplY3Qua2V5cyhpbnRlZ3JhdGlvbnNCeU5hbWUpLm1hcChrID0+IGludGVncmF0aW9uc0J5TmFtZVtrXSk7XG59XG5cbi8qKiBHZXRzIGludGVncmF0aW9ucyB0byBpbnN0YWxsICovXG5mdW5jdGlvbiBnZXRJbnRlZ3JhdGlvbnNUb1NldHVwKG9wdGlvbnMpIHtcbiAgY29uc3QgZGVmYXVsdEludGVncmF0aW9ucyA9IG9wdGlvbnMuZGVmYXVsdEludGVncmF0aW9ucyB8fCBbXTtcbiAgY29uc3QgdXNlckludGVncmF0aW9ucyA9IG9wdGlvbnMuaW50ZWdyYXRpb25zO1xuXG4gIC8vIFdlIGZsYWcgZGVmYXVsdCBpbnN0YW5jZXMsIHNvIHRoYXQgbGF0ZXIgd2UgY2FuIHRlbGwgdGhlbSBhcGFydCBmcm9tIGFueSB1c2VyLWNyZWF0ZWQgaW5zdGFuY2VzIG9mIHRoZSBzYW1lIGNsYXNzXG4gIGRlZmF1bHRJbnRlZ3JhdGlvbnMuZm9yRWFjaChpbnRlZ3JhdGlvbiA9PiB7XG4gICAgaW50ZWdyYXRpb24uaXNEZWZhdWx0SW5zdGFuY2UgPSB0cnVlO1xuICB9KTtcblxuICBsZXQgaW50ZWdyYXRpb25zO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHVzZXJJbnRlZ3JhdGlvbnMpKSB7XG4gICAgaW50ZWdyYXRpb25zID0gWy4uLmRlZmF1bHRJbnRlZ3JhdGlvbnMsIC4uLnVzZXJJbnRlZ3JhdGlvbnNdO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB1c2VySW50ZWdyYXRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaW50ZWdyYXRpb25zID0gYXJyYXlpZnkodXNlckludGVncmF0aW9ucyhkZWZhdWx0SW50ZWdyYXRpb25zKSk7XG4gIH0gZWxzZSB7XG4gICAgaW50ZWdyYXRpb25zID0gZGVmYXVsdEludGVncmF0aW9ucztcbiAgfVxuXG4gIGNvbnN0IGZpbmFsSW50ZWdyYXRpb25zID0gZmlsdGVyRHVwbGljYXRlcyhpbnRlZ3JhdGlvbnMpO1xuXG4gIC8vIFRoZSBgRGVidWdgIGludGVncmF0aW9uIHByaW50cyBjb3BpZXMgb2YgdGhlIGBldmVudGAgYW5kIGBoaW50YCB3aGljaCB3aWxsIGJlIHBhc3NlZCB0byBgYmVmb3JlU2VuZGAgb3JcbiAgLy8gYGJlZm9yZVNlbmRUcmFuc2FjdGlvbmAuIEl0IHRoZXJlZm9yZSBoYXMgdG8gcnVuIGFmdGVyIGFsbCBvdGhlciBpbnRlZ3JhdGlvbnMsIHNvIHRoYXQgdGhlIGNoYW5nZXMgb2YgYWxsIGV2ZW50XG4gIC8vIHByb2Nlc3NvcnMgd2lsbCBiZSByZWZsZWN0ZWQgaW4gdGhlIHByaW50ZWQgdmFsdWVzLiBGb3IgbGFjayBvZiBhIG1vcmUgZWxlZ2FudCB3YXkgdG8gZ3VhcmFudGVlIHRoYXQsIHdlIHRoZXJlZm9yZVxuICAvLyBsb2NhdGUgaXQgYW5kLCBhc3N1bWluZyBpdCBleGlzdHMsIHBvcCBpdCBvdXQgb2YgaXRzIGN1cnJlbnQgc3BvdCBhbmQgc2hvdmUgaXQgb250byB0aGUgZW5kIG9mIHRoZSBhcnJheS5cbiAgY29uc3QgZGVidWdJbmRleCA9IGZpbmRJbmRleChmaW5hbEludGVncmF0aW9ucywgaW50ZWdyYXRpb24gPT4gaW50ZWdyYXRpb24ubmFtZSA9PT0gJ0RlYnVnJyk7XG4gIGlmIChkZWJ1Z0luZGV4ICE9PSAtMSkge1xuICAgIGNvbnN0IFtkZWJ1Z0luc3RhbmNlXSA9IGZpbmFsSW50ZWdyYXRpb25zLnNwbGljZShkZWJ1Z0luZGV4LCAxKTtcbiAgICBmaW5hbEludGVncmF0aW9ucy5wdXNoKGRlYnVnSW5zdGFuY2UpO1xuICB9XG5cbiAgcmV0dXJuIGZpbmFsSW50ZWdyYXRpb25zO1xufVxuXG4vKipcbiAqIEdpdmVuIGEgbGlzdCBvZiBpbnRlZ3JhdGlvbiBpbnN0YW5jZXMgdGhpcyBpbnN0YWxscyB0aGVtIGFsbC4gV2hlbiBgd2l0aERlZmF1bHRzYCBpcyBzZXQgdG8gYHRydWVgIHRoZW4gYWxsIGRlZmF1bHRcbiAqIGludGVncmF0aW9ucyBhcmUgYWRkZWQgdW5sZXNzIHRoZXkgd2VyZSBhbHJlYWR5IHByb3ZpZGVkIGJlZm9yZS5cbiAqIEBwYXJhbSBpbnRlZ3JhdGlvbnMgYXJyYXkgb2YgaW50ZWdyYXRpb24gaW5zdGFuY2VzXG4gKiBAcGFyYW0gd2l0aERlZmF1bHQgc2hvdWxkIGVuYWJsZSBkZWZhdWx0IGludGVncmF0aW9uc1xuICovXG5mdW5jdGlvbiBzZXR1cEludGVncmF0aW9ucyhjbGllbnQsIGludGVncmF0aW9ucykge1xuICBjb25zdCBpbnRlZ3JhdGlvbkluZGV4ID0ge307XG5cbiAgaW50ZWdyYXRpb25zLmZvckVhY2goaW50ZWdyYXRpb24gPT4ge1xuICAgIC8vIGd1YXJkIGFnYWluc3QgZW1wdHkgcHJvdmlkZWQgaW50ZWdyYXRpb25zXG4gICAgaWYgKGludGVncmF0aW9uKSB7XG4gICAgICBzZXR1cEludGVncmF0aW9uKGNsaWVudCwgaW50ZWdyYXRpb24sIGludGVncmF0aW9uSW5kZXgpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGludGVncmF0aW9uSW5kZXg7XG59XG5cbi8qKiBTZXR1cCBhIHNpbmdsZSBpbnRlZ3JhdGlvbi4gICovXG5mdW5jdGlvbiBzZXR1cEludGVncmF0aW9uKGNsaWVudCwgaW50ZWdyYXRpb24sIGludGVncmF0aW9uSW5kZXgpIHtcbiAgaW50ZWdyYXRpb25JbmRleFtpbnRlZ3JhdGlvbi5uYW1lXSA9IGludGVncmF0aW9uO1xuXG4gIC8vIGBzZXR1cE9uY2VgIGlzIG9ubHkgY2FsbGVkIHRoZSBmaXJzdCB0aW1lXG4gIGlmIChpbnN0YWxsZWRJbnRlZ3JhdGlvbnMuaW5kZXhPZihpbnRlZ3JhdGlvbi5uYW1lKSA9PT0gLTEpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBpbnRlZ3JhdGlvbi5zZXR1cE9uY2UoYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IsIGdldEN1cnJlbnRIdWIpO1xuICAgIGluc3RhbGxlZEludGVncmF0aW9ucy5wdXNoKGludGVncmF0aW9uLm5hbWUpO1xuICB9XG5cbiAgLy8gYHNldHVwYCBpcyBydW4gZm9yIGVhY2ggY2xpZW50XG4gIGlmIChpbnRlZ3JhdGlvbi5zZXR1cCAmJiB0eXBlb2YgaW50ZWdyYXRpb24uc2V0dXAgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpbnRlZ3JhdGlvbi5zZXR1cChjbGllbnQpO1xuICB9XG5cbiAgaWYgKGNsaWVudC5vbiAmJiB0eXBlb2YgaW50ZWdyYXRpb24ucHJlcHJvY2Vzc0V2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc3QgY2FsbGJhY2sgPSBpbnRlZ3JhdGlvbi5wcmVwcm9jZXNzRXZlbnQuYmluZChpbnRlZ3JhdGlvbikgO1xuICAgIGNsaWVudC5vbigncHJlcHJvY2Vzc0V2ZW50JywgKGV2ZW50LCBoaW50KSA9PiBjYWxsYmFjayhldmVudCwgaGludCwgY2xpZW50KSk7XG4gIH1cblxuICBpZiAoY2xpZW50LmFkZEV2ZW50UHJvY2Vzc29yICYmIHR5cGVvZiBpbnRlZ3JhdGlvbi5wcm9jZXNzRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zdCBjYWxsYmFjayA9IGludGVncmF0aW9uLnByb2Nlc3NFdmVudC5iaW5kKGludGVncmF0aW9uKSA7XG5cbiAgICBjb25zdCBwcm9jZXNzb3IgPSBPYmplY3QuYXNzaWduKChldmVudCwgaGludCkgPT4gY2FsbGJhY2soZXZlbnQsIGhpbnQsIGNsaWVudCksIHtcbiAgICAgIGlkOiBpbnRlZ3JhdGlvbi5uYW1lLFxuICAgIH0pO1xuXG4gICAgY2xpZW50LmFkZEV2ZW50UHJvY2Vzc29yKHByb2Nlc3Nvcik7XG4gIH1cblxuICBERUJVR19CVUlMRCAmJiBsb2dnZXIubG9nKGBJbnRlZ3JhdGlvbiBpbnN0YWxsZWQ6ICR7aW50ZWdyYXRpb24ubmFtZX1gKTtcbn1cblxuLyoqIEFkZCBhbiBpbnRlZ3JhdGlvbiB0byB0aGUgY3VycmVudCBodWIncyBjbGllbnQuICovXG5mdW5jdGlvbiBhZGRJbnRlZ3JhdGlvbihpbnRlZ3JhdGlvbikge1xuICBjb25zdCBjbGllbnQgPSBnZXRDbGllbnQoKTtcblxuICBpZiAoIWNsaWVudCB8fCAhY2xpZW50LmFkZEludGVncmF0aW9uKSB7XG4gICAgREVCVUdfQlVJTEQgJiYgbG9nZ2VyLndhcm4oYENhbm5vdCBhZGQgaW50ZWdyYXRpb24gXCIke2ludGVncmF0aW9uLm5hbWV9XCIgYmVjYXVzZSBubyBTREsgQ2xpZW50IGlzIGF2YWlsYWJsZS5gKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjbGllbnQuYWRkSW50ZWdyYXRpb24oaW50ZWdyYXRpb24pO1xufVxuXG4vLyBQb2x5ZmlsbCBmb3IgQXJyYXkuZmluZEluZGV4KCksIHdoaWNoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gRVM1XG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyLCBjYWxsYmFjaykge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChjYWxsYmFjayhhcnJbaV0pID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTE7XG59XG5cbmV4cG9ydCB7IGFkZEludGVncmF0aW9uLCBnZXRJbnRlZ3JhdGlvbnNUb1NldHVwLCBpbnN0YWxsZWRJbnRlZ3JhdGlvbnMsIHNldHVwSW50ZWdyYXRpb24sIHNldHVwSW50ZWdyYXRpb25zIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlZ3JhdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJhcnJheWlmeSIsImxvZ2dlciIsIkRFQlVHX0JVSUxEIiwiYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IiLCJnZXRDbGllbnQiLCJnZXRDdXJyZW50SHViIiwiaW5zdGFsbGVkSW50ZWdyYXRpb25zIiwiZmlsdGVyRHVwbGljYXRlcyIsImludGVncmF0aW9ucyIsImludGVncmF0aW9uc0J5TmFtZSIsImZvckVhY2giLCJjdXJyZW50SW5zdGFuY2UiLCJuYW1lIiwiZXhpc3RpbmdJbnN0YW5jZSIsImlzRGVmYXVsdEluc3RhbmNlIiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImsiLCJnZXRJbnRlZ3JhdGlvbnNUb1NldHVwIiwib3B0aW9ucyIsImRlZmF1bHRJbnRlZ3JhdGlvbnMiLCJ1c2VySW50ZWdyYXRpb25zIiwiaW50ZWdyYXRpb24iLCJBcnJheSIsImlzQXJyYXkiLCJmaW5hbEludGVncmF0aW9ucyIsImRlYnVnSW5kZXgiLCJmaW5kSW5kZXgiLCJkZWJ1Z0luc3RhbmNlIiwic3BsaWNlIiwicHVzaCIsInNldHVwSW50ZWdyYXRpb25zIiwiY2xpZW50IiwiaW50ZWdyYXRpb25JbmRleCIsInNldHVwSW50ZWdyYXRpb24iLCJpbmRleE9mIiwic2V0dXBPbmNlIiwic2V0dXAiLCJvbiIsInByZXByb2Nlc3NFdmVudCIsImNhbGxiYWNrIiwiYmluZCIsImV2ZW50IiwiaGludCIsImFkZEV2ZW50UHJvY2Vzc29yIiwicHJvY2Vzc0V2ZW50IiwicHJvY2Vzc29yIiwiYXNzaWduIiwiaWQiLCJsb2ciLCJhZGRJbnRlZ3JhdGlvbiIsIndhcm4iLCJhcnIiLCJpIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/integration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/integrations/functiontostring.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/integrations/functiontostring.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FunctionToString: () => (/* binding */ FunctionToString)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/object.js\");\n\nlet originalFunctionToString;\n/** Patch toString calls to return proper name for wrapped functions */ class FunctionToString {\n    /**\n   * @inheritDoc\n   */ static __initStatic() {\n        this.id = \"FunctionToString\";\n    }\n    /**\n   * @inheritDoc\n   */ constructor(){\n        this.name = FunctionToString.id;\n    }\n    /**\n   * @inheritDoc\n   */ setupOnce() {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        originalFunctionToString = Function.prototype.toString;\n        // intrinsics (like Function.prototype) might be immutable in some environments\n        // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)\n        try {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            Function.prototype.toString = function(...args) {\n                const context = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.getOriginalFunction)(this) || this;\n                return originalFunctionToString.apply(context, args);\n            };\n        } catch (e) {\n        // ignore errors here, just don't patch this\n        }\n    }\n}\nFunctionToString.__initStatic();\n //# sourceMappingURL=functiontostring.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9pbnRlZ3JhdGlvbnMvZnVuY3Rpb250b3N0cmluZy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFvRDtBQUVwRCxJQUFJQztBQUVKLHFFQUFxRSxHQUNyRSxNQUFNQztJQUNKOztHQUVDLEdBQ0EsT0FBT0MsZUFBZTtRQUFDLElBQUksQ0FBQ0MsRUFBRSxHQUFHO0lBQW1CO0lBRXJEOztHQUVDLEdBRUFDLGFBQWM7UUFDYixJQUFJLENBQUNDLElBQUksR0FBR0osaUJBQWlCRSxFQUFFO0lBQ2pDO0lBRUE7O0dBRUMsR0FDQUcsWUFBWTtRQUNYLDZEQUE2RDtRQUM3RE4sMkJBQTJCTyxTQUFTQyxTQUFTLENBQUNDLFFBQVE7UUFFdEQsK0VBQStFO1FBQy9FLHdHQUF3RztRQUN4RyxJQUFJO1lBQ0YsOERBQThEO1lBQzlERixTQUFTQyxTQUFTLENBQUNDLFFBQVEsR0FBRyxTQUFXLEdBQUdDLElBQUk7Z0JBQzlDLE1BQU1DLFVBQVVaLGtFQUFtQkEsQ0FBQyxJQUFJLEtBQUssSUFBSTtnQkFDakQsT0FBT0MseUJBQXlCWSxLQUFLLENBQUNELFNBQVNEO1lBQ2pEO1FBQ0YsRUFBRSxPQUFPRyxHQUFHO1FBQ1YsNENBQTRDO1FBQzlDO0lBQ0Y7QUFDRjtBQUFFWixpQkFBaUJDLFlBQVk7QUFFSCxDQUM1Qiw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9pbnRlZ3JhdGlvbnMvZnVuY3Rpb250b3N0cmluZy5qcz9lN2ZiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldE9yaWdpbmFsRnVuY3Rpb24gfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxubGV0IG9yaWdpbmFsRnVuY3Rpb25Ub1N0cmluZztcblxuLyoqIFBhdGNoIHRvU3RyaW5nIGNhbGxzIHRvIHJldHVybiBwcm9wZXIgbmFtZSBmb3Igd3JhcHBlZCBmdW5jdGlvbnMgKi9cbmNsYXNzIEZ1bmN0aW9uVG9TdHJpbmcgIHtcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAgc3RhdGljIF9faW5pdFN0YXRpYygpIHt0aGlzLmlkID0gJ0Z1bmN0aW9uVG9TdHJpbmcnO31cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG5cbiAgIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubmFtZSA9IEZ1bmN0aW9uVG9TdHJpbmcuaWQ7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBzZXR1cE9uY2UoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZFxuICAgIG9yaWdpbmFsRnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcblxuICAgIC8vIGludHJpbnNpY3MgKGxpa2UgRnVuY3Rpb24ucHJvdG90eXBlKSBtaWdodCBiZSBpbW11dGFibGUgaW4gc29tZSBlbnZpcm9ubWVudHNcbiAgICAvLyBlLmcuIE5vZGUgd2l0aCAtLWZyb3plbi1pbnRyaW5zaWNzLCBYUyAoYW4gZW1iZWRkZWQgSmF2YVNjcmlwdCBlbmdpbmUpIG9yIFNFUyAoYSBKYXZhU2NyaXB0IHByb3Bvc2FsKVxuICAgIHRyeSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCAuLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBnZXRPcmlnaW5hbEZ1bmN0aW9uKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbEZ1bmN0aW9uVG9TdHJpbmcuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGlnbm9yZSBlcnJvcnMgaGVyZSwganVzdCBkb24ndCBwYXRjaCB0aGlzXG4gICAgfVxuICB9XG59IEZ1bmN0aW9uVG9TdHJpbmcuX19pbml0U3RhdGljKCk7XG5cbmV4cG9ydCB7IEZ1bmN0aW9uVG9TdHJpbmcgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZ1bmN0aW9udG9zdHJpbmcuanMubWFwXG4iXSwibmFtZXMiOlsiZ2V0T3JpZ2luYWxGdW5jdGlvbiIsIm9yaWdpbmFsRnVuY3Rpb25Ub1N0cmluZyIsIkZ1bmN0aW9uVG9TdHJpbmciLCJfX2luaXRTdGF0aWMiLCJpZCIsImNvbnN0cnVjdG9yIiwibmFtZSIsInNldHVwT25jZSIsIkZ1bmN0aW9uIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJhcmdzIiwiY29udGV4dCIsImFwcGx5IiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/integrations/functiontostring.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/integrations/inboundfilters.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/integrations/inboundfilters.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InboundFilters: () => (/* binding */ InboundFilters),\n/* harmony export */   _mergeOptions: () => (/* binding */ _mergeOptions),\n/* harmony export */   _shouldDropEvent: () => (/* binding */ _shouldDropEvent)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/string.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/core/esm/debug-build.js\");\n\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [\n    /^Script error\\.?$/,\n    /^Javascript error: Script error\\.? on line 0$/\n];\nconst DEFAULT_IGNORE_TRANSACTIONS = [\n    /^.*\\/healthcheck$/,\n    /^.*\\/healthy$/,\n    /^.*\\/live$/,\n    /^.*\\/ready$/,\n    /^.*\\/heartbeat$/,\n    /^.*\\/health$/,\n    /^.*\\/healthz$/\n];\n/** Options for the InboundFilters integration */ /** Inbound filters configurable by the user */ class InboundFilters {\n    /**\n   * @inheritDoc\n   */ static __initStatic() {\n        this.id = \"InboundFilters\";\n    }\n    /**\n   * @inheritDoc\n   */ constructor(options = {}){\n        this.name = InboundFilters.id;\n        this._options = options;\n    }\n    /**\n   * @inheritDoc\n   */ setupOnce(_addGlobalEventProcessor, _getCurrentHub) {\n    // noop\n    }\n    /** @inheritDoc */ processEvent(event, _eventHint, client) {\n        const clientOptions = client.getOptions();\n        const options = _mergeOptions(this._options, clientOptions);\n        return _shouldDropEvent(event, options) ? null : event;\n    }\n}\nInboundFilters.__initStatic();\n/** JSDoc */ function _mergeOptions(internalOptions = {}, clientOptions = {}) {\n    return {\n        allowUrls: [\n            ...internalOptions.allowUrls || [],\n            ...clientOptions.allowUrls || []\n        ],\n        denyUrls: [\n            ...internalOptions.denyUrls || [],\n            ...clientOptions.denyUrls || []\n        ],\n        ignoreErrors: [\n            ...internalOptions.ignoreErrors || [],\n            ...clientOptions.ignoreErrors || [],\n            ...internalOptions.disableErrorDefaults ? [] : DEFAULT_IGNORE_ERRORS\n        ],\n        ignoreTransactions: [\n            ...internalOptions.ignoreTransactions || [],\n            ...clientOptions.ignoreTransactions || [],\n            ...internalOptions.disableTransactionDefaults ? [] : DEFAULT_IGNORE_TRANSACTIONS\n        ],\n        ignoreInternal: internalOptions.ignoreInternal !== undefined ? internalOptions.ignoreInternal : true\n    };\n}\n/** JSDoc */ function _shouldDropEvent(event, options) {\n    if (options.ignoreInternal && _isSentryError(event)) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.getEventDescription)(event)}`);\n        return true;\n    }\n    if (_isIgnoredError(event, options.ignoreErrors)) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.logger.warn(`Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.getEventDescription)(event)}`);\n        return true;\n    }\n    if (_isIgnoredTransaction(event, options.ignoreTransactions)) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.logger.warn(`Event dropped due to being matched by \\`ignoreTransactions\\` option.\\nEvent: ${(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.getEventDescription)(event)}`);\n        return true;\n    }\n    if (_isDeniedUrl(event, options.denyUrls)) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.logger.warn(`Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.getEventDescription)(event)}.\\nUrl: ${_getEventFilterUrl(event)}`);\n        return true;\n    }\n    if (!_isAllowedUrl(event, options.allowUrls)) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.logger.warn(`Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.getEventDescription)(event)}.\\nUrl: ${_getEventFilterUrl(event)}`);\n        return true;\n    }\n    return false;\n}\nfunction _isIgnoredError(event, ignoreErrors) {\n    // If event.type, this is not an error\n    if (event.type || !ignoreErrors || !ignoreErrors.length) {\n        return false;\n    }\n    return _getPossibleEventMessages(event).some((message)=>(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.stringMatchesSomePattern)(message, ignoreErrors));\n}\nfunction _isIgnoredTransaction(event, ignoreTransactions) {\n    if (event.type !== \"transaction\" || !ignoreTransactions || !ignoreTransactions.length) {\n        return false;\n    }\n    const name = event.transaction;\n    return name ? (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.stringMatchesSomePattern)(name, ignoreTransactions) : false;\n}\nfunction _isDeniedUrl(event, denyUrls) {\n    // TODO: Use Glob instead?\n    if (!denyUrls || !denyUrls.length) {\n        return false;\n    }\n    const url = _getEventFilterUrl(event);\n    return !url ? false : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.stringMatchesSomePattern)(url, denyUrls);\n}\nfunction _isAllowedUrl(event, allowUrls) {\n    // TODO: Use Glob instead?\n    if (!allowUrls || !allowUrls.length) {\n        return true;\n    }\n    const url = _getEventFilterUrl(event);\n    return !url ? true : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.stringMatchesSomePattern)(url, allowUrls);\n}\nfunction _getPossibleEventMessages(event) {\n    const possibleMessages = [];\n    if (event.message) {\n        possibleMessages.push(event.message);\n    }\n    let lastException;\n    try {\n        // @ts-expect-error Try catching to save bundle size\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        lastException = event.exception.values[event.exception.values.length - 1];\n    } catch (e) {\n    // try catching to save bundle size checking existence of variables\n    }\n    if (lastException) {\n        if (lastException.value) {\n            possibleMessages.push(lastException.value);\n            if (lastException.type) {\n                possibleMessages.push(`${lastException.type}: ${lastException.value}`);\n            }\n        }\n    }\n    if (_debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && possibleMessages.length === 0) {\n        _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.logger.error(`Could not extract message for event ${(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.getEventDescription)(event)}`);\n    }\n    return possibleMessages;\n}\nfunction _isSentryError(event) {\n    try {\n        // @ts-expect-error can't be a sentry error if undefined\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        return event.exception.values[0].type === \"SentryError\";\n    } catch (e) {\n    // ignore\n    }\n    return false;\n}\nfunction _getLastValidUrl(frames = []) {\n    for(let i = frames.length - 1; i >= 0; i--){\n        const frame = frames[i];\n        if (frame && frame.filename !== \"<anonymous>\" && frame.filename !== \"[native code]\") {\n            return frame.filename || null;\n        }\n    }\n    return null;\n}\nfunction _getEventFilterUrl(event) {\n    try {\n        let frames;\n        try {\n            // @ts-expect-error we only care about frames if the whole thing here is defined\n            frames = event.exception.values[0].stacktrace.frames;\n        } catch (e) {\n        // ignore\n        }\n        return frames ? _getLastValidUrl(frames) : null;\n    } catch (oO) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.logger.error(`Cannot extract url for event ${(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.getEventDescription)(event)}`);\n        return null;\n    }\n}\n //# sourceMappingURL=inboundfilters.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/integrations/inboundfilters.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/integrations/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/integrations/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FunctionToString: () => (/* reexport safe */ _functiontostring_js__WEBPACK_IMPORTED_MODULE_0__.FunctionToString),\n/* harmony export */   InboundFilters: () => (/* reexport safe */ _inboundfilters_js__WEBPACK_IMPORTED_MODULE_1__.InboundFilters),\n/* harmony export */   LinkedErrors: () => (/* reexport safe */ _linkederrors_js__WEBPACK_IMPORTED_MODULE_2__.LinkedErrors)\n/* harmony export */ });\n/* harmony import */ var _functiontostring_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functiontostring.js */ \"(ssr)/./node_modules/@sentry/core/esm/integrations/functiontostring.js\");\n/* harmony import */ var _inboundfilters_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./inboundfilters.js */ \"(ssr)/./node_modules/@sentry/core/esm/integrations/inboundfilters.js\");\n/* harmony import */ var _linkederrors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./linkederrors.js */ \"(ssr)/./node_modules/@sentry/core/esm/integrations/linkederrors.js\");\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9pbnRlZ3JhdGlvbnMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXlEO0FBQ0o7QUFDSixDQUNqRCxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9pbnRlZ3JhdGlvbnMvaW5kZXguanM/Y2U0NyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBGdW5jdGlvblRvU3RyaW5nIH0gZnJvbSAnLi9mdW5jdGlvbnRvc3RyaW5nLmpzJztcbmV4cG9ydCB7IEluYm91bmRGaWx0ZXJzIH0gZnJvbSAnLi9pbmJvdW5kZmlsdGVycy5qcyc7XG5leHBvcnQgeyBMaW5rZWRFcnJvcnMgfSBmcm9tICcuL2xpbmtlZGVycm9ycy5qcyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJGdW5jdGlvblRvU3RyaW5nIiwiSW5ib3VuZEZpbHRlcnMiLCJMaW5rZWRFcnJvcnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/integrations/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/integrations/linkederrors.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/integrations/linkederrors.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LinkedErrors: () => (/* binding */ LinkedErrors)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/aggregate-errors.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/eventbuilder.js\");\n\nconst DEFAULT_KEY = \"cause\";\nconst DEFAULT_LIMIT = 5;\n/** Adds SDK info to an event. */ class LinkedErrors {\n    /**\n   * @inheritDoc\n   */ static __initStatic() {\n        this.id = \"LinkedErrors\";\n    }\n    /**\n   * @inheritDoc\n   */ /**\n   * @inheritDoc\n   */ /**\n   * @inheritDoc\n   */ /**\n   * @inheritDoc\n   */ constructor(options = {}){\n        this._key = options.key || DEFAULT_KEY;\n        this._limit = options.limit || DEFAULT_LIMIT;\n        this.name = LinkedErrors.id;\n    }\n    /** @inheritdoc */ setupOnce() {\n    // noop\n    }\n    /**\n   * @inheritDoc\n   */ preprocessEvent(event, hint, client) {\n        const options = client.getOptions();\n        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.applyAggregateErrorsToEvent)(_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.exceptionFromError, options.stackParser, options.maxValueLength, this._key, this._limit, event, hint);\n    }\n}\nLinkedErrors.__initStatic();\n //# sourceMappingURL=linkederrors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9pbnRlZ3JhdGlvbnMvbGlua2VkZXJyb3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnRjtBQUVoRixNQUFNRSxjQUFjO0FBQ3BCLE1BQU1DLGdCQUFnQjtBQUV0QiwrQkFBK0IsR0FDL0IsTUFBTUM7SUFDSjs7R0FFQyxHQUNBLE9BQU9DLGVBQWU7UUFBQyxJQUFJLENBQUNDLEVBQUUsR0FBRztJQUFlO0lBRWpEOztHQUVDLEdBRUQ7O0dBRUMsR0FFRDs7R0FFQyxHQUVEOztHQUVDLEdBQ0FDLFlBQVlDLFVBQVUsQ0FBQyxDQUFDLENBQUU7UUFDekIsSUFBSSxDQUFDQyxJQUFJLEdBQUdELFFBQVFFLEdBQUcsSUFBSVI7UUFDM0IsSUFBSSxDQUFDUyxNQUFNLEdBQUdILFFBQVFJLEtBQUssSUFBSVQ7UUFDL0IsSUFBSSxDQUFDVSxJQUFJLEdBQUdULGFBQWFFLEVBQUU7SUFDN0I7SUFFQSxnQkFBZ0IsR0FDZlEsWUFBWTtJQUNYLE9BQU87SUFDVDtJQUVBOztHQUVDLEdBQ0FDLGdCQUFnQkMsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRTtRQUNwQyxNQUFNVixVQUFVVSxPQUFPQyxVQUFVO1FBRWpDbkIsMEVBQTJCQSxDQUN6QkMsNkRBQWtCQSxFQUNsQk8sUUFBUVksV0FBVyxFQUNuQlosUUFBUWEsY0FBYyxFQUN0QixJQUFJLENBQUNaLElBQUksRUFDVCxJQUFJLENBQUNFLE1BQU0sRUFDWEssT0FDQUM7SUFFSjtBQUNGO0FBQUViLGFBQWFDLFlBQVk7QUFFSCxDQUN4Qix3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9pbnRlZ3JhdGlvbnMvbGlua2VkZXJyb3JzLmpzPzA4NDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXBwbHlBZ2dyZWdhdGVFcnJvcnNUb0V2ZW50LCBleGNlcHRpb25Gcm9tRXJyb3IgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuY29uc3QgREVGQVVMVF9LRVkgPSAnY2F1c2UnO1xuY29uc3QgREVGQVVMVF9MSU1JVCA9IDU7XG5cbi8qKiBBZGRzIFNESyBpbmZvIHRvIGFuIGV2ZW50LiAqL1xuY2xhc3MgTGlua2VkRXJyb3JzICB7XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgIHN0YXRpYyBfX2luaXRTdGF0aWMoKSB7dGhpcy5pZCA9ICdMaW5rZWRFcnJvcnMnO31cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLl9rZXkgPSBvcHRpb25zLmtleSB8fCBERUZBVUxUX0tFWTtcbiAgICB0aGlzLl9saW1pdCA9IG9wdGlvbnMubGltaXQgfHwgREVGQVVMVF9MSU1JVDtcbiAgICB0aGlzLm5hbWUgPSBMaW5rZWRFcnJvcnMuaWQ7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgIHNldHVwT25jZSgpIHtcbiAgICAvLyBub29wXG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBwcmVwcm9jZXNzRXZlbnQoZXZlbnQsIGhpbnQsIGNsaWVudCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBjbGllbnQuZ2V0T3B0aW9ucygpO1xuXG4gICAgYXBwbHlBZ2dyZWdhdGVFcnJvcnNUb0V2ZW50KFxuICAgICAgZXhjZXB0aW9uRnJvbUVycm9yLFxuICAgICAgb3B0aW9ucy5zdGFja1BhcnNlcixcbiAgICAgIG9wdGlvbnMubWF4VmFsdWVMZW5ndGgsXG4gICAgICB0aGlzLl9rZXksXG4gICAgICB0aGlzLl9saW1pdCxcbiAgICAgIGV2ZW50LFxuICAgICAgaGludCxcbiAgICApO1xuICB9XG59IExpbmtlZEVycm9ycy5fX2luaXRTdGF0aWMoKTtcblxuZXhwb3J0IHsgTGlua2VkRXJyb3JzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saW5rZWRlcnJvcnMuanMubWFwXG4iXSwibmFtZXMiOlsiYXBwbHlBZ2dyZWdhdGVFcnJvcnNUb0V2ZW50IiwiZXhjZXB0aW9uRnJvbUVycm9yIiwiREVGQVVMVF9LRVkiLCJERUZBVUxUX0xJTUlUIiwiTGlua2VkRXJyb3JzIiwiX19pbml0U3RhdGljIiwiaWQiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJfa2V5Iiwia2V5IiwiX2xpbWl0IiwibGltaXQiLCJuYW1lIiwic2V0dXBPbmNlIiwicHJlcHJvY2Vzc0V2ZW50IiwiZXZlbnQiLCJoaW50IiwiY2xpZW50IiwiZ2V0T3B0aW9ucyIsInN0YWNrUGFyc2VyIiwibWF4VmFsdWVMZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/integrations/linkederrors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/integrations/requestdata.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/integrations/requestdata.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RequestData: () => (/* binding */ RequestData)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/requestdata.js\");\n\nconst DEFAULT_OPTIONS = {\n    include: {\n        cookies: true,\n        data: true,\n        headers: true,\n        ip: false,\n        query_string: true,\n        url: true,\n        user: {\n            id: true,\n            username: true,\n            email: true\n        }\n    },\n    transactionNamingScheme: \"methodPath\"\n};\n/** Add data about a request to an event. Primarily for use in Node-based SDKs, but included in `@sentry/integrations`\n * so it can be used in cross-platform SDKs like `@sentry/nextjs`. */ class RequestData {\n    /**\n   * @inheritDoc\n   */ static __initStatic() {\n        this.id = \"RequestData\";\n    }\n    /**\n   * @inheritDoc\n   */ /**\n   * Function for adding request data to event. Defaults to `addRequestDataToEvent` from `@sentry/node` for now, but\n   * left as a property so this integration can be moved to `@sentry/core` as a base class in case we decide to use\n   * something similar in browser-based SDKs in the future.\n   */ /**\n   * @inheritDoc\n   */ constructor(options = {}){\n        this.name = RequestData.id;\n        this._addRequestData = _sentry_utils__WEBPACK_IMPORTED_MODULE_0__.addRequestDataToEvent;\n        this._options = {\n            ...DEFAULT_OPTIONS,\n            ...options,\n            include: {\n                // @ts-expect-error It's mad because `method` isn't a known `include` key. (It's only here and not set by default in\n                // `addRequestDataToEvent` for legacy reasons. TODO (v8): Change that.)\n                method: true,\n                ...DEFAULT_OPTIONS.include,\n                ...options.include,\n                user: options.include && typeof options.include.user === \"boolean\" ? options.include.user : {\n                    ...DEFAULT_OPTIONS.include.user,\n                    // Unclear why TS still thinks `options.include.user` could be a boolean at this point\n                    ...(options.include || {}).user\n                }\n            }\n        };\n    }\n    /**\n   * @inheritDoc\n   */ setupOnce(_addGlobalEventProcessor, _getCurrentHub) {\n    // noop\n    }\n    /** @inheritdoc */ processEvent(event, _hint, client) {\n        // Note: In the long run, most of the logic here should probably move into the request data utility functions. For\n        // the moment it lives here, though, until https://github.com/getsentry/sentry-javascript/issues/5718 is addressed.\n        // (TL;DR: Those functions touch many parts of the repo in many different ways, and need to be clened up. Once\n        // that's happened, it will be easier to add this logic in without worrying about unexpected side effects.)\n        const { transactionNamingScheme } = this._options;\n        const { sdkProcessingMetadata = {} } = event;\n        const req = sdkProcessingMetadata.request;\n        if (!req) {\n            return event;\n        }\n        // The Express request handler takes a similar `include` option to that which can be passed to this integration.\n        // If passed there, we store it in `sdkProcessingMetadata`. TODO(v8): Force express and GCP people to use this\n        // integration, so that all of this passing and conversion isn't necessary\n        const addRequestDataOptions = sdkProcessingMetadata.requestDataOptionsFromExpressHandler || sdkProcessingMetadata.requestDataOptionsFromGCPWrapper || convertReqDataIntegrationOptsToAddReqDataOpts(this._options);\n        const processedEvent = this._addRequestData(event, req, addRequestDataOptions);\n        // Transaction events already have the right `transaction` value\n        if (event.type === \"transaction\" || transactionNamingScheme === \"handler\") {\n            return processedEvent;\n        }\n        // In all other cases, use the request's associated transaction (if any) to overwrite the event's `transaction`\n        // value with a high-quality one\n        const reqWithTransaction = req;\n        const transaction = reqWithTransaction._sentryTransaction;\n        if (transaction) {\n            // TODO (v8): Remove the nextjs check and just base it on `transactionNamingScheme` for all SDKs. (We have to\n            // keep it the way it is for the moment, because changing the names of transactions in Sentry has the potential\n            // to break things like alert rules.)\n            const shouldIncludeMethodInTransactionName = getSDKName(client) === \"sentry.javascript.nextjs\" ? transaction.name.startsWith(\"/api\") : transactionNamingScheme !== \"path\";\n            const [transactionValue] = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.extractPathForTransaction)(req, {\n                path: true,\n                method: shouldIncludeMethodInTransactionName,\n                customRoute: transaction.name\n            });\n            processedEvent.transaction = transactionValue;\n        }\n        return processedEvent;\n    }\n}\nRequestData.__initStatic();\n/** Convert this integration's options to match what `addRequestDataToEvent` expects */ /** TODO: Can possibly be deleted once https://github.com/getsentry/sentry-javascript/issues/5718 is fixed */ function convertReqDataIntegrationOptsToAddReqDataOpts(integrationOptions) {\n    const { transactionNamingScheme, include: { ip, user, ...requestOptions } } = integrationOptions;\n    const requestIncludeKeys = [];\n    for (const [key, value] of Object.entries(requestOptions)){\n        if (value) {\n            requestIncludeKeys.push(key);\n        }\n    }\n    let addReqDataUserOpt;\n    if (user === undefined) {\n        addReqDataUserOpt = true;\n    } else if (typeof user === \"boolean\") {\n        addReqDataUserOpt = user;\n    } else {\n        const userIncludeKeys = [];\n        for (const [key, value] of Object.entries(user)){\n            if (value) {\n                userIncludeKeys.push(key);\n            }\n        }\n        addReqDataUserOpt = userIncludeKeys;\n    }\n    return {\n        include: {\n            ip,\n            user: addReqDataUserOpt,\n            request: requestIncludeKeys.length !== 0 ? requestIncludeKeys : undefined,\n            transaction: transactionNamingScheme\n        }\n    };\n}\nfunction getSDKName(client) {\n    try {\n        // For a long chain like this, it's fewer bytes to combine a try-catch with assuming everything is there than to\n        // write out a long chain of `a && a.b && a.b.c && ...`\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return client.getOptions()._metadata.sdk.name;\n    } catch (err) {\n        // In theory we should never get here\n        return undefined;\n    }\n}\n //# sourceMappingURL=requestdata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/integrations/requestdata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/metrics/envelope.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/core/esm/metrics/envelope.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createMetricEnvelope: () => (/* binding */ createMetricEnvelope)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/dsn.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/envelope.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@sentry/core/esm/metrics/utils.js\");\n\n\n/**\n * Create envelope from a metric aggregate.\n */ function createMetricEnvelope(metricBucketItems, dsn, metadata, tunnel) {\n    const headers = {\n        sent_at: new Date().toISOString()\n    };\n    if (metadata && metadata.sdk) {\n        headers.sdk = {\n            name: metadata.sdk.name,\n            version: metadata.sdk.version\n        };\n    }\n    if (!!tunnel && dsn) {\n        headers.dsn = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.dsnToString)(dsn);\n    }\n    const item = createMetricEnvelopeItem(metricBucketItems);\n    return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.createEnvelope)(headers, [\n        item\n    ]);\n}\nfunction createMetricEnvelopeItem(metricBucketItems) {\n    const payload = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.serializeMetricBuckets)(metricBucketItems);\n    const metricHeaders = {\n        type: \"statsd\",\n        length: payload.length\n    };\n    return [\n        metricHeaders,\n        payload\n    ];\n}\n //# sourceMappingURL=envelope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9tZXRyaWNzL2VudmVsb3BlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEQ7QUFDUjtBQUVwRDs7Q0FFQyxHQUNELFNBQVNHLHFCQUNQQyxpQkFBaUIsRUFDakJDLEdBQUcsRUFDSEMsUUFBUSxFQUNSQyxNQUFNO0lBRU4sTUFBTUMsVUFBVTtRQUNkQyxTQUFTLElBQUlDLE9BQU9DLFdBQVc7SUFDakM7SUFFQSxJQUFJTCxZQUFZQSxTQUFTTSxHQUFHLEVBQUU7UUFDNUJKLFFBQVFJLEdBQUcsR0FBRztZQUNaQyxNQUFNUCxTQUFTTSxHQUFHLENBQUNDLElBQUk7WUFDdkJDLFNBQVNSLFNBQVNNLEdBQUcsQ0FBQ0UsT0FBTztRQUMvQjtJQUNGO0lBRUEsSUFBSSxDQUFDLENBQUNQLFVBQVVGLEtBQUs7UUFDbkJHLFFBQVFILEdBQUcsR0FBR0wsMERBQVdBLENBQUNLO0lBQzVCO0lBRUEsTUFBTVUsT0FBT0MseUJBQXlCWjtJQUN0QyxPQUFPSCw2REFBY0EsQ0FBQ08sU0FBUztRQUFDTztLQUFLO0FBQ3ZDO0FBRUEsU0FBU0MseUJBQXlCWixpQkFBaUI7SUFDakQsTUFBTWEsVUFBVWYsaUVBQXNCQSxDQUFDRTtJQUN2QyxNQUFNYyxnQkFBZ0I7UUFDcEJDLE1BQU07UUFDTkMsUUFBUUgsUUFBUUcsTUFBTTtJQUN4QjtJQUNBLE9BQU87UUFBQ0Y7UUFBZUQ7S0FBUTtBQUNqQztBQUVnQyxDQUNoQyxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9tZXRyaWNzL2VudmVsb3BlLmpzPzIwMGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZHNuVG9TdHJpbmcsIGNyZWF0ZUVudmVsb3BlIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBzZXJpYWxpemVNZXRyaWNCdWNrZXRzIH0gZnJvbSAnLi91dGlscy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlIGVudmVsb3BlIGZyb20gYSBtZXRyaWMgYWdncmVnYXRlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVNZXRyaWNFbnZlbG9wZShcbiAgbWV0cmljQnVja2V0SXRlbXMsXG4gIGRzbixcbiAgbWV0YWRhdGEsXG4gIHR1bm5lbCxcbikge1xuICBjb25zdCBoZWFkZXJzID0ge1xuICAgIHNlbnRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgfTtcblxuICBpZiAobWV0YWRhdGEgJiYgbWV0YWRhdGEuc2RrKSB7XG4gICAgaGVhZGVycy5zZGsgPSB7XG4gICAgICBuYW1lOiBtZXRhZGF0YS5zZGsubmFtZSxcbiAgICAgIHZlcnNpb246IG1ldGFkYXRhLnNkay52ZXJzaW9uLFxuICAgIH07XG4gIH1cblxuICBpZiAoISF0dW5uZWwgJiYgZHNuKSB7XG4gICAgaGVhZGVycy5kc24gPSBkc25Ub1N0cmluZyhkc24pO1xuICB9XG5cbiAgY29uc3QgaXRlbSA9IGNyZWF0ZU1ldHJpY0VudmVsb3BlSXRlbShtZXRyaWNCdWNrZXRJdGVtcyk7XG4gIHJldHVybiBjcmVhdGVFbnZlbG9wZShoZWFkZXJzLCBbaXRlbV0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNZXRyaWNFbnZlbG9wZUl0ZW0obWV0cmljQnVja2V0SXRlbXMpIHtcbiAgY29uc3QgcGF5bG9hZCA9IHNlcmlhbGl6ZU1ldHJpY0J1Y2tldHMobWV0cmljQnVja2V0SXRlbXMpO1xuICBjb25zdCBtZXRyaWNIZWFkZXJzID0ge1xuICAgIHR5cGU6ICdzdGF0c2QnLFxuICAgIGxlbmd0aDogcGF5bG9hZC5sZW5ndGgsXG4gIH07XG4gIHJldHVybiBbbWV0cmljSGVhZGVycywgcGF5bG9hZF07XG59XG5cbmV4cG9ydCB7IGNyZWF0ZU1ldHJpY0VudmVsb3BlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnZlbG9wZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJkc25Ub1N0cmluZyIsImNyZWF0ZUVudmVsb3BlIiwic2VyaWFsaXplTWV0cmljQnVja2V0cyIsImNyZWF0ZU1ldHJpY0VudmVsb3BlIiwibWV0cmljQnVja2V0SXRlbXMiLCJkc24iLCJtZXRhZGF0YSIsInR1bm5lbCIsImhlYWRlcnMiLCJzZW50X2F0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwic2RrIiwibmFtZSIsInZlcnNpb24iLCJpdGVtIiwiY3JlYXRlTWV0cmljRW52ZWxvcGVJdGVtIiwicGF5bG9hZCIsIm1ldHJpY0hlYWRlcnMiLCJ0eXBlIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/metrics/envelope.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/metrics/utils.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/esm/metrics/utils.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBucketKey: () => (/* binding */ getBucketKey),\n/* harmony export */   serializeMetricBuckets: () => (/* binding */ serializeMetricBuckets),\n/* harmony export */   simpleHash: () => (/* binding */ simpleHash)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/object.js\");\n\n/**\n * Generate bucket key from metric properties.\n */ function getBucketKey(metricType, name, unit, tags) {\n    const stringifiedTags = Object.entries((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.dropUndefinedKeys)(tags)).sort((a, b)=>a[0].localeCompare(b[0]));\n    return `${metricType}${name}${unit}${stringifiedTags}`;\n}\n/* eslint-disable no-bitwise */ /**\n * Simple hash function for strings.\n */ function simpleHash(s) {\n    let rv = 0;\n    for(let i = 0; i < s.length; i++){\n        const c = s.charCodeAt(i);\n        rv = (rv << 5) - rv + c;\n        rv &= rv;\n    }\n    return rv >>> 0;\n}\n/* eslint-enable no-bitwise */ /**\n * Serialize metrics buckets into a string based on statsd format.\n *\n * Example of format:\n * metric.name@second:1:1.2|d|#a:value,b:anothervalue|T12345677\n * Segments:\n * name: metric.name\n * unit: second\n * value: [1, 1.2]\n * type of metric: d (distribution)\n * tags: { a: value, b: anothervalue }\n * timestamp: 12345677\n */ function serializeMetricBuckets(metricBucketItems) {\n    let out = \"\";\n    for (const [metric, timestamp, metricType, name, unit, tags] of metricBucketItems){\n        const maybeTags = Object.keys(tags).length ? `|#${Object.entries(tags).map(([key, value])=>`${key}:${String(value)}`).join(\",\")}` : \"\";\n        out += `${name}@${unit}:${metric}|${metricType}${maybeTags}|T${timestamp}\\n`;\n    }\n    return out;\n}\n //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9tZXRyaWNzL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBa0Q7QUFFbEQ7O0NBRUMsR0FDRCxTQUFTQyxhQUNQQyxVQUFVLEVBQ1ZDLElBQUksRUFDSkMsSUFBSSxFQUNKQyxJQUFJO0lBRUosTUFBTUMsa0JBQWtCQyxPQUFPQyxPQUFPLENBQUNSLGdFQUFpQkEsQ0FBQ0ssT0FBT0ksSUFBSSxDQUFDLENBQUNDLEdBQUdDLElBQU1ELENBQUMsQ0FBQyxFQUFFLENBQUNFLGFBQWEsQ0FBQ0QsQ0FBQyxDQUFDLEVBQUU7SUFDdEcsT0FBTyxDQUFDLEVBQUVULFdBQVcsRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUVFLGdCQUFnQixDQUFDO0FBQ3hEO0FBRUEsNkJBQTZCLEdBQzdCOztDQUVDLEdBQ0QsU0FBU08sV0FBV0MsQ0FBQztJQUNuQixJQUFJQyxLQUFLO0lBQ1QsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlGLEVBQUVHLE1BQU0sRUFBRUQsSUFBSztRQUNqQyxNQUFNRSxJQUFJSixFQUFFSyxVQUFVLENBQUNIO1FBQ3ZCRCxLQUFLLENBQUNBLE1BQU0sS0FBS0EsS0FBS0c7UUFDdEJILE1BQU1BO0lBQ1I7SUFDQSxPQUFPQSxPQUFPO0FBQ2hCO0FBQ0EsNEJBQTRCLEdBRTVCOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUNELFNBQVNLLHVCQUF1QkMsaUJBQWlCO0lBQy9DLElBQUlDLE1BQU07SUFDVixLQUFLLE1BQU0sQ0FBQ0MsUUFBUUMsV0FBV3RCLFlBQVlDLE1BQU1DLE1BQU1DLEtBQUssSUFBSWdCLGtCQUFtQjtRQUNqRixNQUFNSSxZQUFZbEIsT0FBT21CLElBQUksQ0FBQ3JCLE1BQU1ZLE1BQU0sR0FDdEMsQ0FBQyxFQUFFLEVBQUVWLE9BQU9DLE9BQU8sQ0FBQ0gsTUFDakJzQixHQUFHLENBQUMsQ0FBQyxDQUFDQyxLQUFLQyxNQUFNLEdBQUssQ0FBQyxFQUFFRCxJQUFJLENBQUMsRUFBRUUsT0FBT0QsT0FBTyxDQUFDLEVBQy9DRSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQ2Q7UUFDSlQsT0FBTyxDQUFDLEVBQUVuQixLQUFLLENBQUMsRUFBRUMsS0FBSyxDQUFDLEVBQUVtQixPQUFPLENBQUMsRUFBRXJCLFdBQVcsRUFBRXVCLFVBQVUsRUFBRSxFQUFFRCxVQUFVLEVBQUUsQ0FBQztJQUM5RTtJQUNBLE9BQU9GO0FBQ1Q7QUFFNEQsQ0FDNUQsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vbWV0cmljcy91dGlscy5qcz9iZTM3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRyb3BVbmRlZmluZWRLZXlzIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbi8qKlxuICogR2VuZXJhdGUgYnVja2V0IGtleSBmcm9tIG1ldHJpYyBwcm9wZXJ0aWVzLlxuICovXG5mdW5jdGlvbiBnZXRCdWNrZXRLZXkoXG4gIG1ldHJpY1R5cGUsXG4gIG5hbWUsXG4gIHVuaXQsXG4gIHRhZ3MsXG4pIHtcbiAgY29uc3Qgc3RyaW5naWZpZWRUYWdzID0gT2JqZWN0LmVudHJpZXMoZHJvcFVuZGVmaW5lZEtleXModGFncykpLnNvcnQoKGEsIGIpID0+IGFbMF0ubG9jYWxlQ29tcGFyZShiWzBdKSk7XG4gIHJldHVybiBgJHttZXRyaWNUeXBlfSR7bmFtZX0ke3VuaXR9JHtzdHJpbmdpZmllZFRhZ3N9YDtcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuLyoqXG4gKiBTaW1wbGUgaGFzaCBmdW5jdGlvbiBmb3Igc3RyaW5ncy5cbiAqL1xuZnVuY3Rpb24gc2ltcGxlSGFzaChzKSB7XG4gIGxldCBydiA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGMgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcnYgPSAocnYgPDwgNSkgLSBydiArIGM7XG4gICAgcnYgJj0gcnY7XG4gIH1cbiAgcmV0dXJuIHJ2ID4+PiAwO1xufVxuLyogZXNsaW50LWVuYWJsZSBuby1iaXR3aXNlICovXG5cbi8qKlxuICogU2VyaWFsaXplIG1ldHJpY3MgYnVja2V0cyBpbnRvIGEgc3RyaW5nIGJhc2VkIG9uIHN0YXRzZCBmb3JtYXQuXG4gKlxuICogRXhhbXBsZSBvZiBmb3JtYXQ6XG4gKiBtZXRyaWMubmFtZUBzZWNvbmQ6MToxLjJ8ZHwjYTp2YWx1ZSxiOmFub3RoZXJ2YWx1ZXxUMTIzNDU2NzdcbiAqIFNlZ21lbnRzOlxuICogbmFtZTogbWV0cmljLm5hbWVcbiAqIHVuaXQ6IHNlY29uZFxuICogdmFsdWU6IFsxLCAxLjJdXG4gKiB0eXBlIG9mIG1ldHJpYzogZCAoZGlzdHJpYnV0aW9uKVxuICogdGFnczogeyBhOiB2YWx1ZSwgYjogYW5vdGhlcnZhbHVlIH1cbiAqIHRpbWVzdGFtcDogMTIzNDU2NzdcbiAqL1xuZnVuY3Rpb24gc2VyaWFsaXplTWV0cmljQnVja2V0cyhtZXRyaWNCdWNrZXRJdGVtcykge1xuICBsZXQgb3V0ID0gJyc7XG4gIGZvciAoY29uc3QgW21ldHJpYywgdGltZXN0YW1wLCBtZXRyaWNUeXBlLCBuYW1lLCB1bml0LCB0YWdzXSBvZiBtZXRyaWNCdWNrZXRJdGVtcykge1xuICAgIGNvbnN0IG1heWJlVGFncyA9IE9iamVjdC5rZXlzKHRhZ3MpLmxlbmd0aFxuICAgICAgPyBgfCMke09iamVjdC5lbnRyaWVzKHRhZ3MpXG4gICAgICAgICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBgJHtrZXl9OiR7U3RyaW5nKHZhbHVlKX1gKVxuICAgICAgICAgIC5qb2luKCcsJyl9YFxuICAgICAgOiAnJztcbiAgICBvdXQgKz0gYCR7bmFtZX1AJHt1bml0fToke21ldHJpY318JHttZXRyaWNUeXBlfSR7bWF5YmVUYWdzfXxUJHt0aW1lc3RhbXB9XFxuYDtcbiAgfVxuICByZXR1cm4gb3V0O1xufVxuXG5leHBvcnQgeyBnZXRCdWNrZXRLZXksIHNlcmlhbGl6ZU1ldHJpY0J1Y2tldHMsIHNpbXBsZUhhc2ggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcFxuIl0sIm5hbWVzIjpbImRyb3BVbmRlZmluZWRLZXlzIiwiZ2V0QnVja2V0S2V5IiwibWV0cmljVHlwZSIsIm5hbWUiLCJ1bml0IiwidGFncyIsInN0cmluZ2lmaWVkVGFncyIsIk9iamVjdCIsImVudHJpZXMiLCJzb3J0IiwiYSIsImIiLCJsb2NhbGVDb21wYXJlIiwic2ltcGxlSGFzaCIsInMiLCJydiIsImkiLCJsZW5ndGgiLCJjIiwiY2hhckNvZGVBdCIsInNlcmlhbGl6ZU1ldHJpY0J1Y2tldHMiLCJtZXRyaWNCdWNrZXRJdGVtcyIsIm91dCIsIm1ldHJpYyIsInRpbWVzdGFtcCIsIm1heWJlVGFncyIsImtleXMiLCJtYXAiLCJrZXkiLCJ2YWx1ZSIsIlN0cmluZyIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/metrics/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/scope.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/core/esm/scope.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Scope: () => (/* binding */ Scope)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/time.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _eventProcessors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./eventProcessors.js */ \"(ssr)/./node_modules/@sentry/core/esm/eventProcessors.js\");\n/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./session.js */ \"(ssr)/./node_modules/@sentry/core/esm/session.js\");\n\n\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */ const DEFAULT_MAX_BREADCRUMBS = 100;\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */ class Scope {\n    /** Flag if notifying is happening. */ /** Callback for client to receive scope changes. */ /** Callback list that will be called after {@link applyToEvent}. */ /** Array of breadcrumbs. */ /** User */ /** Tags */ /** Extra */ /** Contexts */ /** Attachments */ /** Propagation Context for distributed tracing */ /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */ /** Fingerprint */ /** Severity */ // eslint-disable-next-line deprecation/deprecation\n    /** Transaction Name */ /** Span */ /** Session */ /** Request Mode Session Status */ // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n    constructor(){\n        this._notifyingListeners = false;\n        this._scopeListeners = [];\n        this._eventProcessors = [];\n        this._breadcrumbs = [];\n        this._attachments = [];\n        this._user = {};\n        this._tags = {};\n        this._extra = {};\n        this._contexts = {};\n        this._sdkProcessingMetadata = {};\n        this._propagationContext = generatePropagationContext();\n    }\n    /**\n   * Inherit values from the parent scope.\n   * @deprecated Use `scope.clone()` and `new Scope()` instead.\n   */ static clone(scope) {\n        return scope ? scope.clone() : new Scope();\n    }\n    /**\n   * Clone this scope instance.\n   */ clone() {\n        const newScope = new Scope();\n        newScope._breadcrumbs = [\n            ...this._breadcrumbs\n        ];\n        newScope._tags = {\n            ...this._tags\n        };\n        newScope._extra = {\n            ...this._extra\n        };\n        newScope._contexts = {\n            ...this._contexts\n        };\n        newScope._user = this._user;\n        newScope._level = this._level;\n        newScope._span = this._span;\n        newScope._session = this._session;\n        newScope._transactionName = this._transactionName;\n        newScope._fingerprint = this._fingerprint;\n        newScope._eventProcessors = [\n            ...this._eventProcessors\n        ];\n        newScope._requestSession = this._requestSession;\n        newScope._attachments = [\n            ...this._attachments\n        ];\n        newScope._sdkProcessingMetadata = {\n            ...this._sdkProcessingMetadata\n        };\n        newScope._propagationContext = {\n            ...this._propagationContext\n        };\n        return newScope;\n    }\n    /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */ addScopeListener(callback) {\n        this._scopeListeners.push(callback);\n    }\n    /**\n   * @inheritDoc\n   */ addEventProcessor(callback) {\n        this._eventProcessors.push(callback);\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setUser(user) {\n        this._user = user || {};\n        if (this._session) {\n            (0,_session_js__WEBPACK_IMPORTED_MODULE_0__.updateSession)(this._session, {\n                user\n            });\n        }\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ getUser() {\n        return this._user;\n    }\n    /**\n   * @inheritDoc\n   */ getRequestSession() {\n        return this._requestSession;\n    }\n    /**\n   * @inheritDoc\n   */ setRequestSession(requestSession) {\n        this._requestSession = requestSession;\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setTags(tags) {\n        this._tags = {\n            ...this._tags,\n            ...tags\n        };\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setTag(key, value) {\n        this._tags = {\n            ...this._tags,\n            [key]: value\n        };\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setExtras(extras) {\n        this._extra = {\n            ...this._extra,\n            ...extras\n        };\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setExtra(key, extra) {\n        this._extra = {\n            ...this._extra,\n            [key]: extra\n        };\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setFingerprint(fingerprint) {\n        this._fingerprint = fingerprint;\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setLevel(// eslint-disable-next-line deprecation/deprecation\n    level) {\n        this._level = level;\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setTransactionName(name) {\n        this._transactionName = name;\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setContext(key, context) {\n        if (context === null) {\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete this._contexts[key];\n        } else {\n            this._contexts[key] = context;\n        }\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setSpan(span) {\n        this._span = span;\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ getSpan() {\n        return this._span;\n    }\n    /**\n   * @inheritDoc\n   */ getTransaction() {\n        // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will\n        // have a pointer to the currently-active transaction.\n        const span = this.getSpan();\n        return span && span.transaction;\n    }\n    /**\n   * @inheritDoc\n   */ setSession(session) {\n        if (!session) {\n            delete this._session;\n        } else {\n            this._session = session;\n        }\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ getSession() {\n        return this._session;\n    }\n    /**\n   * @inheritDoc\n   */ update(captureContext) {\n        if (!captureContext) {\n            return this;\n        }\n        if (typeof captureContext === \"function\") {\n            const updatedScope = captureContext(this);\n            return updatedScope instanceof Scope ? updatedScope : this;\n        }\n        if (captureContext instanceof Scope) {\n            this._tags = {\n                ...this._tags,\n                ...captureContext._tags\n            };\n            this._extra = {\n                ...this._extra,\n                ...captureContext._extra\n            };\n            this._contexts = {\n                ...this._contexts,\n                ...captureContext._contexts\n            };\n            if (captureContext._user && Object.keys(captureContext._user).length) {\n                this._user = captureContext._user;\n            }\n            if (captureContext._level) {\n                this._level = captureContext._level;\n            }\n            if (captureContext._fingerprint) {\n                this._fingerprint = captureContext._fingerprint;\n            }\n            if (captureContext._requestSession) {\n                this._requestSession = captureContext._requestSession;\n            }\n            if (captureContext._propagationContext) {\n                this._propagationContext = captureContext._propagationContext;\n            }\n        } else if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(captureContext)) {\n            // eslint-disable-next-line no-param-reassign\n            captureContext = captureContext;\n            this._tags = {\n                ...this._tags,\n                ...captureContext.tags\n            };\n            this._extra = {\n                ...this._extra,\n                ...captureContext.extra\n            };\n            this._contexts = {\n                ...this._contexts,\n                ...captureContext.contexts\n            };\n            if (captureContext.user) {\n                this._user = captureContext.user;\n            }\n            if (captureContext.level) {\n                this._level = captureContext.level;\n            }\n            if (captureContext.fingerprint) {\n                this._fingerprint = captureContext.fingerprint;\n            }\n            if (captureContext.requestSession) {\n                this._requestSession = captureContext.requestSession;\n            }\n            if (captureContext.propagationContext) {\n                this._propagationContext = captureContext.propagationContext;\n            }\n        }\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ clear() {\n        this._breadcrumbs = [];\n        this._tags = {};\n        this._extra = {};\n        this._user = {};\n        this._contexts = {};\n        this._level = undefined;\n        this._transactionName = undefined;\n        this._fingerprint = undefined;\n        this._requestSession = undefined;\n        this._span = undefined;\n        this._session = undefined;\n        this._notifyScopeListeners();\n        this._attachments = [];\n        this._propagationContext = generatePropagationContext();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ addBreadcrumb(breadcrumb, maxBreadcrumbs) {\n        const maxCrumbs = typeof maxBreadcrumbs === \"number\" ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n        // No data has been changed, so don't notify scope listeners\n        if (maxCrumbs <= 0) {\n            return this;\n        }\n        const mergedBreadcrumb = {\n            timestamp: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.dateTimestampInSeconds)(),\n            ...breadcrumb\n        };\n        const breadcrumbs = this._breadcrumbs;\n        breadcrumbs.push(mergedBreadcrumb);\n        this._breadcrumbs = breadcrumbs.length > maxCrumbs ? breadcrumbs.slice(-maxCrumbs) : breadcrumbs;\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ getLastBreadcrumb() {\n        return this._breadcrumbs[this._breadcrumbs.length - 1];\n    }\n    /**\n   * @inheritDoc\n   */ clearBreadcrumbs() {\n        this._breadcrumbs = [];\n        this._notifyScopeListeners();\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ addAttachment(attachment) {\n        this._attachments.push(attachment);\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ getAttachments() {\n        return this._attachments;\n    }\n    /**\n   * @inheritDoc\n   */ clearAttachments() {\n        this._attachments = [];\n        return this;\n    }\n    /**\n   * Applies data from the scope to the event and runs all event processors on it.\n   *\n   * @param event Event\n   * @param hint Object containing additional information about the original exception, for use by the event processors.\n   * @hidden\n   */ applyToEvent(event, hint = {}, additionalEventProcessors) {\n        if (this._extra && Object.keys(this._extra).length) {\n            event.extra = {\n                ...this._extra,\n                ...event.extra\n            };\n        }\n        if (this._tags && Object.keys(this._tags).length) {\n            event.tags = {\n                ...this._tags,\n                ...event.tags\n            };\n        }\n        if (this._user && Object.keys(this._user).length) {\n            event.user = {\n                ...this._user,\n                ...event.user\n            };\n        }\n        if (this._contexts && Object.keys(this._contexts).length) {\n            event.contexts = {\n                ...this._contexts,\n                ...event.contexts\n            };\n        }\n        if (this._level) {\n            event.level = this._level;\n        }\n        if (this._transactionName) {\n            event.transaction = this._transactionName;\n        }\n        // We want to set the trace context for normal events only if there isn't already\n        // a trace context on the event. There is a product feature in place where we link\n        // errors with transaction and it relies on that.\n        if (this._span) {\n            event.contexts = {\n                trace: this._span.getTraceContext(),\n                ...event.contexts\n            };\n            const transaction = this._span.transaction;\n            if (transaction) {\n                event.sdkProcessingMetadata = {\n                    dynamicSamplingContext: transaction.getDynamicSamplingContext(),\n                    ...event.sdkProcessingMetadata\n                };\n                const transactionName = transaction.name;\n                if (transactionName) {\n                    event.tags = {\n                        transaction: transactionName,\n                        ...event.tags\n                    };\n                }\n            }\n        }\n        this._applyFingerprint(event);\n        const scopeBreadcrumbs = this._getBreadcrumbs();\n        const breadcrumbs = [\n            ...event.breadcrumbs || [],\n            ...scopeBreadcrumbs\n        ];\n        event.breadcrumbs = breadcrumbs.length > 0 ? breadcrumbs : undefined;\n        event.sdkProcessingMetadata = {\n            ...event.sdkProcessingMetadata,\n            ...this._sdkProcessingMetadata,\n            propagationContext: this._propagationContext\n        };\n        // TODO (v8): Update this order to be: Global > Client > Scope\n        return (0,_eventProcessors_js__WEBPACK_IMPORTED_MODULE_3__.notifyEventProcessors)([\n            ...additionalEventProcessors || [],\n            // eslint-disable-next-line deprecation/deprecation\n            ...(0,_eventProcessors_js__WEBPACK_IMPORTED_MODULE_3__.getGlobalEventProcessors)(),\n            ...this._eventProcessors\n        ], event, hint);\n    }\n    /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry\n   */ setSDKProcessingMetadata(newData) {\n        this._sdkProcessingMetadata = {\n            ...this._sdkProcessingMetadata,\n            ...newData\n        };\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setPropagationContext(context) {\n        this._propagationContext = context;\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ getPropagationContext() {\n        return this._propagationContext;\n    }\n    /**\n   * Get the breadcrumbs for this scope.\n   */ _getBreadcrumbs() {\n        return this._breadcrumbs;\n    }\n    /**\n   * This will be called on every set call.\n   */ _notifyScopeListeners() {\n        // We need this check for this._notifyingListeners to be able to work on scope during updates\n        // If this check is not here we'll produce endless recursion when something is done with the scope\n        // during the callback.\n        if (!this._notifyingListeners) {\n            this._notifyingListeners = true;\n            this._scopeListeners.forEach((callback)=>{\n                callback(this);\n            });\n            this._notifyingListeners = false;\n        }\n    }\n    /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */ _applyFingerprint(event) {\n        // Make sure it's an array first and we actually have something in place\n        event.fingerprint = event.fingerprint ? (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.arrayify)(event.fingerprint) : [];\n        // If we have something on the scope, then merge it with event\n        if (this._fingerprint) {\n            event.fingerprint = event.fingerprint.concat(this._fingerprint);\n        }\n        // If we have no data at all, remove empty array default\n        if (event.fingerprint && !event.fingerprint.length) {\n            delete event.fingerprint;\n        }\n    }\n}\nfunction generatePropagationContext() {\n    return {\n        traceId: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.uuid4)(),\n        spanId: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.uuid4)().substring(16)\n    };\n}\n //# sourceMappingURL=scope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/scope.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/sdk.js":
/*!**********************************************!*\
  !*** ./node_modules/@sentry/core/esm/sdk.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initAndBind: () => (/* binding */ initAndBind)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/esm/debug-build.js\");\n/* harmony import */ var _hub_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hub.js */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n\n\n\n/** A class object that can instantiate Client objects. */ /**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */ function initAndBind(clientClass, options) {\n    if (options.debug === true) {\n        if (_debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD) {\n            _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.logger.enable();\n        } else {\n            // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n            (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.consoleSandbox)(()=>{\n                // eslint-disable-next-line no-console\n                console.warn(\"[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.\");\n            });\n        }\n    }\n    const hub = (0,_hub_js__WEBPACK_IMPORTED_MODULE_2__.getCurrentHub)();\n    const scope = hub.getScope();\n    scope.update(options.initialScope);\n    const client = new clientClass(options);\n    hub.bindClient(client);\n}\n //# sourceMappingURL=sdk.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9zZGsuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF1RDtBQUNSO0FBQ047QUFFekMsd0RBQXdELEdBRXhEOzs7Ozs7Q0FNQyxHQUNELFNBQVNJLFlBQ1BDLFdBQVcsRUFDWEMsT0FBTztJQUVQLElBQUlBLFFBQVFDLEtBQUssS0FBSyxNQUFNO1FBQzFCLElBQUlMLHdEQUFXQSxFQUFFO1lBQ2ZGLGlEQUFNQSxDQUFDUSxNQUFNO1FBQ2YsT0FBTztZQUNMLGtIQUFrSDtZQUNsSFAsNkRBQWNBLENBQUM7Z0JBQ2Isc0NBQXNDO2dCQUN0Q1EsUUFBUUMsSUFBSSxDQUFDO1lBQ2Y7UUFDRjtJQUNGO0lBQ0EsTUFBTUMsTUFBTVIsc0RBQWFBO0lBQ3pCLE1BQU1TLFFBQVFELElBQUlFLFFBQVE7SUFDMUJELE1BQU1FLE1BQU0sQ0FBQ1IsUUFBUVMsWUFBWTtJQUVqQyxNQUFNQyxTQUFTLElBQUlYLFlBQVlDO0lBQy9CSyxJQUFJTSxVQUFVLENBQUNEO0FBQ2pCO0FBRXVCLENBQ3ZCLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZXNtL3Nkay5qcz81YTFlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvZ2dlciwgY29uc29sZVNhbmRib3ggfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IERFQlVHX0JVSUxEIH0gZnJvbSAnLi9kZWJ1Zy1idWlsZC5qcyc7XG5pbXBvcnQgeyBnZXRDdXJyZW50SHViIH0gZnJvbSAnLi9odWIuanMnO1xuXG4vKiogQSBjbGFzcyBvYmplY3QgdGhhdCBjYW4gaW5zdGFudGlhdGUgQ2xpZW50IG9iamVjdHMuICovXG5cbi8qKlxuICogSW50ZXJuYWwgZnVuY3Rpb24gdG8gY3JlYXRlIGEgbmV3IFNESyBjbGllbnQgaW5zdGFuY2UuIFRoZSBjbGllbnQgaXNcbiAqIGluc3RhbGxlZCBhbmQgdGhlbiBib3VuZCB0byB0aGUgY3VycmVudCBzY29wZS5cbiAqXG4gKiBAcGFyYW0gY2xpZW50Q2xhc3MgVGhlIGNsaWVudCBjbGFzcyB0byBpbnN0YW50aWF0ZS5cbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgdG8gcGFzcyB0byB0aGUgY2xpZW50LlxuICovXG5mdW5jdGlvbiBpbml0QW5kQmluZChcbiAgY2xpZW50Q2xhc3MsXG4gIG9wdGlvbnMsXG4pIHtcbiAgaWYgKG9wdGlvbnMuZGVidWcgPT09IHRydWUpIHtcbiAgICBpZiAoREVCVUdfQlVJTEQpIHtcbiAgICAgIGxvZ2dlci5lbmFibGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXNlIGBjb25zb2xlLndhcm5gIHJhdGhlciB0aGFuIGBsb2dnZXIud2FybmAgc2luY2UgYnkgbm9uLWRlYnVnIGJ1bmRsZXMgaGF2ZSBhbGwgYGxvZ2dlci54YCBzdGF0ZW1lbnRzIHN0cmlwcGVkXG4gICAgICBjb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybignW1NlbnRyeV0gQ2Fubm90IGluaXRpYWxpemUgU0RLIHdpdGggYGRlYnVnYCBvcHRpb24gdXNpbmcgYSBub24tZGVidWcgYnVuZGxlLicpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGNvbnN0IGh1YiA9IGdldEN1cnJlbnRIdWIoKTtcbiAgY29uc3Qgc2NvcGUgPSBodWIuZ2V0U2NvcGUoKTtcbiAgc2NvcGUudXBkYXRlKG9wdGlvbnMuaW5pdGlhbFNjb3BlKTtcblxuICBjb25zdCBjbGllbnQgPSBuZXcgY2xpZW50Q2xhc3Mob3B0aW9ucyk7XG4gIGh1Yi5iaW5kQ2xpZW50KGNsaWVudCk7XG59XG5cbmV4cG9ydCB7IGluaXRBbmRCaW5kIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZGsuanMubWFwXG4iXSwibmFtZXMiOlsibG9nZ2VyIiwiY29uc29sZVNhbmRib3giLCJERUJVR19CVUlMRCIsImdldEN1cnJlbnRIdWIiLCJpbml0QW5kQmluZCIsImNsaWVudENsYXNzIiwib3B0aW9ucyIsImRlYnVnIiwiZW5hYmxlIiwiY29uc29sZSIsIndhcm4iLCJodWIiLCJzY29wZSIsImdldFNjb3BlIiwidXBkYXRlIiwiaW5pdGlhbFNjb3BlIiwiY2xpZW50IiwiYmluZENsaWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/sdk.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/server-runtime-client.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/server-runtime-client.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServerRuntimeClient: () => (/* binding */ ServerRuntimeClient)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/syncpromise.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/eventbuilder.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _baseclient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseclient.js */ \"(ssr)/./node_modules/@sentry/core/esm/baseclient.js\");\n/* harmony import */ var _checkin_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./checkin.js */ \"(ssr)/./node_modules/@sentry/core/esm/checkin.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/esm/debug-build.js\");\n/* harmony import */ var _hub_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hub.js */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sessionflusher_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./sessionflusher.js */ \"(ssr)/./node_modules/@sentry/core/esm/sessionflusher.js\");\n/* harmony import */ var _tracing_hubextensions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracing/hubextensions.js */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/hubextensions.js\");\n/* harmony import */ var _tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./tracing/dynamicSamplingContext.js */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/dynamicSamplingContext.js\");\n\n\n\n\n\n\n\n\n\n/**\n * The Sentry Server Runtime Client SDK.\n */ class ServerRuntimeClient extends _baseclient_js__WEBPACK_IMPORTED_MODULE_0__.BaseClient {\n    /**\n   * Creates a new Edge SDK instance.\n   * @param options Configuration options for this SDK.\n   */ constructor(options){\n        // Server clients always support tracing\n        (0,_tracing_hubextensions_js__WEBPACK_IMPORTED_MODULE_1__.addTracingExtensions)();\n        super(options);\n    }\n    /**\n   * @inheritDoc\n   */ eventFromException(exception, hint) {\n        return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.resolvedSyncPromise)((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.eventFromUnknownInput)(_hub_js__WEBPACK_IMPORTED_MODULE_4__.getCurrentHub, this._options.stackParser, exception, hint));\n    }\n    /**\n   * @inheritDoc\n   */ eventFromMessage(message, // eslint-disable-next-line deprecation/deprecation\n    level = \"info\", hint) {\n        return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.resolvedSyncPromise)((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.eventFromMessage)(this._options.stackParser, message, level, hint, this._options.attachStacktrace));\n    }\n    /**\n   * @inheritDoc\n   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n    captureException(exception, hint, scope) {\n        // Check if the flag `autoSessionTracking` is enabled, and if `_sessionFlusher` exists because it is initialised only\n        // when the `requestHandler` middleware is used, and hence the expectation is to have SessionAggregates payload\n        // sent to the Server only when the `requestHandler` middleware is used\n        if (this._options.autoSessionTracking && this._sessionFlusher && scope) {\n            const requestSession = scope.getRequestSession();\n            // Necessary checks to ensure this is code block is executed only within a request\n            // Should override the status only if `requestSession.status` is `Ok`, which is its initial stage\n            if (requestSession && requestSession.status === \"ok\") {\n                requestSession.status = \"errored\";\n            }\n        }\n        return super.captureException(exception, hint, scope);\n    }\n    /**\n   * @inheritDoc\n   */ captureEvent(event, hint, scope) {\n        // Check if the flag `autoSessionTracking` is enabled, and if `_sessionFlusher` exists because it is initialised only\n        // when the `requestHandler` middleware is used, and hence the expectation is to have SessionAggregates payload\n        // sent to the Server only when the `requestHandler` middleware is used\n        if (this._options.autoSessionTracking && this._sessionFlusher && scope) {\n            const eventType = event.type || \"exception\";\n            const isException = eventType === \"exception\" && event.exception && event.exception.values && event.exception.values.length > 0;\n            // If the event is of type Exception, then a request session should be captured\n            if (isException) {\n                const requestSession = scope.getRequestSession();\n                // Ensure that this is happening within the bounds of a request, and make sure not to override\n                // Session Status if Errored / Crashed\n                if (requestSession && requestSession.status === \"ok\") {\n                    requestSession.status = \"errored\";\n                }\n            }\n        }\n        return super.captureEvent(event, hint, scope);\n    }\n    /**\n   *\n   * @inheritdoc\n   */ close(timeout) {\n        if (this._sessionFlusher) {\n            this._sessionFlusher.close();\n        }\n        return super.close(timeout);\n    }\n    /** Method that initialises an instance of SessionFlusher on Client */ initSessionFlusher() {\n        const { release, environment } = this._options;\n        if (!release) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_5__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_6__.logger.warn(\"Cannot initialise an instance of SessionFlusher if no release is provided!\");\n        } else {\n            this._sessionFlusher = new _sessionflusher_js__WEBPACK_IMPORTED_MODULE_7__.SessionFlusher(this, {\n                release,\n                environment\n            });\n        }\n    }\n    /**\n   * Create a cron monitor check in and send it to Sentry.\n   *\n   * @param checkIn An object that describes a check in.\n   * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n   * to create a monitor automatically when sending a check in.\n   */ captureCheckIn(checkIn, monitorConfig, scope) {\n        const id = \"checkInId\" in checkIn && checkIn.checkInId ? checkIn.checkInId : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_8__.uuid4)();\n        if (!this._isEnabled()) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_5__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_6__.logger.warn(\"SDK not enabled, will not capture checkin.\");\n            return id;\n        }\n        const options = this.getOptions();\n        const { release, environment, tunnel } = options;\n        const serializedCheckIn = {\n            check_in_id: id,\n            monitor_slug: checkIn.monitorSlug,\n            status: checkIn.status,\n            release,\n            environment\n        };\n        if (\"duration\" in checkIn) {\n            serializedCheckIn.duration = checkIn.duration;\n        }\n        if (monitorConfig) {\n            serializedCheckIn.monitor_config = {\n                schedule: monitorConfig.schedule,\n                checkin_margin: monitorConfig.checkinMargin,\n                max_runtime: monitorConfig.maxRuntime,\n                timezone: monitorConfig.timezone\n            };\n        }\n        const [dynamicSamplingContext, traceContext] = this._getTraceInfoFromScope(scope);\n        if (traceContext) {\n            serializedCheckIn.contexts = {\n                trace: traceContext\n            };\n        }\n        const envelope = (0,_checkin_js__WEBPACK_IMPORTED_MODULE_9__.createCheckInEnvelope)(serializedCheckIn, dynamicSamplingContext, this.getSdkMetadata(), tunnel, this.getDsn());\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_5__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_6__.logger.info(\"Sending checkin:\", checkIn.monitorSlug, checkIn.status);\n        void this._sendEnvelope(envelope);\n        return id;\n    }\n    /**\n   * Method responsible for capturing/ending a request session by calling `incrementSessionStatusCount` to increment\n   * appropriate session aggregates bucket\n   */ _captureRequestSession() {\n        if (!this._sessionFlusher) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_5__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_6__.logger.warn(\"Discarded request mode session because autoSessionTracking option was disabled\");\n        } else {\n            this._sessionFlusher.incrementSessionStatusCount();\n        }\n    }\n    /**\n   * @inheritDoc\n   */ _prepareEvent(event, hint, scope) {\n        if (this._options.platform) {\n            event.platform = event.platform || this._options.platform;\n        }\n        if (this._options.runtime) {\n            event.contexts = {\n                ...event.contexts,\n                runtime: (event.contexts || {}).runtime || this._options.runtime\n            };\n        }\n        if (this._options.serverName) {\n            event.server_name = event.server_name || this._options.serverName;\n        }\n        return super._prepareEvent(event, hint, scope);\n    }\n    /** Extract trace information from scope */ _getTraceInfoFromScope(scope) {\n        if (!scope) {\n            return [\n                undefined,\n                undefined\n            ];\n        }\n        const span = scope.getSpan();\n        if (span) {\n            const samplingContext = span.transaction ? span.transaction.getDynamicSamplingContext() : undefined;\n            return [\n                samplingContext,\n                span.getTraceContext()\n            ];\n        }\n        const { traceId, spanId, parentSpanId, dsc } = scope.getPropagationContext();\n        const traceContext = {\n            trace_id: traceId,\n            span_id: spanId,\n            parent_span_id: parentSpanId\n        };\n        if (dsc) {\n            return [\n                dsc,\n                traceContext\n            ];\n        }\n        return [\n            (0,_tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_10__.getDynamicSamplingContextFromClient)(traceId, this, scope),\n            traceContext\n        ];\n    }\n}\n //# sourceMappingURL=server-runtime-client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/server-runtime-client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/session.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/core/esm/session.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeSession: () => (/* binding */ closeSession),\n/* harmony export */   makeSession: () => (/* binding */ makeSession),\n/* harmony export */   updateSession: () => (/* binding */ updateSession)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/time.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/object.js\");\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */ function makeSession(context) {\n    // Both timestamp and started are in seconds since the UNIX epoch.\n    const startingTime = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.timestampInSeconds)();\n    const session = {\n        sid: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.uuid4)(),\n        init: true,\n        timestamp: startingTime,\n        started: startingTime,\n        duration: 0,\n        status: \"ok\",\n        errors: 0,\n        ignoreDuration: false,\n        toJSON: ()=>sessionToJSON(session)\n    };\n    if (context) {\n        updateSession(session, context);\n    }\n    return session;\n}\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see BaseClient.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */ // eslint-disable-next-line complexity\nfunction updateSession(session, context = {}) {\n    if (context.user) {\n        if (!session.ipAddress && context.user.ip_address) {\n            session.ipAddress = context.user.ip_address;\n        }\n        if (!session.did && !context.did) {\n            session.did = context.user.id || context.user.email || context.user.username;\n        }\n    }\n    session.timestamp = context.timestamp || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.timestampInSeconds)();\n    if (context.abnormal_mechanism) {\n        session.abnormal_mechanism = context.abnormal_mechanism;\n    }\n    if (context.ignoreDuration) {\n        session.ignoreDuration = context.ignoreDuration;\n    }\n    if (context.sid) {\n        // Good enough uuid validation. — Kamil\n        session.sid = context.sid.length === 32 ? context.sid : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.uuid4)();\n    }\n    if (context.init !== undefined) {\n        session.init = context.init;\n    }\n    if (!session.did && context.did) {\n        session.did = `${context.did}`;\n    }\n    if (typeof context.started === \"number\") {\n        session.started = context.started;\n    }\n    if (session.ignoreDuration) {\n        session.duration = undefined;\n    } else if (typeof context.duration === \"number\") {\n        session.duration = context.duration;\n    } else {\n        const duration = session.timestamp - session.started;\n        session.duration = duration >= 0 ? duration : 0;\n    }\n    if (context.release) {\n        session.release = context.release;\n    }\n    if (context.environment) {\n        session.environment = context.environment;\n    }\n    if (!session.ipAddress && context.ipAddress) {\n        session.ipAddress = context.ipAddress;\n    }\n    if (!session.userAgent && context.userAgent) {\n        session.userAgent = context.userAgent;\n    }\n    if (typeof context.errors === \"number\") {\n        session.errors = context.errors;\n    }\n    if (context.status) {\n        session.status = context.status;\n    }\n}\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */ function closeSession(session, status) {\n    let context = {};\n    if (status) {\n        context = {\n            status\n        };\n    } else if (session.status === \"ok\") {\n        context = {\n            status: \"exited\"\n        };\n    }\n    updateSession(session, context);\n}\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */ function sessionToJSON(session) {\n    return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.dropUndefinedKeys)({\n        sid: `${session.sid}`,\n        init: session.init,\n        // Make sure that sec is converted to ms for date constructor\n        started: new Date(session.started * 1000).toISOString(),\n        timestamp: new Date(session.timestamp * 1000).toISOString(),\n        status: session.status,\n        errors: session.errors,\n        did: typeof session.did === \"number\" || typeof session.did === \"string\" ? `${session.did}` : undefined,\n        duration: session.duration,\n        abnormal_mechanism: session.abnormal_mechanism,\n        attrs: {\n            release: session.release,\n            environment: session.environment,\n            ip_address: session.ipAddress,\n            user_agent: session.userAgent\n        }\n    });\n}\n //# sourceMappingURL=session.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/session.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/sessionflusher.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/core/esm/sessionflusher.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SessionFlusher: () => (/* binding */ SessionFlusher)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _hub_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hub.js */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n\n\n/**\n * @inheritdoc\n */ class SessionFlusher {\n    constructor(client, attrs){\n        this._client = client;\n        this.flushTimeout = 60;\n        this._pendingAggregates = {};\n        this._isEnabled = true;\n        // Call to setInterval, so that flush is called every 60 seconds\n        this._intervalId = setInterval(()=>this.flush(), this.flushTimeout * 1000);\n        this._sessionAttrs = attrs;\n    }\n    /** Checks if `pendingAggregates` has entries, and if it does flushes them by calling `sendSession` */ flush() {\n        const sessionAggregates = this.getSessionAggregates();\n        if (sessionAggregates.aggregates.length === 0) {\n            return;\n        }\n        this._pendingAggregates = {};\n        this._client.sendSession(sessionAggregates);\n    }\n    /** Massages the entries in `pendingAggregates` and returns aggregated sessions */ getSessionAggregates() {\n        const aggregates = Object.keys(this._pendingAggregates).map((key)=>{\n            return this._pendingAggregates[parseInt(key)];\n        });\n        const sessionAggregates = {\n            attrs: this._sessionAttrs,\n            aggregates\n        };\n        return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.dropUndefinedKeys)(sessionAggregates);\n    }\n    /** JSDoc */ close() {\n        clearInterval(this._intervalId);\n        this._isEnabled = false;\n        this.flush();\n    }\n    /**\n   * Wrapper function for _incrementSessionStatusCount that checks if the instance of SessionFlusher is enabled then\n   * fetches the session status of the request from `Scope.getRequestSession().status` on the scope and passes them to\n   * `_incrementSessionStatusCount` along with the start date\n   */ incrementSessionStatusCount() {\n        if (!this._isEnabled) {\n            return;\n        }\n        const scope = (0,_hub_js__WEBPACK_IMPORTED_MODULE_1__.getCurrentHub)().getScope();\n        const requestSession = scope.getRequestSession();\n        if (requestSession && requestSession.status) {\n            this._incrementSessionStatusCount(requestSession.status, new Date());\n            // This is not entirely necessarily but is added as a safe guard to indicate the bounds of a request and so in\n            // case captureRequestSession is called more than once to prevent double count\n            scope.setRequestSession(undefined);\n        /* eslint-enable @typescript-eslint/no-unsafe-member-access */ }\n    }\n    /**\n   * Increments status bucket in pendingAggregates buffer (internal state) corresponding to status of\n   * the session received\n   */ _incrementSessionStatusCount(status, date) {\n        // Truncate minutes and seconds on Session Started attribute to have one minute bucket keys\n        const sessionStartedTrunc = new Date(date).setSeconds(0, 0);\n        this._pendingAggregates[sessionStartedTrunc] = this._pendingAggregates[sessionStartedTrunc] || {};\n        // corresponds to aggregated sessions in one specific minute bucket\n        // for example, {\"started\":\"2021-03-16T08:00:00.000Z\",\"exited\":4, \"errored\": 1}\n        const aggregationCounts = this._pendingAggregates[sessionStartedTrunc];\n        if (!aggregationCounts.started) {\n            aggregationCounts.started = new Date(sessionStartedTrunc).toISOString();\n        }\n        switch(status){\n            case \"errored\":\n                aggregationCounts.errored = (aggregationCounts.errored || 0) + 1;\n                return aggregationCounts.errored;\n            case \"ok\":\n                aggregationCounts.exited = (aggregationCounts.exited || 0) + 1;\n                return aggregationCounts.exited;\n            default:\n                aggregationCounts.crashed = (aggregationCounts.crashed || 0) + 1;\n                return aggregationCounts.crashed;\n        }\n    }\n}\n //# sourceMappingURL=sessionflusher.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/sessionflusher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/tracing/dynamicSamplingContext.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/tracing/dynamicSamplingContext.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDynamicSamplingContextFromClient: () => (/* binding */ getDynamicSamplingContextFromClient)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ \"(ssr)/./node_modules/@sentry/core/esm/constants.js\");\n\n\n/**\n * Creates a dynamic sampling context from a client.\n *\n * Dispatchs the `createDsc` lifecycle hook as a side effect.\n */ function getDynamicSamplingContextFromClient(trace_id, client, scope) {\n    const options = client.getOptions();\n    const { publicKey: public_key } = client.getDsn() || {};\n    const { segment: user_segment } = scope && scope.getUser() || {};\n    const dsc = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.dropUndefinedKeys)({\n        environment: options.environment || _constants_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_ENVIRONMENT,\n        release: options.release,\n        user_segment,\n        public_key,\n        trace_id\n    });\n    client.emit && client.emit(\"createDsc\", dsc);\n    return dsc;\n}\n //# sourceMappingURL=dynamicSamplingContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS90cmFjaW5nL2R5bmFtaWNTYW1wbGluZ0NvbnRleHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtEO0FBQ0k7QUFFdEQ7Ozs7Q0FJQyxHQUNELFNBQVNFLG9DQUNQQyxRQUFRLEVBQ1JDLE1BQU0sRUFDTkMsS0FBSztJQUVMLE1BQU1DLFVBQVVGLE9BQU9HLFVBQVU7SUFFakMsTUFBTSxFQUFFQyxXQUFXQyxVQUFVLEVBQUUsR0FBR0wsT0FBT00sTUFBTSxNQUFNLENBQUM7SUFDdEQsTUFBTSxFQUFFQyxTQUFTQyxZQUFZLEVBQUUsR0FBRyxTQUFVUCxNQUFNUSxPQUFPLE1BQU8sQ0FBQztJQUVqRSxNQUFNQyxNQUFNZCxnRUFBaUJBLENBQUM7UUFDNUJlLGFBQWFULFFBQVFTLFdBQVcsSUFBSWQsOERBQW1CQTtRQUN2RGUsU0FBU1YsUUFBUVUsT0FBTztRQUN4Qko7UUFDQUg7UUFDQU47SUFDRjtJQUVBQyxPQUFPYSxJQUFJLElBQUliLE9BQU9hLElBQUksQ0FBQyxhQUFhSDtJQUV4QyxPQUFPQTtBQUNUO0FBRStDLENBQy9DLGtEQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZXNtL3RyYWNpbmcvZHluYW1pY1NhbXBsaW5nQ29udGV4dC5qcz9iN2ZhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRyb3BVbmRlZmluZWRLZXlzIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBERUZBVUxUX0VOVklST05NRU5UIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZHluYW1pYyBzYW1wbGluZyBjb250ZXh0IGZyb20gYSBjbGllbnQuXG4gKlxuICogRGlzcGF0Y2hzIHRoZSBgY3JlYXRlRHNjYCBsaWZlY3ljbGUgaG9vayBhcyBhIHNpZGUgZWZmZWN0LlxuICovXG5mdW5jdGlvbiBnZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbUNsaWVudChcbiAgdHJhY2VfaWQsXG4gIGNsaWVudCxcbiAgc2NvcGUsXG4pIHtcbiAgY29uc3Qgb3B0aW9ucyA9IGNsaWVudC5nZXRPcHRpb25zKCk7XG5cbiAgY29uc3QgeyBwdWJsaWNLZXk6IHB1YmxpY19rZXkgfSA9IGNsaWVudC5nZXREc24oKSB8fCB7fTtcbiAgY29uc3QgeyBzZWdtZW50OiB1c2VyX3NlZ21lbnQgfSA9IChzY29wZSAmJiBzY29wZS5nZXRVc2VyKCkpIHx8IHt9O1xuXG4gIGNvbnN0IGRzYyA9IGRyb3BVbmRlZmluZWRLZXlzKHtcbiAgICBlbnZpcm9ubWVudDogb3B0aW9ucy5lbnZpcm9ubWVudCB8fCBERUZBVUxUX0VOVklST05NRU5ULFxuICAgIHJlbGVhc2U6IG9wdGlvbnMucmVsZWFzZSxcbiAgICB1c2VyX3NlZ21lbnQsXG4gICAgcHVibGljX2tleSxcbiAgICB0cmFjZV9pZCxcbiAgfSkgO1xuXG4gIGNsaWVudC5lbWl0ICYmIGNsaWVudC5lbWl0KCdjcmVhdGVEc2MnLCBkc2MpO1xuXG4gIHJldHVybiBkc2M7XG59XG5cbmV4cG9ydCB7IGdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tQ2xpZW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1keW5hbWljU2FtcGxpbmdDb250ZXh0LmpzLm1hcFxuIl0sIm5hbWVzIjpbImRyb3BVbmRlZmluZWRLZXlzIiwiREVGQVVMVF9FTlZJUk9OTUVOVCIsImdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tQ2xpZW50IiwidHJhY2VfaWQiLCJjbGllbnQiLCJzY29wZSIsIm9wdGlvbnMiLCJnZXRPcHRpb25zIiwicHVibGljS2V5IiwicHVibGljX2tleSIsImdldERzbiIsInNlZ21lbnQiLCJ1c2VyX3NlZ21lbnQiLCJnZXRVc2VyIiwiZHNjIiwiZW52aXJvbm1lbnQiLCJyZWxlYXNlIiwiZW1pdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/tracing/dynamicSamplingContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/tracing/errors.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/core/esm/tracing/errors.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   registerErrorInstrumentation: () => (/* binding */ registerErrorInstrumentation)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/instrument/globalError.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/instrument/globalUnhandledRejection.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/core/esm/debug-build.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/utils.js\");\n\n\n\nlet errorsInstrumented = false;\n/**\n * Configures global error listeners\n */ function registerErrorInstrumentation() {\n    if (errorsInstrumented) {\n        return;\n    }\n    errorsInstrumented = true;\n    (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.addGlobalErrorInstrumentationHandler)(errorCallback);\n    (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.addGlobalUnhandledRejectionInstrumentationHandler)(errorCallback);\n}\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */ function errorCallback() {\n    const activeTransaction = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getActiveTransaction)();\n    if (activeTransaction) {\n        const status = \"internal_error\";\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_3__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log(`[Tracing] Transaction: ${status} -> Global error occured`);\n        activeTransaction.setStatus(status);\n    }\n}\n// The function name will be lost when bundling but we need to be able to identify this listener later to maintain the\n// node.js default exit behaviour\nerrorCallback.tag = \"sentry_tracingErrorCallback\";\n //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS90cmFjaW5nL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBZ0k7QUFDaEY7QUFDRTtBQUVsRCxJQUFJSyxxQkFBcUI7QUFFekI7O0NBRUMsR0FDRCxTQUFTQztJQUNQLElBQUlELG9CQUFvQjtRQUN0QjtJQUNGO0lBRUFBLHFCQUFxQjtJQUNyQkwsbUZBQW9DQSxDQUFDTztJQUNyQ04sZ0dBQWlEQSxDQUFDTTtBQUNwRDtBQUVBOztDQUVDLEdBQ0QsU0FBU0E7SUFDUCxNQUFNQyxvQkFBb0JKLCtEQUFvQkE7SUFDOUMsSUFBSUksbUJBQW1CO1FBQ3JCLE1BQU1DLFNBQVM7UUFDZk4sd0RBQVdBLElBQUlELGlEQUFNQSxDQUFDUSxHQUFHLENBQUMsQ0FBQyx1QkFBdUIsRUFBRUQsT0FBTyx3QkFBd0IsQ0FBQztRQUNwRkQsa0JBQWtCRyxTQUFTLENBQUNGO0lBQzlCO0FBQ0Y7QUFFQSxzSEFBc0g7QUFDdEgsaUNBQWlDO0FBQ2pDRixjQUFjSyxHQUFHLEdBQUc7QUFFb0IsQ0FDeEMsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vdHJhY2luZy9lcnJvcnMuanM/MjNlZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhZGRHbG9iYWxFcnJvckluc3RydW1lbnRhdGlvbkhhbmRsZXIsIGFkZEdsb2JhbFVuaGFuZGxlZFJlamVjdGlvbkluc3RydW1lbnRhdGlvbkhhbmRsZXIsIGxvZ2dlciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgREVCVUdfQlVJTEQgfSBmcm9tICcuLi9kZWJ1Zy1idWlsZC5qcyc7XG5pbXBvcnQgeyBnZXRBY3RpdmVUcmFuc2FjdGlvbiB9IGZyb20gJy4vdXRpbHMuanMnO1xuXG5sZXQgZXJyb3JzSW5zdHJ1bWVudGVkID0gZmFsc2U7XG5cbi8qKlxuICogQ29uZmlndXJlcyBnbG9iYWwgZXJyb3IgbGlzdGVuZXJzXG4gKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyRXJyb3JJbnN0cnVtZW50YXRpb24oKSB7XG4gIGlmIChlcnJvcnNJbnN0cnVtZW50ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBlcnJvcnNJbnN0cnVtZW50ZWQgPSB0cnVlO1xuICBhZGRHbG9iYWxFcnJvckluc3RydW1lbnRhdGlvbkhhbmRsZXIoZXJyb3JDYWxsYmFjayk7XG4gIGFkZEdsb2JhbFVuaGFuZGxlZFJlamVjdGlvbkluc3RydW1lbnRhdGlvbkhhbmRsZXIoZXJyb3JDYWxsYmFjayk7XG59XG5cbi8qKlxuICogSWYgYW4gZXJyb3Igb3IgdW5oYW5kbGVkIHByb21pc2Ugb2NjdXJzLCB3ZSBtYXJrIHRoZSBhY3RpdmUgdHJhbnNhY3Rpb24gYXMgZmFpbGVkXG4gKi9cbmZ1bmN0aW9uIGVycm9yQ2FsbGJhY2soKSB7XG4gIGNvbnN0IGFjdGl2ZVRyYW5zYWN0aW9uID0gZ2V0QWN0aXZlVHJhbnNhY3Rpb24oKTtcbiAgaWYgKGFjdGl2ZVRyYW5zYWN0aW9uKSB7XG4gICAgY29uc3Qgc3RhdHVzID0gJ2ludGVybmFsX2Vycm9yJztcbiAgICBERUJVR19CVUlMRCAmJiBsb2dnZXIubG9nKGBbVHJhY2luZ10gVHJhbnNhY3Rpb246ICR7c3RhdHVzfSAtPiBHbG9iYWwgZXJyb3Igb2NjdXJlZGApO1xuICAgIGFjdGl2ZVRyYW5zYWN0aW9uLnNldFN0YXR1cyhzdGF0dXMpO1xuICB9XG59XG5cbi8vIFRoZSBmdW5jdGlvbiBuYW1lIHdpbGwgYmUgbG9zdCB3aGVuIGJ1bmRsaW5nIGJ1dCB3ZSBuZWVkIHRvIGJlIGFibGUgdG8gaWRlbnRpZnkgdGhpcyBsaXN0ZW5lciBsYXRlciB0byBtYWludGFpbiB0aGVcbi8vIG5vZGUuanMgZGVmYXVsdCBleGl0IGJlaGF2aW91clxuZXJyb3JDYWxsYmFjay50YWcgPSAnc2VudHJ5X3RyYWNpbmdFcnJvckNhbGxiYWNrJztcblxuZXhwb3J0IHsgcmVnaXN0ZXJFcnJvckluc3RydW1lbnRhdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcFxuIl0sIm5hbWVzIjpbImFkZEdsb2JhbEVycm9ySW5zdHJ1bWVudGF0aW9uSGFuZGxlciIsImFkZEdsb2JhbFVuaGFuZGxlZFJlamVjdGlvbkluc3RydW1lbnRhdGlvbkhhbmRsZXIiLCJsb2dnZXIiLCJERUJVR19CVUlMRCIsImdldEFjdGl2ZVRyYW5zYWN0aW9uIiwiZXJyb3JzSW5zdHJ1bWVudGVkIiwicmVnaXN0ZXJFcnJvckluc3RydW1lbnRhdGlvbiIsImVycm9yQ2FsbGJhY2siLCJhY3RpdmVUcmFuc2FjdGlvbiIsInN0YXR1cyIsImxvZyIsInNldFN0YXR1cyIsInRhZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/tracing/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/tracing/hubextensions.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/tracing/hubextensions.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addTracingExtensions: () => (/* binding */ addTracingExtensions),\n/* harmony export */   startIdleTransaction: () => (/* binding */ startIdleTransaction)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/core/esm/debug-build.js\");\n/* harmony import */ var _hub_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../hub.js */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/errors.js\");\n/* harmony import */ var _idletransaction_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./idletransaction.js */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/idletransaction.js\");\n/* harmony import */ var _sampling_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sampling.js */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/sampling.js\");\n/* harmony import */ var _transaction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transaction.js */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/transaction.js\");\n\n\n\n\n\n\n\n/** Returns all trace headers that are currently on the top scope. */ function traceHeaders() {\n    const scope = this.getScope();\n    const span = scope.getSpan();\n    return span ? {\n        \"sentry-trace\": span.toTraceparent()\n    } : {};\n}\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */ function _startTransaction(transactionContext, customSamplingContext) {\n    const client = this.getClient();\n    const options = client && client.getOptions() || {};\n    const configInstrumenter = options.instrumenter || \"sentry\";\n    const transactionInstrumenter = transactionContext.instrumenter || \"sentry\";\n    if (configInstrumenter !== transactionInstrumenter) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.logger.error(`A transaction was started with instrumenter=\\`${transactionInstrumenter}\\`, but the SDK is configured with the \\`${configInstrumenter}\\` instrumenter.\nThe transaction will not be sampled. Please use the ${configInstrumenter} instrumentation to start transactions.`);\n        transactionContext.sampled = false;\n    }\n    let transaction = new _transaction_js__WEBPACK_IMPORTED_MODULE_2__.Transaction(transactionContext, this);\n    transaction = (0,_sampling_js__WEBPACK_IMPORTED_MODULE_3__.sampleTransaction)(transaction, options, {\n        parentSampled: transactionContext.parentSampled,\n        transactionContext,\n        ...customSamplingContext\n    });\n    if (transaction.sampled) {\n        transaction.initSpanRecorder(options._experiments && options._experiments.maxSpans);\n    }\n    if (client && client.emit) {\n        client.emit(\"startTransaction\", transaction);\n    }\n    return transaction;\n}\n/**\n * Create new idle transaction.\n */ function startIdleTransaction(hub, transactionContext, idleTimeout, finalTimeout, onScope, customSamplingContext, heartbeatInterval) {\n    const client = hub.getClient();\n    const options = client && client.getOptions() || {};\n    let transaction = new _idletransaction_js__WEBPACK_IMPORTED_MODULE_4__.IdleTransaction(transactionContext, hub, idleTimeout, finalTimeout, heartbeatInterval, onScope);\n    transaction = (0,_sampling_js__WEBPACK_IMPORTED_MODULE_3__.sampleTransaction)(transaction, options, {\n        parentSampled: transactionContext.parentSampled,\n        transactionContext,\n        ...customSamplingContext\n    });\n    if (transaction.sampled) {\n        transaction.initSpanRecorder(options._experiments && options._experiments.maxSpans);\n    }\n    if (client && client.emit) {\n        client.emit(\"startTransaction\", transaction);\n    }\n    return transaction;\n}\n/**\n * Adds tracing extensions to the global hub.\n */ function addTracingExtensions() {\n    const carrier = (0,_hub_js__WEBPACK_IMPORTED_MODULE_5__.getMainCarrier)();\n    if (!carrier.__SENTRY__) {\n        return;\n    }\n    carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n    if (!carrier.__SENTRY__.extensions.startTransaction) {\n        carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n    }\n    if (!carrier.__SENTRY__.extensions.traceHeaders) {\n        carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n    }\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_6__.registerErrorInstrumentation)();\n}\n //# sourceMappingURL=hubextensions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/tracing/hubextensions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/tracing/idletransaction.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/tracing/idletransaction.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IdleTransaction: () => (/* binding */ IdleTransaction),\n/* harmony export */   IdleTransactionSpanRecorder: () => (/* binding */ IdleTransactionSpanRecorder),\n/* harmony export */   TRACING_DEFAULTS: () => (/* binding */ TRACING_DEFAULTS)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/time.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/core/esm/debug-build.js\");\n/* harmony import */ var _span_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./span.js */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/span.js\");\n/* harmony import */ var _transaction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transaction.js */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/transaction.js\");\n\n\n\n\nconst TRACING_DEFAULTS = {\n    idleTimeout: 1000,\n    finalTimeout: 30000,\n    heartbeatInterval: 5000\n};\nconst FINISH_REASON_TAG = \"finishReason\";\nconst IDLE_TRANSACTION_FINISH_REASONS = [\n    \"heartbeatFailed\",\n    \"idleTimeout\",\n    \"documentHidden\",\n    \"finalTimeout\",\n    \"externalFinish\",\n    \"cancelled\"\n];\n/**\n * @inheritDoc\n */ class IdleTransactionSpanRecorder extends _span_js__WEBPACK_IMPORTED_MODULE_0__.SpanRecorder {\n    constructor(_pushActivity, _popActivity, transactionSpanId, maxlen){\n        super(maxlen);\n        this._pushActivity = _pushActivity;\n        this._popActivity = _popActivity;\n        this.transactionSpanId = transactionSpanId;\n    }\n    /**\n   * @inheritDoc\n   */ add(span) {\n        // We should make sure we do not push and pop activities for\n        // the transaction that this span recorder belongs to.\n        if (span.spanId !== this.transactionSpanId) {\n            // We patch span.finish() to pop an activity after setting an endTimestamp.\n            span.finish = (endTimestamp)=>{\n                span.endTimestamp = typeof endTimestamp === \"number\" ? endTimestamp : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.timestampInSeconds)();\n                this._popActivity(span.spanId);\n            };\n            // We should only push new activities if the span does not have an end timestamp.\n            if (span.endTimestamp === undefined) {\n                this._pushActivity(span.spanId);\n            }\n        }\n        super.add(span);\n    }\n}\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */ class IdleTransaction extends _transaction_js__WEBPACK_IMPORTED_MODULE_2__.Transaction {\n    // Activities store a list of active spans\n    // Track state of activities in previous heartbeat\n    // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n    // We should not use heartbeat if we finished a transaction\n    // Idle timeout was canceled and we should finish the transaction with the last span end.\n    /**\n   * Timer that tracks Transaction idleTimeout\n   */ constructor(transactionContext, _idleHub, /**\n     * The time to wait in ms until the idle transaction will be finished. This timer is started each time\n     * there are no active spans on this transaction.\n     */ _idleTimeout = TRACING_DEFAULTS.idleTimeout, /**\n     * The final value in ms that a transaction cannot exceed\n     */ _finalTimeout = TRACING_DEFAULTS.finalTimeout, _heartbeatInterval = TRACING_DEFAULTS.heartbeatInterval, // Whether or not the transaction should put itself on the scope when it starts and pop itself off when it ends\n    _onScope = false){\n        super(transactionContext, _idleHub);\n        this._idleHub = _idleHub;\n        this._idleTimeout = _idleTimeout;\n        this._finalTimeout = _finalTimeout;\n        this._heartbeatInterval = _heartbeatInterval;\n        this._onScope = _onScope;\n        this.activities = {};\n        this._heartbeatCounter = 0;\n        this._finished = false;\n        this._idleTimeoutCanceledPermanently = false;\n        this._beforeFinishCallbacks = [];\n        this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[4];\n        if (_onScope) {\n            // We set the transaction here on the scope so error events pick up the trace\n            // context and attach it to the error.\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_3__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log(`Setting idle transaction on scope. Span ID: ${this.spanId}`);\n            _idleHub.configureScope((scope)=>scope.setSpan(this));\n        }\n        this._restartIdleTimeout();\n        setTimeout(()=>{\n            if (!this._finished) {\n                this.setStatus(\"deadline_exceeded\");\n                this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[3];\n                this.finish();\n            }\n        }, this._finalTimeout);\n    }\n    /** {@inheritDoc} */ finish(endTimestamp = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.timestampInSeconds)()) {\n        this._finished = true;\n        this.activities = {};\n        if (this.op === \"ui.action.click\") {\n            this.setTag(FINISH_REASON_TAG, this._finishReason);\n        }\n        if (this.spanRecorder) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_3__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log(\"[Tracing] finishing IdleTransaction\", new Date(endTimestamp * 1000).toISOString(), this.op);\n            for (const callback of this._beforeFinishCallbacks){\n                callback(this, endTimestamp);\n            }\n            this.spanRecorder.spans = this.spanRecorder.spans.filter((span)=>{\n                // If we are dealing with the transaction itself, we just return it\n                if (span.spanId === this.spanId) {\n                    return true;\n                }\n                // We cancel all pending spans with status \"cancelled\" to indicate the idle transaction was finished early\n                if (!span.endTimestamp) {\n                    span.endTimestamp = endTimestamp;\n                    span.setStatus(\"cancelled\");\n                    _debug_build_js__WEBPACK_IMPORTED_MODULE_3__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log(\"[Tracing] cancelling span since transaction ended early\", JSON.stringify(span, undefined, 2));\n                }\n                const spanStartedBeforeTransactionFinish = span.startTimestamp < endTimestamp;\n                // Add a delta with idle timeout so that we prevent false positives\n                const timeoutWithMarginOfError = (this._finalTimeout + this._idleTimeout) / 1000;\n                const spanEndedBeforeFinalTimeout = span.endTimestamp - this.startTimestamp < timeoutWithMarginOfError;\n                if (_debug_build_js__WEBPACK_IMPORTED_MODULE_3__.DEBUG_BUILD) {\n                    const stringifiedSpan = JSON.stringify(span, undefined, 2);\n                    if (!spanStartedBeforeTransactionFinish) {\n                        _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log(\"[Tracing] discarding Span since it happened after Transaction was finished\", stringifiedSpan);\n                    } else if (!spanEndedBeforeFinalTimeout) {\n                        _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log(\"[Tracing] discarding Span since it finished after Transaction final timeout\", stringifiedSpan);\n                    }\n                }\n                return spanStartedBeforeTransactionFinish && spanEndedBeforeFinalTimeout;\n            });\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_3__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log(\"[Tracing] flushing IdleTransaction\");\n        } else {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_3__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log(\"[Tracing] No active IdleTransaction\");\n        }\n        // if `this._onScope` is `true`, the transaction put itself on the scope when it started\n        if (this._onScope) {\n            const scope = this._idleHub.getScope();\n            if (scope.getTransaction() === this) {\n                scope.setSpan(undefined);\n            }\n        }\n        return super.finish(endTimestamp);\n    }\n    /**\n   * Register a callback function that gets excecuted before the transaction finishes.\n   * Useful for cleanup or if you want to add any additional spans based on current context.\n   *\n   * This is exposed because users have no other way of running something before an idle transaction\n   * finishes.\n   */ registerBeforeFinishCallback(callback) {\n        this._beforeFinishCallbacks.push(callback);\n    }\n    /**\n   * @inheritDoc\n   */ initSpanRecorder(maxlen) {\n        if (!this.spanRecorder) {\n            const pushActivity = (id)=>{\n                if (this._finished) {\n                    return;\n                }\n                this._pushActivity(id);\n            };\n            const popActivity = (id)=>{\n                if (this._finished) {\n                    return;\n                }\n                this._popActivity(id);\n            };\n            this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen);\n            // Start heartbeat so that transactions do not run forever.\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_3__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log(\"Starting heartbeat\");\n            this._pingHeartbeat();\n        }\n        this.spanRecorder.add(this);\n    }\n    /**\n   * Cancels the existing idle timeout, if there is one.\n   * @param restartOnChildSpanChange Default is `true`.\n   *                                 If set to false the transaction will end\n   *                                 with the last child span.\n   */ cancelIdleTimeout(endTimestamp, { restartOnChildSpanChange } = {\n        restartOnChildSpanChange: true\n    }) {\n        this._idleTimeoutCanceledPermanently = restartOnChildSpanChange === false;\n        if (this._idleTimeoutID) {\n            clearTimeout(this._idleTimeoutID);\n            this._idleTimeoutID = undefined;\n            if (Object.keys(this.activities).length === 0 && this._idleTimeoutCanceledPermanently) {\n                this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[5];\n                this.finish(endTimestamp);\n            }\n        }\n    }\n    /**\n   * Temporary method used to externally set the transaction's `finishReason`\n   *\n   * ** WARNING**\n   * This is for the purpose of experimentation only and will be removed in the near future, do not use!\n   *\n   * @internal\n   *\n   */ setFinishReason(reason) {\n        this._finishReason = reason;\n    }\n    /**\n   * Restarts idle timeout, if there is no running idle timeout it will start one.\n   */ _restartIdleTimeout(endTimestamp) {\n        this.cancelIdleTimeout();\n        this._idleTimeoutID = setTimeout(()=>{\n            if (!this._finished && Object.keys(this.activities).length === 0) {\n                this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[1];\n                this.finish(endTimestamp);\n            }\n        }, this._idleTimeout);\n    }\n    /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */ _pushActivity(spanId) {\n        this.cancelIdleTimeout(undefined, {\n            restartOnChildSpanChange: !this._idleTimeoutCanceledPermanently\n        });\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_3__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log(`[Tracing] pushActivity: ${spanId}`);\n        this.activities[spanId] = true;\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_3__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log(\"[Tracing] new activities count\", Object.keys(this.activities).length);\n    }\n    /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */ _popActivity(spanId) {\n        if (this.activities[spanId]) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_3__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log(`[Tracing] popActivity ${spanId}`);\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete this.activities[spanId];\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_3__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log(\"[Tracing] new activities count\", Object.keys(this.activities).length);\n        }\n        if (Object.keys(this.activities).length === 0) {\n            const endTimestamp = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.timestampInSeconds)();\n            if (this._idleTimeoutCanceledPermanently) {\n                this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[5];\n                this.finish(endTimestamp);\n            } else {\n                // We need to add the timeout here to have the real endtimestamp of the transaction\n                // Remember timestampInSeconds is in seconds, timeout is in ms\n                this._restartIdleTimeout(endTimestamp + this._idleTimeout / 1000);\n            }\n        }\n    }\n    /**\n   * Checks when entries of this.activities are not changing for 3 beats.\n   * If this occurs we finish the transaction.\n   */ _beat() {\n        // We should not be running heartbeat if the idle transaction is finished.\n        if (this._finished) {\n            return;\n        }\n        const heartbeatString = Object.keys(this.activities).join(\"\");\n        if (heartbeatString === this._prevHeartbeatString) {\n            this._heartbeatCounter++;\n        } else {\n            this._heartbeatCounter = 1;\n        }\n        this._prevHeartbeatString = heartbeatString;\n        if (this._heartbeatCounter >= 3) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_3__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log(\"[Tracing] Transaction finished because of no change for 3 heart beats\");\n            this.setStatus(\"deadline_exceeded\");\n            this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[0];\n            this.finish();\n        } else {\n            this._pingHeartbeat();\n        }\n    }\n    /**\n   * Pings the heartbeat\n   */ _pingHeartbeat() {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_3__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log(`pinging Heartbeat -> current counter: ${this._heartbeatCounter}`);\n        setTimeout(()=>{\n            this._beat();\n        }, this._heartbeatInterval);\n    }\n}\n //# sourceMappingURL=idletransaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/tracing/idletransaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/tracing/measurement.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/tracing/measurement.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setMeasurement: () => (/* binding */ setMeasurement)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/utils.js\");\n\n/**\n * Adds a measurement to the current active transaction.\n */ function setMeasurement(name, value, unit) {\n    const transaction = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getActiveTransaction)();\n    if (transaction) {\n        transaction.setMeasurement(name, value, unit);\n    }\n}\n //# sourceMappingURL=measurement.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS90cmFjaW5nL21lYXN1cmVtZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWtEO0FBRWxEOztDQUVDLEdBQ0QsU0FBU0MsZUFBZUMsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLElBQUk7SUFDdkMsTUFBTUMsY0FBY0wsK0RBQW9CQTtJQUN4QyxJQUFJSyxhQUFhO1FBQ2ZBLFlBQVlKLGNBQWMsQ0FBQ0MsTUFBTUMsT0FBT0M7SUFDMUM7QUFDRjtBQUUwQixDQUMxQix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS90cmFjaW5nL21lYXN1cmVtZW50LmpzP2YzODciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QWN0aXZlVHJhbnNhY3Rpb24gfSBmcm9tICcuL3V0aWxzLmpzJztcblxuLyoqXG4gKiBBZGRzIGEgbWVhc3VyZW1lbnQgdG8gdGhlIGN1cnJlbnQgYWN0aXZlIHRyYW5zYWN0aW9uLlxuICovXG5mdW5jdGlvbiBzZXRNZWFzdXJlbWVudChuYW1lLCB2YWx1ZSwgdW5pdCkge1xuICBjb25zdCB0cmFuc2FjdGlvbiA9IGdldEFjdGl2ZVRyYW5zYWN0aW9uKCk7XG4gIGlmICh0cmFuc2FjdGlvbikge1xuICAgIHRyYW5zYWN0aW9uLnNldE1lYXN1cmVtZW50KG5hbWUsIHZhbHVlLCB1bml0KTtcbiAgfVxufVxuXG5leHBvcnQgeyBzZXRNZWFzdXJlbWVudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVhc3VyZW1lbnQuanMubWFwXG4iXSwibmFtZXMiOlsiZ2V0QWN0aXZlVHJhbnNhY3Rpb24iLCJzZXRNZWFzdXJlbWVudCIsIm5hbWUiLCJ2YWx1ZSIsInVuaXQiLCJ0cmFuc2FjdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/tracing/measurement.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/tracing/sampling.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/core/esm/tracing/sampling.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sampleTransaction: () => (/* binding */ sampleTransaction)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/core/esm/debug-build.js\");\n/* harmony import */ var _utils_hasTracingEnabled_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/hasTracingEnabled.js */ \"(ssr)/./node_modules/@sentry/core/esm/utils/hasTracingEnabled.js\");\n\n\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * This method muttes the given `transaction` and will set the `sampled` value on it.\n * It returns the same transaction, for convenience.\n */ function sampleTransaction(transaction, options, samplingContext) {\n    // nothing to do if tracing is not enabled\n    if (!(0,_utils_hasTracingEnabled_js__WEBPACK_IMPORTED_MODULE_0__.hasTracingEnabled)(options)) {\n        transaction.sampled = false;\n        return transaction;\n    }\n    // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n    if (transaction.sampled !== undefined) {\n        transaction.setMetadata({\n            sampleRate: Number(transaction.sampled)\n        });\n        return transaction;\n    }\n    // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` nor `enableTracing` were defined, so one of these should\n    // work; prefer the hook if so\n    let sampleRate;\n    if (typeof options.tracesSampler === \"function\") {\n        sampleRate = options.tracesSampler(samplingContext);\n        transaction.setMetadata({\n            sampleRate: Number(sampleRate)\n        });\n    } else if (samplingContext.parentSampled !== undefined) {\n        sampleRate = samplingContext.parentSampled;\n    } else if (typeof options.tracesSampleRate !== \"undefined\") {\n        sampleRate = options.tracesSampleRate;\n        transaction.setMetadata({\n            sampleRate: Number(sampleRate)\n        });\n    } else {\n        // When `enableTracing === true`, we use a sample rate of 100%\n        sampleRate = 1;\n        transaction.setMetadata({\n            sampleRate\n        });\n    }\n    // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n    // only valid values are booleans or numbers between 0 and 1.)\n    if (!isValidSampleRate(sampleRate)) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.warn(\"[Tracing] Discarding transaction because of invalid sample rate.\");\n        transaction.sampled = false;\n        return transaction;\n    }\n    // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n    if (!sampleRate) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.log(`[Tracing] Discarding transaction because ${typeof options.tracesSampler === \"function\" ? \"tracesSampler returned 0 or false\" : \"a negative sampling decision was inherited or tracesSampleRate is set to 0\"}`);\n        transaction.sampled = false;\n        return transaction;\n    }\n    // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n    // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n    transaction.sampled = Math.random() < sampleRate;\n    // if we're not going to keep it, we're done\n    if (!transaction.sampled) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.log(`[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(sampleRate)})`);\n        return transaction;\n    }\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`);\n    return transaction;\n}\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */ function isValidSampleRate(rate) {\n    // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.isNaN)(rate) || !(typeof rate === \"number\" || typeof rate === \"boolean\")) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(rate)} of type ${JSON.stringify(typeof rate)}.`);\n        return false;\n    }\n    // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n    if (rate < 0 || rate > 1) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n        return false;\n    }\n    return true;\n}\n //# sourceMappingURL=sampling.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS90cmFjaW5nL3NhbXBsaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQThDO0FBQ0U7QUFDa0I7QUFFbEU7Ozs7Ozs7O0NBUUMsR0FDRCxTQUFTSSxrQkFDUEMsV0FBVyxFQUNYQyxPQUFPLEVBQ1BDLGVBQWU7SUFFZiwwQ0FBMEM7SUFDMUMsSUFBSSxDQUFDSiw4RUFBaUJBLENBQUNHLFVBQVU7UUFDL0JELFlBQVlHLE9BQU8sR0FBRztRQUN0QixPQUFPSDtJQUNUO0lBRUEscUhBQXFIO0lBQ3JILElBQUlBLFlBQVlHLE9BQU8sS0FBS0MsV0FBVztRQUNyQ0osWUFBWUssV0FBVyxDQUFDO1lBQ3RCQyxZQUFZQyxPQUFPUCxZQUFZRyxPQUFPO1FBQ3hDO1FBQ0EsT0FBT0g7SUFDVDtJQUVBLDBJQUEwSTtJQUMxSSw4QkFBOEI7SUFDOUIsSUFBSU07SUFDSixJQUFJLE9BQU9MLFFBQVFPLGFBQWEsS0FBSyxZQUFZO1FBQy9DRixhQUFhTCxRQUFRTyxhQUFhLENBQUNOO1FBQ25DRixZQUFZSyxXQUFXLENBQUM7WUFDdEJDLFlBQVlDLE9BQU9EO1FBQ3JCO0lBQ0YsT0FBTyxJQUFJSixnQkFBZ0JPLGFBQWEsS0FBS0wsV0FBVztRQUN0REUsYUFBYUosZ0JBQWdCTyxhQUFhO0lBQzVDLE9BQU8sSUFBSSxPQUFPUixRQUFRUyxnQkFBZ0IsS0FBSyxhQUFhO1FBQzFESixhQUFhTCxRQUFRUyxnQkFBZ0I7UUFDckNWLFlBQVlLLFdBQVcsQ0FBQztZQUN0QkMsWUFBWUMsT0FBT0Q7UUFDckI7SUFDRixPQUFPO1FBQ0wsOERBQThEO1FBQzlEQSxhQUFhO1FBQ2JOLFlBQVlLLFdBQVcsQ0FBQztZQUN0QkM7UUFDRjtJQUNGO0lBRUEsa0hBQWtIO0lBQ2xILDhEQUE4RDtJQUM5RCxJQUFJLENBQUNLLGtCQUFrQkwsYUFBYTtRQUNsQ1Qsd0RBQVdBLElBQUlGLGlEQUFNQSxDQUFDaUIsSUFBSSxDQUFDO1FBQzNCWixZQUFZRyxPQUFPLEdBQUc7UUFDdEIsT0FBT0g7SUFDVDtJQUVBLHNIQUFzSDtJQUN0SCxJQUFJLENBQUNNLFlBQVk7UUFDZlQsd0RBQVdBLElBQ1RGLGlEQUFNQSxDQUFDa0IsR0FBRyxDQUNSLENBQUMseUNBQXlDLEVBQ3hDLE9BQU9aLFFBQVFPLGFBQWEsS0FBSyxhQUM3QixzQ0FDQSw2RUFDTCxDQUFDO1FBRU5SLFlBQVlHLE9BQU8sR0FBRztRQUN0QixPQUFPSDtJQUNUO0lBRUEscUhBQXFIO0lBQ3JILDRHQUE0RztJQUM1R0EsWUFBWUcsT0FBTyxHQUFHVyxLQUFLQyxNQUFNLEtBQU1UO0lBRXZDLDRDQUE0QztJQUM1QyxJQUFJLENBQUNOLFlBQVlHLE9BQU8sRUFBRTtRQUN4Qk4sd0RBQVdBLElBQ1RGLGlEQUFNQSxDQUFDa0IsR0FBRyxDQUNSLENBQUMsaUdBQWlHLEVBQUVOLE9BQ2xHRCxZQUNBLENBQUMsQ0FBQztRQUVSLE9BQU9OO0lBQ1Q7SUFFQUgsd0RBQVdBLElBQUlGLGlEQUFNQSxDQUFDa0IsR0FBRyxDQUFDLENBQUMsbUJBQW1CLEVBQUViLFlBQVlnQixFQUFFLENBQUMsZUFBZSxFQUFFaEIsWUFBWWlCLElBQUksQ0FBQyxDQUFDO0lBQ2xHLE9BQU9qQjtBQUNUO0FBRUE7O0NBRUMsR0FDRCxTQUFTVyxrQkFBa0JPLElBQUk7SUFDN0Isb0hBQW9IO0lBQ3BILDhEQUE4RDtJQUM5RCxJQUFJdEIsb0RBQUtBLENBQUNzQixTQUFTLENBQUUsUUFBT0EsU0FBUyxZQUFZLE9BQU9BLFNBQVMsU0FBUSxHQUFJO1FBQzNFckIsd0RBQVdBLElBQ1RGLGlEQUFNQSxDQUFDaUIsSUFBSSxDQUNULENBQUMsdUdBQXVHLEVBQUVPLEtBQUtDLFNBQVMsQ0FDdEhGLE1BQ0EsU0FBUyxFQUFFQyxLQUFLQyxTQUFTLENBQUMsT0FBT0YsTUFBTSxDQUFDLENBQUM7UUFFL0MsT0FBTztJQUNUO0lBRUEsd0dBQXdHO0lBQ3hHLElBQUlBLE9BQU8sS0FBS0EsT0FBTyxHQUFHO1FBQ3hCckIsd0RBQVdBLElBQ1RGLGlEQUFNQSxDQUFDaUIsSUFBSSxDQUFDLENBQUMsaUZBQWlGLEVBQUVNLEtBQUssQ0FBQyxDQUFDO1FBQ3pHLE9BQU87SUFDVDtJQUNBLE9BQU87QUFDVDtBQUU2QixDQUM3QixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS90cmFjaW5nL3NhbXBsaW5nLmpzP2I1OWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbG9nZ2VyLCBpc05hTiB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgREVCVUdfQlVJTEQgfSBmcm9tICcuLi9kZWJ1Zy1idWlsZC5qcyc7XG5pbXBvcnQgeyBoYXNUcmFjaW5nRW5hYmxlZCB9IGZyb20gJy4uL3V0aWxzL2hhc1RyYWNpbmdFbmFibGVkLmpzJztcblxuLyoqXG4gKiBNYWtlcyBhIHNhbXBsaW5nIGRlY2lzaW9uIGZvciB0aGUgZ2l2ZW4gdHJhbnNhY3Rpb24gYW5kIHN0b3JlcyBpdCBvbiB0aGUgdHJhbnNhY3Rpb24uXG4gKlxuICogQ2FsbGVkIGV2ZXJ5IHRpbWUgYSB0cmFuc2FjdGlvbiBpcyBjcmVhdGVkLiBPbmx5IHRyYW5zYWN0aW9ucyB3aGljaCBlbWVyZ2Ugd2l0aCBhIGBzYW1wbGVkYCB2YWx1ZSBvZiBgdHJ1ZWAgd2lsbCBiZVxuICogc2VudCB0byBTZW50cnkuXG4gKlxuICogVGhpcyBtZXRob2QgbXV0dGVzIHRoZSBnaXZlbiBgdHJhbnNhY3Rpb25gIGFuZCB3aWxsIHNldCB0aGUgYHNhbXBsZWRgIHZhbHVlIG9uIGl0LlxuICogSXQgcmV0dXJucyB0aGUgc2FtZSB0cmFuc2FjdGlvbiwgZm9yIGNvbnZlbmllbmNlLlxuICovXG5mdW5jdGlvbiBzYW1wbGVUcmFuc2FjdGlvbihcbiAgdHJhbnNhY3Rpb24sXG4gIG9wdGlvbnMsXG4gIHNhbXBsaW5nQ29udGV4dCxcbikge1xuICAvLyBub3RoaW5nIHRvIGRvIGlmIHRyYWNpbmcgaXMgbm90IGVuYWJsZWRcbiAgaWYgKCFoYXNUcmFjaW5nRW5hYmxlZChvcHRpb25zKSkge1xuICAgIHRyYW5zYWN0aW9uLnNhbXBsZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gdHJhbnNhY3Rpb247XG4gIH1cblxuICAvLyBpZiB0aGUgdXNlciBoYXMgZm9yY2VkIGEgc2FtcGxpbmcgZGVjaXNpb24gYnkgcGFzc2luZyBhIGBzYW1wbGVkYCB2YWx1ZSBpbiB0aGVpciB0cmFuc2FjdGlvbiBjb250ZXh0LCBnbyB3aXRoIHRoYXRcbiAgaWYgKHRyYW5zYWN0aW9uLnNhbXBsZWQgIT09IHVuZGVmaW5lZCkge1xuICAgIHRyYW5zYWN0aW9uLnNldE1ldGFkYXRhKHtcbiAgICAgIHNhbXBsZVJhdGU6IE51bWJlcih0cmFuc2FjdGlvbi5zYW1wbGVkKSxcbiAgICB9KTtcbiAgICByZXR1cm4gdHJhbnNhY3Rpb247XG4gIH1cblxuICAvLyB3ZSB3b3VsZCBoYXZlIGJhaWxlZCBhbHJlYWR5IGlmIG5laXRoZXIgYHRyYWNlc1NhbXBsZXJgIG5vciBgdHJhY2VzU2FtcGxlUmF0ZWAgbm9yIGBlbmFibGVUcmFjaW5nYCB3ZXJlIGRlZmluZWQsIHNvIG9uZSBvZiB0aGVzZSBzaG91bGRcbiAgLy8gd29yazsgcHJlZmVyIHRoZSBob29rIGlmIHNvXG4gIGxldCBzYW1wbGVSYXRlO1xuICBpZiAodHlwZW9mIG9wdGlvbnMudHJhY2VzU2FtcGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHNhbXBsZVJhdGUgPSBvcHRpb25zLnRyYWNlc1NhbXBsZXIoc2FtcGxpbmdDb250ZXh0KTtcbiAgICB0cmFuc2FjdGlvbi5zZXRNZXRhZGF0YSh7XG4gICAgICBzYW1wbGVSYXRlOiBOdW1iZXIoc2FtcGxlUmF0ZSksXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoc2FtcGxpbmdDb250ZXh0LnBhcmVudFNhbXBsZWQgIT09IHVuZGVmaW5lZCkge1xuICAgIHNhbXBsZVJhdGUgPSBzYW1wbGluZ0NvbnRleHQucGFyZW50U2FtcGxlZDtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFjZXNTYW1wbGVSYXRlICE9PSAndW5kZWZpbmVkJykge1xuICAgIHNhbXBsZVJhdGUgPSBvcHRpb25zLnRyYWNlc1NhbXBsZVJhdGU7XG4gICAgdHJhbnNhY3Rpb24uc2V0TWV0YWRhdGEoe1xuICAgICAgc2FtcGxlUmF0ZTogTnVtYmVyKHNhbXBsZVJhdGUpLFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIFdoZW4gYGVuYWJsZVRyYWNpbmcgPT09IHRydWVgLCB3ZSB1c2UgYSBzYW1wbGUgcmF0ZSBvZiAxMDAlXG4gICAgc2FtcGxlUmF0ZSA9IDE7XG4gICAgdHJhbnNhY3Rpb24uc2V0TWV0YWRhdGEoe1xuICAgICAgc2FtcGxlUmF0ZSxcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFNpbmNlIHRoaXMgaXMgY29taW5nIGZyb20gdGhlIHVzZXIgKG9yIGZyb20gYSBmdW5jdGlvbiBwcm92aWRlZCBieSB0aGUgdXNlciksIHdobyBrbm93cyB3aGF0IHdlIG1pZ2h0IGdldC4gKFRoZVxuICAvLyBvbmx5IHZhbGlkIHZhbHVlcyBhcmUgYm9vbGVhbnMgb3IgbnVtYmVycyBiZXR3ZWVuIDAgYW5kIDEuKVxuICBpZiAoIWlzVmFsaWRTYW1wbGVSYXRlKHNhbXBsZVJhdGUpKSB7XG4gICAgREVCVUdfQlVJTEQgJiYgbG9nZ2VyLndhcm4oJ1tUcmFjaW5nXSBEaXNjYXJkaW5nIHRyYW5zYWN0aW9uIGJlY2F1c2Ugb2YgaW52YWxpZCBzYW1wbGUgcmF0ZS4nKTtcbiAgICB0cmFuc2FjdGlvbi5zYW1wbGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uO1xuICB9XG5cbiAgLy8gaWYgdGhlIGZ1bmN0aW9uIHJldHVybmVkIDAgKG9yIGZhbHNlKSwgb3IgaWYgYHRyYWNlc1NhbXBsZVJhdGVgIGlzIDAsIGl0J3MgYSBzaWduIHRoZSB0cmFuc2FjdGlvbiBzaG91bGQgYmUgZHJvcHBlZFxuICBpZiAoIXNhbXBsZVJhdGUpIHtcbiAgICBERUJVR19CVUlMRCAmJlxuICAgICAgbG9nZ2VyLmxvZyhcbiAgICAgICAgYFtUcmFjaW5nXSBEaXNjYXJkaW5nIHRyYW5zYWN0aW9uIGJlY2F1c2UgJHtcbiAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy50cmFjZXNTYW1wbGVyID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/ICd0cmFjZXNTYW1wbGVyIHJldHVybmVkIDAgb3IgZmFsc2UnXG4gICAgICAgICAgICA6ICdhIG5lZ2F0aXZlIHNhbXBsaW5nIGRlY2lzaW9uIHdhcyBpbmhlcml0ZWQgb3IgdHJhY2VzU2FtcGxlUmF0ZSBpcyBzZXQgdG8gMCdcbiAgICAgICAgfWAsXG4gICAgICApO1xuICAgIHRyYW5zYWN0aW9uLnNhbXBsZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gdHJhbnNhY3Rpb247XG4gIH1cblxuICAvLyBOb3cgd2Ugcm9sbCB0aGUgZGljZS4gTWF0aC5yYW5kb20gaXMgaW5jbHVzaXZlIG9mIDAsIGJ1dCBub3Qgb2YgMSwgc28gc3RyaWN0IDwgaXMgc2FmZSBoZXJlLiBJbiBjYXNlIHNhbXBsZVJhdGUgaXNcbiAgLy8gYSBib29sZWFuLCB0aGUgPCBjb21wYXJpc29uIHdpbGwgY2F1c2UgaXQgdG8gYmUgYXV0b21hdGljYWxseSBjYXN0IHRvIDEgaWYgaXQncyB0cnVlIGFuZCAwIGlmIGl0J3MgZmFsc2UuXG4gIHRyYW5zYWN0aW9uLnNhbXBsZWQgPSBNYXRoLnJhbmRvbSgpIDwgKHNhbXBsZVJhdGUgKTtcblxuICAvLyBpZiB3ZSdyZSBub3QgZ29pbmcgdG8ga2VlcCBpdCwgd2UncmUgZG9uZVxuICBpZiAoIXRyYW5zYWN0aW9uLnNhbXBsZWQpIHtcbiAgICBERUJVR19CVUlMRCAmJlxuICAgICAgbG9nZ2VyLmxvZyhcbiAgICAgICAgYFtUcmFjaW5nXSBEaXNjYXJkaW5nIHRyYW5zYWN0aW9uIGJlY2F1c2UgaXQncyBub3QgaW5jbHVkZWQgaW4gdGhlIHJhbmRvbSBzYW1wbGUgKHNhbXBsaW5nIHJhdGUgPSAke051bWJlcihcbiAgICAgICAgICBzYW1wbGVSYXRlLFxuICAgICAgICApfSlgLFxuICAgICAgKTtcbiAgICByZXR1cm4gdHJhbnNhY3Rpb247XG4gIH1cblxuICBERUJVR19CVUlMRCAmJiBsb2dnZXIubG9nKGBbVHJhY2luZ10gc3RhcnRpbmcgJHt0cmFuc2FjdGlvbi5vcH0gdHJhbnNhY3Rpb24gLSAke3RyYW5zYWN0aW9uLm5hbWV9YCk7XG4gIHJldHVybiB0cmFuc2FjdGlvbjtcbn1cblxuLyoqXG4gKiBDaGVja3MgdGhlIGdpdmVuIHNhbXBsZSByYXRlIHRvIG1ha2Ugc3VyZSBpdCBpcyB2YWxpZCB0eXBlIGFuZCB2YWx1ZSAoYSBib29sZWFuLCBvciBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEpLlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkU2FtcGxlUmF0ZShyYXRlKSB7XG4gIC8vIHdlIG5lZWQgdG8gY2hlY2sgTmFOIGV4cGxpY2l0bHkgYmVjYXVzZSBpdCdzIG9mIHR5cGUgJ251bWJlcicgYW5kIHRoZXJlZm9yZSB3b3VsZG4ndCBnZXQgY2F1Z2h0IGJ5IHRoaXMgdHlwZWNoZWNrXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIGlmIChpc05hTihyYXRlKSB8fCAhKHR5cGVvZiByYXRlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgcmF0ZSA9PT0gJ2Jvb2xlYW4nKSkge1xuICAgIERFQlVHX0JVSUxEICYmXG4gICAgICBsb2dnZXIud2FybihcbiAgICAgICAgYFtUcmFjaW5nXSBHaXZlbiBzYW1wbGUgcmF0ZSBpcyBpbnZhbGlkLiBTYW1wbGUgcmF0ZSBtdXN0IGJlIGEgYm9vbGVhbiBvciBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEuIEdvdCAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgIHJhdGUsXG4gICAgICAgICl9IG9mIHR5cGUgJHtKU09OLnN0cmluZ2lmeSh0eXBlb2YgcmF0ZSl9LmAsXG4gICAgICApO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIGluIGNhc2Ugc2FtcGxlUmF0ZSBpcyBhIGJvb2xlYW4sIGl0IHdpbGwgZ2V0IGF1dG9tYXRpY2FsbHkgY2FzdCB0byAxIGlmIGl0J3MgdHJ1ZSBhbmQgMCBpZiBpdCdzIGZhbHNlXG4gIGlmIChyYXRlIDwgMCB8fCByYXRlID4gMSkge1xuICAgIERFQlVHX0JVSUxEICYmXG4gICAgICBsb2dnZXIud2FybihgW1RyYWNpbmddIEdpdmVuIHNhbXBsZSByYXRlIGlzIGludmFsaWQuIFNhbXBsZSByYXRlIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAxLiBHb3QgJHtyYXRlfS5gKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCB7IHNhbXBsZVRyYW5zYWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zYW1wbGluZy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJsb2dnZXIiLCJpc05hTiIsIkRFQlVHX0JVSUxEIiwiaGFzVHJhY2luZ0VuYWJsZWQiLCJzYW1wbGVUcmFuc2FjdGlvbiIsInRyYW5zYWN0aW9uIiwib3B0aW9ucyIsInNhbXBsaW5nQ29udGV4dCIsInNhbXBsZWQiLCJ1bmRlZmluZWQiLCJzZXRNZXRhZGF0YSIsInNhbXBsZVJhdGUiLCJOdW1iZXIiLCJ0cmFjZXNTYW1wbGVyIiwicGFyZW50U2FtcGxlZCIsInRyYWNlc1NhbXBsZVJhdGUiLCJpc1ZhbGlkU2FtcGxlUmF0ZSIsIndhcm4iLCJsb2ciLCJNYXRoIiwicmFuZG9tIiwib3AiLCJuYW1lIiwicmF0ZSIsIkpTT04iLCJzdHJpbmdpZnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/tracing/sampling.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/tracing/span.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sentry/core/esm/tracing/span.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Span: () => (/* binding */ Span),\n/* harmony export */   SpanRecorder: () => (/* binding */ SpanRecorder),\n/* harmony export */   spanStatusfromHttpCode: () => (/* binding */ spanStatusfromHttpCode)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/time.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/tracing.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/core/esm/debug-build.js\");\n\n\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */ class SpanRecorder {\n    constructor(maxlen = 1000){\n        this._maxlen = maxlen;\n        this.spans = [];\n    }\n    /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */ add(span) {\n        if (this.spans.length > this._maxlen) {\n            span.spanRecorder = undefined;\n        } else {\n            this.spans.push(span);\n        }\n    }\n}\n/**\n * Span contains all data about a span\n */ class Span {\n    /**\n   * @inheritDoc\n   */ /**\n   * @inheritDoc\n   */ /**\n   * @inheritDoc\n   */ /**\n   * Internal keeper of the status\n   */ /**\n   * @inheritDoc\n   */ /**\n   * Timestamp in seconds when the span was created.\n   */ /**\n   * Timestamp in seconds when the span ended.\n   */ /**\n   * @inheritDoc\n   */ /**\n   * @inheritDoc\n   */ /**\n   * @inheritDoc\n   */ /**\n   * @inheritDoc\n   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    /**\n   * List of spans that were finalized\n   */ /**\n   * @inheritDoc\n   */ /**\n   * The instrumenter that created this span.\n   */ /**\n   * The origin of the span, giving context about what created the span.\n   */ /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */ constructor(spanContext = {}){\n        this.traceId = spanContext.traceId || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.uuid4)();\n        this.spanId = spanContext.spanId || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.uuid4)().substring(16);\n        this.startTimestamp = spanContext.startTimestamp || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.timestampInSeconds)();\n        this.tags = spanContext.tags || {};\n        this.data = spanContext.data || {};\n        this.instrumenter = spanContext.instrumenter || \"sentry\";\n        this.origin = spanContext.origin || \"manual\";\n        if (spanContext.parentSpanId) {\n            this.parentSpanId = spanContext.parentSpanId;\n        }\n        // We want to include booleans as well here\n        if (\"sampled\" in spanContext) {\n            this.sampled = spanContext.sampled;\n        }\n        if (spanContext.op) {\n            this.op = spanContext.op;\n        }\n        if (spanContext.description) {\n            this.description = spanContext.description;\n        }\n        if (spanContext.name) {\n            this.description = spanContext.name;\n        }\n        if (spanContext.status) {\n            this.status = spanContext.status;\n        }\n        if (spanContext.endTimestamp) {\n            this.endTimestamp = spanContext.endTimestamp;\n        }\n    }\n    /** An alias for `description` of the Span. */ get name() {\n        return this.description || \"\";\n    }\n    /** Update the name of the span. */ set name(name) {\n        this.setName(name);\n    }\n    /**\n   * @inheritDoc\n   */ startChild(spanContext) {\n        const childSpan = new Span({\n            ...spanContext,\n            parentSpanId: this.spanId,\n            sampled: this.sampled,\n            traceId: this.traceId\n        });\n        childSpan.spanRecorder = this.spanRecorder;\n        if (childSpan.spanRecorder) {\n            childSpan.spanRecorder.add(childSpan);\n        }\n        childSpan.transaction = this.transaction;\n        if (_debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && childSpan.transaction) {\n            const opStr = spanContext && spanContext.op || \"< unknown op >\";\n            const nameStr = childSpan.transaction.name || \"< unknown name >\";\n            const idStr = childSpan.transaction.spanId;\n            const logMessage = `[Tracing] Starting '${opStr}' span on transaction '${nameStr}' (${idStr}).`;\n            childSpan.transaction.metadata.spanMetadata[childSpan.spanId] = {\n                logMessage\n            };\n            _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.log(logMessage);\n        }\n        return childSpan;\n    }\n    /**\n   * @inheritDoc\n   */ setTag(key, value) {\n        this.tags = {\n            ...this.tags,\n            [key]: value\n        };\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n    setData(key, value) {\n        this.data = {\n            ...this.data,\n            [key]: value\n        };\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setStatus(value) {\n        this.status = value;\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setHttpStatus(httpStatus) {\n        this.setTag(\"http.status_code\", String(httpStatus));\n        this.setData(\"http.response.status_code\", httpStatus);\n        const spanStatus = spanStatusfromHttpCode(httpStatus);\n        if (spanStatus !== \"unknown_error\") {\n            this.setStatus(spanStatus);\n        }\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ setName(name) {\n        this.description = name;\n    }\n    /**\n   * @inheritDoc\n   */ isSuccess() {\n        return this.status === \"ok\";\n    }\n    /**\n   * @inheritDoc\n   */ finish(endTimestamp) {\n        if (_debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && // Don't call this for transactions\n        this.transaction && this.transaction.spanId !== this.spanId) {\n            const { logMessage } = this.transaction.metadata.spanMetadata[this.spanId];\n            if (logMessage) {\n                _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.log(logMessage.replace(\"Starting\", \"Finishing\"));\n            }\n        }\n        this.endTimestamp = typeof endTimestamp === \"number\" ? endTimestamp : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.timestampInSeconds)();\n    }\n    /**\n   * @inheritDoc\n   */ toTraceparent() {\n        return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.generateSentryTraceHeader)(this.traceId, this.spanId, this.sampled);\n    }\n    /**\n   * @inheritDoc\n   */ toContext() {\n        return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.dropUndefinedKeys)({\n            data: this.data,\n            description: this.description,\n            endTimestamp: this.endTimestamp,\n            op: this.op,\n            parentSpanId: this.parentSpanId,\n            sampled: this.sampled,\n            spanId: this.spanId,\n            startTimestamp: this.startTimestamp,\n            status: this.status,\n            tags: this.tags,\n            traceId: this.traceId\n        });\n    }\n    /**\n   * @inheritDoc\n   */ updateWithContext(spanContext) {\n        this.data = spanContext.data || {};\n        this.description = spanContext.description;\n        this.endTimestamp = spanContext.endTimestamp;\n        this.op = spanContext.op;\n        this.parentSpanId = spanContext.parentSpanId;\n        this.sampled = spanContext.sampled;\n        this.spanId = spanContext.spanId || this.spanId;\n        this.startTimestamp = spanContext.startTimestamp || this.startTimestamp;\n        this.status = spanContext.status;\n        this.tags = spanContext.tags || {};\n        this.traceId = spanContext.traceId || this.traceId;\n        return this;\n    }\n    /**\n   * @inheritDoc\n   */ getTraceContext() {\n        return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.dropUndefinedKeys)({\n            data: Object.keys(this.data).length > 0 ? this.data : undefined,\n            description: this.description,\n            op: this.op,\n            parent_span_id: this.parentSpanId,\n            span_id: this.spanId,\n            status: this.status,\n            tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n            trace_id: this.traceId,\n            origin: this.origin\n        });\n    }\n    /**\n   * @inheritDoc\n   */ toJSON() {\n        return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.dropUndefinedKeys)({\n            data: Object.keys(this.data).length > 0 ? this.data : undefined,\n            description: this.description,\n            op: this.op,\n            parent_span_id: this.parentSpanId,\n            span_id: this.spanId,\n            start_timestamp: this.startTimestamp,\n            status: this.status,\n            tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n            timestamp: this.endTimestamp,\n            trace_id: this.traceId,\n            origin: this.origin\n        });\n    }\n}\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */ function spanStatusfromHttpCode(httpStatus) {\n    if (httpStatus < 400 && httpStatus >= 100) {\n        return \"ok\";\n    }\n    if (httpStatus >= 400 && httpStatus < 500) {\n        switch(httpStatus){\n            case 401:\n                return \"unauthenticated\";\n            case 403:\n                return \"permission_denied\";\n            case 404:\n                return \"not_found\";\n            case 409:\n                return \"already_exists\";\n            case 413:\n                return \"failed_precondition\";\n            case 429:\n                return \"resource_exhausted\";\n            default:\n                return \"invalid_argument\";\n        }\n    }\n    if (httpStatus >= 500 && httpStatus < 600) {\n        switch(httpStatus){\n            case 501:\n                return \"unimplemented\";\n            case 503:\n                return \"unavailable\";\n            case 504:\n                return \"deadline_exceeded\";\n            default:\n                return \"internal_error\";\n        }\n    }\n    return \"unknown_error\";\n}\n //# sourceMappingURL=span.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/tracing/span.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/tracing/trace.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/esm/tracing/trace.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   continueTrace: () => (/* binding */ continueTrace),\n/* harmony export */   getActiveSpan: () => (/* binding */ getActiveSpan),\n/* harmony export */   startActiveSpan: () => (/* binding */ startActiveSpan),\n/* harmony export */   startInactiveSpan: () => (/* binding */ startInactiveSpan),\n/* harmony export */   startSpan: () => (/* binding */ startSpan),\n/* harmony export */   startSpanManual: () => (/* binding */ startSpanManual),\n/* harmony export */   trace: () => (/* binding */ trace)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/tracing.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/core/esm/debug-build.js\");\n/* harmony import */ var _hub_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../hub.js */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _utils_hasTracingEnabled_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/hasTracingEnabled.js */ \"(ssr)/./node_modules/@sentry/core/esm/utils/hasTracingEnabled.js\");\n\n\n\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n *\n * This function is meant to be used internally and may break at any time. Use at your own risk.\n *\n * @internal\n * @private\n */ function trace(context, callback, // eslint-disable-next-line @typescript-eslint/no-empty-function\nonError = ()=>{}) {\n    const ctx = normalizeContext(context);\n    const hub = (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)();\n    const scope = hub.getScope();\n    const parentSpan = scope.getSpan();\n    const activeSpan = createChildSpanOrTransaction(hub, parentSpan, ctx);\n    scope.setSpan(activeSpan);\n    function finishAndSetSpan() {\n        activeSpan && activeSpan.finish();\n        hub.getScope().setSpan(parentSpan);\n    }\n    let maybePromiseResult;\n    try {\n        maybePromiseResult = callback(activeSpan);\n    } catch (e) {\n        activeSpan && activeSpan.setStatus(\"internal_error\");\n        onError(e);\n        finishAndSetSpan();\n        throw e;\n    }\n    if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.isThenable)(maybePromiseResult)) {\n        Promise.resolve(maybePromiseResult).then(()=>{\n            finishAndSetSpan();\n        }, (e)=>{\n            activeSpan && activeSpan.setStatus(\"internal_error\");\n            onError(e);\n            finishAndSetSpan();\n        });\n    } else {\n        finishAndSetSpan();\n    }\n    return maybePromiseResult;\n}\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n */ function startSpan(context, callback) {\n    const ctx = normalizeContext(context);\n    const hub = (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)();\n    const scope = hub.getScope();\n    const parentSpan = scope.getSpan();\n    const activeSpan = createChildSpanOrTransaction(hub, parentSpan, ctx);\n    scope.setSpan(activeSpan);\n    function finishAndSetSpan() {\n        activeSpan && activeSpan.finish();\n        hub.getScope().setSpan(parentSpan);\n    }\n    let maybePromiseResult;\n    try {\n        maybePromiseResult = callback(activeSpan);\n    } catch (e) {\n        activeSpan && activeSpan.setStatus(\"internal_error\");\n        finishAndSetSpan();\n        throw e;\n    }\n    if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.isThenable)(maybePromiseResult)) {\n        Promise.resolve(maybePromiseResult).then(()=>{\n            finishAndSetSpan();\n        }, ()=>{\n            activeSpan && activeSpan.setStatus(\"internal_error\");\n            finishAndSetSpan();\n        });\n    } else {\n        finishAndSetSpan();\n    }\n    return maybePromiseResult;\n}\n/**\n * @deprecated Use {@link startSpan} instead.\n */ const startActiveSpan = startSpan;\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a transaction/span, but does not finish the span\n * after the function is done automatically.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n */ function startSpanManual(context, callback) {\n    const ctx = normalizeContext(context);\n    const hub = (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)();\n    const scope = hub.getScope();\n    const parentSpan = scope.getSpan();\n    const activeSpan = createChildSpanOrTransaction(hub, parentSpan, ctx);\n    scope.setSpan(activeSpan);\n    function finishAndSetSpan() {\n        activeSpan && activeSpan.finish();\n        hub.getScope().setSpan(parentSpan);\n    }\n    let maybePromiseResult;\n    try {\n        maybePromiseResult = callback(activeSpan, finishAndSetSpan);\n    } catch (e) {\n        activeSpan && activeSpan.setStatus(\"internal_error\");\n        throw e;\n    }\n    if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.isThenable)(maybePromiseResult)) {\n        Promise.resolve(maybePromiseResult).then(undefined, ()=>{\n            activeSpan && activeSpan.setStatus(\"internal_error\");\n        });\n    }\n    return maybePromiseResult;\n}\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate` or `tracesSampler`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n */ function startInactiveSpan(context) {\n    if (!(0,_utils_hasTracingEnabled_js__WEBPACK_IMPORTED_MODULE_2__.hasTracingEnabled)()) {\n        return undefined;\n    }\n    const ctx = {\n        ...context\n    };\n    // If a name is set and a description is not, set the description to the name.\n    if (ctx.name !== undefined && ctx.description === undefined) {\n        ctx.description = ctx.name;\n    }\n    const hub = (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)();\n    const parentSpan = getActiveSpan();\n    return parentSpan ? parentSpan.startChild(ctx) : hub.startTransaction(ctx);\n}\n/**\n * Returns the currently active span.\n */ function getActiveSpan() {\n    return (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)().getScope().getSpan();\n}\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers,\n * or in the browser from `<meta name=\"sentry-trace\">` and `<meta name=\"baggage\">` HTML tags.\n *\n * The callback receives a transactionContext that may be used for `startTransaction` or `startSpan`.\n */ function continueTrace({ sentryTrace, baggage }, callback) {\n    const hub = (0,_hub_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)();\n    const currentScope = hub.getScope();\n    const { traceparentData, dynamicSamplingContext, propagationContext } = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.tracingContextFromHeaders)(sentryTrace, baggage);\n    currentScope.setPropagationContext(propagationContext);\n    if (_debug_build_js__WEBPACK_IMPORTED_MODULE_4__.DEBUG_BUILD && traceparentData) {\n        _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.logger.log(`[Tracing] Continuing trace ${traceparentData.traceId}.`);\n    }\n    const transactionContext = {\n        ...traceparentData,\n        metadata: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__.dropUndefinedKeys)({\n            dynamicSamplingContext: traceparentData && !dynamicSamplingContext ? {} : dynamicSamplingContext\n        })\n    };\n    if (!callback) {\n        return transactionContext;\n    }\n    return callback(transactionContext);\n}\nfunction createChildSpanOrTransaction(hub, parentSpan, ctx) {\n    if (!(0,_utils_hasTracingEnabled_js__WEBPACK_IMPORTED_MODULE_2__.hasTracingEnabled)()) {\n        return undefined;\n    }\n    return parentSpan ? parentSpan.startChild(ctx) : hub.startTransaction(ctx);\n}\nfunction normalizeContext(context) {\n    const ctx = {\n        ...context\n    };\n    // If a name is set and a description is not, set the description to the name.\n    if (ctx.name !== undefined && ctx.description === undefined) {\n        ctx.description = ctx.name;\n    }\n    return ctx;\n}\n //# sourceMappingURL=trace.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/tracing/trace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/tracing/transaction.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/tracing/transaction.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Transaction: () => (/* binding */ Transaction)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/core/esm/debug-build.js\");\n/* harmony import */ var _hub_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hub.js */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dynamicSamplingContext.js */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/dynamicSamplingContext.js\");\n/* harmony import */ var _span_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./span.js */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/span.js\");\n\n\n\n\n\n/** JSDoc */ class Transaction extends _span_js__WEBPACK_IMPORTED_MODULE_0__.Span {\n    /**\n   * The reference to the current hub.\n   */ /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */ constructor(transactionContext, hub){\n        super(transactionContext);\n        // We need to delete description since it's set by the Span class constructor\n        // but not needed for transactions.\n        delete this.description;\n        this._measurements = {};\n        this._contexts = {};\n        this._hub = hub || (0,_hub_js__WEBPACK_IMPORTED_MODULE_1__.getCurrentHub)();\n        this._name = transactionContext.name || \"\";\n        this.metadata = {\n            source: \"custom\",\n            ...transactionContext.metadata,\n            spanMetadata: {}\n        };\n        this._trimEnd = transactionContext.trimEnd;\n        // this is because transactions are also spans, and spans have a transaction pointer\n        this.transaction = this;\n        // If Dynamic Sampling Context is provided during the creation of the transaction, we freeze it as it usually means\n        // there is incoming Dynamic Sampling Context. (Either through an incoming request, a baggage meta-tag, or other means)\n        const incomingDynamicSamplingContext = this.metadata.dynamicSamplingContext;\n        if (incomingDynamicSamplingContext) {\n            // We shallow copy this in case anything writes to the original reference of the passed in `dynamicSamplingContext`\n            this._frozenDynamicSamplingContext = {\n                ...incomingDynamicSamplingContext\n            };\n        }\n    }\n    /** Getter for `name` property */ get name() {\n        return this._name;\n    }\n    /** Setter for `name` property, which also sets `source` as custom */ set name(newName) {\n        this.setName(newName);\n    }\n    /**\n   * JSDoc\n   */ setName(name, source = \"custom\") {\n        this._name = name;\n        this.metadata.source = source;\n    }\n    /**\n   * Attaches SpanRecorder to the span itself\n   * @param maxlen maximum number of spans that can be recorded\n   */ initSpanRecorder(maxlen = 1000) {\n        if (!this.spanRecorder) {\n            this.spanRecorder = new _span_js__WEBPACK_IMPORTED_MODULE_0__.SpanRecorder(maxlen);\n        }\n        this.spanRecorder.add(this);\n    }\n    /**\n   * @inheritDoc\n   */ setContext(key, context) {\n        if (context === null) {\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete this._contexts[key];\n        } else {\n            this._contexts[key] = context;\n        }\n    }\n    /**\n   * @inheritDoc\n   */ setMeasurement(name, value, unit = \"\") {\n        this._measurements[name] = {\n            value,\n            unit\n        };\n    }\n    /**\n   * @inheritDoc\n   */ setMetadata(newMetadata) {\n        this.metadata = {\n            ...this.metadata,\n            ...newMetadata\n        };\n    }\n    /**\n   * @inheritDoc\n   */ finish(endTimestamp) {\n        const transaction = this._finishTransaction(endTimestamp);\n        if (!transaction) {\n            return undefined;\n        }\n        return this._hub.captureEvent(transaction);\n    }\n    /**\n   * @inheritDoc\n   */ toContext() {\n        const spanContext = super.toContext();\n        return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.dropUndefinedKeys)({\n            ...spanContext,\n            name: this.name,\n            trimEnd: this._trimEnd\n        });\n    }\n    /**\n   * @inheritDoc\n   */ updateWithContext(transactionContext) {\n        super.updateWithContext(transactionContext);\n        this.name = transactionContext.name || \"\";\n        this._trimEnd = transactionContext.trimEnd;\n        return this;\n    }\n    /**\n   * @inheritdoc\n   *\n   * @experimental\n   */ getDynamicSamplingContext() {\n        if (this._frozenDynamicSamplingContext) {\n            return this._frozenDynamicSamplingContext;\n        }\n        const hub = this._hub || (0,_hub_js__WEBPACK_IMPORTED_MODULE_1__.getCurrentHub)();\n        const client = hub.getClient();\n        if (!client) return {};\n        const scope = hub.getScope();\n        const dsc = (0,_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_3__.getDynamicSamplingContextFromClient)(this.traceId, client, scope);\n        const maybeSampleRate = this.metadata.sampleRate;\n        if (maybeSampleRate !== undefined) {\n            dsc.sample_rate = `${maybeSampleRate}`;\n        }\n        // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n        const source = this.metadata.source;\n        if (source && source !== \"url\") {\n            dsc.transaction = this.name;\n        }\n        if (this.sampled !== undefined) {\n            dsc.sampled = String(this.sampled);\n        }\n        // Uncomment if we want to make DSC immutable\n        // this._frozenDynamicSamplingContext = dsc;\n        return dsc;\n    }\n    /**\n   * Override the current hub with a new one.\n   * Used if you want another hub to finish the transaction.\n   *\n   * @internal\n   */ setHub(hub) {\n        this._hub = hub;\n    }\n    /**\n   * Finish the transaction & prepare the event to send to Sentry.\n   */ _finishTransaction(endTimestamp) {\n        // This transaction is already finished, so we should not flush it again.\n        if (this.endTimestamp !== undefined) {\n            return undefined;\n        }\n        if (!this.name) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_4__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.logger.warn(\"Transaction has no name, falling back to `<unlabeled transaction>`.\");\n            this.name = \"<unlabeled transaction>\";\n        }\n        // just sets the end timestamp\n        super.finish(endTimestamp);\n        const client = this._hub.getClient();\n        if (client && client.emit) {\n            client.emit(\"finishTransaction\", this);\n        }\n        if (this.sampled !== true) {\n            // At this point if `sampled !== true` we want to discard the transaction.\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_4__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.logger.log(\"[Tracing] Discarding transaction because its trace was not chosen to be sampled.\");\n            if (client) {\n                client.recordDroppedEvent(\"sample_rate\", \"transaction\");\n            }\n            return undefined;\n        }\n        const finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter((s)=>s !== this && s.endTimestamp) : [];\n        if (this._trimEnd && finishedSpans.length > 0) {\n            this.endTimestamp = finishedSpans.reduce((prev, current)=>{\n                if (prev.endTimestamp && current.endTimestamp) {\n                    return prev.endTimestamp > current.endTimestamp ? prev : current;\n                }\n                return prev;\n            }).endTimestamp;\n        }\n        const metadata = this.metadata;\n        const transaction = {\n            contexts: {\n                ...this._contexts,\n                // We don't want to override trace context\n                trace: this.getTraceContext()\n            },\n            spans: finishedSpans,\n            start_timestamp: this.startTimestamp,\n            tags: this.tags,\n            timestamp: this.endTimestamp,\n            transaction: this.name,\n            type: \"transaction\",\n            sdkProcessingMetadata: {\n                ...metadata,\n                dynamicSamplingContext: this.getDynamicSamplingContext()\n            },\n            ...metadata.source && {\n                transaction_info: {\n                    source: metadata.source\n                }\n            }\n        };\n        const hasMeasurements = Object.keys(this._measurements).length > 0;\n        if (hasMeasurements) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_4__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.logger.log(\"[Measurements] Adding measurements to transaction\", JSON.stringify(this._measurements, undefined, 2));\n            transaction.measurements = this._measurements;\n        }\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_4__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.logger.log(`[Tracing] Finishing ${this.op} transaction: ${this.name}.`);\n        return transaction;\n    }\n}\n //# sourceMappingURL=transaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS90cmFjaW5nL3RyYW5zYWN0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBMEQ7QUFDVjtBQUNOO0FBQ3dDO0FBQ25DO0FBRS9DLFVBQVUsR0FDVixNQUFNTyxvQkFBb0JGLDBDQUFJQTtJQUU1Qjs7R0FFQyxHQUVEOzs7Ozs7R0FNQyxHQUNBRyxZQUFZQyxrQkFBa0IsRUFBRUMsR0FBRyxDQUFFO1FBQ3BDLEtBQUssQ0FBQ0Q7UUFDTiw2RUFBNkU7UUFDN0UsbUNBQW1DO1FBQ25DLE9BQU8sSUFBSSxDQUFDRSxXQUFXO1FBRXZCLElBQUksQ0FBQ0MsYUFBYSxHQUFHLENBQUM7UUFDdEIsSUFBSSxDQUFDQyxTQUFTLEdBQUcsQ0FBQztRQUVsQixJQUFJLENBQUNDLElBQUksR0FBR0osT0FBT1Asc0RBQWFBO1FBRWhDLElBQUksQ0FBQ1ksS0FBSyxHQUFHTixtQkFBbUJPLElBQUksSUFBSTtRQUV4QyxJQUFJLENBQUNDLFFBQVEsR0FBRztZQUNkQyxRQUFRO1lBQ1IsR0FBR1QsbUJBQW1CUSxRQUFRO1lBQzlCRSxjQUFjLENBQUM7UUFDakI7UUFFQSxJQUFJLENBQUNDLFFBQVEsR0FBR1gsbUJBQW1CWSxPQUFPO1FBRTFDLG9GQUFvRjtRQUNwRixJQUFJLENBQUNDLFdBQVcsR0FBRyxJQUFJO1FBRXZCLG1IQUFtSDtRQUNuSCx1SEFBdUg7UUFDdkgsTUFBTUMsaUNBQWlDLElBQUksQ0FBQ04sUUFBUSxDQUFDTyxzQkFBc0I7UUFDM0UsSUFBSUQsZ0NBQWdDO1lBQ2xDLG1IQUFtSDtZQUNuSCxJQUFJLENBQUNFLDZCQUE2QixHQUFHO2dCQUFFLEdBQUdGLDhCQUE4QjtZQUFDO1FBQzNFO0lBQ0Y7SUFFQSwrQkFBK0IsR0FDOUIsSUFBSVAsT0FBTztRQUNWLE9BQU8sSUFBSSxDQUFDRCxLQUFLO0lBQ25CO0lBRUEsbUVBQW1FLEdBQ2xFLElBQUlDLEtBQUtVLE9BQU8sRUFBRTtRQUNqQixJQUFJLENBQUNDLE9BQU8sQ0FBQ0Q7SUFDZjtJQUVBOztHQUVDLEdBQ0FDLFFBQVFYLElBQUksRUFBRUUsU0FBUyxRQUFRLEVBQUU7UUFDaEMsSUFBSSxDQUFDSCxLQUFLLEdBQUdDO1FBQ2IsSUFBSSxDQUFDQyxRQUFRLENBQUNDLE1BQU0sR0FBR0E7SUFDekI7SUFFQTs7O0dBR0MsR0FDQVUsaUJBQWlCQyxTQUFTLElBQUksRUFBRTtRQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDQyxZQUFZLEVBQUU7WUFDdEIsSUFBSSxDQUFDQSxZQUFZLEdBQUcsSUFBSXhCLGtEQUFZQSxDQUFDdUI7UUFDdkM7UUFDQSxJQUFJLENBQUNDLFlBQVksQ0FBQ0MsR0FBRyxDQUFDLElBQUk7SUFDNUI7SUFFQTs7R0FFQyxHQUNBQyxXQUFXQyxHQUFHLEVBQUVDLE9BQU8sRUFBRTtRQUN4QixJQUFJQSxZQUFZLE1BQU07WUFDcEIsZ0VBQWdFO1lBQ2hFLE9BQU8sSUFBSSxDQUFDckIsU0FBUyxDQUFDb0IsSUFBSTtRQUM1QixPQUFPO1lBQ0wsSUFBSSxDQUFDcEIsU0FBUyxDQUFDb0IsSUFBSSxHQUFHQztRQUN4QjtJQUNGO0lBRUE7O0dBRUMsR0FDQUMsZUFBZW5CLElBQUksRUFBRW9CLEtBQUssRUFBRUMsT0FBTyxFQUFFLEVBQUU7UUFDdEMsSUFBSSxDQUFDekIsYUFBYSxDQUFDSSxLQUFLLEdBQUc7WUFBRW9CO1lBQU9DO1FBQUs7SUFDM0M7SUFFQTs7R0FFQyxHQUNBQyxZQUFZQyxXQUFXLEVBQUU7UUFDeEIsSUFBSSxDQUFDdEIsUUFBUSxHQUFHO1lBQUUsR0FBRyxJQUFJLENBQUNBLFFBQVE7WUFBRSxHQUFHc0IsV0FBVztRQUFDO0lBQ3JEO0lBRUE7O0dBRUMsR0FDQUMsT0FBT0MsWUFBWSxFQUFFO1FBQ3BCLE1BQU1uQixjQUFjLElBQUksQ0FBQ29CLGtCQUFrQixDQUFDRDtRQUM1QyxJQUFJLENBQUNuQixhQUFhO1lBQ2hCLE9BQU9xQjtRQUNUO1FBQ0EsT0FBTyxJQUFJLENBQUM3QixJQUFJLENBQUM4QixZQUFZLENBQUN0QjtJQUNoQztJQUVBOztHQUVDLEdBQ0F1QixZQUFZO1FBQ1gsTUFBTUMsY0FBYyxLQUFLLENBQUNEO1FBRTFCLE9BQU83QyxnRUFBaUJBLENBQUM7WUFDdkIsR0FBRzhDLFdBQVc7WUFDZDlCLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ2ZLLFNBQVMsSUFBSSxDQUFDRCxRQUFRO1FBQ3hCO0lBQ0Y7SUFFQTs7R0FFQyxHQUNBMkIsa0JBQWtCdEMsa0JBQWtCLEVBQUU7UUFDckMsS0FBSyxDQUFDc0Msa0JBQWtCdEM7UUFFeEIsSUFBSSxDQUFDTyxJQUFJLEdBQUdQLG1CQUFtQk8sSUFBSSxJQUFJO1FBRXZDLElBQUksQ0FBQ0ksUUFBUSxHQUFHWCxtQkFBbUJZLE9BQU87UUFFMUMsT0FBTyxJQUFJO0lBQ2I7SUFFQTs7OztHQUlDLEdBQ0EyQiw0QkFBNEI7UUFDM0IsSUFBSSxJQUFJLENBQUN2Qiw2QkFBNkIsRUFBRTtZQUN0QyxPQUFPLElBQUksQ0FBQ0EsNkJBQTZCO1FBQzNDO1FBRUEsTUFBTWYsTUFBTSxJQUFJLENBQUNJLElBQUksSUFBSVgsc0RBQWFBO1FBQ3RDLE1BQU04QyxTQUFTdkMsSUFBSXdDLFNBQVM7UUFFNUIsSUFBSSxDQUFDRCxRQUFRLE9BQU8sQ0FBQztRQUVyQixNQUFNRSxRQUFRekMsSUFBSTBDLFFBQVE7UUFDMUIsTUFBTUMsTUFBTWpELCtGQUFtQ0EsQ0FBQyxJQUFJLENBQUNrRCxPQUFPLEVBQUVMLFFBQVFFO1FBRXRFLE1BQU1JLGtCQUFrQixJQUFJLENBQUN0QyxRQUFRLENBQUN1QyxVQUFVO1FBQ2hELElBQUlELG9CQUFvQlosV0FBVztZQUNqQ1UsSUFBSUksV0FBVyxHQUFHLENBQUMsRUFBRUYsZ0JBQWdCLENBQUM7UUFDeEM7UUFFQSw0R0FBNEc7UUFDNUcsTUFBTXJDLFNBQVMsSUFBSSxDQUFDRCxRQUFRLENBQUNDLE1BQU07UUFDbkMsSUFBSUEsVUFBVUEsV0FBVyxPQUFPO1lBQzlCbUMsSUFBSS9CLFdBQVcsR0FBRyxJQUFJLENBQUNOLElBQUk7UUFDN0I7UUFFQSxJQUFJLElBQUksQ0FBQzBDLE9BQU8sS0FBS2YsV0FBVztZQUM5QlUsSUFBSUssT0FBTyxHQUFHQyxPQUFPLElBQUksQ0FBQ0QsT0FBTztRQUNuQztRQUVBLDZDQUE2QztRQUM3Qyw0Q0FBNEM7UUFFNUMsT0FBT0w7SUFDVDtJQUVBOzs7OztHQUtDLEdBQ0FPLE9BQU9sRCxHQUFHLEVBQUU7UUFDWCxJQUFJLENBQUNJLElBQUksR0FBR0o7SUFDZDtJQUVBOztHQUVDLEdBQ0FnQyxtQkFBbUJELFlBQVksRUFBRTtRQUNoQyx5RUFBeUU7UUFDekUsSUFBSSxJQUFJLENBQUNBLFlBQVksS0FBS0UsV0FBVztZQUNuQyxPQUFPQTtRQUNUO1FBRUEsSUFBSSxDQUFDLElBQUksQ0FBQzNCLElBQUksRUFBRTtZQUNkZCx3REFBV0EsSUFBSUQsaURBQU1BLENBQUM0RCxJQUFJLENBQUM7WUFDM0IsSUFBSSxDQUFDN0MsSUFBSSxHQUFHO1FBQ2Q7UUFFQSw4QkFBOEI7UUFDOUIsS0FBSyxDQUFDd0IsT0FBT0M7UUFFYixNQUFNUSxTQUFTLElBQUksQ0FBQ25DLElBQUksQ0FBQ29DLFNBQVM7UUFDbEMsSUFBSUQsVUFBVUEsT0FBT2EsSUFBSSxFQUFFO1lBQ3pCYixPQUFPYSxJQUFJLENBQUMscUJBQXFCLElBQUk7UUFDdkM7UUFFQSxJQUFJLElBQUksQ0FBQ0osT0FBTyxLQUFLLE1BQU07WUFDekIsMEVBQTBFO1lBQzFFeEQsd0RBQVdBLElBQUlELGlEQUFNQSxDQUFDOEQsR0FBRyxDQUFDO1lBRTFCLElBQUlkLFFBQVE7Z0JBQ1ZBLE9BQU9lLGtCQUFrQixDQUFDLGVBQWU7WUFDM0M7WUFFQSxPQUFPckI7UUFDVDtRQUVBLE1BQU1zQixnQkFBZ0IsSUFBSSxDQUFDbkMsWUFBWSxHQUFHLElBQUksQ0FBQ0EsWUFBWSxDQUFDb0MsS0FBSyxDQUFDQyxNQUFNLENBQUNDLENBQUFBLElBQUtBLE1BQU0sSUFBSSxJQUFJQSxFQUFFM0IsWUFBWSxJQUFJLEVBQUU7UUFFaEgsSUFBSSxJQUFJLENBQUNyQixRQUFRLElBQUk2QyxjQUFjSSxNQUFNLEdBQUcsR0FBRztZQUM3QyxJQUFJLENBQUM1QixZQUFZLEdBQUd3QixjQUFjSyxNQUFNLENBQUMsQ0FBQ0MsTUFBTUM7Z0JBQzlDLElBQUlELEtBQUs5QixZQUFZLElBQUkrQixRQUFRL0IsWUFBWSxFQUFFO29CQUM3QyxPQUFPOEIsS0FBSzlCLFlBQVksR0FBRytCLFFBQVEvQixZQUFZLEdBQUc4QixPQUFPQztnQkFDM0Q7Z0JBQ0EsT0FBT0Q7WUFDVCxHQUFHOUIsWUFBWTtRQUNqQjtRQUVBLE1BQU14QixXQUFXLElBQUksQ0FBQ0EsUUFBUTtRQUU5QixNQUFNSyxjQUFjO1lBQ2xCbUQsVUFBVTtnQkFDUixHQUFHLElBQUksQ0FBQzVELFNBQVM7Z0JBQ2pCLDBDQUEwQztnQkFDMUM2RCxPQUFPLElBQUksQ0FBQ0MsZUFBZTtZQUM3QjtZQUNBVCxPQUFPRDtZQUNQVyxpQkFBaUIsSUFBSSxDQUFDQyxjQUFjO1lBQ3BDQyxNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNmQyxXQUFXLElBQUksQ0FBQ3RDLFlBQVk7WUFDNUJuQixhQUFhLElBQUksQ0FBQ04sSUFBSTtZQUN0QmdFLE1BQU07WUFDTkMsdUJBQXVCO2dCQUNyQixHQUFHaEUsUUFBUTtnQkFDWE8sd0JBQXdCLElBQUksQ0FBQ3dCLHlCQUF5QjtZQUN4RDtZQUNBLEdBQUkvQixTQUFTQyxNQUFNLElBQUk7Z0JBQ3JCZ0Usa0JBQWtCO29CQUNoQmhFLFFBQVFELFNBQVNDLE1BQU07Z0JBQ3pCO1lBQ0YsQ0FBQztRQUNIO1FBRUEsTUFBTWlFLGtCQUFrQkMsT0FBT0MsSUFBSSxDQUFDLElBQUksQ0FBQ3pFLGFBQWEsRUFBRXlELE1BQU0sR0FBRztRQUVqRSxJQUFJYyxpQkFBaUI7WUFDbkJqRix3REFBV0EsSUFDVEQsaURBQU1BLENBQUM4RCxHQUFHLENBQ1IscURBQ0F1QixLQUFLQyxTQUFTLENBQUMsSUFBSSxDQUFDM0UsYUFBYSxFQUFFK0IsV0FBVztZQUVsRHJCLFlBQVlrRSxZQUFZLEdBQUcsSUFBSSxDQUFDNUUsYUFBYTtRQUMvQztRQUVBVix3REFBV0EsSUFBSUQsaURBQU1BLENBQUM4RCxHQUFHLENBQUMsQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMwQixFQUFFLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQ3pFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFckYsT0FBT007SUFDVDtBQUNGO0FBRXVCLENBQ3ZCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZXNtL3RyYWNpbmcvdHJhbnNhY3Rpb24uanM/NTE3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkcm9wVW5kZWZpbmVkS2V5cywgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBERUJVR19CVUlMRCB9IGZyb20gJy4uL2RlYnVnLWJ1aWxkLmpzJztcbmltcG9ydCB7IGdldEN1cnJlbnRIdWIgfSBmcm9tICcuLi9odWIuanMnO1xuaW1wb3J0IHsgZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21DbGllbnQgfSBmcm9tICcuL2R5bmFtaWNTYW1wbGluZ0NvbnRleHQuanMnO1xuaW1wb3J0IHsgU3BhbiwgU3BhblJlY29yZGVyIH0gZnJvbSAnLi9zcGFuLmpzJztcblxuLyoqIEpTRG9jICovXG5jbGFzcyBUcmFuc2FjdGlvbiBleHRlbmRzIFNwYW4gIHtcblxuICAvKipcbiAgICogVGhlIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBodWIuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGlzIGNvbnN0cnVjdG9yIHNob3VsZCBuZXZlciBiZSBjYWxsZWQgbWFudWFsbHkuIFRob3NlIGluc3RydW1lbnRpbmcgdHJhY2luZyBzaG91bGQgdXNlXG4gICAqIGBTZW50cnkuc3RhcnRUcmFuc2FjdGlvbigpYCwgYW5kIGludGVybmFsIG1ldGhvZHMgc2hvdWxkIHVzZSBgaHViLnN0YXJ0VHJhbnNhY3Rpb24oKWAuXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAaGlkZWNvbnN0cnVjdG9yXG4gICAqIEBoaWRkZW5cbiAgICovXG4gICBjb25zdHJ1Y3Rvcih0cmFuc2FjdGlvbkNvbnRleHQsIGh1Yikge1xuICAgIHN1cGVyKHRyYW5zYWN0aW9uQ29udGV4dCk7XG4gICAgLy8gV2UgbmVlZCB0byBkZWxldGUgZGVzY3JpcHRpb24gc2luY2UgaXQncyBzZXQgYnkgdGhlIFNwYW4gY2xhc3MgY29uc3RydWN0b3JcbiAgICAvLyBidXQgbm90IG5lZWRlZCBmb3IgdHJhbnNhY3Rpb25zLlxuICAgIGRlbGV0ZSB0aGlzLmRlc2NyaXB0aW9uO1xuXG4gICAgdGhpcy5fbWVhc3VyZW1lbnRzID0ge307XG4gICAgdGhpcy5fY29udGV4dHMgPSB7fTtcblxuICAgIHRoaXMuX2h1YiA9IGh1YiB8fCBnZXRDdXJyZW50SHViKCk7XG5cbiAgICB0aGlzLl9uYW1lID0gdHJhbnNhY3Rpb25Db250ZXh0Lm5hbWUgfHwgJyc7XG5cbiAgICB0aGlzLm1ldGFkYXRhID0ge1xuICAgICAgc291cmNlOiAnY3VzdG9tJyxcbiAgICAgIC4uLnRyYW5zYWN0aW9uQ29udGV4dC5tZXRhZGF0YSxcbiAgICAgIHNwYW5NZXRhZGF0YToge30sXG4gICAgfTtcblxuICAgIHRoaXMuX3RyaW1FbmQgPSB0cmFuc2FjdGlvbkNvbnRleHQudHJpbUVuZDtcblxuICAgIC8vIHRoaXMgaXMgYmVjYXVzZSB0cmFuc2FjdGlvbnMgYXJlIGFsc28gc3BhbnMsIGFuZCBzcGFucyBoYXZlIGEgdHJhbnNhY3Rpb24gcG9pbnRlclxuICAgIHRoaXMudHJhbnNhY3Rpb24gPSB0aGlzO1xuXG4gICAgLy8gSWYgRHluYW1pYyBTYW1wbGluZyBDb250ZXh0IGlzIHByb3ZpZGVkIGR1cmluZyB0aGUgY3JlYXRpb24gb2YgdGhlIHRyYW5zYWN0aW9uLCB3ZSBmcmVlemUgaXQgYXMgaXQgdXN1YWxseSBtZWFuc1xuICAgIC8vIHRoZXJlIGlzIGluY29taW5nIER5bmFtaWMgU2FtcGxpbmcgQ29udGV4dC4gKEVpdGhlciB0aHJvdWdoIGFuIGluY29taW5nIHJlcXVlc3QsIGEgYmFnZ2FnZSBtZXRhLXRhZywgb3Igb3RoZXIgbWVhbnMpXG4gICAgY29uc3QgaW5jb21pbmdEeW5hbWljU2FtcGxpbmdDb250ZXh0ID0gdGhpcy5tZXRhZGF0YS5keW5hbWljU2FtcGxpbmdDb250ZXh0O1xuICAgIGlmIChpbmNvbWluZ0R5bmFtaWNTYW1wbGluZ0NvbnRleHQpIHtcbiAgICAgIC8vIFdlIHNoYWxsb3cgY29weSB0aGlzIGluIGNhc2UgYW55dGhpbmcgd3JpdGVzIHRvIHRoZSBvcmlnaW5hbCByZWZlcmVuY2Ugb2YgdGhlIHBhc3NlZCBpbiBgZHluYW1pY1NhbXBsaW5nQ29udGV4dGBcbiAgICAgIHRoaXMuX2Zyb3plbkR5bmFtaWNTYW1wbGluZ0NvbnRleHQgPSB7IC4uLmluY29taW5nRHluYW1pY1NhbXBsaW5nQ29udGV4dCB9O1xuICAgIH1cbiAgfVxuXG4gIC8qKiBHZXR0ZXIgZm9yIGBuYW1lYCBwcm9wZXJ0eSAqL1xuICAgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gIH1cblxuICAvKiogU2V0dGVyIGZvciBgbmFtZWAgcHJvcGVydHksIHdoaWNoIGFsc28gc2V0cyBgc291cmNlYCBhcyBjdXN0b20gKi9cbiAgIHNldCBuYW1lKG5ld05hbWUpIHtcbiAgICB0aGlzLnNldE5hbWUobmV3TmFtZSk7XG4gIH1cblxuICAvKipcbiAgICogSlNEb2NcbiAgICovXG4gICBzZXROYW1lKG5hbWUsIHNvdXJjZSA9ICdjdXN0b20nKSB7XG4gICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgdGhpcy5tZXRhZGF0YS5zb3VyY2UgPSBzb3VyY2U7XG4gIH1cblxuICAvKipcbiAgICogQXR0YWNoZXMgU3BhblJlY29yZGVyIHRvIHRoZSBzcGFuIGl0c2VsZlxuICAgKiBAcGFyYW0gbWF4bGVuIG1heGltdW0gbnVtYmVyIG9mIHNwYW5zIHRoYXQgY2FuIGJlIHJlY29yZGVkXG4gICAqL1xuICAgaW5pdFNwYW5SZWNvcmRlcihtYXhsZW4gPSAxMDAwKSB7XG4gICAgaWYgKCF0aGlzLnNwYW5SZWNvcmRlcikge1xuICAgICAgdGhpcy5zcGFuUmVjb3JkZXIgPSBuZXcgU3BhblJlY29yZGVyKG1heGxlbik7XG4gICAgfVxuICAgIHRoaXMuc3BhblJlY29yZGVyLmFkZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgIHNldENvbnRleHQoa2V5LCBjb250ZXh0KSB7XG4gICAgaWYgKGNvbnRleHQgPT09IG51bGwpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGVcbiAgICAgIGRlbGV0ZSB0aGlzLl9jb250ZXh0c1trZXldO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9jb250ZXh0c1trZXldID0gY29udGV4dDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBzZXRNZWFzdXJlbWVudChuYW1lLCB2YWx1ZSwgdW5pdCA9ICcnKSB7XG4gICAgdGhpcy5fbWVhc3VyZW1lbnRzW25hbWVdID0geyB2YWx1ZSwgdW5pdCB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAgc2V0TWV0YWRhdGEobmV3TWV0YWRhdGEpIHtcbiAgICB0aGlzLm1ldGFkYXRhID0geyAuLi50aGlzLm1ldGFkYXRhLCAuLi5uZXdNZXRhZGF0YSB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAgZmluaXNoKGVuZFRpbWVzdGFtcCkge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gdGhpcy5fZmluaXNoVHJhbnNhY3Rpb24oZW5kVGltZXN0YW1wKTtcbiAgICBpZiAoIXRyYW5zYWN0aW9uKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5faHViLmNhcHR1cmVFdmVudCh0cmFuc2FjdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICB0b0NvbnRleHQoKSB7XG4gICAgY29uc3Qgc3BhbkNvbnRleHQgPSBzdXBlci50b0NvbnRleHQoKTtcblxuICAgIHJldHVybiBkcm9wVW5kZWZpbmVkS2V5cyh7XG4gICAgICAuLi5zcGFuQ29udGV4dCxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIHRyaW1FbmQ6IHRoaXMuX3RyaW1FbmQsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICB1cGRhdGVXaXRoQ29udGV4dCh0cmFuc2FjdGlvbkNvbnRleHQpIHtcbiAgICBzdXBlci51cGRhdGVXaXRoQ29udGV4dCh0cmFuc2FjdGlvbkNvbnRleHQpO1xuXG4gICAgdGhpcy5uYW1lID0gdHJhbnNhY3Rpb25Db250ZXh0Lm5hbWUgfHwgJyc7XG5cbiAgICB0aGlzLl90cmltRW5kID0gdHJhbnNhY3Rpb25Db250ZXh0LnRyaW1FbmQ7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdGRvY1xuICAgKlxuICAgKiBAZXhwZXJpbWVudGFsXG4gICAqL1xuICAgZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dCgpIHtcbiAgICBpZiAodGhpcy5fZnJvemVuRHluYW1pY1NhbXBsaW5nQ29udGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2Zyb3plbkR5bmFtaWNTYW1wbGluZ0NvbnRleHQ7XG4gICAgfVxuXG4gICAgY29uc3QgaHViID0gdGhpcy5faHViIHx8IGdldEN1cnJlbnRIdWIoKTtcbiAgICBjb25zdCBjbGllbnQgPSBodWIuZ2V0Q2xpZW50KCk7XG5cbiAgICBpZiAoIWNsaWVudCkgcmV0dXJuIHt9O1xuXG4gICAgY29uc3Qgc2NvcGUgPSBodWIuZ2V0U2NvcGUoKTtcbiAgICBjb25zdCBkc2MgPSBnZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbUNsaWVudCh0aGlzLnRyYWNlSWQsIGNsaWVudCwgc2NvcGUpO1xuXG4gICAgY29uc3QgbWF5YmVTYW1wbGVSYXRlID0gdGhpcy5tZXRhZGF0YS5zYW1wbGVSYXRlO1xuICAgIGlmIChtYXliZVNhbXBsZVJhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZHNjLnNhbXBsZV9yYXRlID0gYCR7bWF5YmVTYW1wbGVSYXRlfWA7XG4gICAgfVxuXG4gICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBoYXZlIGEgdHJhbnNhY3Rpb24gbmFtZSBpbiB0aGUgRFNDIGlmIHRoZSBzb3VyY2UgaXMgXCJ1cmxcIiBiZWNhdXNlIFVSTHMgbWlnaHQgY29udGFpbiBQSUlcbiAgICBjb25zdCBzb3VyY2UgPSB0aGlzLm1ldGFkYXRhLnNvdXJjZTtcbiAgICBpZiAoc291cmNlICYmIHNvdXJjZSAhPT0gJ3VybCcpIHtcbiAgICAgIGRzYy50cmFuc2FjdGlvbiA9IHRoaXMubmFtZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zYW1wbGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGRzYy5zYW1wbGVkID0gU3RyaW5nKHRoaXMuc2FtcGxlZCk7XG4gICAgfVxuXG4gICAgLy8gVW5jb21tZW50IGlmIHdlIHdhbnQgdG8gbWFrZSBEU0MgaW1tdXRhYmxlXG4gICAgLy8gdGhpcy5fZnJvemVuRHluYW1pY1NhbXBsaW5nQ29udGV4dCA9IGRzYztcblxuICAgIHJldHVybiBkc2M7XG4gIH1cblxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGN1cnJlbnQgaHViIHdpdGggYSBuZXcgb25lLlxuICAgKiBVc2VkIGlmIHlvdSB3YW50IGFub3RoZXIgaHViIHRvIGZpbmlzaCB0aGUgdHJhbnNhY3Rpb24uXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgIHNldEh1YihodWIpIHtcbiAgICB0aGlzLl9odWIgPSBodWI7XG4gIH1cblxuICAvKipcbiAgICogRmluaXNoIHRoZSB0cmFuc2FjdGlvbiAmIHByZXBhcmUgdGhlIGV2ZW50IHRvIHNlbmQgdG8gU2VudHJ5LlxuICAgKi9cbiAgIF9maW5pc2hUcmFuc2FjdGlvbihlbmRUaW1lc3RhbXApIHtcbiAgICAvLyBUaGlzIHRyYW5zYWN0aW9uIGlzIGFscmVhZHkgZmluaXNoZWQsIHNvIHdlIHNob3VsZCBub3QgZmx1c2ggaXQgYWdhaW4uXG4gICAgaWYgKHRoaXMuZW5kVGltZXN0YW1wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm5hbWUpIHtcbiAgICAgIERFQlVHX0JVSUxEICYmIGxvZ2dlci53YXJuKCdUcmFuc2FjdGlvbiBoYXMgbm8gbmFtZSwgZmFsbGluZyBiYWNrIHRvIGA8dW5sYWJlbGVkIHRyYW5zYWN0aW9uPmAuJyk7XG4gICAgICB0aGlzLm5hbWUgPSAnPHVubGFiZWxlZCB0cmFuc2FjdGlvbj4nO1xuICAgIH1cblxuICAgIC8vIGp1c3Qgc2V0cyB0aGUgZW5kIHRpbWVzdGFtcFxuICAgIHN1cGVyLmZpbmlzaChlbmRUaW1lc3RhbXApO1xuXG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5faHViLmdldENsaWVudCgpO1xuICAgIGlmIChjbGllbnQgJiYgY2xpZW50LmVtaXQpIHtcbiAgICAgIGNsaWVudC5lbWl0KCdmaW5pc2hUcmFuc2FjdGlvbicsIHRoaXMpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNhbXBsZWQgIT09IHRydWUpIHtcbiAgICAgIC8vIEF0IHRoaXMgcG9pbnQgaWYgYHNhbXBsZWQgIT09IHRydWVgIHdlIHdhbnQgdG8gZGlzY2FyZCB0aGUgdHJhbnNhY3Rpb24uXG4gICAgICBERUJVR19CVUlMRCAmJiBsb2dnZXIubG9nKCdbVHJhY2luZ10gRGlzY2FyZGluZyB0cmFuc2FjdGlvbiBiZWNhdXNlIGl0cyB0cmFjZSB3YXMgbm90IGNob3NlbiB0byBiZSBzYW1wbGVkLicpO1xuXG4gICAgICBpZiAoY2xpZW50KSB7XG4gICAgICAgIGNsaWVudC5yZWNvcmREcm9wcGVkRXZlbnQoJ3NhbXBsZV9yYXRlJywgJ3RyYW5zYWN0aW9uJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY29uc3QgZmluaXNoZWRTcGFucyA9IHRoaXMuc3BhblJlY29yZGVyID8gdGhpcy5zcGFuUmVjb3JkZXIuc3BhbnMuZmlsdGVyKHMgPT4gcyAhPT0gdGhpcyAmJiBzLmVuZFRpbWVzdGFtcCkgOiBbXTtcblxuICAgIGlmICh0aGlzLl90cmltRW5kICYmIGZpbmlzaGVkU3BhbnMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5lbmRUaW1lc3RhbXAgPSBmaW5pc2hlZFNwYW5zLnJlZHVjZSgocHJldiwgY3VycmVudCkgPT4ge1xuICAgICAgICBpZiAocHJldi5lbmRUaW1lc3RhbXAgJiYgY3VycmVudC5lbmRUaW1lc3RhbXApIHtcbiAgICAgICAgICByZXR1cm4gcHJldi5lbmRUaW1lc3RhbXAgPiBjdXJyZW50LmVuZFRpbWVzdGFtcCA/IHByZXYgOiBjdXJyZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgfSkuZW5kVGltZXN0YW1wO1xuICAgIH1cblxuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5tZXRhZGF0YTtcblxuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0ge1xuICAgICAgY29udGV4dHM6IHtcbiAgICAgICAgLi4udGhpcy5fY29udGV4dHMsXG4gICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gb3ZlcnJpZGUgdHJhY2UgY29udGV4dFxuICAgICAgICB0cmFjZTogdGhpcy5nZXRUcmFjZUNvbnRleHQoKSxcbiAgICAgIH0sXG4gICAgICBzcGFuczogZmluaXNoZWRTcGFucyxcbiAgICAgIHN0YXJ0X3RpbWVzdGFtcDogdGhpcy5zdGFydFRpbWVzdGFtcCxcbiAgICAgIHRhZ3M6IHRoaXMudGFncyxcbiAgICAgIHRpbWVzdGFtcDogdGhpcy5lbmRUaW1lc3RhbXAsXG4gICAgICB0cmFuc2FjdGlvbjogdGhpcy5uYW1lLFxuICAgICAgdHlwZTogJ3RyYW5zYWN0aW9uJyxcbiAgICAgIHNka1Byb2Nlc3NpbmdNZXRhZGF0YToge1xuICAgICAgICAuLi5tZXRhZGF0YSxcbiAgICAgICAgZHluYW1pY1NhbXBsaW5nQ29udGV4dDogdGhpcy5nZXREeW5hbWljU2FtcGxpbmdDb250ZXh0KCksXG4gICAgICB9LFxuICAgICAgLi4uKG1ldGFkYXRhLnNvdXJjZSAmJiB7XG4gICAgICAgIHRyYW5zYWN0aW9uX2luZm86IHtcbiAgICAgICAgICBzb3VyY2U6IG1ldGFkYXRhLnNvdXJjZSxcbiAgICAgICAgfSxcbiAgICAgIH0pLFxuICAgIH07XG5cbiAgICBjb25zdCBoYXNNZWFzdXJlbWVudHMgPSBPYmplY3Qua2V5cyh0aGlzLl9tZWFzdXJlbWVudHMpLmxlbmd0aCA+IDA7XG5cbiAgICBpZiAoaGFzTWVhc3VyZW1lbnRzKSB7XG4gICAgICBERUJVR19CVUlMRCAmJlxuICAgICAgICBsb2dnZXIubG9nKFxuICAgICAgICAgICdbTWVhc3VyZW1lbnRzXSBBZGRpbmcgbWVhc3VyZW1lbnRzIHRvIHRyYW5zYWN0aW9uJyxcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeSh0aGlzLl9tZWFzdXJlbWVudHMsIHVuZGVmaW5lZCwgMiksXG4gICAgICAgICk7XG4gICAgICB0cmFuc2FjdGlvbi5tZWFzdXJlbWVudHMgPSB0aGlzLl9tZWFzdXJlbWVudHM7XG4gICAgfVxuXG4gICAgREVCVUdfQlVJTEQgJiYgbG9nZ2VyLmxvZyhgW1RyYWNpbmddIEZpbmlzaGluZyAke3RoaXMub3B9IHRyYW5zYWN0aW9uOiAke3RoaXMubmFtZX0uYCk7XG5cbiAgICByZXR1cm4gdHJhbnNhY3Rpb247XG4gIH1cbn1cblxuZXhwb3J0IHsgVHJhbnNhY3Rpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zYWN0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbImRyb3BVbmRlZmluZWRLZXlzIiwibG9nZ2VyIiwiREVCVUdfQlVJTEQiLCJnZXRDdXJyZW50SHViIiwiZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21DbGllbnQiLCJTcGFuIiwiU3BhblJlY29yZGVyIiwiVHJhbnNhY3Rpb24iLCJjb25zdHJ1Y3RvciIsInRyYW5zYWN0aW9uQ29udGV4dCIsImh1YiIsImRlc2NyaXB0aW9uIiwiX21lYXN1cmVtZW50cyIsIl9jb250ZXh0cyIsIl9odWIiLCJfbmFtZSIsIm5hbWUiLCJtZXRhZGF0YSIsInNvdXJjZSIsInNwYW5NZXRhZGF0YSIsIl90cmltRW5kIiwidHJpbUVuZCIsInRyYW5zYWN0aW9uIiwiaW5jb21pbmdEeW5hbWljU2FtcGxpbmdDb250ZXh0IiwiZHluYW1pY1NhbXBsaW5nQ29udGV4dCIsIl9mcm96ZW5EeW5hbWljU2FtcGxpbmdDb250ZXh0IiwibmV3TmFtZSIsInNldE5hbWUiLCJpbml0U3BhblJlY29yZGVyIiwibWF4bGVuIiwic3BhblJlY29yZGVyIiwiYWRkIiwic2V0Q29udGV4dCIsImtleSIsImNvbnRleHQiLCJzZXRNZWFzdXJlbWVudCIsInZhbHVlIiwidW5pdCIsInNldE1ldGFkYXRhIiwibmV3TWV0YWRhdGEiLCJmaW5pc2giLCJlbmRUaW1lc3RhbXAiLCJfZmluaXNoVHJhbnNhY3Rpb24iLCJ1bmRlZmluZWQiLCJjYXB0dXJlRXZlbnQiLCJ0b0NvbnRleHQiLCJzcGFuQ29udGV4dCIsInVwZGF0ZVdpdGhDb250ZXh0IiwiZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dCIsImNsaWVudCIsImdldENsaWVudCIsInNjb3BlIiwiZ2V0U2NvcGUiLCJkc2MiLCJ0cmFjZUlkIiwibWF5YmVTYW1wbGVSYXRlIiwic2FtcGxlUmF0ZSIsInNhbXBsZV9yYXRlIiwic2FtcGxlZCIsIlN0cmluZyIsInNldEh1YiIsIndhcm4iLCJlbWl0IiwibG9nIiwicmVjb3JkRHJvcHBlZEV2ZW50IiwiZmluaXNoZWRTcGFucyIsInNwYW5zIiwiZmlsdGVyIiwicyIsImxlbmd0aCIsInJlZHVjZSIsInByZXYiLCJjdXJyZW50IiwiY29udGV4dHMiLCJ0cmFjZSIsImdldFRyYWNlQ29udGV4dCIsInN0YXJ0X3RpbWVzdGFtcCIsInN0YXJ0VGltZXN0YW1wIiwidGFncyIsInRpbWVzdGFtcCIsInR5cGUiLCJzZGtQcm9jZXNzaW5nTWV0YWRhdGEiLCJ0cmFuc2FjdGlvbl9pbmZvIiwiaGFzTWVhc3VyZW1lbnRzIiwiT2JqZWN0Iiwia2V5cyIsIkpTT04iLCJzdHJpbmdpZnkiLCJtZWFzdXJlbWVudHMiLCJvcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/tracing/transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/tracing/utils.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/esm/tracing/utils.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractTraceparentData: () => (/* binding */ extractTraceparentData),\n/* harmony export */   getActiveTransaction: () => (/* binding */ getActiveTransaction),\n/* harmony export */   stripUrlQueryAndFragment: () => (/* reexport safe */ _sentry_utils__WEBPACK_IMPORTED_MODULE_0__.stripUrlQueryAndFragment)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/tracing.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/url.js\");\n/* harmony import */ var _hub_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hub.js */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n\n\n\n/** Grabs active transaction off scope, if any */ function getActiveTransaction(maybeHub) {\n    const hub = maybeHub || (0,_hub_js__WEBPACK_IMPORTED_MODULE_1__.getCurrentHub)();\n    const scope = hub.getScope();\n    return scope.getTransaction();\n}\n/**\n * The `extractTraceparentData` function and `TRACEPARENT_REGEXP` constant used\n * to be declared in this file. It was later moved into `@sentry/utils` as part of a\n * move to remove `@sentry/tracing` dependencies from `@sentry/node` (`extractTraceparentData`\n * is the only tracing function used by `@sentry/node`).\n *\n * These exports are kept here for backwards compatability's sake.\n *\n * See https://github.com/getsentry/sentry-javascript/issues/4642 for more details.\n *\n * @deprecated Import this function from `@sentry/utils` instead\n */ const extractTraceparentData = _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.extractTraceparentData;\n //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS90cmFjaW5nL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFtRjtBQUMxQjtBQUNmO0FBRTFDLCtDQUErQyxHQUMvQyxTQUFTSSxxQkFBcUJDLFFBQVE7SUFDcEMsTUFBTUMsTUFBTUQsWUFBWUYsc0RBQWFBO0lBQ3JDLE1BQU1JLFFBQVFELElBQUlFLFFBQVE7SUFDMUIsT0FBT0QsTUFBTUUsY0FBYztBQUM3QjtBQUVBOzs7Ozs7Ozs7OztDQVdDLEdBQ0QsTUFBTVQseUJBQXlCQyxpRUFBd0JBO0FBRUMsQ0FDeEQsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vdHJhY2luZy91dGlscy5qcz9lNjA1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4dHJhY3RUcmFjZXBhcmVudERhdGEgYXMgZXh0cmFjdFRyYWNlcGFyZW50RGF0YSQxIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5leHBvcnQgeyBzdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IGdldEN1cnJlbnRIdWIgfSBmcm9tICcuLi9odWIuanMnO1xuXG4vKiogR3JhYnMgYWN0aXZlIHRyYW5zYWN0aW9uIG9mZiBzY29wZSwgaWYgYW55ICovXG5mdW5jdGlvbiBnZXRBY3RpdmVUcmFuc2FjdGlvbihtYXliZUh1Yikge1xuICBjb25zdCBodWIgPSBtYXliZUh1YiB8fCBnZXRDdXJyZW50SHViKCk7XG4gIGNvbnN0IHNjb3BlID0gaHViLmdldFNjb3BlKCk7XG4gIHJldHVybiBzY29wZS5nZXRUcmFuc2FjdGlvbigpIDtcbn1cblxuLyoqXG4gKiBUaGUgYGV4dHJhY3RUcmFjZXBhcmVudERhdGFgIGZ1bmN0aW9uIGFuZCBgVFJBQ0VQQVJFTlRfUkVHRVhQYCBjb25zdGFudCB1c2VkXG4gKiB0byBiZSBkZWNsYXJlZCBpbiB0aGlzIGZpbGUuIEl0IHdhcyBsYXRlciBtb3ZlZCBpbnRvIGBAc2VudHJ5L3V0aWxzYCBhcyBwYXJ0IG9mIGFcbiAqIG1vdmUgdG8gcmVtb3ZlIGBAc2VudHJ5L3RyYWNpbmdgIGRlcGVuZGVuY2llcyBmcm9tIGBAc2VudHJ5L25vZGVgIChgZXh0cmFjdFRyYWNlcGFyZW50RGF0YWBcbiAqIGlzIHRoZSBvbmx5IHRyYWNpbmcgZnVuY3Rpb24gdXNlZCBieSBgQHNlbnRyeS9ub2RlYCkuXG4gKlxuICogVGhlc2UgZXhwb3J0cyBhcmUga2VwdCBoZXJlIGZvciBiYWNrd2FyZHMgY29tcGF0YWJpbGl0eSdzIHNha2UuXG4gKlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvaXNzdWVzLzQ2NDIgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAZGVwcmVjYXRlZCBJbXBvcnQgdGhpcyBmdW5jdGlvbiBmcm9tIGBAc2VudHJ5L3V0aWxzYCBpbnN0ZWFkXG4gKi9cbmNvbnN0IGV4dHJhY3RUcmFjZXBhcmVudERhdGEgPSBleHRyYWN0VHJhY2VwYXJlbnREYXRhJDE7XG5cbmV4cG9ydCB7IGV4dHJhY3RUcmFjZXBhcmVudERhdGEsIGdldEFjdGl2ZVRyYW5zYWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJleHRyYWN0VHJhY2VwYXJlbnREYXRhIiwiZXh0cmFjdFRyYWNlcGFyZW50RGF0YSQxIiwic3RyaXBVcmxRdWVyeUFuZEZyYWdtZW50IiwiZ2V0Q3VycmVudEh1YiIsImdldEFjdGl2ZVRyYW5zYWN0aW9uIiwibWF5YmVIdWIiLCJodWIiLCJzY29wZSIsImdldFNjb3BlIiwiZ2V0VHJhbnNhY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/tracing/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/transports/base.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/core/esm/transports/base.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_TRANSPORT_BUFFER_SIZE: () => (/* binding */ DEFAULT_TRANSPORT_BUFFER_SIZE),\n/* harmony export */   createTransport: () => (/* binding */ createTransport)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/promisebuffer.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/envelope.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/ratelimit.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/syncpromise.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/error.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/core/esm/debug-build.js\");\n\n\nconst DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */ function createTransport(options, makeRequest, buffer = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.makePromiseBuffer)(options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE)) {\n    let rateLimits = {};\n    const flush = (timeout)=>buffer.drain(timeout);\n    function send(envelope) {\n        const filteredEnvelopeItems = [];\n        // Drop rate limited items from envelope\n        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.forEachEnvelopeItem)(envelope, (item, type)=>{\n            const envelopeItemDataCategory = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.envelopeItemTypeToDataCategory)(type);\n            if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.isRateLimited)(rateLimits, envelopeItemDataCategory)) {\n                const event = getEventForEnvelopeItem(item, type);\n                options.recordDroppedEvent(\"ratelimit_backoff\", envelopeItemDataCategory, event);\n            } else {\n                filteredEnvelopeItems.push(item);\n            }\n        });\n        // Skip sending if envelope is empty after filtering out rate limited events\n        if (filteredEnvelopeItems.length === 0) {\n            return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.resolvedSyncPromise)();\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const filteredEnvelope = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.createEnvelope)(envelope[0], filteredEnvelopeItems);\n        // Creates client report for each item in an envelope\n        const recordEnvelopeLoss = (reason)=>{\n            (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.forEachEnvelopeItem)(filteredEnvelope, (item, type)=>{\n                const event = getEventForEnvelopeItem(item, type);\n                options.recordDroppedEvent(reason, (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.envelopeItemTypeToDataCategory)(type), event);\n            });\n        };\n        const requestTask = ()=>makeRequest({\n                body: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.serializeEnvelope)(filteredEnvelope, options.textEncoder)\n            }).then((response)=>{\n                // We don't want to throw on NOK responses, but we want to at least log them\n                if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n                    _debug_build_js__WEBPACK_IMPORTED_MODULE_4__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n                }\n                rateLimits = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.updateRateLimits)(rateLimits, response);\n                return response;\n            }, (error)=>{\n                recordEnvelopeLoss(\"network_error\");\n                throw error;\n            });\n        return buffer.add(requestTask).then((result)=>result, (error)=>{\n            if (error instanceof _sentry_utils__WEBPACK_IMPORTED_MODULE_6__.SentryError) {\n                _debug_build_js__WEBPACK_IMPORTED_MODULE_4__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Skipped sending event because buffer is full.\");\n                recordEnvelopeLoss(\"queue_overflow\");\n                return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.resolvedSyncPromise)();\n            } else {\n                throw error;\n            }\n        });\n    }\n    // We use this to identifify if the transport is the base transport\n    // TODO (v8): Remove this again as we'll no longer need it\n    send.__sentry__baseTransport__ = true;\n    return {\n        send,\n        flush\n    };\n}\nfunction getEventForEnvelopeItem(item, type) {\n    if (type !== \"event\" && type !== \"transaction\") {\n        return undefined;\n    }\n    return Array.isArray(item) ? item[1] : undefined;\n}\n //# sourceMappingURL=base.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS90cmFuc3BvcnRzL2Jhc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQXFOO0FBQ3JLO0FBRWhELE1BQU1XLGdDQUFnQztBQUV0Qzs7Ozs7Q0FLQyxHQUNELFNBQVNDLGdCQUNQQyxPQUFPLEVBQ1BDLFdBQVcsRUFDWEMsU0FBU2YsZ0VBQWlCQSxDQUN4QmEsUUFBUUcsVUFBVSxJQUFJTCw4QkFDdkI7SUFFRCxJQUFJTSxhQUFhLENBQUM7SUFDbEIsTUFBTUMsUUFBUSxDQUFDQyxVQUFZSixPQUFPSyxLQUFLLENBQUNEO0lBRXhDLFNBQVNFLEtBQUtDLFFBQVE7UUFDcEIsTUFBTUMsd0JBQXdCLEVBQUU7UUFFaEMsd0NBQXdDO1FBQ3hDdEIsa0VBQW1CQSxDQUFDcUIsVUFBVSxDQUFDRSxNQUFNQztZQUNuQyxNQUFNQywyQkFBMkJ4Qiw2RUFBOEJBLENBQUN1QjtZQUNoRSxJQUFJdEIsNERBQWFBLENBQUNjLFlBQVlTLDJCQUEyQjtnQkFDdkQsTUFBTUMsUUFBUUMsd0JBQXdCSixNQUFNQztnQkFDNUNaLFFBQVFnQixrQkFBa0IsQ0FBQyxxQkFBcUJILDBCQUEwQkM7WUFDNUUsT0FBTztnQkFDTEosc0JBQXNCTyxJQUFJLENBQUNOO1lBQzdCO1FBQ0Y7UUFFQSw0RUFBNEU7UUFDNUUsSUFBSUQsc0JBQXNCUSxNQUFNLEtBQUssR0FBRztZQUN0QyxPQUFPM0Isa0VBQW1CQTtRQUM1QjtRQUVBLDhEQUE4RDtRQUM5RCxNQUFNNEIsbUJBQW1CM0IsNkRBQWNBLENBQUNpQixRQUFRLENBQUMsRUFBRSxFQUFFQztRQUVyRCxxREFBcUQ7UUFDckQsTUFBTVUscUJBQXFCLENBQUNDO1lBQzFCakMsa0VBQW1CQSxDQUFDK0Isa0JBQWtCLENBQUNSLE1BQU1DO2dCQUMzQyxNQUFNRSxRQUFRQyx3QkFBd0JKLE1BQU1DO2dCQUM1Q1osUUFBUWdCLGtCQUFrQixDQUFDSyxRQUFRaEMsNkVBQThCQSxDQUFDdUIsT0FBT0U7WUFDM0U7UUFDRjtRQUVBLE1BQU1RLGNBQWMsSUFDbEJyQixZQUFZO2dCQUFFc0IsTUFBTTVCLGdFQUFpQkEsQ0FBQ3dCLGtCQUFrQm5CLFFBQVF3QixXQUFXO1lBQUUsR0FBR0MsSUFBSSxDQUNsRkMsQ0FBQUE7Z0JBQ0UsNEVBQTRFO2dCQUM1RSxJQUFJQSxTQUFTQyxVQUFVLEtBQUtDLGFBQWNGLENBQUFBLFNBQVNDLFVBQVUsR0FBRyxPQUFPRCxTQUFTQyxVQUFVLElBQUksR0FBRSxHQUFJO29CQUNsRzlCLHdEQUFXQSxJQUFJSCxpREFBTUEsQ0FBQ21DLElBQUksQ0FBQyxDQUFDLGtDQUFrQyxFQUFFSCxTQUFTQyxVQUFVLENBQUMsZUFBZSxDQUFDO2dCQUN0RztnQkFFQXZCLGFBQWFSLCtEQUFnQkEsQ0FBQ1EsWUFBWXNCO2dCQUMxQyxPQUFPQTtZQUNULEdBQ0FJLENBQUFBO2dCQUNFVixtQkFBbUI7Z0JBQ25CLE1BQU1VO1lBQ1I7UUFHSixPQUFPNUIsT0FBTzZCLEdBQUcsQ0FBQ1QsYUFBYUcsSUFBSSxDQUNqQ08sQ0FBQUEsU0FBVUEsUUFDVkYsQ0FBQUE7WUFDRSxJQUFJQSxpQkFBaUJyQyxzREFBV0EsRUFBRTtnQkFDaENJLHdEQUFXQSxJQUFJSCxpREFBTUEsQ0FBQ29DLEtBQUssQ0FBQztnQkFDNUJWLG1CQUFtQjtnQkFDbkIsT0FBTzdCLGtFQUFtQkE7WUFDNUIsT0FBTztnQkFDTCxNQUFNdUM7WUFDUjtRQUNGO0lBRUo7SUFFQSxtRUFBbUU7SUFDbkUsMERBQTBEO0lBQzFEdEIsS0FBS3lCLHlCQUF5QixHQUFHO0lBRWpDLE9BQU87UUFDTHpCO1FBQ0FIO0lBQ0Y7QUFDRjtBQUVBLFNBQVNVLHdCQUF3QkosSUFBSSxFQUFFQyxJQUFJO0lBQ3pDLElBQUlBLFNBQVMsV0FBV0EsU0FBUyxlQUFlO1FBQzlDLE9BQU9nQjtJQUNUO0lBRUEsT0FBT00sTUFBTUMsT0FBTyxDQUFDeEIsUUFBUSxJQUFPLENBQUMsRUFBRSxHQUFHaUI7QUFDNUM7QUFFMEQsQ0FDMUQsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vdHJhbnNwb3J0cy9iYXNlLmpzPzZjZWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWFrZVByb21pc2VCdWZmZXIsIGZvckVhY2hFbnZlbG9wZUl0ZW0sIGVudmVsb3BlSXRlbVR5cGVUb0RhdGFDYXRlZ29yeSwgaXNSYXRlTGltaXRlZCwgcmVzb2x2ZWRTeW5jUHJvbWlzZSwgY3JlYXRlRW52ZWxvcGUsIFNlbnRyeUVycm9yLCBsb2dnZXIsIHNlcmlhbGl6ZUVudmVsb3BlLCB1cGRhdGVSYXRlTGltaXRzIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBERUJVR19CVUlMRCB9IGZyb20gJy4uL2RlYnVnLWJ1aWxkLmpzJztcblxuY29uc3QgREVGQVVMVF9UUkFOU1BPUlRfQlVGRkVSX1NJWkUgPSAzMDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGEgU2VudHJ5IGBUcmFuc3BvcnRgXG4gKlxuICogQHBhcmFtIG9wdGlvbnNcbiAqIEBwYXJhbSBtYWtlUmVxdWVzdFxuICovXG5mdW5jdGlvbiBjcmVhdGVUcmFuc3BvcnQoXG4gIG9wdGlvbnMsXG4gIG1ha2VSZXF1ZXN0LFxuICBidWZmZXIgPSBtYWtlUHJvbWlzZUJ1ZmZlcihcbiAgICBvcHRpb25zLmJ1ZmZlclNpemUgfHwgREVGQVVMVF9UUkFOU1BPUlRfQlVGRkVSX1NJWkUsXG4gICksXG4pIHtcbiAgbGV0IHJhdGVMaW1pdHMgPSB7fTtcbiAgY29uc3QgZmx1c2ggPSAodGltZW91dCkgPT4gYnVmZmVyLmRyYWluKHRpbWVvdXQpO1xuXG4gIGZ1bmN0aW9uIHNlbmQoZW52ZWxvcGUpIHtcbiAgICBjb25zdCBmaWx0ZXJlZEVudmVsb3BlSXRlbXMgPSBbXTtcblxuICAgIC8vIERyb3AgcmF0ZSBsaW1pdGVkIGl0ZW1zIGZyb20gZW52ZWxvcGVcbiAgICBmb3JFYWNoRW52ZWxvcGVJdGVtKGVudmVsb3BlLCAoaXRlbSwgdHlwZSkgPT4ge1xuICAgICAgY29uc3QgZW52ZWxvcGVJdGVtRGF0YUNhdGVnb3J5ID0gZW52ZWxvcGVJdGVtVHlwZVRvRGF0YUNhdGVnb3J5KHR5cGUpO1xuICAgICAgaWYgKGlzUmF0ZUxpbWl0ZWQocmF0ZUxpbWl0cywgZW52ZWxvcGVJdGVtRGF0YUNhdGVnb3J5KSkge1xuICAgICAgICBjb25zdCBldmVudCA9IGdldEV2ZW50Rm9yRW52ZWxvcGVJdGVtKGl0ZW0sIHR5cGUpO1xuICAgICAgICBvcHRpb25zLnJlY29yZERyb3BwZWRFdmVudCgncmF0ZWxpbWl0X2JhY2tvZmYnLCBlbnZlbG9wZUl0ZW1EYXRhQ2F0ZWdvcnksIGV2ZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpbHRlcmVkRW52ZWxvcGVJdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gU2tpcCBzZW5kaW5nIGlmIGVudmVsb3BlIGlzIGVtcHR5IGFmdGVyIGZpbHRlcmluZyBvdXQgcmF0ZSBsaW1pdGVkIGV2ZW50c1xuICAgIGlmIChmaWx0ZXJlZEVudmVsb3BlSXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZWRTeW5jUHJvbWlzZSgpO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgZmlsdGVyZWRFbnZlbG9wZSA9IGNyZWF0ZUVudmVsb3BlKGVudmVsb3BlWzBdLCBmaWx0ZXJlZEVudmVsb3BlSXRlbXMgKTtcblxuICAgIC8vIENyZWF0ZXMgY2xpZW50IHJlcG9ydCBmb3IgZWFjaCBpdGVtIGluIGFuIGVudmVsb3BlXG4gICAgY29uc3QgcmVjb3JkRW52ZWxvcGVMb3NzID0gKHJlYXNvbikgPT4ge1xuICAgICAgZm9yRWFjaEVudmVsb3BlSXRlbShmaWx0ZXJlZEVudmVsb3BlLCAoaXRlbSwgdHlwZSkgPT4ge1xuICAgICAgICBjb25zdCBldmVudCA9IGdldEV2ZW50Rm9yRW52ZWxvcGVJdGVtKGl0ZW0sIHR5cGUpO1xuICAgICAgICBvcHRpb25zLnJlY29yZERyb3BwZWRFdmVudChyZWFzb24sIGVudmVsb3BlSXRlbVR5cGVUb0RhdGFDYXRlZ29yeSh0eXBlKSwgZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IHJlcXVlc3RUYXNrID0gKCkgPT5cbiAgICAgIG1ha2VSZXF1ZXN0KHsgYm9keTogc2VyaWFsaXplRW52ZWxvcGUoZmlsdGVyZWRFbnZlbG9wZSwgb3B0aW9ucy50ZXh0RW5jb2RlcikgfSkudGhlbihcbiAgICAgICAgcmVzcG9uc2UgPT4ge1xuICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gdGhyb3cgb24gTk9LIHJlc3BvbnNlcywgYnV0IHdlIHdhbnQgdG8gYXQgbGVhc3QgbG9nIHRoZW1cbiAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSAhPT0gdW5kZWZpbmVkICYmIChyZXNwb25zZS5zdGF0dXNDb2RlIDwgMjAwIHx8IHJlc3BvbnNlLnN0YXR1c0NvZGUgPj0gMzAwKSkge1xuICAgICAgICAgICAgREVCVUdfQlVJTEQgJiYgbG9nZ2VyLndhcm4oYFNlbnRyeSByZXNwb25kZWQgd2l0aCBzdGF0dXMgY29kZSAke3Jlc3BvbnNlLnN0YXR1c0NvZGV9IHRvIHNlbnQgZXZlbnQuYCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmF0ZUxpbWl0cyA9IHVwZGF0ZVJhdGVMaW1pdHMocmF0ZUxpbWl0cywgcmVzcG9uc2UpO1xuICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgIHJlY29yZEVudmVsb3BlTG9zcygnbmV0d29ya19lcnJvcicpO1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9LFxuICAgICAgKTtcblxuICAgIHJldHVybiBidWZmZXIuYWRkKHJlcXVlc3RUYXNrKS50aGVuKFxuICAgICAgcmVzdWx0ID0+IHJlc3VsdCxcbiAgICAgIGVycm9yID0+IHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgU2VudHJ5RXJyb3IpIHtcbiAgICAgICAgICBERUJVR19CVUlMRCAmJiBsb2dnZXIuZXJyb3IoJ1NraXBwZWQgc2VuZGluZyBldmVudCBiZWNhdXNlIGJ1ZmZlciBpcyBmdWxsLicpO1xuICAgICAgICAgIHJlY29yZEVudmVsb3BlTG9zcygncXVldWVfb3ZlcmZsb3cnKTtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZWRTeW5jUHJvbWlzZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICk7XG4gIH1cblxuICAvLyBXZSB1c2UgdGhpcyB0byBpZGVudGlmaWZ5IGlmIHRoZSB0cmFuc3BvcnQgaXMgdGhlIGJhc2UgdHJhbnNwb3J0XG4gIC8vIFRPRE8gKHY4KTogUmVtb3ZlIHRoaXMgYWdhaW4gYXMgd2UnbGwgbm8gbG9uZ2VyIG5lZWQgaXRcbiAgc2VuZC5fX3NlbnRyeV9fYmFzZVRyYW5zcG9ydF9fID0gdHJ1ZTtcblxuICByZXR1cm4ge1xuICAgIHNlbmQsXG4gICAgZmx1c2gsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEV2ZW50Rm9yRW52ZWxvcGVJdGVtKGl0ZW0sIHR5cGUpIHtcbiAgaWYgKHR5cGUgIT09ICdldmVudCcgJiYgdHlwZSAhPT0gJ3RyYW5zYWN0aW9uJykge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4gQXJyYXkuaXNBcnJheShpdGVtKSA/IChpdGVtIClbMV0gOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCB7IERFRkFVTFRfVFJBTlNQT1JUX0JVRkZFUl9TSVpFLCBjcmVhdGVUcmFuc3BvcnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UuanMubWFwXG4iXSwibmFtZXMiOlsibWFrZVByb21pc2VCdWZmZXIiLCJmb3JFYWNoRW52ZWxvcGVJdGVtIiwiZW52ZWxvcGVJdGVtVHlwZVRvRGF0YUNhdGVnb3J5IiwiaXNSYXRlTGltaXRlZCIsInJlc29sdmVkU3luY1Byb21pc2UiLCJjcmVhdGVFbnZlbG9wZSIsIlNlbnRyeUVycm9yIiwibG9nZ2VyIiwic2VyaWFsaXplRW52ZWxvcGUiLCJ1cGRhdGVSYXRlTGltaXRzIiwiREVCVUdfQlVJTEQiLCJERUZBVUxUX1RSQU5TUE9SVF9CVUZGRVJfU0laRSIsImNyZWF0ZVRyYW5zcG9ydCIsIm9wdGlvbnMiLCJtYWtlUmVxdWVzdCIsImJ1ZmZlciIsImJ1ZmZlclNpemUiLCJyYXRlTGltaXRzIiwiZmx1c2giLCJ0aW1lb3V0IiwiZHJhaW4iLCJzZW5kIiwiZW52ZWxvcGUiLCJmaWx0ZXJlZEVudmVsb3BlSXRlbXMiLCJpdGVtIiwidHlwZSIsImVudmVsb3BlSXRlbURhdGFDYXRlZ29yeSIsImV2ZW50IiwiZ2V0RXZlbnRGb3JFbnZlbG9wZUl0ZW0iLCJyZWNvcmREcm9wcGVkRXZlbnQiLCJwdXNoIiwibGVuZ3RoIiwiZmlsdGVyZWRFbnZlbG9wZSIsInJlY29yZEVudmVsb3BlTG9zcyIsInJlYXNvbiIsInJlcXVlc3RUYXNrIiwiYm9keSIsInRleHRFbmNvZGVyIiwidGhlbiIsInJlc3BvbnNlIiwic3RhdHVzQ29kZSIsInVuZGVmaW5lZCIsIndhcm4iLCJlcnJvciIsImFkZCIsInJlc3VsdCIsIl9fc2VudHJ5X19iYXNlVHJhbnNwb3J0X18iLCJBcnJheSIsImlzQXJyYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/transports/base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/utils/hasTracingEnabled.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/utils/hasTracingEnabled.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasTracingEnabled: () => (/* binding */ hasTracingEnabled)\n/* harmony export */ });\n/* harmony import */ var _exports_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../exports.js */ \"(ssr)/./node_modules/@sentry/core/esm/exports.js\");\n\n// Treeshakable guard to remove all code related to tracing\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */ function hasTracingEnabled(maybeOptions) {\n    if (typeof __SENTRY_TRACING__ === \"boolean\" && !__SENTRY_TRACING__) {\n        return false;\n    }\n    const client = (0,_exports_js__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n    const options = maybeOptions || client && client.getOptions();\n    return !!options && (options.enableTracing || \"tracesSampleRate\" in options || \"tracesSampler\" in options);\n}\n //# sourceMappingURL=hasTracingEnabled.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS91dGlscy9oYXNUcmFjaW5nRW5hYmxlZC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwQztBQUUxQywyREFBMkQ7QUFFM0Q7Ozs7Q0FJQyxHQUNELFNBQVNDLGtCQUNQQyxZQUFZO0lBRVosSUFBSSxPQUFPQyx1QkFBdUIsYUFBYSxDQUFDQSxvQkFBb0I7UUFDbEUsT0FBTztJQUNUO0lBRUEsTUFBTUMsU0FBU0osc0RBQVNBO0lBQ3hCLE1BQU1LLFVBQVVILGdCQUFpQkUsVUFBVUEsT0FBT0UsVUFBVTtJQUM1RCxPQUFPLENBQUMsQ0FBQ0QsV0FBWUEsQ0FBQUEsUUFBUUUsYUFBYSxJQUFJLHNCQUFzQkYsV0FBVyxtQkFBbUJBLE9BQU07QUFDMUc7QUFFNkIsQ0FDN0IsNkNBQTZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vdXRpbHMvaGFzVHJhY2luZ0VuYWJsZWQuanM/ZDM5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDbGllbnQgfSBmcm9tICcuLi9leHBvcnRzLmpzJztcblxuLy8gVHJlZXNoYWthYmxlIGd1YXJkIHRvIHJlbW92ZSBhbGwgY29kZSByZWxhdGVkIHRvIHRyYWNpbmdcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRyYWNpbmcgaXMgY3VycmVudGx5IGVuYWJsZWQuXG4gKlxuICogVHJhY2luZyBpcyBlbmFibGVkIHdoZW4gYXQgbGVhc3Qgb25lIG9mIGB0cmFjZXNTYW1wbGVSYXRlYCBhbmQgYHRyYWNlc1NhbXBsZXJgIGlzIGRlZmluZWQgaW4gdGhlIFNESyBjb25maWcuXG4gKi9cbmZ1bmN0aW9uIGhhc1RyYWNpbmdFbmFibGVkKFxuICBtYXliZU9wdGlvbnMsXG4pIHtcbiAgaWYgKHR5cGVvZiBfX1NFTlRSWV9UUkFDSU5HX18gPT09ICdib29sZWFuJyAmJiAhX19TRU5UUllfVFJBQ0lOR19fKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XG4gIGNvbnN0IG9wdGlvbnMgPSBtYXliZU9wdGlvbnMgfHwgKGNsaWVudCAmJiBjbGllbnQuZ2V0T3B0aW9ucygpKTtcbiAgcmV0dXJuICEhb3B0aW9ucyAmJiAob3B0aW9ucy5lbmFibGVUcmFjaW5nIHx8ICd0cmFjZXNTYW1wbGVSYXRlJyBpbiBvcHRpb25zIHx8ICd0cmFjZXNTYW1wbGVyJyBpbiBvcHRpb25zKTtcbn1cblxuZXhwb3J0IHsgaGFzVHJhY2luZ0VuYWJsZWQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhc1RyYWNpbmdFbmFibGVkLmpzLm1hcFxuIl0sIm5hbWVzIjpbImdldENsaWVudCIsImhhc1RyYWNpbmdFbmFibGVkIiwibWF5YmVPcHRpb25zIiwiX19TRU5UUllfVFJBQ0lOR19fIiwiY2xpZW50Iiwib3B0aW9ucyIsImdldE9wdGlvbnMiLCJlbmFibGVUcmFjaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/utils/hasTracingEnabled.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/utils/isSentryRequestUrl.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/utils/isSentryRequestUrl.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSentryRequestUrl: () => (/* binding */ isSentryRequestUrl)\n/* harmony export */ });\n/**\n * Checks whether given url points to Sentry server\n * @param url url to verify\n */ function isSentryRequestUrl(url, hub) {\n    const client = hub.getClient();\n    const dsn = client && client.getDsn();\n    const tunnel = client && client.getOptions().tunnel;\n    return checkDsn(url, dsn) || checkTunnel(url, tunnel);\n}\nfunction checkTunnel(url, tunnel) {\n    if (!tunnel) {\n        return false;\n    }\n    return removeTrailingSlash(url) === removeTrailingSlash(tunnel);\n}\nfunction checkDsn(url, dsn) {\n    return dsn ? url.includes(dsn.host) : false;\n}\nfunction removeTrailingSlash(str) {\n    return str[str.length - 1] === \"/\" ? str.slice(0, -1) : str;\n}\n //# sourceMappingURL=isSentryRequestUrl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS91dGlscy9pc1NlbnRyeVJlcXVlc3RVcmwuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Q0FHQyxHQUNELFNBQVNBLG1CQUFtQkMsR0FBRyxFQUFFQyxHQUFHO0lBQ2xDLE1BQU1DLFNBQVNELElBQUlFLFNBQVM7SUFDNUIsTUFBTUMsTUFBTUYsVUFBVUEsT0FBT0csTUFBTTtJQUNuQyxNQUFNQyxTQUFTSixVQUFVQSxPQUFPSyxVQUFVLEdBQUdELE1BQU07SUFFbkQsT0FBT0UsU0FBU1IsS0FBS0ksUUFBUUssWUFBWVQsS0FBS007QUFDaEQ7QUFFQSxTQUFTRyxZQUFZVCxHQUFHLEVBQUVNLE1BQU07SUFDOUIsSUFBSSxDQUFDQSxRQUFRO1FBQ1gsT0FBTztJQUNUO0lBRUEsT0FBT0ksb0JBQW9CVixTQUFTVSxvQkFBb0JKO0FBQzFEO0FBRUEsU0FBU0UsU0FBU1IsR0FBRyxFQUFFSSxHQUFHO0lBQ3hCLE9BQU9BLE1BQU1KLElBQUlXLFFBQVEsQ0FBQ1AsSUFBSVEsSUFBSSxJQUFJO0FBQ3hDO0FBRUEsU0FBU0Ysb0JBQW9CRyxHQUFHO0lBQzlCLE9BQU9BLEdBQUcsQ0FBQ0EsSUFBSUMsTUFBTSxHQUFHLEVBQUUsS0FBSyxNQUFNRCxJQUFJRSxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUtGO0FBQzFEO0FBRThCLENBQzlCLDhDQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZXNtL3V0aWxzL2lzU2VudHJ5UmVxdWVzdFVybC5qcz85YmU3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdXJsIHBvaW50cyB0byBTZW50cnkgc2VydmVyXG4gKiBAcGFyYW0gdXJsIHVybCB0byB2ZXJpZnlcbiAqL1xuZnVuY3Rpb24gaXNTZW50cnlSZXF1ZXN0VXJsKHVybCwgaHViKSB7XG4gIGNvbnN0IGNsaWVudCA9IGh1Yi5nZXRDbGllbnQoKTtcbiAgY29uc3QgZHNuID0gY2xpZW50ICYmIGNsaWVudC5nZXREc24oKTtcbiAgY29uc3QgdHVubmVsID0gY2xpZW50ICYmIGNsaWVudC5nZXRPcHRpb25zKCkudHVubmVsO1xuXG4gIHJldHVybiBjaGVja0Rzbih1cmwsIGRzbikgfHwgY2hlY2tUdW5uZWwodXJsLCB0dW5uZWwpO1xufVxuXG5mdW5jdGlvbiBjaGVja1R1bm5lbCh1cmwsIHR1bm5lbCkge1xuICBpZiAoIXR1bm5lbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiByZW1vdmVUcmFpbGluZ1NsYXNoKHVybCkgPT09IHJlbW92ZVRyYWlsaW5nU2xhc2godHVubmVsKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tEc24odXJsLCBkc24pIHtcbiAgcmV0dXJuIGRzbiA/IHVybC5pbmNsdWRlcyhkc24uaG9zdCkgOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlVHJhaWxpbmdTbGFzaChzdHIpIHtcbiAgcmV0dXJuIHN0cltzdHIubGVuZ3RoIC0gMV0gPT09ICcvJyA/IHN0ci5zbGljZSgwLCAtMSkgOiBzdHI7XG59XG5cbmV4cG9ydCB7IGlzU2VudHJ5UmVxdWVzdFVybCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNTZW50cnlSZXF1ZXN0VXJsLmpzLm1hcFxuIl0sIm5hbWVzIjpbImlzU2VudHJ5UmVxdWVzdFVybCIsInVybCIsImh1YiIsImNsaWVudCIsImdldENsaWVudCIsImRzbiIsImdldERzbiIsInR1bm5lbCIsImdldE9wdGlvbnMiLCJjaGVja0RzbiIsImNoZWNrVHVubmVsIiwicmVtb3ZlVHJhaWxpbmdTbGFzaCIsImluY2x1ZGVzIiwiaG9zdCIsInN0ciIsImxlbmd0aCIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/utils/isSentryRequestUrl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/utils/prepareEvent.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/core/esm/utils/prepareEvent.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyDebugIds: () => (/* binding */ applyDebugIds),\n/* harmony export */   applyDebugMeta: () => (/* binding */ applyDebugMeta),\n/* harmony export */   parseEventHintOrCaptureContext: () => (/* binding */ parseEventHintOrCaptureContext),\n/* harmony export */   prepareEvent: () => (/* binding */ prepareEvent)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/time.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/syncpromise.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/string.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/worldwide.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/normalize.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constants.js */ \"(ssr)/./node_modules/@sentry/core/esm/constants.js\");\n/* harmony import */ var _eventProcessors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../eventProcessors.js */ \"(ssr)/./node_modules/@sentry/core/esm/eventProcessors.js\");\n/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../scope.js */ \"(ssr)/./node_modules/@sentry/core/esm/scope.js\");\n\n\n\n\n/**\n * This type makes sure that we get either a CaptureContext, OR an EventHint.\n * It does not allow mixing them, which could lead to unexpected outcomes, e.g. this is disallowed:\n * { user: { id: '123' }, mechanism: { handled: false } }\n */ /**\n * Adds common information to events.\n *\n * The information includes release and environment from `options`,\n * breadcrumbs and context (extra, tags and user) from the scope.\n *\n * Information that is already present in the event is never overwritten. For\n * nested objects, such as the context, keys are merged.\n *\n * Note: This also triggers callbacks for `addGlobalEventProcessor`, but not `beforeSend`.\n *\n * @param event The original event.\n * @param hint May contain additional information about the original exception.\n * @param scope A scope containing event metadata.\n * @returns A new event with more information.\n * @hidden\n */ function prepareEvent(options, event, hint, scope, client) {\n    const { normalizeDepth = 3, normalizeMaxBreadth = 1000 } = options;\n    const prepared = {\n        ...event,\n        event_id: event.event_id || hint.event_id || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.uuid4)(),\n        timestamp: event.timestamp || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.dateTimestampInSeconds)()\n    };\n    const integrations = hint.integrations || options.integrations.map((i)=>i.name);\n    applyClientOptions(prepared, options);\n    applyIntegrationsMetadata(prepared, integrations);\n    // Only put debug IDs onto frames for error events.\n    if (event.type === undefined) {\n        applyDebugIds(prepared, options.stackParser);\n    }\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    const finalScope = getFinalScope(scope, hint.captureContext);\n    if (hint.mechanism) {\n        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.addExceptionMechanism)(prepared, hint.mechanism);\n    }\n    // We prepare the result here with a resolved Event.\n    let result = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.resolvedSyncPromise)(prepared);\n    const clientEventProcessors = client && client.getEventProcessors ? client.getEventProcessors() : [];\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    //\n    // We need to check for the existence of `finalScope.getAttachments`\n    // because `getAttachments` can be undefined if users are using an older version\n    // of `@sentry/core` that does not have the `getAttachments` method.\n    // See: https://github.com/getsentry/sentry-javascript/issues/5229\n    if (finalScope) {\n        // Collect attachments from the hint and scope\n        if (finalScope.getAttachments) {\n            const attachments = [\n                ...hint.attachments || [],\n                ...finalScope.getAttachments()\n            ];\n            if (attachments.length) {\n                hint.attachments = attachments;\n            }\n        }\n        // In case we have a hub we reassign it.\n        result = finalScope.applyToEvent(prepared, hint, clientEventProcessors);\n    } else {\n        // Apply client & global event processors even if there is no scope\n        // TODO (v8): Update the order to be Global > Client\n        result = (0,_eventProcessors_js__WEBPACK_IMPORTED_MODULE_3__.notifyEventProcessors)([\n            ...clientEventProcessors,\n            // eslint-disable-next-line deprecation/deprecation\n            ...(0,_eventProcessors_js__WEBPACK_IMPORTED_MODULE_3__.getGlobalEventProcessors)()\n        ], prepared, hint);\n    }\n    return result.then((evt)=>{\n        if (evt) {\n            // We apply the debug_meta field only after all event processors have ran, so that if any event processors modified\n            // file names (e.g.the RewriteFrames integration) the filename -> debug ID relationship isn't destroyed.\n            // This should not cause any PII issues, since we're only moving data that is already on the event and not adding\n            // any new data\n            applyDebugMeta(evt);\n        }\n        if (typeof normalizeDepth === \"number\" && normalizeDepth > 0) {\n            return normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n        }\n        return evt;\n    });\n}\n/**\n *  Enhances event using the client configuration.\n *  It takes care of all \"static\" values like environment, release and `dist`,\n *  as well as truncating overly long values.\n * @param event event instance to be enhanced\n */ function applyClientOptions(event, options) {\n    const { environment, release, dist, maxValueLength = 250 } = options;\n    if (!(\"environment\" in event)) {\n        event.environment = \"environment\" in options ? environment : _constants_js__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_ENVIRONMENT;\n    }\n    if (event.release === undefined && release !== undefined) {\n        event.release = release;\n    }\n    if (event.dist === undefined && dist !== undefined) {\n        event.dist = dist;\n    }\n    if (event.message) {\n        event.message = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.truncate)(event.message, maxValueLength);\n    }\n    const exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n        exception.value = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.truncate)(exception.value, maxValueLength);\n    }\n    const request = event.request;\n    if (request && request.url) {\n        request.url = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.truncate)(request.url, maxValueLength);\n    }\n}\nconst debugIdStackParserCache = new WeakMap();\n/**\n * Puts debug IDs into the stack frames of an error event.\n */ function applyDebugIds(event, stackParser) {\n    const debugIdMap = _sentry_utils__WEBPACK_IMPORTED_MODULE_6__.GLOBAL_OBJ._sentryDebugIds;\n    if (!debugIdMap) {\n        return;\n    }\n    let debugIdStackFramesCache;\n    const cachedDebugIdStackFrameCache = debugIdStackParserCache.get(stackParser);\n    if (cachedDebugIdStackFrameCache) {\n        debugIdStackFramesCache = cachedDebugIdStackFrameCache;\n    } else {\n        debugIdStackFramesCache = new Map();\n        debugIdStackParserCache.set(stackParser, debugIdStackFramesCache);\n    }\n    // Build a map of filename -> debug_id\n    const filenameDebugIdMap = Object.keys(debugIdMap).reduce((acc, debugIdStackTrace)=>{\n        let parsedStack;\n        const cachedParsedStack = debugIdStackFramesCache.get(debugIdStackTrace);\n        if (cachedParsedStack) {\n            parsedStack = cachedParsedStack;\n        } else {\n            parsedStack = stackParser(debugIdStackTrace);\n            debugIdStackFramesCache.set(debugIdStackTrace, parsedStack);\n        }\n        for(let i = parsedStack.length - 1; i >= 0; i--){\n            const stackFrame = parsedStack[i];\n            if (stackFrame.filename) {\n                acc[stackFrame.filename] = debugIdMap[debugIdStackTrace];\n                break;\n            }\n        }\n        return acc;\n    }, {});\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        event.exception.values.forEach((exception)=>{\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            exception.stacktrace.frames.forEach((frame)=>{\n                if (frame.filename) {\n                    frame.debug_id = filenameDebugIdMap[frame.filename];\n                }\n            });\n        });\n    } catch (e) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n    }\n}\n/**\n * Moves debug IDs from the stack frames of an error event into the debug_meta field.\n */ function applyDebugMeta(event) {\n    // Extract debug IDs and filenames from the stack frames on the event.\n    const filenameDebugIdMap = {};\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        event.exception.values.forEach((exception)=>{\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            exception.stacktrace.frames.forEach((frame)=>{\n                if (frame.debug_id) {\n                    if (frame.abs_path) {\n                        filenameDebugIdMap[frame.abs_path] = frame.debug_id;\n                    } else if (frame.filename) {\n                        filenameDebugIdMap[frame.filename] = frame.debug_id;\n                    }\n                    delete frame.debug_id;\n                }\n            });\n        });\n    } catch (e) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n    }\n    if (Object.keys(filenameDebugIdMap).length === 0) {\n        return;\n    }\n    // Fill debug_meta information\n    event.debug_meta = event.debug_meta || {};\n    event.debug_meta.images = event.debug_meta.images || [];\n    const images = event.debug_meta.images;\n    Object.keys(filenameDebugIdMap).forEach((filename)=>{\n        images.push({\n            type: \"sourcemap\",\n            code_file: filename,\n            debug_id: filenameDebugIdMap[filename]\n        });\n    });\n}\n/**\n * This function adds all used integrations to the SDK info in the event.\n * @param event The event that will be filled with all integrations.\n */ function applyIntegrationsMetadata(event, integrationNames) {\n    if (integrationNames.length > 0) {\n        event.sdk = event.sdk || {};\n        event.sdk.integrations = [\n            ...event.sdk.integrations || [],\n            ...integrationNames\n        ];\n    }\n}\n/**\n * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n * Normalized keys:\n * - `breadcrumbs.data`\n * - `user`\n * - `contexts`\n * - `extra`\n * @param event Event\n * @returns Normalized event\n */ function normalizeEvent(event, depth, maxBreadth) {\n    if (!event) {\n        return null;\n    }\n    const normalized = {\n        ...event,\n        ...event.breadcrumbs && {\n            breadcrumbs: event.breadcrumbs.map((b)=>({\n                    ...b,\n                    ...b.data && {\n                        data: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_7__.normalize)(b.data, depth, maxBreadth)\n                    }\n                }))\n        },\n        ...event.user && {\n            user: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_7__.normalize)(event.user, depth, maxBreadth)\n        },\n        ...event.contexts && {\n            contexts: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_7__.normalize)(event.contexts, depth, maxBreadth)\n        },\n        ...event.extra && {\n            extra: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_7__.normalize)(event.extra, depth, maxBreadth)\n        }\n    };\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace && normalized.contexts) {\n        normalized.contexts.trace = event.contexts.trace;\n        // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it\n        if (event.contexts.trace.data) {\n            normalized.contexts.trace.data = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_7__.normalize)(event.contexts.trace.data, depth, maxBreadth);\n        }\n    }\n    // event.spans[].data may contain circular/dangerous data so we need to normalize it\n    if (event.spans) {\n        normalized.spans = event.spans.map((span)=>{\n            // We cannot use the spread operator here because `toJSON` on `span` is non-enumerable\n            if (span.data) {\n                span.data = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_7__.normalize)(span.data, depth, maxBreadth);\n            }\n            return span;\n        });\n    }\n    return normalized;\n}\nfunction getFinalScope(scope, captureContext) {\n    if (!captureContext) {\n        return scope;\n    }\n    const finalScope = scope ? scope.clone() : new _scope_js__WEBPACK_IMPORTED_MODULE_8__.Scope();\n    finalScope.update(captureContext);\n    return finalScope;\n}\n/**\n * Parse either an `EventHint` directly, or convert a `CaptureContext` to an `EventHint`.\n * This is used to allow to update method signatures that used to accept a `CaptureContext` but should now accept an `EventHint`.\n */ function parseEventHintOrCaptureContext(hint) {\n    if (!hint) {\n        return undefined;\n    }\n    // If you pass a Scope or `() => Scope` as CaptureContext, we just return this as captureContext\n    if (hintIsScopeOrFunction(hint)) {\n        return {\n            captureContext: hint\n        };\n    }\n    if (hintIsScopeContext(hint)) {\n        return {\n            captureContext: hint\n        };\n    }\n    return hint;\n}\nfunction hintIsScopeOrFunction(hint) {\n    return hint instanceof _scope_js__WEBPACK_IMPORTED_MODULE_8__.Scope || typeof hint === \"function\";\n}\nconst captureContextKeys = [\n    \"user\",\n    \"level\",\n    \"extra\",\n    \"contexts\",\n    \"tags\",\n    \"fingerprint\",\n    \"requestSession\",\n    \"propagationContext\"\n];\nfunction hintIsScopeContext(hint) {\n    return Object.keys(hint).some((key)=>captureContextKeys.includes(key));\n}\n //# sourceMappingURL=prepareEvent.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/utils/prepareEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/esm/version.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/core/esm/version.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SDK_VERSION: () => (/* binding */ SDK_VERSION)\n/* harmony export */ });\nconst SDK_VERSION = \"7.88.0\";\n //# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxjQUFjO0FBRUcsQ0FDdkIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vdmVyc2lvbi5qcz9jNDExIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFNES19WRVJTSU9OID0gJzcuODguMCc7XG5cbmV4cG9ydCB7IFNES19WRVJTSU9OIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbIlNES19WRVJTSU9OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/esm/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/aggregate-errors.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/aggregate-errors.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyAggregateErrorsToEvent: () => (/* binding */ applyAggregateErrorsToEvent)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./string.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/string.js\");\n\n\n/**\n * Creates exceptions inside `event.exception.values` for errors that are nested on properties based on the `key` parameter.\n */ function applyAggregateErrorsToEvent(exceptionFromErrorImplementation, parser, maxValueLimit = 250, key, limit, event, hint) {\n    if (!event.exception || !event.exception.values || !hint || !(0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isInstanceOf)(hint.originalException, Error)) {\n        return;\n    }\n    // Generally speaking the last item in `event.exception.values` is the exception originating from the original Error\n    const originalException = event.exception.values.length > 0 ? event.exception.values[event.exception.values.length - 1] : undefined;\n    // We only create exception grouping if there is an exception in the event.\n    if (originalException) {\n        event.exception.values = truncateAggregateExceptions(aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, hint.originalException, key, event.exception.values, originalException, 0), maxValueLimit);\n    }\n}\nfunction aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, error, key, prevExceptions, exception, exceptionId) {\n    if (prevExceptions.length >= limit + 1) {\n        return prevExceptions;\n    }\n    let newExceptions = [\n        ...prevExceptions\n    ];\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isInstanceOf)(error[key], Error)) {\n        applyExceptionGroupFieldsForParentException(exception, exceptionId);\n        const newException = exceptionFromErrorImplementation(parser, error[key]);\n        const newExceptionId = newExceptions.length;\n        applyExceptionGroupFieldsForChildException(newException, key, newExceptionId, exceptionId);\n        newExceptions = aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, error[key], key, [\n            newException,\n            ...newExceptions\n        ], newException, newExceptionId);\n    }\n    // This will create exception grouping for AggregateErrors\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\n    if (Array.isArray(error.errors)) {\n        error.errors.forEach((childError, i)=>{\n            if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isInstanceOf)(childError, Error)) {\n                applyExceptionGroupFieldsForParentException(exception, exceptionId);\n                const newException = exceptionFromErrorImplementation(parser, childError);\n                const newExceptionId = newExceptions.length;\n                applyExceptionGroupFieldsForChildException(newException, `errors[${i}]`, newExceptionId, exceptionId);\n                newExceptions = aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, childError, key, [\n                    newException,\n                    ...newExceptions\n                ], newException, newExceptionId);\n            }\n        });\n    }\n    return newExceptions;\n}\nfunction applyExceptionGroupFieldsForParentException(exception, exceptionId) {\n    // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n    exception.mechanism = exception.mechanism || {\n        type: \"generic\",\n        handled: true\n    };\n    exception.mechanism = {\n        ...exception.mechanism,\n        is_exception_group: true,\n        exception_id: exceptionId\n    };\n}\nfunction applyExceptionGroupFieldsForChildException(exception, source, exceptionId, parentId) {\n    // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n    exception.mechanism = exception.mechanism || {\n        type: \"generic\",\n        handled: true\n    };\n    exception.mechanism = {\n        ...exception.mechanism,\n        type: \"chained\",\n        source,\n        exception_id: exceptionId,\n        parent_id: parentId\n    };\n}\n/**\n * Truncate the message (exception.value) of all exceptions in the event.\n * Because this event processor is ran after `applyClientOptions`,\n * we need to truncate the message of the added exceptions here.\n */ function truncateAggregateExceptions(exceptions, maxValueLength) {\n    return exceptions.map((exception)=>{\n        if (exception.value) {\n            exception.value = (0,_string_js__WEBPACK_IMPORTED_MODULE_1__.truncate)(exception.value, maxValueLength);\n        }\n        return exception;\n    });\n}\n //# sourceMappingURL=aggregate-errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/aggregate-errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/baggage.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/baggage.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BAGGAGE_HEADER_NAME: () => (/* binding */ BAGGAGE_HEADER_NAME),\n/* harmony export */   MAX_BAGGAGE_STRING_LENGTH: () => (/* binding */ MAX_BAGGAGE_STRING_LENGTH),\n/* harmony export */   SENTRY_BAGGAGE_KEY_PREFIX: () => (/* binding */ SENTRY_BAGGAGE_KEY_PREFIX),\n/* harmony export */   SENTRY_BAGGAGE_KEY_PREFIX_REGEX: () => (/* binding */ SENTRY_BAGGAGE_KEY_PREFIX_REGEX),\n/* harmony export */   baggageHeaderToDynamicSamplingContext: () => (/* binding */ baggageHeaderToDynamicSamplingContext),\n/* harmony export */   dynamicSamplingContextToSentryBaggageHeader: () => (/* binding */ dynamicSamplingContextToSentryBaggageHeader)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/debug-build.js\");\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./logger.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js\");\n\n\n\nconst BAGGAGE_HEADER_NAME = \"baggage\";\nconst SENTRY_BAGGAGE_KEY_PREFIX = \"sentry-\";\nconst SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */ const MAX_BAGGAGE_STRING_LENGTH = 8192;\n/**\n * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the \"sentry-\" prefixed values\n * from it.\n *\n * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.\n * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.\n */ function baggageHeaderToDynamicSamplingContext(// Very liberal definition of what any incoming header might look like\nbaggageHeader) {\n    if (!(0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isString)(baggageHeader) && !Array.isArray(baggageHeader)) {\n        return undefined;\n    }\n    // Intermediary object to store baggage key value pairs of incoming baggage headers on.\n    // It is later used to read Sentry-DSC-values from.\n    let baggageObject = {};\n    if (Array.isArray(baggageHeader)) {\n        // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it\n        baggageObject = baggageHeader.reduce((acc, curr)=>{\n            const currBaggageObject = baggageHeaderToObject(curr);\n            return {\n                ...acc,\n                ...currBaggageObject\n            };\n        }, {});\n    } else {\n        // Return undefined if baggage header is an empty string (technically an empty baggage header is not spec conform but\n        // this is how we choose to handle it)\n        if (!baggageHeader) {\n            return undefined;\n        }\n        baggageObject = baggageHeaderToObject(baggageHeader);\n    }\n    // Read all \"sentry-\" prefixed values out of the baggage object and put it onto a dynamic sampling context object.\n    const dynamicSamplingContext = Object.entries(baggageObject).reduce((acc, [key, value])=>{\n        if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {\n            const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);\n            acc[nonPrefixedKey] = value;\n        }\n        return acc;\n    }, {});\n    // Only return a dynamic sampling context object if there are keys in it.\n    // A keyless object means there were no sentry values on the header, which means that there is no DSC.\n    if (Object.keys(dynamicSamplingContext).length > 0) {\n        return dynamicSamplingContext;\n    } else {\n        return undefined;\n    }\n}\n/**\n * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with \"sentry-\".\n *\n * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility\n * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is\n * `undefined` the function will return `undefined`.\n * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`\n * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.\n */ function dynamicSamplingContextToSentryBaggageHeader(// this also takes undefined for convenience and bundle size in other places\ndynamicSamplingContext) {\n    if (!dynamicSamplingContext) {\n        return undefined;\n    }\n    // Prefix all DSC keys with \"sentry-\" and put them into a new object\n    const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce((acc, [dscKey, dscValue])=>{\n        if (dscValue) {\n            acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;\n        }\n        return acc;\n    }, {});\n    return objectToBaggageHeader(sentryPrefixedDSC);\n}\n/**\n * Will parse a baggage header, which is a simple key-value map, into a flat object.\n *\n * @param baggageHeader The baggage header to parse.\n * @returns a flat object containing all the key-value pairs from `baggageHeader`.\n */ function baggageHeaderToObject(baggageHeader) {\n    return baggageHeader.split(\",\").map((baggageEntry)=>baggageEntry.split(\"=\").map((keyOrValue)=>decodeURIComponent(keyOrValue.trim()))).reduce((acc, [key, value])=>{\n        acc[key] = value;\n        return acc;\n    }, {});\n}\n/**\n * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.\n *\n * @param object The object to turn into a baggage header.\n * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header\n * is not spec compliant.\n */ function objectToBaggageHeader(object) {\n    if (Object.keys(object).length === 0) {\n        // An empty baggage header is not spec compliant: We return undefined.\n        return undefined;\n    }\n    return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex)=>{\n        const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;\n        const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;\n        if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(`Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`);\n            return baggageHeader;\n        } else {\n            return newBaggageHeader;\n        }\n    }, \"\");\n}\n //# sourceMappingURL=baggage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/baggage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/browser.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/browser.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDomElement: () => (/* binding */ getDomElement),\n/* harmony export */   getLocationHref: () => (/* binding */ getLocationHref),\n/* harmony export */   htmlTreeAsString: () => (/* binding */ htmlTreeAsString)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/worldwide.js\");\n\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = (0,_worldwide_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalObject)();\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */ function htmlTreeAsString(elem, options = {}) {\n    if (!elem) {\n        return \"<unknown>\";\n    }\n    // try/catch both:\n    // - accessing event.target (see getsentry/raven-js#838, #768)\n    // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n    // - can throw an exception in some circumstances.\n    try {\n        let currentElem = elem;\n        const MAX_TRAVERSE_HEIGHT = 5;\n        const out = [];\n        let height = 0;\n        let len = 0;\n        const separator = \" > \";\n        const sepLength = separator.length;\n        let nextStr;\n        const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n        const maxStringLength = !Array.isArray(options) && options.maxStringLength || DEFAULT_MAX_STRING_LENGTH;\n        while(currentElem && height++ < MAX_TRAVERSE_HEIGHT){\n            nextStr = _htmlElementAsString(currentElem, keyAttrs);\n            // bail out if\n            // - nextStr is the 'html' element\n            // - the length of the string that would be created exceeds maxStringLength\n            //   (ignore this limit if we are on the first iteration)\n            if (nextStr === \"html\" || height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength) {\n                break;\n            }\n            out.push(nextStr);\n            len += nextStr.length;\n            currentElem = currentElem.parentNode;\n        }\n        return out.reverse().join(separator);\n    } catch (_oO) {\n        return \"<unknown>\";\n    }\n}\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */ function _htmlElementAsString(el, keyAttrs) {\n    const elem = el;\n    const out = [];\n    let className;\n    let classes;\n    let key;\n    let attr;\n    let i;\n    if (!elem || !elem.tagName) {\n        return \"\";\n    }\n    out.push(elem.tagName.toLowerCase());\n    // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n    const keyAttrPairs = keyAttrs && keyAttrs.length ? keyAttrs.filter((keyAttr)=>elem.getAttribute(keyAttr)).map((keyAttr)=>[\n            keyAttr,\n            elem.getAttribute(keyAttr)\n        ]) : null;\n    if (keyAttrPairs && keyAttrPairs.length) {\n        keyAttrPairs.forEach((keyAttrPair)=>{\n            out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n        });\n    } else {\n        if (elem.id) {\n            out.push(`#${elem.id}`);\n        }\n        // eslint-disable-next-line prefer-const\n        className = elem.className;\n        if (className && (0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isString)(className)) {\n            classes = className.split(/\\s+/);\n            for(i = 0; i < classes.length; i++){\n                out.push(`.${classes[i]}`);\n            }\n        }\n    }\n    const allowedAttrs = [\n        \"aria-label\",\n        \"type\",\n        \"name\",\n        \"title\",\n        \"alt\"\n    ];\n    for(i = 0; i < allowedAttrs.length; i++){\n        key = allowedAttrs[i];\n        attr = elem.getAttribute(key);\n        if (attr) {\n            out.push(`[${key}=\"${attr}\"]`);\n        }\n    }\n    return out.join(\"\");\n}\n/**\n * A safe form of location.href\n */ function getLocationHref() {\n    try {\n        return WINDOW.document.location.href;\n    } catch (oO) {\n        return \"\";\n    }\n}\n/**\n * Gets a DOM element by using document.querySelector.\n *\n * This wrapper will first check for the existance of the function before\n * actually calling it so that we don't have to take care of this check,\n * every time we want to access the DOM.\n *\n * Reason: DOM/querySelector is not available in all environments.\n *\n * We have to cast to any because utils can be consumed by a variety of environments,\n * and we don't want to break TS users. If you know what element will be selected by\n * `document.querySelector`, specify it as part of the generic call. For example,\n * `const element = getDomElement<Element>('selector');`\n *\n * @param selector the selector string passed on to document.querySelector\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getDomElement(selector) {\n    if (WINDOW.document && WINDOW.document.querySelector) {\n        return WINDOW.document.querySelector(selector);\n    }\n    return null;\n}\n //# sourceMappingURL=browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/browser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/cookie.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/cookie.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseCookie: () => (/* binding */ parseCookie)\n/* harmony export */ });\n/**\n * This code was originally copied from the 'cookie` module at v0.5.0 and was simplified for our use case.\n * https://github.com/jshttp/cookie/blob/a0c84147aab6266bdb3996cf4062e93907c0b0fc/index.js\n * It had the following license:\n *\n * (The MIT License)\n *\n * Copyright (c) 2012-2014 Roman Shtylman <shtylman@gmail.com>\n * Copyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */ /**\n * Parses a cookie string\n */ function parseCookie(str) {\n    const obj = {};\n    let index = 0;\n    while(index < str.length){\n        const eqIdx = str.indexOf(\"=\", index);\n        // no more cookie pairs\n        if (eqIdx === -1) {\n            break;\n        }\n        let endIdx = str.indexOf(\";\", index);\n        if (endIdx === -1) {\n            endIdx = str.length;\n        } else if (endIdx < eqIdx) {\n            // backtrack on prior semicolon\n            index = str.lastIndexOf(\";\", eqIdx - 1) + 1;\n            continue;\n        }\n        const key = str.slice(index, eqIdx).trim();\n        // only assign once\n        if (undefined === obj[key]) {\n            let val = str.slice(eqIdx + 1, endIdx).trim();\n            // quoted values\n            if (val.charCodeAt(0) === 0x22) {\n                val = val.slice(1, -1);\n            }\n            try {\n                obj[key] = val.indexOf(\"%\") !== -1 ? decodeURIComponent(val) : val;\n            } catch (e) {\n                obj[key] = val;\n            }\n        }\n        index = endIdx + 1;\n    }\n    return obj;\n}\n //# sourceMappingURL=cookie.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9jb29raWUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBNEJDLEdBRUQ7O0NBRUMsR0FDRCxTQUFTQSxZQUFZQyxHQUFHO0lBQ3RCLE1BQU1DLE1BQU0sQ0FBQztJQUNiLElBQUlDLFFBQVE7SUFFWixNQUFPQSxRQUFRRixJQUFJRyxNQUFNLENBQUU7UUFDekIsTUFBTUMsUUFBUUosSUFBSUssT0FBTyxDQUFDLEtBQUtIO1FBRS9CLHVCQUF1QjtRQUN2QixJQUFJRSxVQUFVLENBQUMsR0FBRztZQUNoQjtRQUNGO1FBRUEsSUFBSUUsU0FBU04sSUFBSUssT0FBTyxDQUFDLEtBQUtIO1FBRTlCLElBQUlJLFdBQVcsQ0FBQyxHQUFHO1lBQ2pCQSxTQUFTTixJQUFJRyxNQUFNO1FBQ3JCLE9BQU8sSUFBSUcsU0FBU0YsT0FBTztZQUN6QiwrQkFBK0I7WUFDL0JGLFFBQVFGLElBQUlPLFdBQVcsQ0FBQyxLQUFLSCxRQUFRLEtBQUs7WUFDMUM7UUFDRjtRQUVBLE1BQU1JLE1BQU1SLElBQUlTLEtBQUssQ0FBQ1AsT0FBT0UsT0FBT00sSUFBSTtRQUV4QyxtQkFBbUI7UUFDbkIsSUFBSUMsY0FBY1YsR0FBRyxDQUFDTyxJQUFJLEVBQUU7WUFDMUIsSUFBSUksTUFBTVosSUFBSVMsS0FBSyxDQUFDTCxRQUFRLEdBQUdFLFFBQVFJLElBQUk7WUFFM0MsZ0JBQWdCO1lBQ2hCLElBQUlFLElBQUlDLFVBQVUsQ0FBQyxPQUFPLE1BQU07Z0JBQzlCRCxNQUFNQSxJQUFJSCxLQUFLLENBQUMsR0FBRyxDQUFDO1lBQ3RCO1lBRUEsSUFBSTtnQkFDRlIsR0FBRyxDQUFDTyxJQUFJLEdBQUdJLElBQUlQLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSVMsbUJBQW1CRixPQUFPQTtZQUNqRSxFQUFFLE9BQU9HLEdBQUc7Z0JBQ1ZkLEdBQUcsQ0FBQ08sSUFBSSxHQUFHSTtZQUNiO1FBQ0Y7UUFFQVYsUUFBUUksU0FBUztJQUNuQjtJQUVBLE9BQU9MO0FBQ1Q7QUFFdUIsQ0FDdkIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vY29va2llLmpzP2RhYmMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIGNvZGUgd2FzIG9yaWdpbmFsbHkgY29waWVkIGZyb20gdGhlICdjb29raWVgIG1vZHVsZSBhdCB2MC41LjAgYW5kIHdhcyBzaW1wbGlmaWVkIGZvciBvdXIgdXNlIGNhc2UuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vanNodHRwL2Nvb2tpZS9ibG9iL2EwYzg0MTQ3YWFiNjI2NmJkYjM5OTZjZjQwNjJlOTM5MDdjMGIwZmMvaW5kZXguanNcbiAqIEl0IGhhZCB0aGUgZm9sbG93aW5nIGxpY2Vuc2U6XG4gKlxuICogKFRoZSBNSVQgTGljZW5zZSlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNCBSb21hbiBTaHR5bG1hbiA8c2h0eWxtYW5AZ21haWwuY29tPlxuICogQ29weXJpZ2h0IChjKSAyMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uIDxkb3VnQHNvbWV0aGluZ2RvdWcuY29tPlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xuICogYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4gKiAnU29mdHdhcmUnKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4gKiB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4gKiBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbiAqIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0b1xuICogdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgJ0FTIElTJywgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuICogTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULlxuICogSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTllcbiAqIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsXG4gKiBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuICogU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuLyoqXG4gKiBQYXJzZXMgYSBjb29raWUgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIHBhcnNlQ29va2llKHN0cikge1xuICBjb25zdCBvYmogPSB7fTtcbiAgbGV0IGluZGV4ID0gMDtcblxuICB3aGlsZSAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgY29uc3QgZXFJZHggPSBzdHIuaW5kZXhPZignPScsIGluZGV4KTtcblxuICAgIC8vIG5vIG1vcmUgY29va2llIHBhaXJzXG4gICAgaWYgKGVxSWR4ID09PSAtMSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbGV0IGVuZElkeCA9IHN0ci5pbmRleE9mKCc7JywgaW5kZXgpO1xuXG4gICAgaWYgKGVuZElkeCA9PT0gLTEpIHtcbiAgICAgIGVuZElkeCA9IHN0ci5sZW5ndGg7XG4gICAgfSBlbHNlIGlmIChlbmRJZHggPCBlcUlkeCkge1xuICAgICAgLy8gYmFja3RyYWNrIG9uIHByaW9yIHNlbWljb2xvblxuICAgICAgaW5kZXggPSBzdHIubGFzdEluZGV4T2YoJzsnLCBlcUlkeCAtIDEpICsgMTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGtleSA9IHN0ci5zbGljZShpbmRleCwgZXFJZHgpLnRyaW0oKTtcblxuICAgIC8vIG9ubHkgYXNzaWduIG9uY2VcbiAgICBpZiAodW5kZWZpbmVkID09PSBvYmpba2V5XSkge1xuICAgICAgbGV0IHZhbCA9IHN0ci5zbGljZShlcUlkeCArIDEsIGVuZElkeCkudHJpbSgpO1xuXG4gICAgICAvLyBxdW90ZWQgdmFsdWVzXG4gICAgICBpZiAodmFsLmNoYXJDb2RlQXQoMCkgPT09IDB4MjIpIHtcbiAgICAgICAgdmFsID0gdmFsLnNsaWNlKDEsIC0xKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgb2JqW2tleV0gPSB2YWwuaW5kZXhPZignJScpICE9PSAtMSA/IGRlY29kZVVSSUNvbXBvbmVudCh2YWwpIDogdmFsO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBvYmpba2V5XSA9IHZhbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbmRleCA9IGVuZElkeCArIDE7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5leHBvcnQgeyBwYXJzZUNvb2tpZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29va2llLmpzLm1hcFxuIl0sIm5hbWVzIjpbInBhcnNlQ29va2llIiwic3RyIiwib2JqIiwiaW5kZXgiLCJsZW5ndGgiLCJlcUlkeCIsImluZGV4T2YiLCJlbmRJZHgiLCJsYXN0SW5kZXhPZiIsImtleSIsInNsaWNlIiwidHJpbSIsInVuZGVmaW5lZCIsInZhbCIsImNoYXJDb2RlQXQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/cookie.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/debug-build.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/debug-build.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEBUG_BUILD: () => (/* binding */ DEBUG_BUILD)\n/* harmony export */ });\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */ const DEBUG_BUILD =  false || false;\n //# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9kZWJ1Zy1idWlsZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Q0FJQyxHQUNELE1BQU1BLGNBQWUsTUFBNEIsSUFBZUMsS0FBZ0JBO0FBRXpELENBQ3ZCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2RlYnVnLWJ1aWxkLmpzPzIzMmYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIHNlcnZlcyBhcyBhIGJ1aWxkIHRpbWUgZmxhZyB0aGF0IHdpbGwgYmUgdHJ1ZSBieSBkZWZhdWx0LCBidXQgZmFsc2UgaW4gbm9uLWRlYnVnIGJ1aWxkcyBvciBpZiB1c2VycyByZXBsYWNlIGBfX1NFTlRSWV9ERUJVR19fYCBpbiB0aGVpciBnZW5lcmF0ZWQgY29kZS5cbiAqXG4gKiBBVFRFTlRJT046IFRoaXMgY29uc3RhbnQgbXVzdCBuZXZlciBjcm9zcyBwYWNrYWdlIGJvdW5kYXJpZXMgKGkuZS4gYmUgZXhwb3J0ZWQpIHRvIGd1YXJhbnRlZSB0aGF0IGl0IGNhbiBiZSB1c2VkIGZvciB0cmVlIHNoYWtpbmcuXG4gKi9cbmNvbnN0IERFQlVHX0JVSUxEID0gKHR5cGVvZiBfX1NFTlRSWV9ERUJVR19fID09PSAndW5kZWZpbmVkJyB8fCBfX1NFTlRSWV9ERUJVR19fKTtcblxuZXhwb3J0IHsgREVCVUdfQlVJTEQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLWJ1aWxkLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkRFQlVHX0JVSUxEIiwiX19TRU5UUllfREVCVUdfXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/debug-build.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/dsn.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/dsn.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dsnFromString: () => (/* binding */ dsnFromString),\n/* harmony export */   dsnToString: () => (/* binding */ dsnToString),\n/* harmony export */   makeDsn: () => (/* binding */ makeDsn)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/debug-build.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js\");\n\n\n/** Regular expression used to parse a Dsn. */ const DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\nfunction isValidProtocol(protocol) {\n    return protocol === \"http\" || protocol === \"https\";\n}\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */ function dsnToString(dsn, withPassword = false) {\n    const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n    return `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : \"\"}` + `@${host}${port ? `:${port}` : \"\"}/${path ? `${path}/` : path}${projectId}`;\n}\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string\n */ function dsnFromString(str) {\n    const match = DSN_REGEX.exec(str);\n    if (!match) {\n        // This should be logged to the console\n        (0,_logger_js__WEBPACK_IMPORTED_MODULE_0__.consoleSandbox)(()=>{\n            // eslint-disable-next-line no-console\n            console.error(`Invalid Sentry Dsn: ${str}`);\n        });\n        return undefined;\n    }\n    const [protocol, publicKey, pass = \"\", host, port = \"\", lastPath] = match.slice(1);\n    let path = \"\";\n    let projectId = lastPath;\n    const split = projectId.split(\"/\");\n    if (split.length > 1) {\n        path = split.slice(0, -1).join(\"/\");\n        projectId = split.pop();\n    }\n    if (projectId) {\n        const projectMatch = projectId.match(/^\\d+/);\n        if (projectMatch) {\n            projectId = projectMatch[0];\n        }\n    }\n    return dsnFromComponents({\n        host,\n        pass,\n        path,\n        projectId,\n        port,\n        protocol: protocol,\n        publicKey\n    });\n}\nfunction dsnFromComponents(components) {\n    return {\n        protocol: components.protocol,\n        publicKey: components.publicKey || \"\",\n        pass: components.pass || \"\",\n        host: components.host,\n        port: components.port || \"\",\n        path: components.path || \"\",\n        projectId: components.projectId\n    };\n}\nfunction validateDsn(dsn) {\n    if (!_debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD) {\n        return true;\n    }\n    const { port, projectId, protocol } = dsn;\n    const requiredComponents = [\n        \"protocol\",\n        \"publicKey\",\n        \"host\",\n        \"projectId\"\n    ];\n    const hasMissingRequiredComponent = requiredComponents.find((component)=>{\n        if (!dsn[component]) {\n            _logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.error(`Invalid Sentry Dsn: ${component} missing`);\n            return true;\n        }\n        return false;\n    });\n    if (hasMissingRequiredComponent) {\n        return false;\n    }\n    if (!projectId.match(/^\\d+$/)) {\n        _logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n        return false;\n    }\n    if (!isValidProtocol(protocol)) {\n        _logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n        return false;\n    }\n    if (port && isNaN(parseInt(port, 10))) {\n        _logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.error(`Invalid Sentry Dsn: Invalid port ${port}`);\n        return false;\n    }\n    return true;\n}\n/**\n * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.\n * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source\n */ function makeDsn(from) {\n    const components = typeof from === \"string\" ? dsnFromString(from) : dsnFromComponents(from);\n    if (!components || !validateDsn(components)) {\n        return undefined;\n    }\n    return components;\n}\n //# sourceMappingURL=dsn.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9kc24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBK0M7QUFDTTtBQUVyRCw0Q0FBNEMsR0FDNUMsTUFBTUcsWUFBWTtBQUVsQixTQUFTQyxnQkFBZ0JDLFFBQVE7SUFDL0IsT0FBT0EsYUFBYSxVQUFVQSxhQUFhO0FBQzdDO0FBRUE7Ozs7Ozs7O0NBUUMsR0FDRCxTQUFTQyxZQUFZQyxHQUFHLEVBQUVDLGVBQWUsS0FBSztJQUM1QyxNQUFNLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsU0FBUyxFQUFFUixRQUFRLEVBQUVTLFNBQVMsRUFBRSxHQUFHUDtJQUNuRSxPQUNFLENBQUMsRUFBRUYsU0FBUyxHQUFHLEVBQUVTLFVBQVUsRUFBRU4sZ0JBQWdCRyxPQUFPLENBQUMsQ0FBQyxFQUFFQSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsR0FDckUsQ0FBQyxDQUFDLEVBQUVGLEtBQUssRUFBRUcsT0FBTyxDQUFDLENBQUMsRUFBRUEsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUVGLE9BQU8sQ0FBQyxFQUFFQSxLQUFLLENBQUMsQ0FBQyxHQUFHQSxLQUFLLEVBQUVHLFVBQVUsQ0FBQztBQUUvRTtBQUVBOzs7OztDQUtDLEdBQ0QsU0FBU0UsY0FBY0MsR0FBRztJQUN4QixNQUFNQyxRQUFRZCxVQUFVZSxJQUFJLENBQUNGO0lBRTdCLElBQUksQ0FBQ0MsT0FBTztRQUNWLHVDQUF1QztRQUN2Q2hCLDBEQUFjQSxDQUFDO1lBQ2Isc0NBQXNDO1lBQ3RDa0IsUUFBUUMsS0FBSyxDQUFDLENBQUMsb0JBQW9CLEVBQUVKLElBQUksQ0FBQztRQUM1QztRQUNBLE9BQU9LO0lBQ1Q7SUFFQSxNQUFNLENBQUNoQixVQUFVUyxXQUFXSCxPQUFPLEVBQUUsRUFBRUYsTUFBTUcsT0FBTyxFQUFFLEVBQUVVLFNBQVMsR0FBR0wsTUFBTU0sS0FBSyxDQUFDO0lBQ2hGLElBQUliLE9BQU87SUFDWCxJQUFJRyxZQUFZUztJQUVoQixNQUFNRSxRQUFRWCxVQUFVVyxLQUFLLENBQUM7SUFDOUIsSUFBSUEsTUFBTUMsTUFBTSxHQUFHLEdBQUc7UUFDcEJmLE9BQU9jLE1BQU1ELEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBR0csSUFBSSxDQUFDO1FBQy9CYixZQUFZVyxNQUFNRyxHQUFHO0lBQ3ZCO0lBRUEsSUFBSWQsV0FBVztRQUNiLE1BQU1lLGVBQWVmLFVBQVVJLEtBQUssQ0FBQztRQUNyQyxJQUFJVyxjQUFjO1lBQ2hCZixZQUFZZSxZQUFZLENBQUMsRUFBRTtRQUM3QjtJQUNGO0lBRUEsT0FBT0Msa0JBQWtCO1FBQUVwQjtRQUFNRTtRQUFNRDtRQUFNRztRQUFXRDtRQUFNUCxVQUFVQTtRQUFXUztJQUFVO0FBQy9GO0FBRUEsU0FBU2Usa0JBQWtCQyxVQUFVO0lBQ25DLE9BQU87UUFDTHpCLFVBQVV5QixXQUFXekIsUUFBUTtRQUM3QlMsV0FBV2dCLFdBQVdoQixTQUFTLElBQUk7UUFDbkNILE1BQU1tQixXQUFXbkIsSUFBSSxJQUFJO1FBQ3pCRixNQUFNcUIsV0FBV3JCLElBQUk7UUFDckJHLE1BQU1rQixXQUFXbEIsSUFBSSxJQUFJO1FBQ3pCRixNQUFNb0IsV0FBV3BCLElBQUksSUFBSTtRQUN6QkcsV0FBV2lCLFdBQVdqQixTQUFTO0lBQ2pDO0FBQ0Y7QUFFQSxTQUFTa0IsWUFBWXhCLEdBQUc7SUFDdEIsSUFBSSxDQUFDUCx3REFBV0EsRUFBRTtRQUNoQixPQUFPO0lBQ1Q7SUFFQSxNQUFNLEVBQUVZLElBQUksRUFBRUMsU0FBUyxFQUFFUixRQUFRLEVBQUUsR0FBR0U7SUFFdEMsTUFBTXlCLHFCQUFxQjtRQUFDO1FBQVk7UUFBYTtRQUFRO0tBQVk7SUFDekUsTUFBTUMsOEJBQThCRCxtQkFBbUJFLElBQUksQ0FBQ0MsQ0FBQUE7UUFDMUQsSUFBSSxDQUFDNUIsR0FBRyxDQUFDNEIsVUFBVSxFQUFFO1lBQ25CakMsOENBQU1BLENBQUNrQixLQUFLLENBQUMsQ0FBQyxvQkFBb0IsRUFBRWUsVUFBVSxRQUFRLENBQUM7WUFDdkQsT0FBTztRQUNUO1FBQ0EsT0FBTztJQUNUO0lBRUEsSUFBSUYsNkJBQTZCO1FBQy9CLE9BQU87SUFDVDtJQUVBLElBQUksQ0FBQ3BCLFVBQVVJLEtBQUssQ0FBQyxVQUFVO1FBQzdCZiw4Q0FBTUEsQ0FBQ2tCLEtBQUssQ0FBQyxDQUFDLHNDQUFzQyxFQUFFUCxVQUFVLENBQUM7UUFDakUsT0FBTztJQUNUO0lBRUEsSUFBSSxDQUFDVCxnQkFBZ0JDLFdBQVc7UUFDOUJILDhDQUFNQSxDQUFDa0IsS0FBSyxDQUFDLENBQUMscUNBQXFDLEVBQUVmLFNBQVMsQ0FBQztRQUMvRCxPQUFPO0lBQ1Q7SUFFQSxJQUFJTyxRQUFRd0IsTUFBTUMsU0FBU3pCLE1BQU0sTUFBTTtRQUNyQ1YsOENBQU1BLENBQUNrQixLQUFLLENBQUMsQ0FBQyxpQ0FBaUMsRUFBRVIsS0FBSyxDQUFDO1FBQ3ZELE9BQU87SUFDVDtJQUVBLE9BQU87QUFDVDtBQUVBOzs7Q0FHQyxHQUNELFNBQVMwQixRQUFRQyxJQUFJO0lBQ25CLE1BQU1ULGFBQWEsT0FBT1MsU0FBUyxXQUFXeEIsY0FBY3dCLFFBQVFWLGtCQUFrQlU7SUFDdEYsSUFBSSxDQUFDVCxjQUFjLENBQUNDLFlBQVlELGFBQWE7UUFDM0MsT0FBT1Q7SUFDVDtJQUNBLE9BQU9TO0FBQ1Q7QUFFK0MsQ0FDL0MsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vZHNuLmpzPzhkMzIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgREVCVUdfQlVJTEQgfSBmcm9tICcuL2RlYnVnLWJ1aWxkLmpzJztcbmltcG9ydCB7IGNvbnNvbGVTYW5kYm94LCBsb2dnZXIgfSBmcm9tICcuL2xvZ2dlci5qcyc7XG5cbi8qKiBSZWd1bGFyIGV4cHJlc3Npb24gdXNlZCB0byBwYXJzZSBhIERzbi4gKi9cbmNvbnN0IERTTl9SRUdFWCA9IC9eKD86KFxcdyspOilcXC9cXC8oPzooXFx3KykoPzo6KFxcdyspPyk/QCkoW1xcdy4tXSspKD86OihcXGQrKSk/XFwvKC4rKS87XG5cbmZ1bmN0aW9uIGlzVmFsaWRQcm90b2NvbChwcm90b2NvbCkge1xuICByZXR1cm4gcHJvdG9jb2wgPT09ICdodHRwJyB8fCBwcm90b2NvbCA9PT0gJ2h0dHBzJztcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEc24uXG4gKlxuICogQnkgZGVmYXVsdCwgdGhpcyB3aWxsIHJlbmRlciB0aGUgcHVibGljIHJlcHJlc2VudGF0aW9uIHdpdGhvdXQgdGhlIHBhc3N3b3JkXG4gKiBjb21wb25lbnQuIFRvIGdldCB0aGUgZGVwcmVjYXRlZCBwcml2YXRlIHJlcHJlc2VudGF0aW9uLCBzZXQgYHdpdGhQYXNzd29yZGBcbiAqIHRvIHRydWUuXG4gKlxuICogQHBhcmFtIHdpdGhQYXNzd29yZCBXaGVuIHNldCB0byB0cnVlLCB0aGUgcGFzc3dvcmQgd2lsbCBiZSBpbmNsdWRlZC5cbiAqL1xuZnVuY3Rpb24gZHNuVG9TdHJpbmcoZHNuLCB3aXRoUGFzc3dvcmQgPSBmYWxzZSkge1xuICBjb25zdCB7IGhvc3QsIHBhdGgsIHBhc3MsIHBvcnQsIHByb2plY3RJZCwgcHJvdG9jb2wsIHB1YmxpY0tleSB9ID0gZHNuO1xuICByZXR1cm4gKFxuICAgIGAke3Byb3RvY29sfTovLyR7cHVibGljS2V5fSR7d2l0aFBhc3N3b3JkICYmIHBhc3MgPyBgOiR7cGFzc31gIDogJyd9YCArXG4gICAgYEAke2hvc3R9JHtwb3J0ID8gYDoke3BvcnR9YCA6ICcnfS8ke3BhdGggPyBgJHtwYXRofS9gIDogcGF0aH0ke3Byb2plY3RJZH1gXG4gICk7XG59XG5cbi8qKlxuICogUGFyc2VzIGEgRHNuIGZyb20gYSBnaXZlbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHN0ciBBIERzbiBhcyBzdHJpbmdcbiAqIEByZXR1cm5zIERzbiBhcyBEc25Db21wb25lbnRzIG9yIHVuZGVmaW5lZCBpZiBAcGFyYW0gc3RyIGlzIG5vdCBhIHZhbGlkIERTTiBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gZHNuRnJvbVN0cmluZyhzdHIpIHtcbiAgY29uc3QgbWF0Y2ggPSBEU05fUkVHRVguZXhlYyhzdHIpO1xuXG4gIGlmICghbWF0Y2gpIHtcbiAgICAvLyBUaGlzIHNob3VsZCBiZSBsb2dnZWQgdG8gdGhlIGNvbnNvbGVcbiAgICBjb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS5lcnJvcihgSW52YWxpZCBTZW50cnkgRHNuOiAke3N0cn1gKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgY29uc3QgW3Byb3RvY29sLCBwdWJsaWNLZXksIHBhc3MgPSAnJywgaG9zdCwgcG9ydCA9ICcnLCBsYXN0UGF0aF0gPSBtYXRjaC5zbGljZSgxKTtcbiAgbGV0IHBhdGggPSAnJztcbiAgbGV0IHByb2plY3RJZCA9IGxhc3RQYXRoO1xuXG4gIGNvbnN0IHNwbGl0ID0gcHJvamVjdElkLnNwbGl0KCcvJyk7XG4gIGlmIChzcGxpdC5sZW5ndGggPiAxKSB7XG4gICAgcGF0aCA9IHNwbGl0LnNsaWNlKDAsIC0xKS5qb2luKCcvJyk7XG4gICAgcHJvamVjdElkID0gc3BsaXQucG9wKCkgO1xuICB9XG5cbiAgaWYgKHByb2plY3RJZCkge1xuICAgIGNvbnN0IHByb2plY3RNYXRjaCA9IHByb2plY3RJZC5tYXRjaCgvXlxcZCsvKTtcbiAgICBpZiAocHJvamVjdE1hdGNoKSB7XG4gICAgICBwcm9qZWN0SWQgPSBwcm9qZWN0TWF0Y2hbMF07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRzbkZyb21Db21wb25lbnRzKHsgaG9zdCwgcGFzcywgcGF0aCwgcHJvamVjdElkLCBwb3J0LCBwcm90b2NvbDogcHJvdG9jb2wgLCBwdWJsaWNLZXkgfSk7XG59XG5cbmZ1bmN0aW9uIGRzbkZyb21Db21wb25lbnRzKGNvbXBvbmVudHMpIHtcbiAgcmV0dXJuIHtcbiAgICBwcm90b2NvbDogY29tcG9uZW50cy5wcm90b2NvbCxcbiAgICBwdWJsaWNLZXk6IGNvbXBvbmVudHMucHVibGljS2V5IHx8ICcnLFxuICAgIHBhc3M6IGNvbXBvbmVudHMucGFzcyB8fCAnJyxcbiAgICBob3N0OiBjb21wb25lbnRzLmhvc3QsXG4gICAgcG9ydDogY29tcG9uZW50cy5wb3J0IHx8ICcnLFxuICAgIHBhdGg6IGNvbXBvbmVudHMucGF0aCB8fCAnJyxcbiAgICBwcm9qZWN0SWQ6IGNvbXBvbmVudHMucHJvamVjdElkLFxuICB9O1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZURzbihkc24pIHtcbiAgaWYgKCFERUJVR19CVUlMRCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY29uc3QgeyBwb3J0LCBwcm9qZWN0SWQsIHByb3RvY29sIH0gPSBkc247XG5cbiAgY29uc3QgcmVxdWlyZWRDb21wb25lbnRzID0gWydwcm90b2NvbCcsICdwdWJsaWNLZXknLCAnaG9zdCcsICdwcm9qZWN0SWQnXTtcbiAgY29uc3QgaGFzTWlzc2luZ1JlcXVpcmVkQ29tcG9uZW50ID0gcmVxdWlyZWRDb21wb25lbnRzLmZpbmQoY29tcG9uZW50ID0+IHtcbiAgICBpZiAoIWRzbltjb21wb25lbnRdKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoYEludmFsaWQgU2VudHJ5IERzbjogJHtjb21wb25lbnR9IG1pc3NpbmdgKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pO1xuXG4gIGlmIChoYXNNaXNzaW5nUmVxdWlyZWRDb21wb25lbnQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIXByb2plY3RJZC5tYXRjaCgvXlxcZCskLykpIHtcbiAgICBsb2dnZXIuZXJyb3IoYEludmFsaWQgU2VudHJ5IERzbjogSW52YWxpZCBwcm9qZWN0SWQgJHtwcm9qZWN0SWR9YCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCFpc1ZhbGlkUHJvdG9jb2wocHJvdG9jb2wpKSB7XG4gICAgbG9nZ2VyLmVycm9yKGBJbnZhbGlkIFNlbnRyeSBEc246IEludmFsaWQgcHJvdG9jb2wgJHtwcm90b2NvbH1gKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAocG9ydCAmJiBpc05hTihwYXJzZUludChwb3J0LCAxMCkpKSB7XG4gICAgbG9nZ2VyLmVycm9yKGBJbnZhbGlkIFNlbnRyeSBEc246IEludmFsaWQgcG9ydCAke3BvcnR9YCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHZhbGlkIFNlbnRyeSBEc24gb2JqZWN0LCBpZGVudGlmeWluZyBhIFNlbnRyeSBpbnN0YW5jZSBhbmQgcHJvamVjdC5cbiAqIEByZXR1cm5zIGEgdmFsaWQgRHNuQ29tcG9uZW50cyBvYmplY3Qgb3IgYHVuZGVmaW5lZGAgaWYgQHBhcmFtIGZyb20gaXMgYW4gaW52YWxpZCBEU04gc291cmNlXG4gKi9cbmZ1bmN0aW9uIG1ha2VEc24oZnJvbSkge1xuICBjb25zdCBjb21wb25lbnRzID0gdHlwZW9mIGZyb20gPT09ICdzdHJpbmcnID8gZHNuRnJvbVN0cmluZyhmcm9tKSA6IGRzbkZyb21Db21wb25lbnRzKGZyb20pO1xuICBpZiAoIWNvbXBvbmVudHMgfHwgIXZhbGlkYXRlRHNuKGNvbXBvbmVudHMpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gY29tcG9uZW50cztcbn1cblxuZXhwb3J0IHsgZHNuRnJvbVN0cmluZywgZHNuVG9TdHJpbmcsIG1ha2VEc24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRzbi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJERUJVR19CVUlMRCIsImNvbnNvbGVTYW5kYm94IiwibG9nZ2VyIiwiRFNOX1JFR0VYIiwiaXNWYWxpZFByb3RvY29sIiwicHJvdG9jb2wiLCJkc25Ub1N0cmluZyIsImRzbiIsIndpdGhQYXNzd29yZCIsImhvc3QiLCJwYXRoIiwicGFzcyIsInBvcnQiLCJwcm9qZWN0SWQiLCJwdWJsaWNLZXkiLCJkc25Gcm9tU3RyaW5nIiwic3RyIiwibWF0Y2giLCJleGVjIiwiY29uc29sZSIsImVycm9yIiwidW5kZWZpbmVkIiwibGFzdFBhdGgiLCJzbGljZSIsInNwbGl0IiwibGVuZ3RoIiwiam9pbiIsInBvcCIsInByb2plY3RNYXRjaCIsImRzbkZyb21Db21wb25lbnRzIiwiY29tcG9uZW50cyIsInZhbGlkYXRlRHNuIiwicmVxdWlyZWRDb21wb25lbnRzIiwiaGFzTWlzc2luZ1JlcXVpcmVkQ29tcG9uZW50IiwiZmluZCIsImNvbXBvbmVudCIsImlzTmFOIiwicGFyc2VJbnQiLCJtYWtlRHNuIiwiZnJvbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/dsn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/env.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/env.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSDKSource: () => (/* binding */ getSDKSource),\n/* harmony export */   isBrowserBundle: () => (/* binding */ isBrowserBundle)\n/* harmony export */ });\n/*\n * This module exists for optimizations in the build process through rollup and terser.  We define some global\n * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these\n * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will\n * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to\n * `logger` and preventing node-related code from appearing in browser bundles.\n *\n * Attention:\n * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by\n * users. These flags should live in their respective packages, as we identified user tooling (specifically webpack)\n * having issues tree-shaking these constants across package boundaries.\n * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want\n * users to be able to shake away expressions that it guards.\n */ /**\n * Figures out if we're building a browser bundle.\n *\n * @returns true if this is a browser bundle build.\n */ function isBrowserBundle() {\n    return typeof __SENTRY_BROWSER_BUNDLE__ !== \"undefined\" && !!__SENTRY_BROWSER_BUNDLE__;\n}\n/**\n * Get source of SDK.\n */ function getSDKSource() {\n    // @ts-expect-error \"npm\" is injected by rollup during build process\n    return \"npm\";\n}\n //# sourceMappingURL=env.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9lbnYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7OztDQWFDLEdBRUQ7Ozs7Q0FJQyxHQUNELFNBQVNBO0lBQ1AsT0FBTyxPQUFPQyw4QkFBOEIsZUFBZSxDQUFDLENBQUNBO0FBQy9EO0FBRUE7O0NBRUMsR0FDRCxTQUFTQztJQUNQLG9FQUFvRTtJQUNwRSxPQUFPO0FBQ1Q7QUFFeUMsQ0FDekMsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vZW52LmpzP2YyNGUiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFRoaXMgbW9kdWxlIGV4aXN0cyBmb3Igb3B0aW1pemF0aW9ucyBpbiB0aGUgYnVpbGQgcHJvY2VzcyB0aHJvdWdoIHJvbGx1cCBhbmQgdGVyc2VyLiAgV2UgZGVmaW5lIHNvbWUgZ2xvYmFsXG4gKiBjb25zdGFudHMsIHdoaWNoIGNhbiBiZSBvdmVycmlkZGVuIGR1cmluZyBidWlsZC4gQnkgZ3VhcmRpbmcgY2VydGFpbiBwaWVjZXMgb2YgY29kZSB3aXRoIGZ1bmN0aW9ucyB0aGF0IHJldHVybiB0aGVzZVxuICogY29uc3RhbnRzLCB3ZSBjYW4gY29udHJvbCB3aGV0aGVyIG9yIG5vdCB0aGV5IGFwcGVhciBpbiB0aGUgZmluYWwgYnVuZGxlLiAoQW55IGNvZGUgZ3VhcmRlZCBieSBhIGZhbHNlIGNvbmRpdGlvbiB3aWxsXG4gKiBuZXZlciBydW4sIGFuZCB3aWxsIGhlbmNlIGJlIGRyb3BwZWQgZHVyaW5nIHRyZWVzaGFraW5nLikgVGhlIHR3byBwcmltYXJ5IHVzZXMgZm9yIHRoaXMgYXJlIHN0cmlwcGluZyBvdXQgY2FsbHMgdG9cbiAqIGBsb2dnZXJgIGFuZCBwcmV2ZW50aW5nIG5vZGUtcmVsYXRlZCBjb2RlIGZyb20gYXBwZWFyaW5nIGluIGJyb3dzZXIgYnVuZGxlcy5cbiAqXG4gKiBBdHRlbnRpb246XG4gKiBUaGlzIGZpbGUgc2hvdWxkIG5vdCBiZSB1c2VkIHRvIGRlZmluZSBjb25zdGFudHMvZmxhZ3MgdGhhdCBhcmUgaW50ZW5kZWQgdG8gYmUgdXNlZCBmb3IgdHJlZS1zaGFraW5nIGNvbmR1Y3RlZCBieVxuICogdXNlcnMuIFRoZXNlIGZsYWdzIHNob3VsZCBsaXZlIGluIHRoZWlyIHJlc3BlY3RpdmUgcGFja2FnZXMsIGFzIHdlIGlkZW50aWZpZWQgdXNlciB0b29saW5nIChzcGVjaWZpY2FsbHkgd2VicGFjaylcbiAqIGhhdmluZyBpc3N1ZXMgdHJlZS1zaGFraW5nIHRoZXNlIGNvbnN0YW50cyBhY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzLlxuICogQW4gZXhhbXBsZSBmb3IgdGhpcyBpcyB0aGUgX19TRU5UUllfREVCVUdfXyBjb25zdGFudC4gSXQgaXMgZGVjbGFyZWQgaW4gZWFjaCBwYWNrYWdlIGluZGl2aWR1YWxseSBiZWNhdXNlIHdlIHdhbnRcbiAqIHVzZXJzIHRvIGJlIGFibGUgdG8gc2hha2UgYXdheSBleHByZXNzaW9ucyB0aGF0IGl0IGd1YXJkcy5cbiAqL1xuXG4vKipcbiAqIEZpZ3VyZXMgb3V0IGlmIHdlJ3JlIGJ1aWxkaW5nIGEgYnJvd3NlciBidW5kbGUuXG4gKlxuICogQHJldHVybnMgdHJ1ZSBpZiB0aGlzIGlzIGEgYnJvd3NlciBidW5kbGUgYnVpbGQuXG4gKi9cbmZ1bmN0aW9uIGlzQnJvd3NlckJ1bmRsZSgpIHtcbiAgcmV0dXJuIHR5cGVvZiBfX1NFTlRSWV9CUk9XU0VSX0JVTkRMRV9fICE9PSAndW5kZWZpbmVkJyAmJiAhIV9fU0VOVFJZX0JST1dTRVJfQlVORExFX187XG59XG5cbi8qKlxuICogR2V0IHNvdXJjZSBvZiBTREsuXG4gKi9cbmZ1bmN0aW9uIGdldFNES1NvdXJjZSgpIHtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBcIm5wbVwiIGlzIGluamVjdGVkIGJ5IHJvbGx1cCBkdXJpbmcgYnVpbGQgcHJvY2Vzc1xuICByZXR1cm4gXCJucG1cIjtcbn1cblxuZXhwb3J0IHsgZ2V0U0RLU291cmNlLCBpc0Jyb3dzZXJCdW5kbGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJpc0Jyb3dzZXJCdW5kbGUiLCJfX1NFTlRSWV9CUk9XU0VSX0JVTkRMRV9fIiwiZ2V0U0RLU291cmNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/env.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/envelope.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/envelope.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addItemToEnvelope: () => (/* binding */ addItemToEnvelope),\n/* harmony export */   createAttachmentEnvelopeItem: () => (/* binding */ createAttachmentEnvelopeItem),\n/* harmony export */   createEnvelope: () => (/* binding */ createEnvelope),\n/* harmony export */   createEventEnvelopeHeaders: () => (/* binding */ createEventEnvelopeHeaders),\n/* harmony export */   envelopeContainsItemType: () => (/* binding */ envelopeContainsItemType),\n/* harmony export */   envelopeItemTypeToDataCategory: () => (/* binding */ envelopeItemTypeToDataCategory),\n/* harmony export */   forEachEnvelopeItem: () => (/* binding */ forEachEnvelopeItem),\n/* harmony export */   getSdkMetadataForEnvelopeHeader: () => (/* binding */ getSdkMetadataForEnvelopeHeader),\n/* harmony export */   parseEnvelope: () => (/* binding */ parseEnvelope),\n/* harmony export */   serializeEnvelope: () => (/* binding */ serializeEnvelope)\n/* harmony export */ });\n/* harmony import */ var _dsn_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dsn.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/dsn.js\");\n/* harmony import */ var _normalize_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./normalize.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/normalize.js\");\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./object.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/object.js\");\n\n\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */ function createEnvelope(headers, items = []) {\n    return [\n        headers,\n        items\n    ];\n}\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */ function addItemToEnvelope(envelope, newItem) {\n    const [headers, items] = envelope;\n    return [\n        headers,\n        [\n            ...items,\n            newItem\n        ]\n    ];\n}\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */ function forEachEnvelopeItem(envelope, callback) {\n    const envelopeItems = envelope[1];\n    for (const envelopeItem of envelopeItems){\n        const envelopeItemType = envelopeItem[0].type;\n        const result = callback(envelopeItem, envelopeItemType);\n        if (result) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */ function envelopeContainsItemType(envelope, types) {\n    return forEachEnvelopeItem(envelope, (_, type)=>types.includes(type));\n}\n/**\n * Encode a string to UTF8.\n */ function encodeUTF8(input, textEncoder) {\n    const utf8 = textEncoder || new TextEncoder();\n    return utf8.encode(input);\n}\n/**\n * Serializes an envelope.\n */ function serializeEnvelope(envelope, textEncoder) {\n    const [envHeaders, items] = envelope;\n    // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n    let parts = JSON.stringify(envHeaders);\n    function append(next) {\n        if (typeof parts === \"string\") {\n            parts = typeof next === \"string\" ? parts + next : [\n                encodeUTF8(parts, textEncoder),\n                next\n            ];\n        } else {\n            parts.push(typeof next === \"string\" ? encodeUTF8(next, textEncoder) : next);\n        }\n    }\n    for (const item of items){\n        const [itemHeaders, payload] = item;\n        append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n        if (typeof payload === \"string\" || payload instanceof Uint8Array) {\n            append(payload);\n        } else {\n            let stringifiedPayload;\n            try {\n                stringifiedPayload = JSON.stringify(payload);\n            } catch (e) {\n                // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.strinify()` still\n                // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n                // performance impact but in this case a performance hit is better than throwing.\n                stringifiedPayload = JSON.stringify((0,_normalize_js__WEBPACK_IMPORTED_MODULE_0__.normalize)(payload));\n            }\n            append(stringifiedPayload);\n        }\n    }\n    return typeof parts === \"string\" ? parts : concatBuffers(parts);\n}\nfunction concatBuffers(buffers) {\n    const totalLength = buffers.reduce((acc, buf)=>acc + buf.length, 0);\n    const merged = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const buffer of buffers){\n        merged.set(buffer, offset);\n        offset += buffer.length;\n    }\n    return merged;\n}\n/**\n * Parses an envelope\n */ function parseEnvelope(env, textEncoder, textDecoder) {\n    let buffer = typeof env === \"string\" ? textEncoder.encode(env) : env;\n    function readBinary(length) {\n        const bin = buffer.subarray(0, length);\n        // Replace the buffer with the remaining data excluding trailing newline\n        buffer = buffer.subarray(length + 1);\n        return bin;\n    }\n    function readJson() {\n        let i = buffer.indexOf(0xa);\n        // If we couldn't find a newline, we must have found the end of the buffer\n        if (i < 0) {\n            i = buffer.length;\n        }\n        return JSON.parse(textDecoder.decode(readBinary(i)));\n    }\n    const envelopeHeader = readJson();\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const items = [];\n    while(buffer.length){\n        const itemHeader = readJson();\n        const binaryLength = typeof itemHeader.length === \"number\" ? itemHeader.length : undefined;\n        items.push([\n            itemHeader,\n            binaryLength ? readBinary(binaryLength) : readJson()\n        ]);\n    }\n    return [\n        envelopeHeader,\n        items\n    ];\n}\n/**\n * Creates attachment envelope items\n */ function createAttachmentEnvelopeItem(attachment, textEncoder) {\n    const buffer = typeof attachment.data === \"string\" ? encodeUTF8(attachment.data, textEncoder) : attachment.data;\n    return [\n        (0,_object_js__WEBPACK_IMPORTED_MODULE_1__.dropUndefinedKeys)({\n            type: \"attachment\",\n            length: buffer.length,\n            filename: attachment.filename,\n            content_type: attachment.contentType,\n            attachment_type: attachment.attachmentType\n        }),\n        buffer\n    ];\n}\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP = {\n    session: \"session\",\n    sessions: \"session\",\n    attachment: \"attachment\",\n    transaction: \"transaction\",\n    event: \"error\",\n    client_report: \"internal\",\n    user_report: \"default\",\n    profile: \"profile\",\n    replay_event: \"replay\",\n    replay_recording: \"replay\",\n    check_in: \"monitor\",\n    feedback: \"feedback\",\n    // TODO: This is a temporary workaround until we have a proper data category for metrics\n    statsd: \"unknown\"\n};\n/**\n * Maps the type of an envelope item to a data category.\n */ function envelopeItemTypeToDataCategory(type) {\n    return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n/** Extracts the minimal SDK info from from the metadata or an events */ function getSdkMetadataForEnvelopeHeader(metadataOrEvent) {\n    if (!metadataOrEvent || !metadataOrEvent.sdk) {\n        return;\n    }\n    const { name, version } = metadataOrEvent.sdk;\n    return {\n        name,\n        version\n    };\n}\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */ function createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn) {\n    const dynamicSamplingContext = event.sdkProcessingMetadata && event.sdkProcessingMetadata.dynamicSamplingContext;\n    return {\n        event_id: event.event_id,\n        sent_at: new Date().toISOString(),\n        ...sdkInfo && {\n            sdk: sdkInfo\n        },\n        ...!!tunnel && dsn && {\n            dsn: (0,_dsn_js__WEBPACK_IMPORTED_MODULE_2__.dsnToString)(dsn)\n        },\n        ...dynamicSamplingContext && {\n            trace: (0,_object_js__WEBPACK_IMPORTED_MODULE_1__.dropUndefinedKeys)({\n                ...dynamicSamplingContext\n            })\n        }\n    };\n}\n //# sourceMappingURL=envelope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/envelope.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/error.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/error.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SentryError: () => (/* binding */ SentryError)\n/* harmony export */ });\n/** An error emitted by Sentry SDKs and related utilities. */ class SentryError extends Error {\n    /** Display name of this error instance. */ constructor(message, logLevel = \"warn\"){\n        super(message);\n        this.message = message;\n        this.name = new.target.prototype.constructor.name;\n        // This sets the prototype to be `Error`, not `SentryError`. It's unclear why we do this, but commenting this line\n        // out causes various (seemingly totally unrelated) playwright tests consistently time out. FYI, this makes\n        // instances of `SentryError` fail `obj instanceof SentryError` checks.\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.logLevel = logLevel;\n    }\n}\n //# sourceMappingURL=error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9lcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMkRBQTJELEdBQzNELE1BQU1BLG9CQUFvQkM7SUFDeEIseUNBQXlDLEdBRXhDQyxZQUFhQyxPQUFPLEVBQUVDLFdBQVcsTUFBTSxDQUFFO1FBQ3hDLEtBQUssQ0FBQ0Q7UUFBUyxJQUFJLENBQUNBLE9BQU8sR0FBR0E7UUFDOUIsSUFBSSxDQUFDRSxJQUFJLEdBQUcsV0FBV0MsU0FBUyxDQUFDSixXQUFXLENBQUNHLElBQUk7UUFDakQsa0hBQWtIO1FBQ2xILDJHQUEyRztRQUMzRyx1RUFBdUU7UUFDdkVFLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBV0YsU0FBUztRQUNoRCxJQUFJLENBQUNGLFFBQVEsR0FBR0E7SUFDbEI7QUFDRjtBQUV1QixDQUN2QixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9lcnJvci5qcz9jZjdkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBBbiBlcnJvciBlbWl0dGVkIGJ5IFNlbnRyeSBTREtzIGFuZCByZWxhdGVkIHV0aWxpdGllcy4gKi9cbmNsYXNzIFNlbnRyeUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAvKiogRGlzcGxheSBuYW1lIG9mIHRoaXMgZXJyb3IgaW5zdGFuY2UuICovXG5cbiAgIGNvbnN0cnVjdG9yKCBtZXNzYWdlLCBsb2dMZXZlbCA9ICd3YXJuJykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO3RoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5uYW1lID0gbmV3LnRhcmdldC5wcm90b3R5cGUuY29uc3RydWN0b3IubmFtZTtcbiAgICAvLyBUaGlzIHNldHMgdGhlIHByb3RvdHlwZSB0byBiZSBgRXJyb3JgLCBub3QgYFNlbnRyeUVycm9yYC4gSXQncyB1bmNsZWFyIHdoeSB3ZSBkbyB0aGlzLCBidXQgY29tbWVudGluZyB0aGlzIGxpbmVcbiAgICAvLyBvdXQgY2F1c2VzIHZhcmlvdXMgKHNlZW1pbmdseSB0b3RhbGx5IHVucmVsYXRlZCkgcGxheXdyaWdodCB0ZXN0cyBjb25zaXN0ZW50bHkgdGltZSBvdXQuIEZZSSwgdGhpcyBtYWtlc1xuICAgIC8vIGluc3RhbmNlcyBvZiBgU2VudHJ5RXJyb3JgIGZhaWwgYG9iaiBpbnN0YW5jZW9mIFNlbnRyeUVycm9yYCBjaGVja3MuXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIG5ldy50YXJnZXQucHJvdG90eXBlKTtcbiAgICB0aGlzLmxvZ0xldmVsID0gbG9nTGV2ZWw7XG4gIH1cbn1cblxuZXhwb3J0IHsgU2VudHJ5RXJyb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yLmpzLm1hcFxuIl0sIm5hbWVzIjpbIlNlbnRyeUVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJsb2dMZXZlbCIsIm5hbWUiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/eventbuilder.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/eventbuilder.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   eventFromMessage: () => (/* binding */ eventFromMessage),\n/* harmony export */   eventFromUnknownInput: () => (/* binding */ eventFromUnknownInput),\n/* harmony export */   exceptionFromError: () => (/* binding */ exceptionFromError),\n/* harmony export */   parseStackFrames: () => (/* binding */ parseStackFrames)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./misc.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _normalize_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./normalize.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/normalize.js\");\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./object.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/object.js\");\n\n\n\n\n/**\n * Extracts stack frames from the error.stack string\n */ function parseStackFrames(stackParser, error) {\n    return stackParser(error.stack || \"\", 1);\n}\n/**\n * Extracts stack frames from the error and builds a Sentry Exception\n */ function exceptionFromError(stackParser, error) {\n    const exception = {\n        type: error.name || error.constructor.name,\n        value: error.message\n    };\n    const frames = parseStackFrames(stackParser, error);\n    if (frames.length) {\n        exception.stacktrace = {\n            frames\n        };\n    }\n    return exception;\n}\nfunction getMessageForObject(exception) {\n    if (\"name\" in exception && typeof exception.name === \"string\") {\n        let message = `'${exception.name}' captured as exception`;\n        if (\"message\" in exception && typeof exception.message === \"string\") {\n            message += ` with message '${exception.message}'`;\n        }\n        return message;\n    } else if (\"message\" in exception && typeof exception.message === \"string\") {\n        return exception.message;\n    } else {\n        // This will allow us to group events based on top-level keys\n        // which is much better than creating new group when any key/value change\n        return `Object captured as exception with keys: ${(0,_object_js__WEBPACK_IMPORTED_MODULE_0__.extractExceptionKeysForMessage)(exception)}`;\n    }\n}\n/**\n * Builds and Event from a Exception\n * @hidden\n */ function eventFromUnknownInput(getCurrentHub, stackParser, exception, hint) {\n    let ex = exception;\n    const providedMechanism = hint && hint.data && hint.data.mechanism;\n    const mechanism = providedMechanism || {\n        handled: true,\n        type: \"generic\"\n    };\n    if (!(0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isError)(exception)) {\n        if ((0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(exception)) {\n            const hub = getCurrentHub();\n            const client = hub.getClient();\n            const normalizeDepth = client && client.getOptions().normalizeDepth;\n            hub.configureScope((scope)=>{\n                scope.setExtra(\"__serialized__\", (0,_normalize_js__WEBPACK_IMPORTED_MODULE_2__.normalizeToSize)(exception, normalizeDepth));\n            });\n            const message = getMessageForObject(exception);\n            ex = hint && hint.syntheticException || new Error(message);\n            ex.message = message;\n        } else {\n            // This handles when someone does: `throw \"something awesome\";`\n            // We use synthesized Error here so we can extract a (rough) stack trace.\n            ex = hint && hint.syntheticException || new Error(exception);\n            ex.message = exception;\n        }\n        mechanism.synthetic = true;\n    }\n    const event = {\n        exception: {\n            values: [\n                exceptionFromError(stackParser, ex)\n            ]\n        }\n    };\n    (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.addExceptionTypeValue)(event, undefined, undefined);\n    (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.addExceptionMechanism)(event, mechanism);\n    return {\n        ...event,\n        event_id: hint && hint.event_id\n    };\n}\n/**\n * Builds and Event from a Message\n * @hidden\n */ function eventFromMessage(stackParser, message, // eslint-disable-next-line deprecation/deprecation\nlevel = \"info\", hint, attachStacktrace) {\n    const event = {\n        event_id: hint && hint.event_id,\n        level,\n        message\n    };\n    if (attachStacktrace && hint && hint.syntheticException) {\n        const frames = parseStackFrames(stackParser, hint.syntheticException);\n        if (frames.length) {\n            event.exception = {\n                values: [\n                    {\n                        value: message,\n                        stacktrace: {\n                            frames\n                        }\n                    }\n                ]\n            };\n        }\n    }\n    return event;\n}\n //# sourceMappingURL=eventbuilder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/eventbuilder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/instrument/_handlers.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/instrument/_handlers.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addHandler: () => (/* binding */ addHandler),\n/* harmony export */   maybeInstrument: () => (/* binding */ maybeInstrument),\n/* harmony export */   resetInstrumentationHandlers: () => (/* binding */ resetInstrumentationHandlers),\n/* harmony export */   triggerHandlers: () => (/* binding */ triggerHandlers)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/debug-build.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../logger.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _stacktrace_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../stacktrace.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/stacktrace.js\");\n\n\n\n// We keep the handlers globally\nconst handlers = {};\nconst instrumented = {};\n/** Add a handler function. */ function addHandler(type, handler) {\n    handlers[type] = handlers[type] || [];\n    handlers[type].push(handler);\n}\n/**\n * Reset all instrumentation handlers.\n * This can be used by tests to ensure we have a clean slate of instrumentation handlers.\n */ function resetInstrumentationHandlers() {\n    Object.keys(handlers).forEach((key)=>{\n        handlers[key] = undefined;\n    });\n}\n/** Maybe run an instrumentation function, unless it was already called. */ function maybeInstrument(type, instrumentFn) {\n    if (!instrumented[type]) {\n        instrumentFn();\n        instrumented[type] = true;\n    }\n}\n/** Trigger handlers for a given instrumentation type. */ function triggerHandlers(type, data) {\n    const typeHandlers = type && handlers[type];\n    if (!typeHandlers) {\n        return;\n    }\n    for (const handler of typeHandlers){\n        try {\n            handler(data);\n        } catch (e) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.error(`Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${(0,_stacktrace_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(handler)}\\nError:`, e);\n        }\n    }\n}\n //# sourceMappingURL=_handlers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9pbnN0cnVtZW50L19oYW5kbGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQWdEO0FBQ1Y7QUFDYTtBQUVuRCxnQ0FBZ0M7QUFDaEMsTUFBTUcsV0FBVyxDQUFDO0FBQ2xCLE1BQU1DLGVBQWUsQ0FBQztBQUV0Qiw0QkFBNEIsR0FDNUIsU0FBU0MsV0FBV0MsSUFBSSxFQUFFQyxPQUFPO0lBQy9CSixRQUFRLENBQUNHLEtBQUssR0FBR0gsUUFBUSxDQUFDRyxLQUFLLElBQUksRUFBRTtJQUNwQ0gsUUFBUSxDQUFDRyxLQUFLLENBQUdFLElBQUksQ0FBQ0Q7QUFDekI7QUFFQTs7O0NBR0MsR0FDRCxTQUFTRTtJQUNQQyxPQUFPQyxJQUFJLENBQUNSLFVBQVVTLE9BQU8sQ0FBQ0MsQ0FBQUE7UUFDNUJWLFFBQVEsQ0FBQ1UsSUFBSyxHQUFHQztJQUNuQjtBQUNGO0FBRUEseUVBQXlFLEdBQ3pFLFNBQVNDLGdCQUFnQlQsSUFBSSxFQUFFVSxZQUFZO0lBQ3pDLElBQUksQ0FBQ1osWUFBWSxDQUFDRSxLQUFLLEVBQUU7UUFDdkJVO1FBQ0FaLFlBQVksQ0FBQ0UsS0FBSyxHQUFHO0lBQ3ZCO0FBQ0Y7QUFFQSx1REFBdUQsR0FDdkQsU0FBU1csZ0JBQWdCWCxJQUFJLEVBQUVZLElBQUk7SUFDakMsTUFBTUMsZUFBZWIsUUFBUUgsUUFBUSxDQUFDRyxLQUFLO0lBQzNDLElBQUksQ0FBQ2EsY0FBYztRQUNqQjtJQUNGO0lBRUEsS0FBSyxNQUFNWixXQUFXWSxhQUFjO1FBQ2xDLElBQUk7WUFDRlosUUFBUVc7UUFDVixFQUFFLE9BQU9FLEdBQUc7WUFDVnBCLHdEQUFXQSxJQUNUQyw4Q0FBTUEsQ0FBQ29CLEtBQUssQ0FDVixDQUFDLHVEQUF1RCxFQUFFZixLQUFLLFFBQVEsRUFBRUosK0RBQWVBLENBQUNLLFNBQVMsUUFBUSxDQUFDLEVBQzNHYTtRQUVOO0lBQ0Y7QUFDRjtBQUVzRixDQUN0RixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9pbnN0cnVtZW50L19oYW5kbGVycy5qcz8yNWM0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERFQlVHX0JVSUxEIH0gZnJvbSAnLi4vZGVidWctYnVpbGQuanMnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi4vbG9nZ2VyLmpzJztcbmltcG9ydCB7IGdldEZ1bmN0aW9uTmFtZSB9IGZyb20gJy4uL3N0YWNrdHJhY2UuanMnO1xuXG4vLyBXZSBrZWVwIHRoZSBoYW5kbGVycyBnbG9iYWxseVxuY29uc3QgaGFuZGxlcnMgPSB7fTtcbmNvbnN0IGluc3RydW1lbnRlZCA9IHt9O1xuXG4vKiogQWRkIGEgaGFuZGxlciBmdW5jdGlvbi4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZXIodHlwZSwgaGFuZGxlcikge1xuICBoYW5kbGVyc1t0eXBlXSA9IGhhbmRsZXJzW3R5cGVdIHx8IFtdO1xuICAoaGFuZGxlcnNbdHlwZV0gKS5wdXNoKGhhbmRsZXIpO1xufVxuXG4vKipcbiAqIFJlc2V0IGFsbCBpbnN0cnVtZW50YXRpb24gaGFuZGxlcnMuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIGJ5IHRlc3RzIHRvIGVuc3VyZSB3ZSBoYXZlIGEgY2xlYW4gc2xhdGUgb2YgaW5zdHJ1bWVudGF0aW9uIGhhbmRsZXJzLlxuICovXG5mdW5jdGlvbiByZXNldEluc3RydW1lbnRhdGlvbkhhbmRsZXJzKCkge1xuICBPYmplY3Qua2V5cyhoYW5kbGVycykuZm9yRWFjaChrZXkgPT4ge1xuICAgIGhhbmRsZXJzW2tleSBdID0gdW5kZWZpbmVkO1xuICB9KTtcbn1cblxuLyoqIE1heWJlIHJ1biBhbiBpbnN0cnVtZW50YXRpb24gZnVuY3Rpb24sIHVubGVzcyBpdCB3YXMgYWxyZWFkeSBjYWxsZWQuICovXG5mdW5jdGlvbiBtYXliZUluc3RydW1lbnQodHlwZSwgaW5zdHJ1bWVudEZuKSB7XG4gIGlmICghaW5zdHJ1bWVudGVkW3R5cGVdKSB7XG4gICAgaW5zdHJ1bWVudEZuKCk7XG4gICAgaW5zdHJ1bWVudGVkW3R5cGVdID0gdHJ1ZTtcbiAgfVxufVxuXG4vKiogVHJpZ2dlciBoYW5kbGVycyBmb3IgYSBnaXZlbiBpbnN0cnVtZW50YXRpb24gdHlwZS4gKi9cbmZ1bmN0aW9uIHRyaWdnZXJIYW5kbGVycyh0eXBlLCBkYXRhKSB7XG4gIGNvbnN0IHR5cGVIYW5kbGVycyA9IHR5cGUgJiYgaGFuZGxlcnNbdHlwZV07XG4gIGlmICghdHlwZUhhbmRsZXJzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZm9yIChjb25zdCBoYW5kbGVyIG9mIHR5cGVIYW5kbGVycykge1xuICAgIHRyeSB7XG4gICAgICBoYW5kbGVyKGRhdGEpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIERFQlVHX0JVSUxEICYmXG4gICAgICAgIGxvZ2dlci5lcnJvcihcbiAgICAgICAgICBgRXJyb3Igd2hpbGUgdHJpZ2dlcmluZyBpbnN0cnVtZW50YXRpb24gaGFuZGxlci5cXG5UeXBlOiAke3R5cGV9XFxuTmFtZTogJHtnZXRGdW5jdGlvbk5hbWUoaGFuZGxlcil9XFxuRXJyb3I6YCxcbiAgICAgICAgICBlLFxuICAgICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBhZGRIYW5kbGVyLCBtYXliZUluc3RydW1lbnQsIHJlc2V0SW5zdHJ1bWVudGF0aW9uSGFuZGxlcnMsIHRyaWdnZXJIYW5kbGVycyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X2hhbmRsZXJzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkRFQlVHX0JVSUxEIiwibG9nZ2VyIiwiZ2V0RnVuY3Rpb25OYW1lIiwiaGFuZGxlcnMiLCJpbnN0cnVtZW50ZWQiLCJhZGRIYW5kbGVyIiwidHlwZSIsImhhbmRsZXIiLCJwdXNoIiwicmVzZXRJbnN0cnVtZW50YXRpb25IYW5kbGVycyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwidW5kZWZpbmVkIiwibWF5YmVJbnN0cnVtZW50IiwiaW5zdHJ1bWVudEZuIiwidHJpZ2dlckhhbmRsZXJzIiwiZGF0YSIsInR5cGVIYW5kbGVycyIsImUiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/instrument/_handlers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/instrument/globalError.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/instrument/globalError.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addGlobalErrorInstrumentationHandler: () => (/* binding */ addGlobalErrorInstrumentationHandler)\n/* harmony export */ });\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../worldwide.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/worldwide.js\");\n/* harmony import */ var _handlers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_handlers.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/instrument/_handlers.js\");\n\n\nlet _oldOnErrorHandler = null;\n/**\n * Add an instrumentation handler for when an error is captured by the global error handler.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */ function addGlobalErrorInstrumentationHandler(handler) {\n    const type = \"error\";\n    (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.addHandler)(type, handler);\n    (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.maybeInstrument)(type, instrumentError);\n}\nfunction instrumentError() {\n    _oldOnErrorHandler = _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.onerror;\n    _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.onerror = function(msg, url, line, column, error) {\n        const handlerData = {\n            column,\n            error,\n            line,\n            msg,\n            url\n        };\n        (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)(\"error\", handlerData);\n        if (_oldOnErrorHandler && !_oldOnErrorHandler.__SENTRY_LOADER__) {\n            // eslint-disable-next-line prefer-rest-params\n            return _oldOnErrorHandler.apply(this, arguments);\n        }\n        return false;\n    };\n    _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.onerror.__SENTRY_INSTRUMENTED__ = true;\n}\n //# sourceMappingURL=globalError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9pbnN0cnVtZW50L2dsb2JhbEVycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUNpQztBQUU5RSxJQUFJSSxxQkFBcUI7QUFFekI7Ozs7O0NBS0MsR0FDRCxTQUFTQyxxQ0FBcUNDLE9BQU87SUFDbkQsTUFBTUMsT0FBTztJQUNiTix3REFBVUEsQ0FBQ00sTUFBTUQ7SUFDakJKLDZEQUFlQSxDQUFDSyxNQUFNQztBQUN4QjtBQUVBLFNBQVNBO0lBQ1BKLHFCQUFxQkoscURBQVVBLENBQUNTLE9BQU87SUFFdkNULHFEQUFVQSxDQUFDUyxPQUFPLEdBQUcsU0FDbkJDLEdBQUcsRUFDSEMsR0FBRyxFQUNIQyxJQUFJLEVBQ0pDLE1BQU0sRUFDTkMsS0FBSztRQUVMLE1BQU1DLGNBQWM7WUFDbEJGO1lBQ0FDO1lBQ0FGO1lBQ0FGO1lBQ0FDO1FBQ0Y7UUFDQVIsNkRBQWVBLENBQUMsU0FBU1k7UUFFekIsSUFBSVgsc0JBQXNCLENBQUNBLG1CQUFtQlksaUJBQWlCLEVBQUU7WUFDL0QsOENBQThDO1lBQzlDLE9BQU9aLG1CQUFtQmEsS0FBSyxDQUFDLElBQUksRUFBRUM7UUFDeEM7UUFFQSxPQUFPO0lBQ1Q7SUFFQWxCLHFEQUFVQSxDQUFDUyxPQUFPLENBQUNVLHVCQUF1QixHQUFHO0FBQy9DO0FBRWdELENBQ2hELHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2luc3RydW1lbnQvZ2xvYmFsRXJyb3IuanM/NjYwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHTE9CQUxfT0JKIH0gZnJvbSAnLi4vd29ybGR3aWRlLmpzJztcbmltcG9ydCB7IGFkZEhhbmRsZXIsIG1heWJlSW5zdHJ1bWVudCwgdHJpZ2dlckhhbmRsZXJzIH0gZnJvbSAnLi9faGFuZGxlcnMuanMnO1xuXG5sZXQgX29sZE9uRXJyb3JIYW5kbGVyID0gbnVsbDtcblxuLyoqXG4gKiBBZGQgYW4gaW5zdHJ1bWVudGF0aW9uIGhhbmRsZXIgZm9yIHdoZW4gYW4gZXJyb3IgaXMgY2FwdHVyZWQgYnkgdGhlIGdsb2JhbCBlcnJvciBoYW5kbGVyLlxuICpcbiAqIFVzZSBhdCB5b3VyIG93biByaXNrLCB0aGlzIG1pZ2h0IGJyZWFrIHdpdGhvdXQgY2hhbmdlbG9nIG5vdGljZSwgb25seSB1c2VkIGludGVybmFsbHkuXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIGFkZEdsb2JhbEVycm9ySW5zdHJ1bWVudGF0aW9uSGFuZGxlcihoYW5kbGVyKSB7XG4gIGNvbnN0IHR5cGUgPSAnZXJyb3InO1xuICBhZGRIYW5kbGVyKHR5cGUsIGhhbmRsZXIpO1xuICBtYXliZUluc3RydW1lbnQodHlwZSwgaW5zdHJ1bWVudEVycm9yKTtcbn1cblxuZnVuY3Rpb24gaW5zdHJ1bWVudEVycm9yKCkge1xuICBfb2xkT25FcnJvckhhbmRsZXIgPSBHTE9CQUxfT0JKLm9uZXJyb3I7XG5cbiAgR0xPQkFMX09CSi5vbmVycm9yID0gZnVuY3Rpb24gKFxuICAgIG1zZyxcbiAgICB1cmwsXG4gICAgbGluZSxcbiAgICBjb2x1bW4sXG4gICAgZXJyb3IsXG4gICkge1xuICAgIGNvbnN0IGhhbmRsZXJEYXRhID0ge1xuICAgICAgY29sdW1uLFxuICAgICAgZXJyb3IsXG4gICAgICBsaW5lLFxuICAgICAgbXNnLFxuICAgICAgdXJsLFxuICAgIH07XG4gICAgdHJpZ2dlckhhbmRsZXJzKCdlcnJvcicsIGhhbmRsZXJEYXRhKTtcblxuICAgIGlmIChfb2xkT25FcnJvckhhbmRsZXIgJiYgIV9vbGRPbkVycm9ySGFuZGxlci5fX1NFTlRSWV9MT0FERVJfXykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgcmV0dXJuIF9vbGRPbkVycm9ySGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBHTE9CQUxfT0JKLm9uZXJyb3IuX19TRU5UUllfSU5TVFJVTUVOVEVEX18gPSB0cnVlO1xufVxuXG5leHBvcnQgeyBhZGRHbG9iYWxFcnJvckluc3RydW1lbnRhdGlvbkhhbmRsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdsb2JhbEVycm9yLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkdMT0JBTF9PQkoiLCJhZGRIYW5kbGVyIiwibWF5YmVJbnN0cnVtZW50IiwidHJpZ2dlckhhbmRsZXJzIiwiX29sZE9uRXJyb3JIYW5kbGVyIiwiYWRkR2xvYmFsRXJyb3JJbnN0cnVtZW50YXRpb25IYW5kbGVyIiwiaGFuZGxlciIsInR5cGUiLCJpbnN0cnVtZW50RXJyb3IiLCJvbmVycm9yIiwibXNnIiwidXJsIiwibGluZSIsImNvbHVtbiIsImVycm9yIiwiaGFuZGxlckRhdGEiLCJfX1NFTlRSWV9MT0FERVJfXyIsImFwcGx5IiwiYXJndW1lbnRzIiwiX19TRU5UUllfSU5TVFJVTUVOVEVEX18iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/instrument/globalError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/instrument/globalUnhandledRejection.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/instrument/globalUnhandledRejection.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addGlobalUnhandledRejectionInstrumentationHandler: () => (/* binding */ addGlobalUnhandledRejectionInstrumentationHandler)\n/* harmony export */ });\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../worldwide.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/worldwide.js\");\n/* harmony import */ var _handlers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_handlers.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/instrument/_handlers.js\");\n\n\nlet _oldOnUnhandledRejectionHandler = null;\n/**\n * Add an instrumentation handler for when an unhandled promise rejection is captured.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */ function addGlobalUnhandledRejectionInstrumentationHandler(handler) {\n    const type = \"unhandledrejection\";\n    (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.addHandler)(type, handler);\n    (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.maybeInstrument)(type, instrumentUnhandledRejection);\n}\nfunction instrumentUnhandledRejection() {\n    _oldOnUnhandledRejectionHandler = _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.onunhandledrejection;\n    _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.onunhandledrejection = function(e) {\n        const handlerData = e;\n        (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)(\"unhandledrejection\", handlerData);\n        if (_oldOnUnhandledRejectionHandler && !_oldOnUnhandledRejectionHandler.__SENTRY_LOADER__) {\n            // eslint-disable-next-line prefer-rest-params\n            return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n        }\n        return true;\n    };\n    _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;\n}\n //# sourceMappingURL=globalUnhandledRejection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9pbnN0cnVtZW50L2dsb2JhbFVuaGFuZGxlZFJlamVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNkM7QUFDaUM7QUFFOUUsSUFBSUksa0NBQWtDO0FBRXRDOzs7OztDQUtDLEdBQ0QsU0FBU0Msa0RBQ1BDLE9BQU87SUFFUCxNQUFNQyxPQUFPO0lBQ2JOLHdEQUFVQSxDQUFDTSxNQUFNRDtJQUNqQkosNkRBQWVBLENBQUNLLE1BQU1DO0FBQ3hCO0FBRUEsU0FBU0E7SUFDUEosa0NBQWtDSixxREFBVUEsQ0FBQ1Msb0JBQW9CO0lBRWpFVCxxREFBVUEsQ0FBQ1Msb0JBQW9CLEdBQUcsU0FBVUMsQ0FBQztRQUMzQyxNQUFNQyxjQUFjRDtRQUNwQlAsNkRBQWVBLENBQUMsc0JBQXNCUTtRQUV0QyxJQUFJUCxtQ0FBbUMsQ0FBQ0EsZ0NBQWdDUSxpQkFBaUIsRUFBRTtZQUN6Riw4Q0FBOEM7WUFDOUMsT0FBT1IsZ0NBQWdDUyxLQUFLLENBQUMsSUFBSSxFQUFFQztRQUNyRDtRQUVBLE9BQU87SUFDVDtJQUVBZCxxREFBVUEsQ0FBQ1Msb0JBQW9CLENBQUNNLHVCQUF1QixHQUFHO0FBQzVEO0FBRTZELENBQzdELG9EQUFvRCIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2luc3RydW1lbnQvZ2xvYmFsVW5oYW5kbGVkUmVqZWN0aW9uLmpzPzgwNjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR0xPQkFMX09CSiB9IGZyb20gJy4uL3dvcmxkd2lkZS5qcyc7XG5pbXBvcnQgeyBhZGRIYW5kbGVyLCBtYXliZUluc3RydW1lbnQsIHRyaWdnZXJIYW5kbGVycyB9IGZyb20gJy4vX2hhbmRsZXJzLmpzJztcblxubGV0IF9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIgPSBudWxsO1xuXG4vKipcbiAqIEFkZCBhbiBpbnN0cnVtZW50YXRpb24gaGFuZGxlciBmb3Igd2hlbiBhbiB1bmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24gaXMgY2FwdHVyZWQuXG4gKlxuICogVXNlIGF0IHlvdXIgb3duIHJpc2ssIHRoaXMgbWlnaHQgYnJlYWsgd2l0aG91dCBjaGFuZ2Vsb2cgbm90aWNlLCBvbmx5IHVzZWQgaW50ZXJuYWxseS5cbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24gYWRkR2xvYmFsVW5oYW5kbGVkUmVqZWN0aW9uSW5zdHJ1bWVudGF0aW9uSGFuZGxlcihcbiAgaGFuZGxlcixcbikge1xuICBjb25zdCB0eXBlID0gJ3VuaGFuZGxlZHJlamVjdGlvbic7XG4gIGFkZEhhbmRsZXIodHlwZSwgaGFuZGxlcik7XG4gIG1heWJlSW5zdHJ1bWVudCh0eXBlLCBpbnN0cnVtZW50VW5oYW5kbGVkUmVqZWN0aW9uKTtcbn1cblxuZnVuY3Rpb24gaW5zdHJ1bWVudFVuaGFuZGxlZFJlamVjdGlvbigpIHtcbiAgX29sZE9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlciA9IEdMT0JBTF9PQkoub251bmhhbmRsZWRyZWplY3Rpb247XG5cbiAgR0xPQkFMX09CSi5vbnVuaGFuZGxlZHJlamVjdGlvbiA9IGZ1bmN0aW9uIChlKSB7XG4gICAgY29uc3QgaGFuZGxlckRhdGEgPSBlO1xuICAgIHRyaWdnZXJIYW5kbGVycygndW5oYW5kbGVkcmVqZWN0aW9uJywgaGFuZGxlckRhdGEpO1xuXG4gICAgaWYgKF9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIgJiYgIV9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIuX19TRU5UUllfTE9BREVSX18pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICAgIHJldHVybiBfb2xkT25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgR0xPQkFMX09CSi5vbnVuaGFuZGxlZHJlamVjdGlvbi5fX1NFTlRSWV9JTlNUUlVNRU5URURfXyA9IHRydWU7XG59XG5cbmV4cG9ydCB7IGFkZEdsb2JhbFVuaGFuZGxlZFJlamVjdGlvbkluc3RydW1lbnRhdGlvbkhhbmRsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdsb2JhbFVuaGFuZGxlZFJlamVjdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJHTE9CQUxfT0JKIiwiYWRkSGFuZGxlciIsIm1heWJlSW5zdHJ1bWVudCIsInRyaWdnZXJIYW5kbGVycyIsIl9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIiLCJhZGRHbG9iYWxVbmhhbmRsZWRSZWplY3Rpb25JbnN0cnVtZW50YXRpb25IYW5kbGVyIiwiaGFuZGxlciIsInR5cGUiLCJpbnN0cnVtZW50VW5oYW5kbGVkUmVqZWN0aW9uIiwib251bmhhbmRsZWRyZWplY3Rpb24iLCJlIiwiaGFuZGxlckRhdGEiLCJfX1NFTlRSWV9MT0FERVJfXyIsImFwcGx5IiwiYXJndW1lbnRzIiwiX19TRU5UUllfSU5TVFJVTUVOVEVEX18iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/instrument/globalUnhandledRejection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/is.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/is.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDOMError: () => (/* binding */ isDOMError),\n/* harmony export */   isDOMException: () => (/* binding */ isDOMException),\n/* harmony export */   isElement: () => (/* binding */ isElement),\n/* harmony export */   isError: () => (/* binding */ isError),\n/* harmony export */   isErrorEvent: () => (/* binding */ isErrorEvent),\n/* harmony export */   isEvent: () => (/* binding */ isEvent),\n/* harmony export */   isInstanceOf: () => (/* binding */ isInstanceOf),\n/* harmony export */   isNaN: () => (/* binding */ isNaN),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isPrimitive: () => (/* binding */ isPrimitive),\n/* harmony export */   isRegExp: () => (/* binding */ isRegExp),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isSyntheticEvent: () => (/* binding */ isSyntheticEvent),\n/* harmony export */   isThenable: () => (/* binding */ isThenable),\n/* harmony export */   isVueViewModel: () => (/* binding */ isVueViewModel)\n/* harmony export */ });\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isError(wat) {\n    switch(objectToString.call(wat)){\n        case \"[object Error]\":\n        case \"[object Exception]\":\n        case \"[object DOMException]\":\n            return true;\n        default:\n            return isInstanceOf(wat, Error);\n    }\n}\n/**\n * Checks whether given value is an instance of the given built-in class.\n *\n * @param wat The value to be checked\n * @param className\n * @returns A boolean representing the result.\n */ function isBuiltin(wat, className) {\n    return objectToString.call(wat) === `[object ${className}]`;\n}\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isErrorEvent(wat) {\n    return isBuiltin(wat, \"ErrorEvent\");\n}\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isDOMError(wat) {\n    return isBuiltin(wat, \"DOMError\");\n}\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isDOMException(wat) {\n    return isBuiltin(wat, \"DOMException\");\n}\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isString(wat) {\n    return isBuiltin(wat, \"String\");\n}\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isPrimitive(wat) {\n    return wat === null || typeof wat !== \"object\" && typeof wat !== \"function\";\n}\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isPlainObject(wat) {\n    return isBuiltin(wat, \"Object\");\n}\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isEvent(wat) {\n    return typeof Event !== \"undefined\" && isInstanceOf(wat, Event);\n}\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isElement(wat) {\n    return typeof Element !== \"undefined\" && isInstanceOf(wat, Element);\n}\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isRegExp(wat) {\n    return isBuiltin(wat, \"RegExp\");\n}\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */ function isThenable(wat) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return Boolean(wat && wat.then && typeof wat.then === \"function\");\n}\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isSyntheticEvent(wat) {\n    return isPlainObject(wat) && \"nativeEvent\" in wat && \"preventDefault\" in wat && \"stopPropagation\" in wat;\n}\n/**\n * Checks whether given value is NaN\n * {@link isNaN}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isNaN(wat) {\n    return typeof wat === \"number\" && wat !== wat;\n}\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */ function isInstanceOf(wat, base) {\n    try {\n        return wat instanceof base;\n    } catch (_e) {\n        return false;\n    }\n}\n/**\n * Checks whether given value's type is a Vue ViewModel.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isVueViewModel(wat) {\n    // Not using Object.prototype.toString because in Vue 3 it would read the instance's Symbol(Symbol.toStringTag) property.\n    return !!(typeof wat === \"object\" && wat !== null && (wat.__isVue || wat._isVue));\n}\n //# sourceMappingURL=is.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/is.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONSOLE_LEVELS: () => (/* binding */ CONSOLE_LEVELS),\n/* harmony export */   consoleSandbox: () => (/* binding */ consoleSandbox),\n/* harmony export */   logger: () => (/* binding */ logger),\n/* harmony export */   originalConsoleMethods: () => (/* binding */ originalConsoleMethods)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/debug-build.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/worldwide.js\");\n\n\n/** Prefix for logging strings */ const PREFIX = \"Sentry Logger \";\nconst CONSOLE_LEVELS = [\n    \"debug\",\n    \"info\",\n    \"warn\",\n    \"error\",\n    \"log\",\n    \"assert\",\n    \"trace\"\n];\n/** This may be mutated by the console instrumentation. */ const originalConsoleMethods = {};\n/** JSDoc */ /**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */ function consoleSandbox(callback) {\n    if (!(\"console\" in _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ)) {\n        return callback();\n    }\n    const console = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ.console;\n    const wrappedFuncs = {};\n    const wrappedLevels = Object.keys(originalConsoleMethods);\n    // Restore all wrapped console methods\n    wrappedLevels.forEach((level)=>{\n        const originalConsoleMethod = originalConsoleMethods[level];\n        wrappedFuncs[level] = console[level];\n        console[level] = originalConsoleMethod;\n    });\n    try {\n        return callback();\n    } finally{\n        // Revert restoration to wrapped state\n        wrappedLevels.forEach((level)=>{\n            console[level] = wrappedFuncs[level];\n        });\n    }\n}\nfunction makeLogger() {\n    let enabled = false;\n    const logger = {\n        enable: ()=>{\n            enabled = true;\n        },\n        disable: ()=>{\n            enabled = false;\n        },\n        isEnabled: ()=>enabled\n    };\n    if (_debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD) {\n        CONSOLE_LEVELS.forEach((name)=>{\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            logger[name] = (...args)=>{\n                if (enabled) {\n                    consoleSandbox(()=>{\n                        _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n                    });\n                }\n            };\n        });\n    } else {\n        CONSOLE_LEVELS.forEach((name)=>{\n            logger[name] = ()=>undefined;\n        });\n    }\n    return logger;\n}\nconst logger = makeLogger();\n //# sourceMappingURL=logger.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9sb2dnZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQStDO0FBQ0g7QUFFNUMsK0JBQStCLEdBQy9CLE1BQU1FLFNBQVM7QUFFZixNQUFNQyxpQkFBaUI7SUFDckI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRDtBQUVELHdEQUF3RCxHQUN4RCxNQUFNQyx5QkFFSCxDQUFDO0FBRUosVUFBVSxHQUVWOzs7OztDQUtDLEdBQ0QsU0FBU0MsZUFBZUMsUUFBUTtJQUM5QixJQUFJLENBQUUsbUVBQXNCLEdBQUk7UUFDOUIsT0FBT0E7SUFDVDtJQUVBLE1BQU1DLFVBQVVOLHFEQUFVQSxDQUFDTSxPQUFPO0lBQ2xDLE1BQU1DLGVBQWUsQ0FBQztJQUV0QixNQUFNQyxnQkFBZ0JDLE9BQU9DLElBQUksQ0FBQ1A7SUFFbEMsc0NBQXNDO0lBQ3RDSyxjQUFjRyxPQUFPLENBQUNDLENBQUFBO1FBQ3BCLE1BQU1DLHdCQUF3QlYsc0JBQXNCLENBQUNTLE1BQU07UUFDM0RMLFlBQVksQ0FBQ0ssTUFBTSxHQUFHTixPQUFPLENBQUNNLE1BQU07UUFDcENOLE9BQU8sQ0FBQ00sTUFBTSxHQUFHQztJQUNuQjtJQUVBLElBQUk7UUFDRixPQUFPUjtJQUNULFNBQVU7UUFDUixzQ0FBc0M7UUFDdENHLGNBQWNHLE9BQU8sQ0FBQ0MsQ0FBQUE7WUFDcEJOLE9BQU8sQ0FBQ00sTUFBTSxHQUFHTCxZQUFZLENBQUNLLE1BQU07UUFDdEM7SUFDRjtBQUNGO0FBRUEsU0FBU0U7SUFDUCxJQUFJQyxVQUFVO0lBQ2QsTUFBTUMsU0FBUztRQUNiQyxRQUFRO1lBQ05GLFVBQVU7UUFDWjtRQUNBRyxTQUFTO1lBQ1BILFVBQVU7UUFDWjtRQUNBSSxXQUFXLElBQU1KO0lBQ25CO0lBRUEsSUFBSWhCLHdEQUFXQSxFQUFFO1FBQ2ZHLGVBQWVTLE9BQU8sQ0FBQ1MsQ0FBQUE7WUFDckIsOERBQThEO1lBQzlESixNQUFNLENBQUNJLEtBQUssR0FBRyxDQUFDLEdBQUdDO2dCQUNqQixJQUFJTixTQUFTO29CQUNYWCxlQUFlO3dCQUNiSixxREFBVUEsQ0FBQ00sT0FBTyxDQUFDYyxLQUFLLENBQUMsQ0FBQyxFQUFFbkIsT0FBTyxDQUFDLEVBQUVtQixLQUFLLEVBQUUsQ0FBQyxLQUFLQztvQkFDckQ7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0YsT0FBTztRQUNMbkIsZUFBZVMsT0FBTyxDQUFDUyxDQUFBQTtZQUNyQkosTUFBTSxDQUFDSSxLQUFLLEdBQUcsSUFBTUU7UUFDdkI7SUFDRjtJQUVBLE9BQU9OO0FBQ1Q7QUFFQSxNQUFNQSxTQUFTRjtBQUUyRCxDQUMxRSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9sb2dnZXIuanM/NDE4MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBERUJVR19CVUlMRCB9IGZyb20gJy4vZGVidWctYnVpbGQuanMnO1xuaW1wb3J0IHsgR0xPQkFMX09CSiB9IGZyb20gJy4vd29ybGR3aWRlLmpzJztcblxuLyoqIFByZWZpeCBmb3IgbG9nZ2luZyBzdHJpbmdzICovXG5jb25zdCBQUkVGSVggPSAnU2VudHJ5IExvZ2dlciAnO1xuXG5jb25zdCBDT05TT0xFX0xFVkVMUyA9IFtcbiAgJ2RlYnVnJyxcbiAgJ2luZm8nLFxuICAnd2FybicsXG4gICdlcnJvcicsXG4gICdsb2cnLFxuICAnYXNzZXJ0JyxcbiAgJ3RyYWNlJyxcbl0gO1xuXG4vKiogVGhpcyBtYXkgYmUgbXV0YXRlZCBieSB0aGUgY29uc29sZSBpbnN0cnVtZW50YXRpb24uICovXG5jb25zdCBvcmlnaW5hbENvbnNvbGVNZXRob2RzXG5cbiA9IHt9O1xuXG4vKiogSlNEb2MgKi9cblxuLyoqXG4gKiBUZW1wb3JhcmlseSBkaXNhYmxlIHNlbnRyeSBjb25zb2xlIGluc3RydW1lbnRhdGlvbnMuXG4gKlxuICogQHBhcmFtIGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBydW4gYWdhaW5zdCB0aGUgb3JpZ2luYWwgYGNvbnNvbGVgIG1lc3NhZ2VzXG4gKiBAcmV0dXJucyBUaGUgcmVzdWx0cyBvZiB0aGUgY2FsbGJhY2tcbiAqL1xuZnVuY3Rpb24gY29uc29sZVNhbmRib3goY2FsbGJhY2spIHtcbiAgaWYgKCEoJ2NvbnNvbGUnIGluIEdMT0JBTF9PQkopKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gIH1cblxuICBjb25zdCBjb25zb2xlID0gR0xPQkFMX09CSi5jb25zb2xlIDtcbiAgY29uc3Qgd3JhcHBlZEZ1bmNzID0ge307XG5cbiAgY29uc3Qgd3JhcHBlZExldmVscyA9IE9iamVjdC5rZXlzKG9yaWdpbmFsQ29uc29sZU1ldGhvZHMpIDtcblxuICAvLyBSZXN0b3JlIGFsbCB3cmFwcGVkIGNvbnNvbGUgbWV0aG9kc1xuICB3cmFwcGVkTGV2ZWxzLmZvckVhY2gobGV2ZWwgPT4ge1xuICAgIGNvbnN0IG9yaWdpbmFsQ29uc29sZU1ldGhvZCA9IG9yaWdpbmFsQ29uc29sZU1ldGhvZHNbbGV2ZWxdIDtcbiAgICB3cmFwcGVkRnVuY3NbbGV2ZWxdID0gY29uc29sZVtsZXZlbF0gO1xuICAgIGNvbnNvbGVbbGV2ZWxdID0gb3JpZ2luYWxDb25zb2xlTWV0aG9kO1xuICB9KTtcblxuICB0cnkge1xuICAgIHJldHVybiBjYWxsYmFjaygpO1xuICB9IGZpbmFsbHkge1xuICAgIC8vIFJldmVydCByZXN0b3JhdGlvbiB0byB3cmFwcGVkIHN0YXRlXG4gICAgd3JhcHBlZExldmVscy5mb3JFYWNoKGxldmVsID0+IHtcbiAgICAgIGNvbnNvbGVbbGV2ZWxdID0gd3JhcHBlZEZ1bmNzW2xldmVsXSA7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZUxvZ2dlcigpIHtcbiAgbGV0IGVuYWJsZWQgPSBmYWxzZTtcbiAgY29uc3QgbG9nZ2VyID0ge1xuICAgIGVuYWJsZTogKCkgPT4ge1xuICAgICAgZW5hYmxlZCA9IHRydWU7XG4gICAgfSxcbiAgICBkaXNhYmxlOiAoKSA9PiB7XG4gICAgICBlbmFibGVkID0gZmFsc2U7XG4gICAgfSxcbiAgICBpc0VuYWJsZWQ6ICgpID0+IGVuYWJsZWQsXG4gIH07XG5cbiAgaWYgKERFQlVHX0JVSUxEKSB7XG4gICAgQ09OU09MRV9MRVZFTFMuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICBsb2dnZXJbbmFtZV0gPSAoLi4uYXJncykgPT4ge1xuICAgICAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgICAgIGNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgICAgICAgIEdMT0JBTF9PQkouY29uc29sZVtuYW1lXShgJHtQUkVGSVh9WyR7bmFtZX1dOmAsIC4uLmFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIENPTlNPTEVfTEVWRUxTLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICBsb2dnZXJbbmFtZV0gPSAoKSA9PiB1bmRlZmluZWQ7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbG9nZ2VyIDtcbn1cblxuY29uc3QgbG9nZ2VyID0gbWFrZUxvZ2dlcigpO1xuXG5leHBvcnQgeyBDT05TT0xFX0xFVkVMUywgY29uc29sZVNhbmRib3gsIGxvZ2dlciwgb3JpZ2luYWxDb25zb2xlTWV0aG9kcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2VyLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkRFQlVHX0JVSUxEIiwiR0xPQkFMX09CSiIsIlBSRUZJWCIsIkNPTlNPTEVfTEVWRUxTIiwib3JpZ2luYWxDb25zb2xlTWV0aG9kcyIsImNvbnNvbGVTYW5kYm94IiwiY2FsbGJhY2siLCJjb25zb2xlIiwid3JhcHBlZEZ1bmNzIiwid3JhcHBlZExldmVscyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwibGV2ZWwiLCJvcmlnaW5hbENvbnNvbGVNZXRob2QiLCJtYWtlTG9nZ2VyIiwiZW5hYmxlZCIsImxvZ2dlciIsImVuYWJsZSIsImRpc2FibGUiLCJpc0VuYWJsZWQiLCJuYW1lIiwiYXJncyIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/memo.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/memo.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   memoBuilder: () => (/* binding */ memoBuilder)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */ /* eslint-disable @typescript-eslint/no-explicit-any */ /**\n * Helper to decycle json objects\n */ function memoBuilder() {\n    const hasWeakSet = typeof WeakSet === \"function\";\n    const inner = hasWeakSet ? new WeakSet() : [];\n    function memoize(obj) {\n        if (hasWeakSet) {\n            if (inner.has(obj)) {\n                return true;\n            }\n            inner.add(obj);\n            return false;\n        }\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for(let i = 0; i < inner.length; i++){\n            const value = inner[i];\n            if (value === obj) {\n                return true;\n            }\n        }\n        inner.push(obj);\n        return false;\n    }\n    function unmemoize(obj) {\n        if (hasWeakSet) {\n            inner.delete(obj);\n        } else {\n            for(let i = 0; i < inner.length; i++){\n                if (inner[i] === obj) {\n                    inner.splice(i, 1);\n                    break;\n                }\n            }\n        }\n    }\n    return [\n        memoize,\n        unmemoize\n    ];\n}\n //# sourceMappingURL=memo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9tZW1vLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSw2REFBNkQsR0FDN0QscURBQXFELEdBRXJEOztDQUVDLEdBQ0QsU0FBU0E7SUFDUCxNQUFNQyxhQUFhLE9BQU9DLFlBQVk7SUFDdEMsTUFBTUMsUUFBUUYsYUFBYSxJQUFJQyxZQUFZLEVBQUU7SUFDN0MsU0FBU0UsUUFBUUMsR0FBRztRQUNsQixJQUFJSixZQUFZO1lBQ2QsSUFBSUUsTUFBTUcsR0FBRyxDQUFDRCxNQUFNO2dCQUNsQixPQUFPO1lBQ1Q7WUFDQUYsTUFBTUksR0FBRyxDQUFDRjtZQUNWLE9BQU87UUFDVDtRQUNBLDREQUE0RDtRQUM1RCxJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSUwsTUFBTU0sTUFBTSxFQUFFRCxJQUFLO1lBQ3JDLE1BQU1FLFFBQVFQLEtBQUssQ0FBQ0ssRUFBRTtZQUN0QixJQUFJRSxVQUFVTCxLQUFLO2dCQUNqQixPQUFPO1lBQ1Q7UUFDRjtRQUNBRixNQUFNUSxJQUFJLENBQUNOO1FBQ1gsT0FBTztJQUNUO0lBRUEsU0FBU08sVUFBVVAsR0FBRztRQUNwQixJQUFJSixZQUFZO1lBQ2RFLE1BQU1VLE1BQU0sQ0FBQ1I7UUFDZixPQUFPO1lBQ0wsSUFBSyxJQUFJRyxJQUFJLEdBQUdBLElBQUlMLE1BQU1NLE1BQU0sRUFBRUQsSUFBSztnQkFDckMsSUFBSUwsS0FBSyxDQUFDSyxFQUFFLEtBQUtILEtBQUs7b0JBQ3BCRixNQUFNVyxNQUFNLENBQUNOLEdBQUc7b0JBQ2hCO2dCQUNGO1lBQ0Y7UUFDRjtJQUNGO0lBQ0EsT0FBTztRQUFDSjtRQUFTUTtLQUFVO0FBQzdCO0FBRXVCLENBQ3ZCLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL21lbW8uanM/YzkwMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cblxuLyoqXG4gKiBIZWxwZXIgdG8gZGVjeWNsZSBqc29uIG9iamVjdHNcbiAqL1xuZnVuY3Rpb24gbWVtb0J1aWxkZXIoKSB7XG4gIGNvbnN0IGhhc1dlYWtTZXQgPSB0eXBlb2YgV2Vha1NldCA9PT0gJ2Z1bmN0aW9uJztcbiAgY29uc3QgaW5uZXIgPSBoYXNXZWFrU2V0ID8gbmV3IFdlYWtTZXQoKSA6IFtdO1xuICBmdW5jdGlvbiBtZW1vaXplKG9iaikge1xuICAgIGlmIChoYXNXZWFrU2V0KSB7XG4gICAgICBpZiAoaW5uZXIuaGFzKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpbm5lci5hZGQob2JqKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9wcmVmZXItZm9yLW9mXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbm5lci5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgdmFsdWUgPSBpbm5lcltpXTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gb2JqKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpbm5lci5wdXNoKG9iaik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gdW5tZW1vaXplKG9iaikge1xuICAgIGlmIChoYXNXZWFrU2V0KSB7XG4gICAgICBpbm5lci5kZWxldGUob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbm5lci5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaW5uZXJbaV0gPT09IG9iaikge1xuICAgICAgICAgIGlubmVyLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gW21lbW9pemUsIHVubWVtb2l6ZV07XG59XG5cbmV4cG9ydCB7IG1lbW9CdWlsZGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZW1vLmpzLm1hcFxuIl0sIm5hbWVzIjpbIm1lbW9CdWlsZGVyIiwiaGFzV2Vha1NldCIsIldlYWtTZXQiLCJpbm5lciIsIm1lbW9pemUiLCJvYmoiLCJoYXMiLCJhZGQiLCJpIiwibGVuZ3RoIiwidmFsdWUiLCJwdXNoIiwidW5tZW1vaXplIiwiZGVsZXRlIiwic3BsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/memo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/misc.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/misc.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addContextToFrame: () => (/* binding */ addContextToFrame),\n/* harmony export */   addExceptionMechanism: () => (/* binding */ addExceptionMechanism),\n/* harmony export */   addExceptionTypeValue: () => (/* binding */ addExceptionTypeValue),\n/* harmony export */   arrayify: () => (/* binding */ arrayify),\n/* harmony export */   checkOrSetAlreadyCaught: () => (/* binding */ checkOrSetAlreadyCaught),\n/* harmony export */   getEventDescription: () => (/* binding */ getEventDescription),\n/* harmony export */   parseSemver: () => (/* binding */ parseSemver),\n/* harmony export */   uuid4: () => (/* binding */ uuid4)\n/* harmony export */ });\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./string.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/string.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/worldwide.js\");\n\n\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */ function uuid4() {\n    const gbl = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ;\n    const crypto = gbl.crypto || gbl.msCrypto;\n    let getRandomByte = ()=>Math.random() * 16;\n    try {\n        if (crypto && crypto.randomUUID) {\n            return crypto.randomUUID().replace(/-/g, \"\");\n        }\n        if (crypto && crypto.getRandomValues) {\n            getRandomByte = ()=>crypto.getRandomValues(new Uint8Array(1))[0];\n        }\n    } catch (_) {\n    // some runtimes can crash invoking crypto\n    // https://github.com/getsentry/sentry-javascript/issues/8935\n    }\n    // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n    // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n    return ([\n        1e7\n    ] + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, (c)=>// eslint-disable-next-line no-bitwise\n        (c ^ (getRandomByte() & 15) >> c / 4).toString(16));\n}\nfunction getFirstException(event) {\n    return event.exception && event.exception.values ? event.exception.values[0] : undefined;\n}\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */ function getEventDescription(event) {\n    const { message, event_id: eventId } = event;\n    if (message) {\n        return message;\n    }\n    const firstException = getFirstException(event);\n    if (firstException) {\n        if (firstException.type && firstException.value) {\n            return `${firstException.type}: ${firstException.value}`;\n        }\n        return firstException.type || firstException.value || eventId || \"<unknown>\";\n    }\n    return eventId || \"<unknown>\";\n}\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */ function addExceptionTypeValue(event, value, type) {\n    const exception = event.exception = event.exception || {};\n    const values = exception.values = exception.values || [];\n    const firstException = values[0] = values[0] || {};\n    if (!firstException.value) {\n        firstException.value = value || \"\";\n    }\n    if (!firstException.type) {\n        firstException.type = type || \"Error\";\n    }\n}\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */ function addExceptionMechanism(event, newMechanism) {\n    const firstException = getFirstException(event);\n    if (!firstException) {\n        return;\n    }\n    const defaultMechanism = {\n        type: \"generic\",\n        handled: true\n    };\n    const currentMechanism = firstException.mechanism;\n    firstException.mechanism = {\n        ...defaultMechanism,\n        ...currentMechanism,\n        ...newMechanism\n    };\n    if (newMechanism && \"data\" in newMechanism) {\n        const mergedData = {\n            ...currentMechanism && currentMechanism.data,\n            ...newMechanism.data\n        };\n        firstException.mechanism.data = mergedData;\n    }\n}\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n/**\n * Represents Semantic Versioning object\n */ /**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */ function parseSemver(input) {\n    const match = input.match(SEMVER_REGEXP) || [];\n    const major = parseInt(match[1], 10);\n    const minor = parseInt(match[2], 10);\n    const patch = parseInt(match[3], 10);\n    return {\n        buildmetadata: match[5],\n        major: isNaN(major) ? undefined : major,\n        minor: isNaN(minor) ? undefined : minor,\n        patch: isNaN(patch) ? undefined : patch,\n        prerelease: match[4]\n    };\n}\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */ function addContextToFrame(lines, frame, linesOfContext = 5) {\n    // When there is no line number in the frame, attaching context is nonsensical and will even break grouping\n    if (frame.lineno === undefined) {\n        return;\n    }\n    const maxLines = lines.length;\n    const sourceLine = Math.max(Math.min(maxLines - 1, frame.lineno - 1), 0);\n    frame.pre_context = lines.slice(Math.max(0, sourceLine - linesOfContext), sourceLine).map((line)=>(0,_string_js__WEBPACK_IMPORTED_MODULE_1__.snipLine)(line, 0));\n    frame.context_line = (0,_string_js__WEBPACK_IMPORTED_MODULE_1__.snipLine)(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n    frame.post_context = lines.slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext).map((line)=>(0,_string_js__WEBPACK_IMPORTED_MODULE_1__.snipLine)(line, 0));\n}\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */ function checkOrSetAlreadyCaught(exception) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (exception && exception.__sentry_captured__) {\n        return true;\n    }\n    try {\n        // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n        // `ExtraErrorData` integration\n        (0,_object_js__WEBPACK_IMPORTED_MODULE_2__.addNonEnumerableProperty)(exception, \"__sentry_captured__\", true);\n    } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n    }\n    return false;\n}\n/**\n * Checks whether the given input is already an array, and if it isn't, wraps it in one.\n *\n * @param maybeArray Input to turn into an array, if necessary\n * @returns The input, if already an array, or an array with the input as the only element, if not\n */ function arrayify(maybeArray) {\n    return Array.isArray(maybeArray) ? maybeArray : [\n        maybeArray\n    ];\n}\n //# sourceMappingURL=misc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/misc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/node-stack-trace.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/node-stack-trace.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filenameIsInApp: () => (/* binding */ filenameIsInApp),\n/* harmony export */   node: () => (/* binding */ node)\n/* harmony export */ });\n/**\n * Does this filename look like it's part of the app code?\n */ function filenameIsInApp(filename, isNative = false) {\n    const isInternal = isNative || filename && // It's not internal if it's an absolute linux path\n    !filename.startsWith(\"/\") && // It's not internal if it's an absolute windows path\n    !filename.includes(\":\\\\\") && // It's not internal if the path is starting with a dot\n    !filename.startsWith(\".\") && // It's not internal if the frame has a protocol. In node, this is usually the case if the file got pre-processed with a bundler like webpack\n    !filename.match(/^[a-zA-Z]([a-zA-Z0-9.\\-+])*:\\/\\//); // Schema from: https://stackoverflow.com/a/3641782\n    // in_app is all that's not an internal Node function or a module within node_modules\n    // note that isNative appears to return true even for node core libraries\n    // see https://github.com/getsentry/raven-node/issues/176\n    return !isInternal && filename !== undefined && !filename.includes(\"node_modules/\");\n}\n/** Node Stack line parser */ // eslint-disable-next-line complexity\nfunction node(getModule) {\n    const FILENAME_MATCH = /^\\s*[-]{4,}$/;\n    const FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+):(\\d+):(\\d+)?|([^)]+))\\)?/;\n    // eslint-disable-next-line complexity\n    return (line)=>{\n        const lineMatch = line.match(FULL_MATCH);\n        if (lineMatch) {\n            let object;\n            let method;\n            let functionName;\n            let typeName;\n            let methodName;\n            if (lineMatch[1]) {\n                functionName = lineMatch[1];\n                let methodStart = functionName.lastIndexOf(\".\");\n                if (functionName[methodStart - 1] === \".\") {\n                    methodStart--;\n                }\n                if (methodStart > 0) {\n                    object = functionName.slice(0, methodStart);\n                    method = functionName.slice(methodStart + 1);\n                    const objectEnd = object.indexOf(\".Module\");\n                    if (objectEnd > 0) {\n                        functionName = functionName.slice(objectEnd + 1);\n                        object = object.slice(0, objectEnd);\n                    }\n                }\n                typeName = undefined;\n            }\n            if (method) {\n                typeName = object;\n                methodName = method;\n            }\n            if (method === \"<anonymous>\") {\n                methodName = undefined;\n                functionName = undefined;\n            }\n            if (functionName === undefined) {\n                methodName = methodName || \"<anonymous>\";\n                functionName = typeName ? `${typeName}.${methodName}` : methodName;\n            }\n            let filename = lineMatch[2] && lineMatch[2].startsWith(\"file://\") ? lineMatch[2].slice(7) : lineMatch[2];\n            const isNative = lineMatch[5] === \"native\";\n            if (!filename && lineMatch[5] && !isNative) {\n                filename = lineMatch[5];\n            }\n            return {\n                filename,\n                module: getModule ? getModule(filename) : undefined,\n                function: functionName,\n                lineno: parseInt(lineMatch[3], 10) || undefined,\n                colno: parseInt(lineMatch[4], 10) || undefined,\n                in_app: filenameIsInApp(filename, isNative)\n            };\n        }\n        if (line.match(FILENAME_MATCH)) {\n            return {\n                filename: line\n            };\n        }\n        return undefined;\n    };\n}\n //# sourceMappingURL=node-stack-trace.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9ub2RlLXN0YWNrLXRyYWNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7O0NBRUMsR0FDRCxTQUFTQSxnQkFBZ0JDLFFBQVEsRUFBRUMsV0FBVyxLQUFLO0lBQ2pELE1BQU1DLGFBQ0pELFlBQ0NELFlBQ0MsbURBQW1EO0lBQ25ELENBQUNBLFNBQVNHLFVBQVUsQ0FBQyxRQUNyQixxREFBcUQ7SUFDckQsQ0FBQ0gsU0FBU0ksUUFBUSxDQUFDLFVBQ25CLHVEQUF1RDtJQUN2RCxDQUFDSixTQUFTRyxVQUFVLENBQUMsUUFDckIsNklBQTZJO0lBQzdJLENBQUNILFNBQVNLLEtBQUssQ0FBQyxxQ0FBc0MsbURBQW1EO0lBRTdHLHFGQUFxRjtJQUNyRix5RUFBeUU7SUFDekUseURBQXlEO0lBRXpELE9BQU8sQ0FBQ0gsY0FBY0YsYUFBYU0sYUFBYSxDQUFDTixTQUFTSSxRQUFRLENBQUM7QUFDckU7QUFFQSwyQkFBMkIsR0FDM0Isc0NBQXNDO0FBQ3RDLFNBQVNHLEtBQUtDLFNBQVM7SUFDckIsTUFBTUMsaUJBQWlCO0lBQ3ZCLE1BQU1DLGFBQWE7SUFFbkIsc0NBQXNDO0lBQ3RDLE9BQU8sQ0FBQ0M7UUFDTixNQUFNQyxZQUFZRCxLQUFLTixLQUFLLENBQUNLO1FBRTdCLElBQUlFLFdBQVc7WUFDYixJQUFJQztZQUNKLElBQUlDO1lBQ0osSUFBSUM7WUFDSixJQUFJQztZQUNKLElBQUlDO1lBRUosSUFBSUwsU0FBUyxDQUFDLEVBQUUsRUFBRTtnQkFDaEJHLGVBQWVILFNBQVMsQ0FBQyxFQUFFO2dCQUUzQixJQUFJTSxjQUFjSCxhQUFhSSxXQUFXLENBQUM7Z0JBQzNDLElBQUlKLFlBQVksQ0FBQ0csY0FBYyxFQUFFLEtBQUssS0FBSztvQkFDekNBO2dCQUNGO2dCQUVBLElBQUlBLGNBQWMsR0FBRztvQkFDbkJMLFNBQVNFLGFBQWFLLEtBQUssQ0FBQyxHQUFHRjtvQkFDL0JKLFNBQVNDLGFBQWFLLEtBQUssQ0FBQ0YsY0FBYztvQkFDMUMsTUFBTUcsWUFBWVIsT0FBT1MsT0FBTyxDQUFDO29CQUNqQyxJQUFJRCxZQUFZLEdBQUc7d0JBQ2pCTixlQUFlQSxhQUFhSyxLQUFLLENBQUNDLFlBQVk7d0JBQzlDUixTQUFTQSxPQUFPTyxLQUFLLENBQUMsR0FBR0M7b0JBQzNCO2dCQUNGO2dCQUNBTCxXQUFXVjtZQUNiO1lBRUEsSUFBSVEsUUFBUTtnQkFDVkUsV0FBV0g7Z0JBQ1hJLGFBQWFIO1lBQ2Y7WUFFQSxJQUFJQSxXQUFXLGVBQWU7Z0JBQzVCRyxhQUFhWDtnQkFDYlMsZUFBZVQ7WUFDakI7WUFFQSxJQUFJUyxpQkFBaUJULFdBQVc7Z0JBQzlCVyxhQUFhQSxjQUFjO2dCQUMzQkYsZUFBZUMsV0FBVyxDQUFDLEVBQUVBLFNBQVMsQ0FBQyxFQUFFQyxXQUFXLENBQUMsR0FBR0E7WUFDMUQ7WUFFQSxJQUFJakIsV0FBV1ksU0FBUyxDQUFDLEVBQUUsSUFBSUEsU0FBUyxDQUFDLEVBQUUsQ0FBQ1QsVUFBVSxDQUFDLGFBQWFTLFNBQVMsQ0FBQyxFQUFFLENBQUNRLEtBQUssQ0FBQyxLQUFLUixTQUFTLENBQUMsRUFBRTtZQUN4RyxNQUFNWCxXQUFXVyxTQUFTLENBQUMsRUFBRSxLQUFLO1lBRWxDLElBQUksQ0FBQ1osWUFBWVksU0FBUyxDQUFDLEVBQUUsSUFBSSxDQUFDWCxVQUFVO2dCQUMxQ0QsV0FBV1ksU0FBUyxDQUFDLEVBQUU7WUFDekI7WUFFQSxPQUFPO2dCQUNMWjtnQkFDQXVCLFFBQVFmLFlBQVlBLFVBQVVSLFlBQVlNO2dCQUMxQ2tCLFVBQVVUO2dCQUNWVSxRQUFRQyxTQUFTZCxTQUFTLENBQUMsRUFBRSxFQUFFLE9BQU9OO2dCQUN0Q3FCLE9BQU9ELFNBQVNkLFNBQVMsQ0FBQyxFQUFFLEVBQUUsT0FBT047Z0JBQ3JDc0IsUUFBUTdCLGdCQUFnQkMsVUFBVUM7WUFDcEM7UUFDRjtRQUVBLElBQUlVLEtBQUtOLEtBQUssQ0FBQ0ksaUJBQWlCO1lBQzlCLE9BQU87Z0JBQ0xULFVBQVVXO1lBQ1o7UUFDRjtRQUVBLE9BQU9MO0lBQ1Q7QUFDRjtBQUVpQyxDQUNqQyw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9ub2RlLXN0YWNrLXRyYWNlLmpzP2M2YjYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEb2VzIHRoaXMgZmlsZW5hbWUgbG9vayBsaWtlIGl0J3MgcGFydCBvZiB0aGUgYXBwIGNvZGU/XG4gKi9cbmZ1bmN0aW9uIGZpbGVuYW1lSXNJbkFwcChmaWxlbmFtZSwgaXNOYXRpdmUgPSBmYWxzZSkge1xuICBjb25zdCBpc0ludGVybmFsID1cbiAgICBpc05hdGl2ZSB8fFxuICAgIChmaWxlbmFtZSAmJlxuICAgICAgLy8gSXQncyBub3QgaW50ZXJuYWwgaWYgaXQncyBhbiBhYnNvbHV0ZSBsaW51eCBwYXRoXG4gICAgICAhZmlsZW5hbWUuc3RhcnRzV2l0aCgnLycpICYmXG4gICAgICAvLyBJdCdzIG5vdCBpbnRlcm5hbCBpZiBpdCdzIGFuIGFic29sdXRlIHdpbmRvd3MgcGF0aFxuICAgICAgIWZpbGVuYW1lLmluY2x1ZGVzKCc6XFxcXCcpICYmXG4gICAgICAvLyBJdCdzIG5vdCBpbnRlcm5hbCBpZiB0aGUgcGF0aCBpcyBzdGFydGluZyB3aXRoIGEgZG90XG4gICAgICAhZmlsZW5hbWUuc3RhcnRzV2l0aCgnLicpICYmXG4gICAgICAvLyBJdCdzIG5vdCBpbnRlcm5hbCBpZiB0aGUgZnJhbWUgaGFzIGEgcHJvdG9jb2wuIEluIG5vZGUsIHRoaXMgaXMgdXN1YWxseSB0aGUgY2FzZSBpZiB0aGUgZmlsZSBnb3QgcHJlLXByb2Nlc3NlZCB3aXRoIGEgYnVuZGxlciBsaWtlIHdlYnBhY2tcbiAgICAgICFmaWxlbmFtZS5tYXRjaCgvXlthLXpBLVpdKFthLXpBLVowLTkuXFwtK10pKjpcXC9cXC8vKSk7IC8vIFNjaGVtYSBmcm9tOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzY0MTc4MlxuXG4gIC8vIGluX2FwcCBpcyBhbGwgdGhhdCdzIG5vdCBhbiBpbnRlcm5hbCBOb2RlIGZ1bmN0aW9uIG9yIGEgbW9kdWxlIHdpdGhpbiBub2RlX21vZHVsZXNcbiAgLy8gbm90ZSB0aGF0IGlzTmF0aXZlIGFwcGVhcnMgdG8gcmV0dXJuIHRydWUgZXZlbiBmb3Igbm9kZSBjb3JlIGxpYnJhcmllc1xuICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9yYXZlbi1ub2RlL2lzc3Vlcy8xNzZcblxuICByZXR1cm4gIWlzSW50ZXJuYWwgJiYgZmlsZW5hbWUgIT09IHVuZGVmaW5lZCAmJiAhZmlsZW5hbWUuaW5jbHVkZXMoJ25vZGVfbW9kdWxlcy8nKTtcbn1cblxuLyoqIE5vZGUgU3RhY2sgbGluZSBwYXJzZXIgKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiBub2RlKGdldE1vZHVsZSkge1xuICBjb25zdCBGSUxFTkFNRV9NQVRDSCA9IC9eXFxzKlstXXs0LH0kLztcbiAgY29uc3QgRlVMTF9NQVRDSCA9IC9hdCAoPzphc3luYyApPyg/OiguKz8pXFxzK1xcKCk/KD86KC4rKTooXFxkKyk6KFxcZCspP3woW14pXSspKVxcKT8vO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gIHJldHVybiAobGluZSkgPT4ge1xuICAgIGNvbnN0IGxpbmVNYXRjaCA9IGxpbmUubWF0Y2goRlVMTF9NQVRDSCk7XG5cbiAgICBpZiAobGluZU1hdGNoKSB7XG4gICAgICBsZXQgb2JqZWN0O1xuICAgICAgbGV0IG1ldGhvZDtcbiAgICAgIGxldCBmdW5jdGlvbk5hbWU7XG4gICAgICBsZXQgdHlwZU5hbWU7XG4gICAgICBsZXQgbWV0aG9kTmFtZTtcblxuICAgICAgaWYgKGxpbmVNYXRjaFsxXSkge1xuICAgICAgICBmdW5jdGlvbk5hbWUgPSBsaW5lTWF0Y2hbMV07XG5cbiAgICAgICAgbGV0IG1ldGhvZFN0YXJ0ID0gZnVuY3Rpb25OYW1lLmxhc3RJbmRleE9mKCcuJyk7XG4gICAgICAgIGlmIChmdW5jdGlvbk5hbWVbbWV0aG9kU3RhcnQgLSAxXSA9PT0gJy4nKSB7XG4gICAgICAgICAgbWV0aG9kU3RhcnQtLTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtZXRob2RTdGFydCA+IDApIHtcbiAgICAgICAgICBvYmplY3QgPSBmdW5jdGlvbk5hbWUuc2xpY2UoMCwgbWV0aG9kU3RhcnQpO1xuICAgICAgICAgIG1ldGhvZCA9IGZ1bmN0aW9uTmFtZS5zbGljZShtZXRob2RTdGFydCArIDEpO1xuICAgICAgICAgIGNvbnN0IG9iamVjdEVuZCA9IG9iamVjdC5pbmRleE9mKCcuTW9kdWxlJyk7XG4gICAgICAgICAgaWYgKG9iamVjdEVuZCA+IDApIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uTmFtZSA9IGZ1bmN0aW9uTmFtZS5zbGljZShvYmplY3RFbmQgKyAxKTtcbiAgICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5zbGljZSgwLCBvYmplY3RFbmQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0eXBlTmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgaWYgKG1ldGhvZCkge1xuICAgICAgICB0eXBlTmFtZSA9IG9iamVjdDtcbiAgICAgICAgbWV0aG9kTmFtZSA9IG1ldGhvZDtcbiAgICAgIH1cblxuICAgICAgaWYgKG1ldGhvZCA9PT0gJzxhbm9ueW1vdXM+Jykge1xuICAgICAgICBtZXRob2ROYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICBmdW5jdGlvbk5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChmdW5jdGlvbk5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtZXRob2ROYW1lID0gbWV0aG9kTmFtZSB8fCAnPGFub255bW91cz4nO1xuICAgICAgICBmdW5jdGlvbk5hbWUgPSB0eXBlTmFtZSA/IGAke3R5cGVOYW1lfS4ke21ldGhvZE5hbWV9YCA6IG1ldGhvZE5hbWU7XG4gICAgICB9XG5cbiAgICAgIGxldCBmaWxlbmFtZSA9IGxpbmVNYXRjaFsyXSAmJiBsaW5lTWF0Y2hbMl0uc3RhcnRzV2l0aCgnZmlsZTovLycpID8gbGluZU1hdGNoWzJdLnNsaWNlKDcpIDogbGluZU1hdGNoWzJdO1xuICAgICAgY29uc3QgaXNOYXRpdmUgPSBsaW5lTWF0Y2hbNV0gPT09ICduYXRpdmUnO1xuXG4gICAgICBpZiAoIWZpbGVuYW1lICYmIGxpbmVNYXRjaFs1XSAmJiAhaXNOYXRpdmUpIHtcbiAgICAgICAgZmlsZW5hbWUgPSBsaW5lTWF0Y2hbNV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZpbGVuYW1lLFxuICAgICAgICBtb2R1bGU6IGdldE1vZHVsZSA/IGdldE1vZHVsZShmaWxlbmFtZSkgOiB1bmRlZmluZWQsXG4gICAgICAgIGZ1bmN0aW9uOiBmdW5jdGlvbk5hbWUsXG4gICAgICAgIGxpbmVubzogcGFyc2VJbnQobGluZU1hdGNoWzNdLCAxMCkgfHwgdW5kZWZpbmVkLFxuICAgICAgICBjb2xubzogcGFyc2VJbnQobGluZU1hdGNoWzRdLCAxMCkgfHwgdW5kZWZpbmVkLFxuICAgICAgICBpbl9hcHA6IGZpbGVuYW1lSXNJbkFwcChmaWxlbmFtZSwgaXNOYXRpdmUpLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAobGluZS5tYXRjaChGSUxFTkFNRV9NQVRDSCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZpbGVuYW1lOiBsaW5lLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xufVxuXG5leHBvcnQgeyBmaWxlbmFtZUlzSW5BcHAsIG5vZGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGUtc3RhY2stdHJhY2UuanMubWFwXG4iXSwibmFtZXMiOlsiZmlsZW5hbWVJc0luQXBwIiwiZmlsZW5hbWUiLCJpc05hdGl2ZSIsImlzSW50ZXJuYWwiLCJzdGFydHNXaXRoIiwiaW5jbHVkZXMiLCJtYXRjaCIsInVuZGVmaW5lZCIsIm5vZGUiLCJnZXRNb2R1bGUiLCJGSUxFTkFNRV9NQVRDSCIsIkZVTExfTUFUQ0giLCJsaW5lIiwibGluZU1hdGNoIiwib2JqZWN0IiwibWV0aG9kIiwiZnVuY3Rpb25OYW1lIiwidHlwZU5hbWUiLCJtZXRob2ROYW1lIiwibWV0aG9kU3RhcnQiLCJsYXN0SW5kZXhPZiIsInNsaWNlIiwib2JqZWN0RW5kIiwiaW5kZXhPZiIsIm1vZHVsZSIsImZ1bmN0aW9uIiwibGluZW5vIiwicGFyc2VJbnQiLCJjb2xubyIsImluX2FwcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/node-stack-trace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/node.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/node.js ***!
  \**************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dynamicRequire: () => (/* binding */ dynamicRequire),\n/* harmony export */   isNodeEnv: () => (/* binding */ isNodeEnv),\n/* harmony export */   loadModule: () => (/* binding */ loadModule)\n/* harmony export */ });\n/* harmony import */ var _env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./env.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/env.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */ /**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */ function isNodeEnv() {\n    // explicitly check for browser bundles as those can be optimized statically\n    // by terser/rollup.\n    return !(0,_env_js__WEBPACK_IMPORTED_MODULE_0__.isBrowserBundle)() && Object.prototype.toString.call(typeof process !== \"undefined\" ? process : 0) === \"[object process]\";\n}\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */ // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nfunction dynamicRequire(mod, request) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return mod.require(request);\n}\n/**\n * Helper for dynamically loading module that should work with linked dependencies.\n * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`\n * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during\n * build time. `require.resolve` is also not available in any other way, so we cannot create,\n * a fake helper like we do with `dynamicRequire`.\n *\n * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.\n * That is to mimic the behavior of `require.resolve` exactly.\n *\n * @param moduleName module name to require\n * @returns possibly required module\n */ function loadModule(moduleName) {\n    let mod;\n    try {\n        mod = dynamicRequire(module, moduleName);\n    } catch (e) {\n    // no-empty\n    }\n    try {\n        const { cwd } = dynamicRequire(module, \"process\");\n        mod = dynamicRequire(module, `${cwd()}/node_modules/${moduleName}`);\n    } catch (e) {\n    // no-empty\n    }\n    return mod;\n}\n //# sourceMappingURL=node.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9ub2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTJDO0FBRTNDOzs7Q0FHQyxHQUVEOzs7O0NBSUMsR0FDRCxTQUFTQztJQUNQLDRFQUE0RTtJQUM1RSxvQkFBb0I7SUFDcEIsT0FDRSxDQUFDRCx3REFBZUEsTUFDaEJFLE9BQU9DLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDQyxJQUFJLENBQUMsT0FBT0MsWUFBWSxjQUFjQSxVQUFVLE9BQU87QUFFckY7QUFFQTs7OztDQUlDLEdBQ0QsaUhBQWlIO0FBQ2pILFNBQVNDLGVBQWVDLEdBQUcsRUFBRUMsT0FBTztJQUNsQyxzRUFBc0U7SUFDdEUsT0FBT0QsSUFBSUUsT0FBTyxDQUFDRDtBQUNyQjtBQUVBOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUNELFNBQVNFLFdBQVdDLFVBQVU7SUFDNUIsSUFBSUo7SUFFSixJQUFJO1FBQ0ZBLE1BQU1ELGVBQWVNLFFBQVFEO0lBQy9CLEVBQUUsT0FBT0UsR0FBRztJQUNWLFdBQVc7SUFDYjtJQUVBLElBQUk7UUFDRixNQUFNLEVBQUVDLEdBQUcsRUFBRSxHQUFHUixlQUFlTSxRQUFRO1FBQ3ZDTCxNQUFNRCxlQUFlTSxRQUFRLENBQUMsRUFBRUUsTUFBTSxjQUFjLEVBQUVILFdBQVcsQ0FBQztJQUNwRSxFQUFFLE9BQU9FLEdBQUc7SUFDVixXQUFXO0lBQ2I7SUFFQSxPQUFPTjtBQUNUO0FBRWlELENBQ2pELGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL25vZGUuanM/ODBiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0Jyb3dzZXJCdW5kbGUgfSBmcm9tICcuL2Vudi5qcyc7XG5cbi8qKlxuICogTk9URTogSW4gb3JkZXIgdG8gYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLCBpZiB5b3UgYWRkIGEgZnVuY3Rpb24gdG8gdGhpcyBtb2R1bGUgYW5kIGl0IG5lZWRzIHRvIHByaW50IHNvbWV0aGluZyxcbiAqIHlvdSBtdXN0IGVpdGhlciBhKSB1c2UgYGNvbnNvbGUubG9nYCByYXRoZXIgdGhhbiB0aGUgbG9nZ2VyLCBvciBiKSBwdXQgeW91ciBmdW5jdGlvbiBlbHNld2hlcmUuXG4gKi9cblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB3ZSdyZSBpbiB0aGUgTm9kZS5qcyBvciBCcm93c2VyIGVudmlyb25tZW50XG4gKlxuICogQHJldHVybnMgQW5zd2VyIHRvIGdpdmVuIHF1ZXN0aW9uXG4gKi9cbmZ1bmN0aW9uIGlzTm9kZUVudigpIHtcbiAgLy8gZXhwbGljaXRseSBjaGVjayBmb3IgYnJvd3NlciBidW5kbGVzIGFzIHRob3NlIGNhbiBiZSBvcHRpbWl6ZWQgc3RhdGljYWxseVxuICAvLyBieSB0ZXJzZXIvcm9sbHVwLlxuICByZXR1cm4gKFxuICAgICFpc0Jyb3dzZXJCdW5kbGUoKSAmJlxuICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgPyBwcm9jZXNzIDogMCkgPT09ICdbb2JqZWN0IHByb2Nlc3NdJ1xuICApO1xufVxuXG4vKipcbiAqIFJlcXVpcmVzIGEgbW9kdWxlIHdoaWNoIGlzIHByb3RlY3RlZCBhZ2FpbnN0IGJ1bmRsZXIgbWluaWZpY2F0aW9uLlxuICpcbiAqIEBwYXJhbSByZXF1ZXN0IFRoZSBtb2R1bGUgcGF0aCB0byByZXNvbHZlXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBkeW5hbWljUmVxdWlyZShtb2QsIHJlcXVlc3QpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICByZXR1cm4gbW9kLnJlcXVpcmUocmVxdWVzdCk7XG59XG5cbi8qKlxuICogSGVscGVyIGZvciBkeW5hbWljYWxseSBsb2FkaW5nIG1vZHVsZSB0aGF0IHNob3VsZCB3b3JrIHdpdGggbGlua2VkIGRlcGVuZGVuY2llcy5cbiAqIFRoZSBwcm9ibGVtIGlzIHRoYXQgd2UgX3Nob3VsZF8gYmUgdXNpbmcgYHJlcXVpcmUocmVxdWlyZS5yZXNvbHZlKG1vZHVsZU5hbWUsIHsgcGF0aHM6IFtjd2QoKV0gfSkpYFxuICogSG93ZXZlciBpdCdzIF9ub3QgcG9zc2libGVfIHRvIGRvIHRoYXQgd2l0aCBXZWJwYWNrLCBhcyBpdCBoYXMgdG8ga25vdyBhbGwgdGhlIGRlcGVuZGVuY2llcyBkdXJpbmdcbiAqIGJ1aWxkIHRpbWUuIGByZXF1aXJlLnJlc29sdmVgIGlzIGFsc28gbm90IGF2YWlsYWJsZSBpbiBhbnkgb3RoZXIgd2F5LCBzbyB3ZSBjYW5ub3QgY3JlYXRlLFxuICogYSBmYWtlIGhlbHBlciBsaWtlIHdlIGRvIHdpdGggYGR5bmFtaWNSZXF1aXJlYC5cbiAqXG4gKiBXZSBhbHdheXMgcHJlZmVyIHRvIHVzZSBsb2NhbCBwYWNrYWdlLCB0aHVzIHRoZSB2YWx1ZSBpcyBub3QgcmV0dXJuZWQgZWFybHkgZnJvbSBlYWNoIGB0cnkvY2F0Y2hgIGJsb2NrLlxuICogVGhhdCBpcyB0byBtaW1pYyB0aGUgYmVoYXZpb3Igb2YgYHJlcXVpcmUucmVzb2x2ZWAgZXhhY3RseS5cbiAqXG4gKiBAcGFyYW0gbW9kdWxlTmFtZSBtb2R1bGUgbmFtZSB0byByZXF1aXJlXG4gKiBAcmV0dXJucyBwb3NzaWJseSByZXF1aXJlZCBtb2R1bGVcbiAqL1xuZnVuY3Rpb24gbG9hZE1vZHVsZShtb2R1bGVOYW1lKSB7XG4gIGxldCBtb2Q7XG5cbiAgdHJ5IHtcbiAgICBtb2QgPSBkeW5hbWljUmVxdWlyZShtb2R1bGUsIG1vZHVsZU5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gbm8tZW1wdHlcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBjd2QgfSA9IGR5bmFtaWNSZXF1aXJlKG1vZHVsZSwgJ3Byb2Nlc3MnKTtcbiAgICBtb2QgPSBkeW5hbWljUmVxdWlyZShtb2R1bGUsIGAke2N3ZCgpfS9ub2RlX21vZHVsZXMvJHttb2R1bGVOYW1lfWApIDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIG5vLWVtcHR5XG4gIH1cblxuICByZXR1cm4gbW9kO1xufVxuXG5leHBvcnQgeyBkeW5hbWljUmVxdWlyZSwgaXNOb2RlRW52LCBsb2FkTW9kdWxlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLmpzLm1hcFxuIl0sIm5hbWVzIjpbImlzQnJvd3NlckJ1bmRsZSIsImlzTm9kZUVudiIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsInByb2Nlc3MiLCJkeW5hbWljUmVxdWlyZSIsIm1vZCIsInJlcXVlc3QiLCJyZXF1aXJlIiwibG9hZE1vZHVsZSIsIm1vZHVsZU5hbWUiLCJtb2R1bGUiLCJlIiwiY3dkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/normalize.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/normalize.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   normalizeToSize: () => (/* binding */ normalizeToSize),\n/* harmony export */   walk: () => (/* binding */ visit)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _memo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./memo.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/memo.js\");\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _stacktrace_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stacktrace.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/stacktrace.js\");\n\n\n\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction normalize(input, depth = 100, maxProperties = +Infinity) {\n    try {\n        // since we're at the outermost level, we don't provide a key\n        return visit(\"\", input, depth, maxProperties);\n    } catch (err) {\n        return {\n            ERROR: `**non-serializable** (${err})`\n        };\n    }\n}\n/** JSDoc */ function normalizeToSize(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nobject, // Default Node.js REPL depth\ndepth = 3, // 100kB, as 200kB is max payload size, so half sounds reasonable\nmaxSize = 100 * 1024) {\n    const normalized = normalize(object, depth);\n    if (jsonSize(normalized) > maxSize) {\n        return normalizeToSize(object, depth - 1, maxSize);\n    }\n    return normalized;\n}\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */ function visit(key, value, depth = +Infinity, maxProperties = +Infinity, memo = (0,_memo_js__WEBPACK_IMPORTED_MODULE_0__.memoBuilder)()) {\n    const [memoize, unmemoize] = memo;\n    // Get the simple cases out of the way first\n    if (value == null || // this matches null and undefined -> eqeq not eqeqeq\n    [\n        \"number\",\n        \"boolean\",\n        \"string\"\n    ].includes(typeof value) && !(0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isNaN)(value)) {\n        return value;\n    }\n    const stringified = stringifyValue(key, value);\n    // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n    // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n    if (!stringified.startsWith(\"[object \")) {\n        return stringified;\n    }\n    // From here on, we can assert that `value` is either an object or an array.\n    // Do not normalize objects that we know have already been normalized. As a general rule, the\n    // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n    // have already been normalized.\n    if (value[\"__sentry_skip_normalization__\"]) {\n        return value;\n    }\n    // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n    // We keep a certain amount of depth.\n    // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n    const remainingDepth = typeof value[\"__sentry_override_normalization_depth__\"] === \"number\" ? value[\"__sentry_override_normalization_depth__\"] : depth;\n    // We're also done if we've reached the max depth\n    if (remainingDepth === 0) {\n        // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n        return stringified.replace(\"object \", \"\");\n    }\n    // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n    if (memoize(value)) {\n        return \"[Circular ~]\";\n    }\n    // If the value has a `toJSON` method, we call it to extract more information\n    const valueWithToJSON = value;\n    if (valueWithToJSON && typeof valueWithToJSON.toJSON === \"function\") {\n        try {\n            const jsonValue = valueWithToJSON.toJSON();\n            // We need to normalize the return value of `.toJSON()` in case it has circular references\n            return visit(\"\", jsonValue, remainingDepth - 1, maxProperties, memo);\n        } catch (err) {\n        // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n        }\n    }\n    // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n    // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n    // property/entry, and keep track of the number of items we add to it.\n    const normalized = Array.isArray(value) ? [] : {};\n    let numAdded = 0;\n    // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n    // properties are non-enumerable and otherwise would get missed.\n    const visitable = (0,_object_js__WEBPACK_IMPORTED_MODULE_2__.convertToPlainObject)(value);\n    for(const visitKey in visitable){\n        // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n        if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n            continue;\n        }\n        if (numAdded >= maxProperties) {\n            normalized[visitKey] = \"[MaxProperties ~]\";\n            break;\n        }\n        // Recursively visit all the child nodes\n        const visitValue = visitable[visitKey];\n        normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo);\n        numAdded++;\n    }\n    // Once we've visited all the branches, remove the parent from memo storage\n    unmemoize(value);\n    // Return accumulated values\n    return normalized;\n}\n/* eslint-disable complexity */ /**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */ function stringifyValue(key, // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n// our internal use, it'll do\nvalue) {\n    try {\n        if (key === \"domain\" && value && typeof value === \"object\" && value._events) {\n            return \"[Domain]\";\n        }\n        if (key === \"domainEmitter\") {\n            return \"[DomainEmitter]\";\n        }\n        // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n        // which won't throw if they are not present.\n        if (typeof global !== \"undefined\" && value === global) {\n            return \"[Global]\";\n        }\n        // eslint-disable-next-line no-restricted-globals\n        if (false) {}\n        // eslint-disable-next-line no-restricted-globals\n        if (typeof document !== \"undefined\" && value === document) {\n            return \"[Document]\";\n        }\n        if ((0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isVueViewModel)(value)) {\n            return \"[VueViewModel]\";\n        }\n        // React's SyntheticEvent thingy\n        if ((0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isSyntheticEvent)(value)) {\n            return \"[SyntheticEvent]\";\n        }\n        if (typeof value === \"number\" && value !== value) {\n            return \"[NaN]\";\n        }\n        if (typeof value === \"function\") {\n            return `[Function: ${(0,_stacktrace_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(value)}]`;\n        }\n        if (typeof value === \"symbol\") {\n            return `[${String(value)}]`;\n        }\n        // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n        if (typeof value === \"bigint\") {\n            return `[BigInt: ${String(value)}]`;\n        }\n        // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n        // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n        // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n        // we can make sure that only plain objects come out that way.\n        const objName = getConstructorName(value);\n        // Handle HTML Elements\n        if (/^HTML(\\w*)Element$/.test(objName)) {\n            return `[HTMLElement: ${objName}]`;\n        }\n        return `[object ${objName}]`;\n    } catch (err) {\n        return `**non-serializable** (${err})`;\n    }\n}\n/* eslint-enable complexity */ function getConstructorName(value) {\n    const prototype = Object.getPrototypeOf(value);\n    return prototype ? prototype.constructor.name : \"null prototype\";\n}\n/** Calculates bytes size of input string */ function utf8Length(value) {\n    // eslint-disable-next-line no-bitwise\n    return ~-encodeURI(value).split(/%..|./).length;\n}\n/** Calculates bytes size of input object */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value) {\n    return utf8Length(JSON.stringify(value));\n}\n //# sourceMappingURL=normalize.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/normalize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/object.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/object.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addNonEnumerableProperty: () => (/* binding */ addNonEnumerableProperty),\n/* harmony export */   convertToPlainObject: () => (/* binding */ convertToPlainObject),\n/* harmony export */   dropUndefinedKeys: () => (/* binding */ dropUndefinedKeys),\n/* harmony export */   extractExceptionKeysForMessage: () => (/* binding */ extractExceptionKeysForMessage),\n/* harmony export */   fill: () => (/* binding */ fill),\n/* harmony export */   getOriginalFunction: () => (/* binding */ getOriginalFunction),\n/* harmony export */   markFunctionWrapped: () => (/* binding */ markFunctionWrapped),\n/* harmony export */   objectify: () => (/* binding */ objectify),\n/* harmony export */   urlEncode: () => (/* binding */ urlEncode)\n/* harmony export */ });\n/* harmony import */ var _browser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./browser.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/browser.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/debug-build.js\");\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./string.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/string.js\");\n\n\n\n\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */ function fill(source, name, replacementFactory) {\n    if (!(name in source)) {\n        return;\n    }\n    const original = source[name];\n    const wrapped = replacementFactory(original);\n    // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n    // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n    if (typeof wrapped === \"function\") {\n        markFunctionWrapped(wrapped, original);\n    }\n    source[name] = wrapped;\n}\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */ function addNonEnumerableProperty(obj, name, value) {\n    try {\n        Object.defineProperty(obj, name, {\n            // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n            value: value,\n            writable: true,\n            configurable: true\n        });\n    } catch (o_O) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Failed to add non-enumerable property \"${name}\" to object`, obj);\n    }\n}\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */ function markFunctionWrapped(wrapped, original) {\n    try {\n        const proto = original.prototype || {};\n        wrapped.prototype = original.prototype = proto;\n        addNonEnumerableProperty(wrapped, \"__sentry_original__\", original);\n    } catch (o_O) {} // eslint-disable-line no-empty\n}\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */ function getOriginalFunction(func) {\n    return func.__sentry_original__;\n}\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */ function urlEncode(object) {\n    return Object.keys(object).map((key)=>`${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`).join(\"&\");\n}\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argurment itself, when value is neither an Event nor\n *  an Error.\n */ function convertToPlainObject(value) {\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isError)(value)) {\n        return {\n            message: value.message,\n            name: value.name,\n            stack: value.stack,\n            ...getOwnProperties(value)\n        };\n    } else if ((0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isEvent)(value)) {\n        const newObj = {\n            type: value.type,\n            target: serializeEventTarget(value.target),\n            currentTarget: serializeEventTarget(value.currentTarget),\n            ...getOwnProperties(value)\n        };\n        if (typeof CustomEvent !== \"undefined\" && (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isInstanceOf)(value, CustomEvent)) {\n            newObj.detail = value.detail;\n        }\n        return newObj;\n    } else {\n        return value;\n    }\n}\n/** Creates a string representation of the target of an `Event` object */ function serializeEventTarget(target) {\n    try {\n        return (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isElement)(target) ? (0,_browser_js__WEBPACK_IMPORTED_MODULE_3__.htmlTreeAsString)(target) : Object.prototype.toString.call(target);\n    } catch (_oO) {\n        return \"<unknown>\";\n    }\n}\n/** Filters out all but an object's own properties */ function getOwnProperties(obj) {\n    if (typeof obj === \"object\" && obj !== null) {\n        const extractedProps = {};\n        for(const property in obj){\n            if (Object.prototype.hasOwnProperty.call(obj, property)) {\n                extractedProps[property] = obj[property];\n            }\n        }\n        return extractedProps;\n    } else {\n        return {};\n    }\n}\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */ function extractExceptionKeysForMessage(exception, maxLength = 40) {\n    const keys = Object.keys(convertToPlainObject(exception));\n    keys.sort();\n    if (!keys.length) {\n        return \"[object has no keys]\";\n    }\n    if (keys[0].length >= maxLength) {\n        return (0,_string_js__WEBPACK_IMPORTED_MODULE_4__.truncate)(keys[0], maxLength);\n    }\n    for(let includedKeys = keys.length; includedKeys > 0; includedKeys--){\n        const serialized = keys.slice(0, includedKeys).join(\", \");\n        if (serialized.length > maxLength) {\n            continue;\n        }\n        if (includedKeys === keys.length) {\n            return serialized;\n        }\n        return (0,_string_js__WEBPACK_IMPORTED_MODULE_4__.truncate)(serialized, maxLength);\n    }\n    return \"\";\n}\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n */ function dropUndefinedKeys(inputValue) {\n    // This map keeps track of what already visited nodes map to.\n    // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n    // references as the input object.\n    const memoizationMap = new Map();\n    // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n    return _dropUndefinedKeys(inputValue, memoizationMap);\n}\nfunction _dropUndefinedKeys(inputValue, memoizationMap) {\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(inputValue)) {\n        // If this node has already been visited due to a circular reference, return the object it was mapped to in the new object\n        const memoVal = memoizationMap.get(inputValue);\n        if (memoVal !== undefined) {\n            return memoVal;\n        }\n        const returnValue = {};\n        // Store the mapping of this value in case we visit it again, in case of circular data\n        memoizationMap.set(inputValue, returnValue);\n        for (const key of Object.keys(inputValue)){\n            if (typeof inputValue[key] !== \"undefined\") {\n                returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);\n            }\n        }\n        return returnValue;\n    }\n    if (Array.isArray(inputValue)) {\n        // If this node has already been visited due to a circular reference, return the array it was mapped to in the new object\n        const memoVal = memoizationMap.get(inputValue);\n        if (memoVal !== undefined) {\n            return memoVal;\n        }\n        const returnValue = [];\n        // Store the mapping of this value in case we visit it again, in case of circular data\n        memoizationMap.set(inputValue, returnValue);\n        inputValue.forEach((item)=>{\n            returnValue.push(_dropUndefinedKeys(item, memoizationMap));\n        });\n        return returnValue;\n    }\n    return inputValue;\n}\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */ function objectify(wat) {\n    let objectified;\n    switch(true){\n        case wat === undefined || wat === null:\n            objectified = new String(wat);\n            break;\n        // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n        // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n        // an object in order to wrap it.\n        case typeof wat === \"symbol\" || typeof wat === \"bigint\":\n            objectified = Object(wat);\n            break;\n        // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n        case (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isPrimitive)(wat):\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            objectified = new wat.constructor(wat);\n            break;\n        // by process of elimination, at this point we know that `wat` must already be an object\n        default:\n            objectified = wat;\n            break;\n    }\n    return objectified;\n}\n //# sourceMappingURL=object.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/object.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/promisebuffer.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/promisebuffer.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makePromiseBuffer: () => (/* binding */ makePromiseBuffer)\n/* harmony export */ });\n/* harmony import */ var _error_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/error.js\");\n/* harmony import */ var _syncpromise_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./syncpromise.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/syncpromise.js\");\n\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */ function makePromiseBuffer(limit) {\n    const buffer = [];\n    function isReady() {\n        return limit === undefined || buffer.length < limit;\n    }\n    /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */ function remove(task) {\n        return buffer.splice(buffer.indexOf(task), 1)[0];\n    }\n    /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */ function add(taskProducer) {\n        if (!isReady()) {\n            return (0,_syncpromise_js__WEBPACK_IMPORTED_MODULE_0__.rejectedSyncPromise)(new _error_js__WEBPACK_IMPORTED_MODULE_1__.SentryError(\"Not adding Promise because buffer limit was reached.\"));\n        }\n        // start the task and add its promise to the queue\n        const task = taskProducer();\n        if (buffer.indexOf(task) === -1) {\n            buffer.push(task);\n        }\n        void task.then(()=>remove(task))// Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n        // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n        // have promises, so TS has to polyfill when down-compiling.)\n        .then(null, ()=>remove(task).then(null, ()=>{\n            // We have to add another catch here because `remove()` starts a new promise chain.\n            }));\n        return task;\n    }\n    /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */ function drain(timeout) {\n        return new _syncpromise_js__WEBPACK_IMPORTED_MODULE_0__.SyncPromise((resolve, reject)=>{\n            let counter = buffer.length;\n            if (!counter) {\n                return resolve(true);\n            }\n            // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n            const capturedSetTimeout = setTimeout(()=>{\n                if (timeout && timeout > 0) {\n                    resolve(false);\n                }\n            }, timeout);\n            // if all promises resolve in time, cancel the timer and resolve to `true`\n            buffer.forEach((item)=>{\n                void (0,_syncpromise_js__WEBPACK_IMPORTED_MODULE_0__.resolvedSyncPromise)(item).then(()=>{\n                    if (!--counter) {\n                        clearTimeout(capturedSetTimeout);\n                        resolve(true);\n                    }\n                }, reject);\n            });\n        });\n    }\n    return {\n        $: buffer,\n        add,\n        drain\n    };\n}\n //# sourceMappingURL=promisebuffer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9wcm9taXNlYnVmZmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5QztBQUNnRDtBQUV6Rjs7O0NBR0MsR0FDRCxTQUFTSSxrQkFBa0JDLEtBQUs7SUFDOUIsTUFBTUMsU0FBUyxFQUFFO0lBRWpCLFNBQVNDO1FBQ1AsT0FBT0YsVUFBVUcsYUFBYUYsT0FBT0csTUFBTSxHQUFHSjtJQUNoRDtJQUVBOzs7OztHQUtDLEdBQ0QsU0FBU0ssT0FBT0MsSUFBSTtRQUNsQixPQUFPTCxPQUFPTSxNQUFNLENBQUNOLE9BQU9PLE9BQU8sQ0FBQ0YsT0FBTyxFQUFFLENBQUMsRUFBRTtJQUNsRDtJQUVBOzs7Ozs7Ozs7R0FTQyxHQUNELFNBQVNHLElBQUlDLFlBQVk7UUFDdkIsSUFBSSxDQUFDUixXQUFXO1lBQ2QsT0FBT04sb0VBQW1CQSxDQUFDLElBQUlELGtEQUFXQSxDQUFDO1FBQzdDO1FBRUEsa0RBQWtEO1FBQ2xELE1BQU1XLE9BQU9JO1FBQ2IsSUFBSVQsT0FBT08sT0FBTyxDQUFDRixVQUFVLENBQUMsR0FBRztZQUMvQkwsT0FBT1UsSUFBSSxDQUFDTDtRQUNkO1FBQ0EsS0FBS0EsS0FDRk0sSUFBSSxDQUFDLElBQU1QLE9BQU9DLE1BQ25CLDRHQUE0RztRQUM1RyxnSEFBZ0g7UUFDaEgsNkRBQTZEO1NBQzVETSxJQUFJLENBQUMsTUFBTSxJQUNWUCxPQUFPQyxNQUFNTSxJQUFJLENBQUMsTUFBTTtZQUN0QixtRkFBbUY7WUFDckY7UUFFSixPQUFPTjtJQUNUO0lBRUE7Ozs7Ozs7O0dBUUMsR0FDRCxTQUFTTyxNQUFNQyxPQUFPO1FBQ3BCLE9BQU8sSUFBSWpCLHdEQUFXQSxDQUFDLENBQUNrQixTQUFTQztZQUMvQixJQUFJQyxVQUFVaEIsT0FBT0csTUFBTTtZQUUzQixJQUFJLENBQUNhLFNBQVM7Z0JBQ1osT0FBT0YsUUFBUTtZQUNqQjtZQUVBLDZFQUE2RTtZQUM3RSxNQUFNRyxxQkFBcUJDLFdBQVc7Z0JBQ3BDLElBQUlMLFdBQVdBLFVBQVUsR0FBRztvQkFDMUJDLFFBQVE7Z0JBQ1Y7WUFDRixHQUFHRDtZQUVILDBFQUEwRTtZQUMxRWIsT0FBT21CLE9BQU8sQ0FBQ0MsQ0FBQUE7Z0JBQ2IsS0FBS3ZCLG9FQUFtQkEsQ0FBQ3VCLE1BQU1ULElBQUksQ0FBQztvQkFDbEMsSUFBSSxDQUFDLEVBQUVLLFNBQVM7d0JBQ2RLLGFBQWFKO3dCQUNiSCxRQUFRO29CQUNWO2dCQUNGLEdBQUdDO1lBQ0w7UUFDRjtJQUNGO0lBRUEsT0FBTztRQUNMTyxHQUFHdEI7UUFDSFE7UUFDQUk7SUFDRjtBQUNGO0FBRTZCLENBQzdCLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3Byb21pc2VidWZmZXIuanM/OTY4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZW50cnlFcnJvciB9IGZyb20gJy4vZXJyb3IuanMnO1xuaW1wb3J0IHsgcmVqZWN0ZWRTeW5jUHJvbWlzZSwgU3luY1Byb21pc2UsIHJlc29sdmVkU3luY1Byb21pc2UgfSBmcm9tICcuL3N5bmNwcm9taXNlLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIG5ldyBQcm9taXNlQnVmZmVyIG9iamVjdCB3aXRoIHRoZSBzcGVjaWZpZWQgbGltaXRcbiAqIEBwYXJhbSBsaW1pdCBtYXggbnVtYmVyIG9mIHByb21pc2VzIHRoYXQgY2FuIGJlIHN0b3JlZCBpbiB0aGUgYnVmZmVyXG4gKi9cbmZ1bmN0aW9uIG1ha2VQcm9taXNlQnVmZmVyKGxpbWl0KSB7XG4gIGNvbnN0IGJ1ZmZlciA9IFtdO1xuXG4gIGZ1bmN0aW9uIGlzUmVhZHkoKSB7XG4gICAgcmV0dXJuIGxpbWl0ID09PSB1bmRlZmluZWQgfHwgYnVmZmVyLmxlbmd0aCA8IGxpbWl0O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIHByb21pc2UgZnJvbSB0aGUgcXVldWUuXG4gICAqXG4gICAqIEBwYXJhbSB0YXNrIENhbiBiZSBhbnkgUHJvbWlzZUxpa2U8VD5cbiAgICogQHJldHVybnMgUmVtb3ZlZCBwcm9taXNlLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVtb3ZlKHRhc2spIHtcbiAgICByZXR1cm4gYnVmZmVyLnNwbGljZShidWZmZXIuaW5kZXhPZih0YXNrKSwgMSlbMF07XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgcHJvbWlzZSAocmVwcmVzZW50aW5nIGFuIGluLWZsaWdodCBhY3Rpb24pIHRvIHRoZSBxdWV1ZSwgYW5kIHNldCBpdCB0byByZW1vdmUgaXRzZWxmIG9uIGZ1bGZpbGxtZW50LlxuICAgKlxuICAgKiBAcGFyYW0gdGFza1Byb2R1Y2VyIEEgZnVuY3Rpb24gcHJvZHVjaW5nIGFueSBQcm9taXNlTGlrZTxUPjsgSW4gcHJldmlvdXMgdmVyc2lvbnMgdGhpcyB1c2VkIHRvIGJlIGB0YXNrOlxuICAgKiAgICAgICAgUHJvbWlzZUxpa2U8VD5gLCBidXQgdW5kZXIgdGhhdCBtb2RlbCwgUHJvbWlzZXMgd2VyZSBpbnN0YW50bHkgY3JlYXRlZCBvbiB0aGUgY2FsbC1zaXRlIGFuZCB0aGVpciBleGVjdXRvclxuICAgKiAgICAgICAgZnVuY3Rpb25zIHRoZXJlZm9yZSByYW4gaW1tZWRpYXRlbHkuIFRodXMsIGV2ZW4gaWYgdGhlIGJ1ZmZlciB3YXMgZnVsbCwgdGhlIGFjdGlvbiBzdGlsbCBoYXBwZW5lZC4gQnlcbiAgICogICAgICAgIHJlcXVpcmluZyB0aGUgcHJvbWlzZSB0byBiZSB3cmFwcGVkIGluIGEgZnVuY3Rpb24sIHdlIGNhbiBkZWZlciBwcm9taXNlIGNyZWF0aW9uIHVudGlsIGFmdGVyIHRoZSBidWZmZXJcbiAgICogICAgICAgIGxpbWl0IGNoZWNrLlxuICAgKiBAcmV0dXJucyBUaGUgb3JpZ2luYWwgcHJvbWlzZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFkZCh0YXNrUHJvZHVjZXIpIHtcbiAgICBpZiAoIWlzUmVhZHkoKSkge1xuICAgICAgcmV0dXJuIHJlamVjdGVkU3luY1Byb21pc2UobmV3IFNlbnRyeUVycm9yKCdOb3QgYWRkaW5nIFByb21pc2UgYmVjYXVzZSBidWZmZXIgbGltaXQgd2FzIHJlYWNoZWQuJykpO1xuICAgIH1cblxuICAgIC8vIHN0YXJ0IHRoZSB0YXNrIGFuZCBhZGQgaXRzIHByb21pc2UgdG8gdGhlIHF1ZXVlXG4gICAgY29uc3QgdGFzayA9IHRhc2tQcm9kdWNlcigpO1xuICAgIGlmIChidWZmZXIuaW5kZXhPZih0YXNrKSA9PT0gLTEpIHtcbiAgICAgIGJ1ZmZlci5wdXNoKHRhc2spO1xuICAgIH1cbiAgICB2b2lkIHRhc2tcbiAgICAgIC50aGVuKCgpID0+IHJlbW92ZSh0YXNrKSlcbiAgICAgIC8vIFVzZSBgdGhlbihudWxsLCByZWplY3Rpb25IYW5kbGVyKWAgcmF0aGVyIHRoYW4gYGNhdGNoKHJlamVjdGlvbkhhbmRsZXIpYCBzbyB0aGF0IHdlIGNhbiB1c2UgYFByb21pc2VMaWtlYFxuICAgICAgLy8gcmF0aGVyIHRoYW4gYFByb21pc2VgLiBgUHJvbWlzZUxpa2VgIGRvZXNuJ3QgaGF2ZSBhIGAuY2F0Y2hgIG1ldGhvZCwgbWFraW5nIGl0cyBwb2x5ZmlsbCBzbWFsbGVyLiAoRVM1IGRpZG4ndFxuICAgICAgLy8gaGF2ZSBwcm9taXNlcywgc28gVFMgaGFzIHRvIHBvbHlmaWxsIHdoZW4gZG93bi1jb21waWxpbmcuKVxuICAgICAgLnRoZW4obnVsbCwgKCkgPT5cbiAgICAgICAgcmVtb3ZlKHRhc2spLnRoZW4obnVsbCwgKCkgPT4ge1xuICAgICAgICAgIC8vIFdlIGhhdmUgdG8gYWRkIGFub3RoZXIgY2F0Y2ggaGVyZSBiZWNhdXNlIGByZW1vdmUoKWAgc3RhcnRzIGEgbmV3IHByb21pc2UgY2hhaW4uXG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICByZXR1cm4gdGFzaztcbiAgfVxuXG4gIC8qKlxuICAgKiBXYWl0IGZvciBhbGwgcHJvbWlzZXMgaW4gdGhlIHF1ZXVlIHRvIHJlc29sdmUgb3IgZm9yIHRpbWVvdXQgdG8gZXhwaXJlLCB3aGljaGV2ZXIgY29tZXMgZmlyc3QuXG4gICAqXG4gICAqIEBwYXJhbSB0aW1lb3V0IFRoZSB0aW1lLCBpbiBtcywgYWZ0ZXIgd2hpY2ggdG8gcmVzb2x2ZSB0byBgZmFsc2VgIGlmIHRoZSBxdWV1ZSBpcyBzdGlsbCBub24tZW1wdHkuIFBhc3NpbmcgYDBgIChvclxuICAgKiBub3QgcGFzc2luZyBhbnl0aGluZykgd2lsbCBtYWtlIHRoZSBwcm9taXNlIHdhaXQgYXMgbG9uZyBhcyBpdCB0YWtlcyBmb3IgdGhlIHF1ZXVlIHRvIGRyYWluIGJlZm9yZSByZXNvbHZpbmcgdG9cbiAgICogYHRydWVgLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2Ugd2hpY2ggd2lsbCByZXNvbHZlIHRvIGB0cnVlYCBpZiB0aGUgcXVldWUgaXMgYWxyZWFkeSBlbXB0eSBvciBkcmFpbnMgYmVmb3JlIHRoZSB0aW1lb3V0LCBhbmRcbiAgICogYGZhbHNlYCBvdGhlcndpc2VcbiAgICovXG4gIGZ1bmN0aW9uIGRyYWluKHRpbWVvdXQpIHtcbiAgICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxldCBjb3VudGVyID0gYnVmZmVyLmxlbmd0aDtcblxuICAgICAgaWYgKCFjb3VudGVyKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKHRydWUpO1xuICAgICAgfVxuXG4gICAgICAvLyB3YWl0IGZvciBgdGltZW91dGAgbXMgYW5kIHRoZW4gcmVzb2x2ZSB0byBgZmFsc2VgIChpZiBub3QgY2FuY2VsbGVkIGZpcnN0KVxuICAgICAgY29uc3QgY2FwdHVyZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICh0aW1lb3V0ICYmIHRpbWVvdXQgPiAwKSB7XG4gICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHRpbWVvdXQpO1xuXG4gICAgICAvLyBpZiBhbGwgcHJvbWlzZXMgcmVzb2x2ZSBpbiB0aW1lLCBjYW5jZWwgdGhlIHRpbWVyIGFuZCByZXNvbHZlIHRvIGB0cnVlYFxuICAgICAgYnVmZmVyLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIHZvaWQgcmVzb2x2ZWRTeW5jUHJvbWlzZShpdGVtKS50aGVuKCgpID0+IHtcbiAgICAgICAgICBpZiAoIS0tY291bnRlcikge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGNhcHR1cmVkU2V0VGltZW91dCk7XG4gICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAkOiBidWZmZXIsXG4gICAgYWRkLFxuICAgIGRyYWluLFxuICB9O1xufVxuXG5leHBvcnQgeyBtYWtlUHJvbWlzZUJ1ZmZlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvbWlzZWJ1ZmZlci5qcy5tYXBcbiJdLCJuYW1lcyI6WyJTZW50cnlFcnJvciIsInJlamVjdGVkU3luY1Byb21pc2UiLCJTeW5jUHJvbWlzZSIsInJlc29sdmVkU3luY1Byb21pc2UiLCJtYWtlUHJvbWlzZUJ1ZmZlciIsImxpbWl0IiwiYnVmZmVyIiwiaXNSZWFkeSIsInVuZGVmaW5lZCIsImxlbmd0aCIsInJlbW92ZSIsInRhc2siLCJzcGxpY2UiLCJpbmRleE9mIiwiYWRkIiwidGFza1Byb2R1Y2VyIiwicHVzaCIsInRoZW4iLCJkcmFpbiIsInRpbWVvdXQiLCJyZXNvbHZlIiwicmVqZWN0IiwiY291bnRlciIsImNhcHR1cmVkU2V0VGltZW91dCIsInNldFRpbWVvdXQiLCJmb3JFYWNoIiwiaXRlbSIsImNsZWFyVGltZW91dCIsIiQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/promisebuffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/ratelimit.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/ratelimit.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_RETRY_AFTER: () => (/* binding */ DEFAULT_RETRY_AFTER),\n/* harmony export */   disabledUntil: () => (/* binding */ disabledUntil),\n/* harmony export */   isRateLimited: () => (/* binding */ isRateLimited),\n/* harmony export */   parseRetryAfterHeader: () => (/* binding */ parseRetryAfterHeader),\n/* harmony export */   updateRateLimits: () => (/* binding */ updateRateLimits)\n/* harmony export */ });\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\nconst DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */ function parseRetryAfterHeader(header, now = Date.now()) {\n    const headerDelay = parseInt(`${header}`, 10);\n    if (!isNaN(headerDelay)) {\n        return headerDelay * 1000;\n    }\n    const headerDate = Date.parse(`${header}`);\n    if (!isNaN(headerDate)) {\n        return headerDate - now;\n    }\n    return DEFAULT_RETRY_AFTER;\n}\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */ function disabledUntil(limits, category) {\n    return limits[category] || limits.all || 0;\n}\n/**\n * Checks if a category is rate limited\n */ function isRateLimited(limits, category, now = Date.now()) {\n    return disabledUntil(limits, category) > now;\n}\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */ function updateRateLimits(limits, { statusCode, headers }, now = Date.now()) {\n    const updatedRateLimits = {\n        ...limits\n    };\n    // \"The name is case-insensitive.\"\n    // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n    const rateLimitHeader = headers && headers[\"x-sentry-rate-limits\"];\n    const retryAfterHeader = headers && headers[\"retry-after\"];\n    if (rateLimitHeader) {\n        /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     */ for (const limit of rateLimitHeader.trim().split(\",\")){\n            const [retryAfter, categories] = limit.split(\":\", 2);\n            const headerDelay = parseInt(retryAfter, 10);\n            const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n            if (!categories) {\n                updatedRateLimits.all = now + delay;\n            } else {\n                for (const category of categories.split(\";\")){\n                    updatedRateLimits[category] = now + delay;\n                }\n            }\n        }\n    } else if (retryAfterHeader) {\n        updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n    } else if (statusCode === 429) {\n        updatedRateLimits.all = now + 60 * 1000;\n    }\n    return updatedRateLimits;\n}\n //# sourceMappingURL=ratelimit.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9yYXRlbGltaXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxtSEFBbUg7QUFFbkgsTUFBTUEsc0JBQXNCLEtBQUssTUFBTSxhQUFhO0FBRXBEOzs7OztDQUtDLEdBQ0QsU0FBU0Msc0JBQXNCQyxNQUFNLEVBQUVDLE1BQU1DLEtBQUtELEdBQUcsRUFBRTtJQUNyRCxNQUFNRSxjQUFjQyxTQUFTLENBQUMsRUFBRUosT0FBTyxDQUFDLEVBQUU7SUFDMUMsSUFBSSxDQUFDSyxNQUFNRixjQUFjO1FBQ3ZCLE9BQU9BLGNBQWM7SUFDdkI7SUFFQSxNQUFNRyxhQUFhSixLQUFLSyxLQUFLLENBQUMsQ0FBQyxFQUFFUCxPQUFPLENBQUM7SUFDekMsSUFBSSxDQUFDSyxNQUFNQyxhQUFhO1FBQ3RCLE9BQU9BLGFBQWFMO0lBQ3RCO0lBRUEsT0FBT0g7QUFDVDtBQUVBOzs7Ozs7Q0FNQyxHQUNELFNBQVNVLGNBQWNDLE1BQU0sRUFBRUMsUUFBUTtJQUNyQyxPQUFPRCxNQUFNLENBQUNDLFNBQVMsSUFBSUQsT0FBT0UsR0FBRyxJQUFJO0FBQzNDO0FBRUE7O0NBRUMsR0FDRCxTQUFTQyxjQUFjSCxNQUFNLEVBQUVDLFFBQVEsRUFBRVQsTUFBTUMsS0FBS0QsR0FBRyxFQUFFO0lBQ3ZELE9BQU9PLGNBQWNDLFFBQVFDLFlBQVlUO0FBQzNDO0FBRUE7Ozs7Q0FJQyxHQUNELFNBQVNZLGlCQUNQSixNQUFNLEVBQ04sRUFBRUssVUFBVSxFQUFFQyxPQUFPLEVBQUUsRUFDdkJkLE1BQU1DLEtBQUtELEdBQUcsRUFBRTtJQUVoQixNQUFNZSxvQkFBb0I7UUFDeEIsR0FBR1AsTUFBTTtJQUNYO0lBRUEsa0NBQWtDO0lBQ2xDLCtEQUErRDtJQUMvRCxNQUFNUSxrQkFBa0JGLFdBQVdBLE9BQU8sQ0FBQyx1QkFBdUI7SUFDbEUsTUFBTUcsbUJBQW1CSCxXQUFXQSxPQUFPLENBQUMsY0FBYztJQUUxRCxJQUFJRSxpQkFBaUI7UUFDbkI7Ozs7Ozs7Ozs7O0tBV0MsR0FDRCxLQUFLLE1BQU1FLFNBQVNGLGdCQUFnQkcsSUFBSSxHQUFHQyxLQUFLLENBQUMsS0FBTTtZQUNyRCxNQUFNLENBQUNDLFlBQVlDLFdBQVcsR0FBR0osTUFBTUUsS0FBSyxDQUFDLEtBQUs7WUFDbEQsTUFBTWxCLGNBQWNDLFNBQVNrQixZQUFZO1lBQ3pDLE1BQU1FLFFBQVEsQ0FBQyxDQUFDbkIsTUFBTUYsZUFBZUEsY0FBYyxFQUFDLElBQUssTUFBTSxnQkFBZ0I7WUFDL0UsSUFBSSxDQUFDb0IsWUFBWTtnQkFDZlAsa0JBQWtCTCxHQUFHLEdBQUdWLE1BQU11QjtZQUNoQyxPQUFPO2dCQUNMLEtBQUssTUFBTWQsWUFBWWEsV0FBV0YsS0FBSyxDQUFDLEtBQU07b0JBQzVDTCxpQkFBaUIsQ0FBQ04sU0FBUyxHQUFHVCxNQUFNdUI7Z0JBQ3RDO1lBQ0Y7UUFDRjtJQUNGLE9BQU8sSUFBSU4sa0JBQWtCO1FBQzNCRixrQkFBa0JMLEdBQUcsR0FBR1YsTUFBTUYsc0JBQXNCbUIsa0JBQWtCakI7SUFDeEUsT0FBTyxJQUFJYSxlQUFlLEtBQUs7UUFDN0JFLGtCQUFrQkwsR0FBRyxHQUFHVixNQUFNLEtBQUs7SUFDckM7SUFFQSxPQUFPZTtBQUNUO0FBRXNHLENBQ3RHLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3JhdGVsaW1pdC5qcz9iYTc5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEludGVudGlvbmFsbHkga2VlcGluZyB0aGUga2V5IGJyb2FkLCBhcyB3ZSBkb24ndCBrbm93IGZvciBzdXJlIHdoYXQgcmF0ZSBsaW1pdCBoZWFkZXJzIGdldCByZXR1cm5lZCBmcm9tIGJhY2tlbmRcblxuY29uc3QgREVGQVVMVF9SRVRSWV9BRlRFUiA9IDYwICogMTAwMDsgLy8gNjAgc2Vjb25kc1xuXG4vKipcbiAqIEV4dHJhY3RzIFJldHJ5LUFmdGVyIHZhbHVlIGZyb20gdGhlIHJlcXVlc3QgaGVhZGVyIG9yIHJldHVybnMgZGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIGhlYWRlciBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgJ1JldHJ5LUFmdGVyJyBoZWFkZXJcbiAqIEBwYXJhbSBub3cgY3VycmVudCB1bml4IHRpbWVzdGFtcFxuICpcbiAqL1xuZnVuY3Rpb24gcGFyc2VSZXRyeUFmdGVySGVhZGVyKGhlYWRlciwgbm93ID0gRGF0ZS5ub3coKSkge1xuICBjb25zdCBoZWFkZXJEZWxheSA9IHBhcnNlSW50KGAke2hlYWRlcn1gLCAxMCk7XG4gIGlmICghaXNOYU4oaGVhZGVyRGVsYXkpKSB7XG4gICAgcmV0dXJuIGhlYWRlckRlbGF5ICogMTAwMDtcbiAgfVxuXG4gIGNvbnN0IGhlYWRlckRhdGUgPSBEYXRlLnBhcnNlKGAke2hlYWRlcn1gKTtcbiAgaWYgKCFpc05hTihoZWFkZXJEYXRlKSkge1xuICAgIHJldHVybiBoZWFkZXJEYXRlIC0gbm93O1xuICB9XG5cbiAgcmV0dXJuIERFRkFVTFRfUkVUUllfQUZURVI7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgdGltZSB0aGF0IHRoZSBnaXZlbiBjYXRlZ29yeSBpcyBkaXNhYmxlZCB1bnRpbCBmb3IgcmF0ZSBsaW1pdGluZy5cbiAqIEluIGNhc2Ugbm8gY2F0ZWdvcnktc3BlY2lmaWMgbGltaXQgaXMgc2V0IGJ1dCBhIGdlbmVyYWwgcmF0ZSBsaW1pdCBhY3Jvc3MgYWxsIGNhdGVnb3JpZXMgaXMgYWN0aXZlLFxuICogdGhhdCB0aW1lIGlzIHJldHVybmVkLlxuICpcbiAqIEByZXR1cm4gdGhlIHRpbWUgaW4gbXMgdGhhdCB0aGUgY2F0ZWdvcnkgaXMgZGlzYWJsZWQgdW50aWwgb3IgMCBpZiB0aGVyZSdzIG5vIGFjdGl2ZSByYXRlIGxpbWl0LlxuICovXG5mdW5jdGlvbiBkaXNhYmxlZFVudGlsKGxpbWl0cywgY2F0ZWdvcnkpIHtcbiAgcmV0dXJuIGxpbWl0c1tjYXRlZ29yeV0gfHwgbGltaXRzLmFsbCB8fCAwO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGNhdGVnb3J5IGlzIHJhdGUgbGltaXRlZFxuICovXG5mdW5jdGlvbiBpc1JhdGVMaW1pdGVkKGxpbWl0cywgY2F0ZWdvcnksIG5vdyA9IERhdGUubm93KCkpIHtcbiAgcmV0dXJuIGRpc2FibGVkVW50aWwobGltaXRzLCBjYXRlZ29yeSkgPiBub3c7XG59XG5cbi8qKlxuICogVXBkYXRlIHJhdGVsaW1pdHMgZnJvbSBpbmNvbWluZyBoZWFkZXJzLlxuICpcbiAqIEByZXR1cm4gdGhlIHVwZGF0ZWQgUmF0ZUxpbWl0cyBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZVJhdGVMaW1pdHMoXG4gIGxpbWl0cyxcbiAgeyBzdGF0dXNDb2RlLCBoZWFkZXJzIH0sXG4gIG5vdyA9IERhdGUubm93KCksXG4pIHtcbiAgY29uc3QgdXBkYXRlZFJhdGVMaW1pdHMgPSB7XG4gICAgLi4ubGltaXRzLFxuICB9O1xuXG4gIC8vIFwiVGhlIG5hbWUgaXMgY2FzZS1pbnNlbnNpdGl2ZS5cIlxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSGVhZGVycy9nZXRcbiAgY29uc3QgcmF0ZUxpbWl0SGVhZGVyID0gaGVhZGVycyAmJiBoZWFkZXJzWyd4LXNlbnRyeS1yYXRlLWxpbWl0cyddO1xuICBjb25zdCByZXRyeUFmdGVySGVhZGVyID0gaGVhZGVycyAmJiBoZWFkZXJzWydyZXRyeS1hZnRlciddO1xuXG4gIGlmIChyYXRlTGltaXRIZWFkZXIpIHtcbiAgICAvKipcbiAgICAgKiByYXRlIGxpbWl0IGhlYWRlcnMgYXJlIG9mIHRoZSBmb3JtXG4gICAgICogICAgIDxoZWFkZXI+LDxoZWFkZXI+LC4uXG4gICAgICogd2hlcmUgZWFjaCA8aGVhZGVyPiBpcyBvZiB0aGUgZm9ybVxuICAgICAqICAgICA8cmV0cnlfYWZ0ZXI+OiA8Y2F0ZWdvcmllcz46IDxzY29wZT46IDxyZWFzb25fY29kZT5cbiAgICAgKiB3aGVyZVxuICAgICAqICAgICA8cmV0cnlfYWZ0ZXI+IGlzIGEgZGVsYXkgaW4gc2Vjb25kc1xuICAgICAqICAgICA8Y2F0ZWdvcmllcz4gaXMgdGhlIGV2ZW50IHR5cGUocykgKGVycm9yLCB0cmFuc2FjdGlvbiwgZXRjKSBiZWluZyByYXRlIGxpbWl0ZWQgYW5kIGlzIG9mIHRoZSBmb3JtXG4gICAgICogICAgICAgICA8Y2F0ZWdvcnk+OzxjYXRlZ29yeT47Li4uXG4gICAgICogICAgIDxzY29wZT4gaXMgd2hhdCdzIGJlaW5nIGxpbWl0ZWQgKG9yZywgcHJvamVjdCwgb3Iga2V5KSAtIGlnbm9yZWQgYnkgU0RLXG4gICAgICogICAgIDxyZWFzb25fY29kZT4gaXMgYW4gYXJiaXRyYXJ5IHN0cmluZyBsaWtlIFwib3JnX3F1b3RhXCIgLSBpZ25vcmVkIGJ5IFNES1xuICAgICAqL1xuICAgIGZvciAoY29uc3QgbGltaXQgb2YgcmF0ZUxpbWl0SGVhZGVyLnRyaW0oKS5zcGxpdCgnLCcpKSB7XG4gICAgICBjb25zdCBbcmV0cnlBZnRlciwgY2F0ZWdvcmllc10gPSBsaW1pdC5zcGxpdCgnOicsIDIpO1xuICAgICAgY29uc3QgaGVhZGVyRGVsYXkgPSBwYXJzZUludChyZXRyeUFmdGVyLCAxMCk7XG4gICAgICBjb25zdCBkZWxheSA9ICghaXNOYU4oaGVhZGVyRGVsYXkpID8gaGVhZGVyRGVsYXkgOiA2MCkgKiAxMDAwOyAvLyA2MHNlYyBkZWZhdWx0XG4gICAgICBpZiAoIWNhdGVnb3JpZXMpIHtcbiAgICAgICAgdXBkYXRlZFJhdGVMaW1pdHMuYWxsID0gbm93ICsgZGVsYXk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGNvbnN0IGNhdGVnb3J5IG9mIGNhdGVnb3JpZXMuc3BsaXQoJzsnKSkge1xuICAgICAgICAgIHVwZGF0ZWRSYXRlTGltaXRzW2NhdGVnb3J5XSA9IG5vdyArIGRlbGF5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHJldHJ5QWZ0ZXJIZWFkZXIpIHtcbiAgICB1cGRhdGVkUmF0ZUxpbWl0cy5hbGwgPSBub3cgKyBwYXJzZVJldHJ5QWZ0ZXJIZWFkZXIocmV0cnlBZnRlckhlYWRlciwgbm93KTtcbiAgfSBlbHNlIGlmIChzdGF0dXNDb2RlID09PSA0MjkpIHtcbiAgICB1cGRhdGVkUmF0ZUxpbWl0cy5hbGwgPSBub3cgKyA2MCAqIDEwMDA7XG4gIH1cblxuICByZXR1cm4gdXBkYXRlZFJhdGVMaW1pdHM7XG59XG5cbmV4cG9ydCB7IERFRkFVTFRfUkVUUllfQUZURVIsIGRpc2FibGVkVW50aWwsIGlzUmF0ZUxpbWl0ZWQsIHBhcnNlUmV0cnlBZnRlckhlYWRlciwgdXBkYXRlUmF0ZUxpbWl0cyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmF0ZWxpbWl0LmpzLm1hcFxuIl0sIm5hbWVzIjpbIkRFRkFVTFRfUkVUUllfQUZURVIiLCJwYXJzZVJldHJ5QWZ0ZXJIZWFkZXIiLCJoZWFkZXIiLCJub3ciLCJEYXRlIiwiaGVhZGVyRGVsYXkiLCJwYXJzZUludCIsImlzTmFOIiwiaGVhZGVyRGF0ZSIsInBhcnNlIiwiZGlzYWJsZWRVbnRpbCIsImxpbWl0cyIsImNhdGVnb3J5IiwiYWxsIiwiaXNSYXRlTGltaXRlZCIsInVwZGF0ZVJhdGVMaW1pdHMiLCJzdGF0dXNDb2RlIiwiaGVhZGVycyIsInVwZGF0ZWRSYXRlTGltaXRzIiwicmF0ZUxpbWl0SGVhZGVyIiwicmV0cnlBZnRlckhlYWRlciIsImxpbWl0IiwidHJpbSIsInNwbGl0IiwicmV0cnlBZnRlciIsImNhdGVnb3JpZXMiLCJkZWxheSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/ratelimit.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/requestdata.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/requestdata.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_USER_INCLUDES: () => (/* binding */ DEFAULT_USER_INCLUDES),\n/* harmony export */   addRequestDataToEvent: () => (/* binding */ addRequestDataToEvent),\n/* harmony export */   addRequestDataToTransaction: () => (/* binding */ addRequestDataToTransaction),\n/* harmony export */   extractPathForTransaction: () => (/* binding */ extractPathForTransaction),\n/* harmony export */   extractRequestData: () => (/* binding */ extractRequestData),\n/* harmony export */   winterCGHeadersToDict: () => (/* binding */ winterCGHeadersToDict),\n/* harmony export */   winterCGRequestToRequestData: () => (/* binding */ winterCGRequestToRequestData)\n/* harmony export */ });\n/* harmony import */ var _cookie_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cookie.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/cookie.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/debug-build.js\");\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./logger.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _normalize_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./normalize.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/normalize.js\");\n/* harmony import */ var _url_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./url.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/url.js\");\n\n\n\n\n\n\nconst DEFAULT_INCLUDES = {\n    ip: false,\n    request: true,\n    transaction: true,\n    user: true\n};\nconst DEFAULT_REQUEST_INCLUDES = [\n    \"cookies\",\n    \"data\",\n    \"headers\",\n    \"method\",\n    \"query_string\",\n    \"url\"\n];\nconst DEFAULT_USER_INCLUDES = [\n    \"id\",\n    \"username\",\n    \"email\"\n];\n/**\n * Sets parameterized route as transaction name e.g.: `GET /users/:id`\n * Also adds more context data on the transaction from the request\n */ function addRequestDataToTransaction(transaction, req, deps) {\n    if (!transaction) return;\n    if (!transaction.metadata.source || transaction.metadata.source === \"url\") {\n        // Attempt to grab a parameterized route off of the request\n        transaction.setName(...extractPathForTransaction(req, {\n            path: true,\n            method: true\n        }));\n    }\n    transaction.setData(\"url\", req.originalUrl || req.url);\n    if (req.baseUrl) {\n        transaction.setData(\"baseUrl\", req.baseUrl);\n    }\n    transaction.setData(\"query\", extractQueryParams(req, deps));\n}\n/**\n * Extracts a complete and parameterized path from the request object and uses it to construct transaction name.\n * If the parameterized transaction name cannot be extracted, we fall back to the raw URL.\n *\n * Additionally, this function determines and returns the transaction name source\n *\n * eg. GET /mountpoint/user/:id\n *\n * @param req A request object\n * @param options What to include in the transaction name (method, path, or a custom route name to be\n *                used instead of the request's route)\n *\n * @returns A tuple of the fully constructed transaction name [0] and its source [1] (can be either 'route' or 'url')\n */ function extractPathForTransaction(req, options = {}) {\n    const method = req.method && req.method.toUpperCase();\n    let path = \"\";\n    let source = \"url\";\n    // Check to see if there's a parameterized route we can use (as there is in Express)\n    if (options.customRoute || req.route) {\n        path = options.customRoute || `${req.baseUrl || \"\"}${req.route && req.route.path}`;\n        source = \"route\";\n    } else if (req.originalUrl || req.url) {\n        path = (0,_url_js__WEBPACK_IMPORTED_MODULE_0__.stripUrlQueryAndFragment)(req.originalUrl || req.url || \"\");\n    }\n    let name = \"\";\n    if (options.method && method) {\n        name += method;\n    }\n    if (options.method && options.path) {\n        name += \" \";\n    }\n    if (options.path && path) {\n        name += path;\n    }\n    return [\n        name,\n        source\n    ];\n}\n/** JSDoc */ function extractTransaction(req, type) {\n    switch(type){\n        case \"path\":\n            {\n                return extractPathForTransaction(req, {\n                    path: true\n                })[0];\n            }\n        case \"handler\":\n            {\n                return req.route && req.route.stack && req.route.stack[0] && req.route.stack[0].name || \"<anonymous>\";\n            }\n        case \"methodPath\":\n        default:\n            {\n                // if exist _reconstructedRoute return that path instead of route.path\n                const customRoute = req._reconstructedRoute ? req._reconstructedRoute : undefined;\n                return extractPathForTransaction(req, {\n                    path: true,\n                    method: true,\n                    customRoute\n                })[0];\n            }\n    }\n}\n/** JSDoc */ function extractUserData(user, keys) {\n    const extractedUser = {};\n    const attributes = Array.isArray(keys) ? keys : DEFAULT_USER_INCLUDES;\n    attributes.forEach((key)=>{\n        if (user && key in user) {\n            extractedUser[key] = user[key];\n        }\n    });\n    return extractedUser;\n}\n/**\n * Normalize data from the request object, accounting for framework differences.\n *\n * @param req The request object from which to extract data\n * @param options.include An optional array of keys to include in the normalized data. Defaults to\n * DEFAULT_REQUEST_INCLUDES if not provided.\n * @param options.deps Injected, platform-specific dependencies\n * @returns An object containing normalized request data\n */ function extractRequestData(req, options) {\n    const { include = DEFAULT_REQUEST_INCLUDES, deps } = options || {};\n    const requestData = {};\n    // headers:\n    //   node, express, koa, nextjs: req.headers\n    const headers = req.headers || {};\n    // method:\n    //   node, express, koa, nextjs: req.method\n    const method = req.method;\n    // host:\n    //   express: req.hostname in > 4 and req.host in < 4\n    //   koa: req.host\n    //   node, nextjs: req.headers.host\n    const host = req.hostname || req.host || headers.host || \"<no host>\";\n    // protocol:\n    //   node, nextjs: <n/a>\n    //   express, koa: req.protocol\n    const protocol = req.protocol === \"https\" || req.socket && req.socket.encrypted ? \"https\" : \"http\";\n    // url (including path and query string):\n    //   node, express: req.originalUrl\n    //   koa, nextjs: req.url\n    const originalUrl = req.originalUrl || req.url || \"\";\n    // absolute url\n    const absoluteUrl = originalUrl.startsWith(protocol) ? originalUrl : `${protocol}://${host}${originalUrl}`;\n    include.forEach((key)=>{\n        switch(key){\n            case \"headers\":\n                {\n                    requestData.headers = headers;\n                    // Remove the Cookie header in case cookie data should not be included in the event\n                    if (!include.includes(\"cookies\")) {\n                        delete requestData.headers.cookie;\n                    }\n                    break;\n                }\n            case \"method\":\n                {\n                    requestData.method = method;\n                    break;\n                }\n            case \"url\":\n                {\n                    requestData.url = absoluteUrl;\n                    break;\n                }\n            case \"cookies\":\n                {\n                    // cookies:\n                    //   node, express, koa: req.headers.cookie\n                    //   vercel, sails.js, express (w/ cookie middleware), nextjs: req.cookies\n                    requestData.cookies = // TODO (v8 / #5257): We're only sending the empty object for backwards compatibility, so the last bit can\n                    // come off in v8\n                    req.cookies || headers.cookie && (0,_cookie_js__WEBPACK_IMPORTED_MODULE_1__.parseCookie)(headers.cookie) || {};\n                    break;\n                }\n            case \"query_string\":\n                {\n                    // query string:\n                    //   node: req.url (raw)\n                    //   express, koa, nextjs: req.query\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                    requestData.query_string = extractQueryParams(req, deps);\n                    break;\n                }\n            case \"data\":\n                {\n                    if (method === \"GET\" || method === \"HEAD\") {\n                        break;\n                    }\n                    // body data:\n                    //   express, koa, nextjs: req.body\n                    //\n                    //   when using node by itself, you have to read the incoming stream(see\n                    //   https://nodejs.dev/learn/get-http-request-body-data-using-nodejs); if a user is doing that, we can't know\n                    //   where they're going to store the final result, so they'll have to capture this data themselves\n                    if (req.body !== undefined) {\n                        requestData.data = (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isString)(req.body) ? req.body : JSON.stringify((0,_normalize_js__WEBPACK_IMPORTED_MODULE_3__.normalize)(req.body));\n                    }\n                    break;\n                }\n            default:\n                {\n                    if (({}).hasOwnProperty.call(req, key)) {\n                        requestData[key] = req[key];\n                    }\n                }\n        }\n    });\n    return requestData;\n}\n/**\n * Add data from the given request to the given event\n *\n * @param event The event to which the request data will be added\n * @param req Request object\n * @param options.include Flags to control what data is included\n * @param options.deps Injected platform-specific dependencies\n * @returns The mutated `Event` object\n */ function addRequestDataToEvent(event, req, options) {\n    const include = {\n        ...DEFAULT_INCLUDES,\n        ...options && options.include\n    };\n    if (include.request) {\n        const extractedRequestData = Array.isArray(include.request) ? extractRequestData(req, {\n            include: include.request,\n            deps: options && options.deps\n        }) : extractRequestData(req, {\n            deps: options && options.deps\n        });\n        event.request = {\n            ...event.request,\n            ...extractedRequestData\n        };\n    }\n    if (include.user) {\n        const extractedUser = req.user && (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(req.user) ? extractUserData(req.user, include.user) : {};\n        if (Object.keys(extractedUser).length) {\n            event.user = {\n                ...event.user,\n                ...extractedUser\n            };\n        }\n    }\n    // client ip:\n    //   node, nextjs: req.socket.remoteAddress\n    //   express, koa: req.ip\n    if (include.ip) {\n        const ip = req.ip || req.socket && req.socket.remoteAddress;\n        if (ip) {\n            event.user = {\n                ...event.user,\n                ip_address: ip\n            };\n        }\n    }\n    if (include.transaction && !event.transaction) {\n        // TODO do we even need this anymore?\n        // TODO make this work for nextjs\n        event.transaction = extractTransaction(req, include.transaction);\n    }\n    return event;\n}\nfunction extractQueryParams(req, deps) {\n    // url (including path and query string):\n    //   node, express: req.originalUrl\n    //   koa, nextjs: req.url\n    let originalUrl = req.originalUrl || req.url || \"\";\n    if (!originalUrl) {\n        return;\n    }\n    // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and\n    // hostname on the beginning. Since the point here is just to grab the query string, it doesn't matter what we use.\n    if (originalUrl.startsWith(\"/\")) {\n        originalUrl = `http://dogs.are.great${originalUrl}`;\n    }\n    try {\n        return req.query || typeof URL !== undefined && new URL(originalUrl).search.slice(1) || // In Node 8, `URL` isn't in the global scope, so we have to use the built-in module from Node\n        deps && deps.url && deps.url.parse(originalUrl).query || undefined;\n    } catch (e2) {\n        return undefined;\n    }\n}\n/**\n * Transforms a `Headers` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into a simple key-value dict.\n * The header keys will be lower case: e.g. A \"Content-Type\" header will be stored as \"content-type\".\n */ function winterCGHeadersToDict(winterCGHeaders) {\n    const headers = {};\n    try {\n        winterCGHeaders.forEach((value, key)=>{\n            if (typeof value === \"string\") {\n                // We check that value is a string even though it might be redundant to make sure prototype pollution is not possible.\n                headers[key] = value;\n            }\n        });\n    } catch (e) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_4__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_5__.logger.warn(\"Sentry failed extracting headers from a request object. If you see this, please file an issue.\");\n    }\n    return headers;\n}\n/**\n * Converts a `Request` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into the format that the `RequestData` integration understands.\n */ function winterCGRequestToRequestData(req) {\n    const headers = winterCGHeadersToDict(req.headers);\n    return {\n        method: req.method,\n        url: req.url,\n        headers\n    };\n}\n //# sourceMappingURL=requestdata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/requestdata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/stacktrace.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/stacktrace.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createStackParser: () => (/* binding */ createStackParser),\n/* harmony export */   filenameIsInApp: () => (/* reexport safe */ _node_stack_trace_js__WEBPACK_IMPORTED_MODULE_0__.filenameIsInApp),\n/* harmony export */   getFunctionName: () => (/* binding */ getFunctionName),\n/* harmony export */   nodeStackLineParser: () => (/* binding */ nodeStackLineParser),\n/* harmony export */   stackParserFromStackParserOptions: () => (/* binding */ stackParserFromStackParserOptions),\n/* harmony export */   stripSentryFramesAndReverse: () => (/* binding */ stripSentryFramesAndReverse)\n/* harmony export */ });\n/* harmony import */ var _node_stack_trace_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node-stack-trace.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/node-stack-trace.js\");\n\n\nconst STACKTRACE_FRAME_LIMIT = 50;\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\nconst STRIP_FRAME_REGEXP = /captureMessage|captureException/;\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */ function createStackParser(...parsers) {\n    const sortedParsers = parsers.sort((a, b)=>a[0] - b[0]).map((p)=>p[1]);\n    return (stack, skipFirst = 0)=>{\n        const frames = [];\n        const lines = stack.split(\"\\n\");\n        for(let i = skipFirst; i < lines.length; i++){\n            const line = lines[i];\n            // Ignore lines over 1kb as they are unlikely to be stack frames.\n            // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n            // input size. Huge strings can result in hangs/Denial of Service:\n            // https://github.com/getsentry/sentry-javascript/issues/2286\n            if (line.length > 1024) {\n                continue;\n            }\n            // https://github.com/getsentry/sentry-javascript/issues/5459\n            // Remove webpack (error: *) wrappers\n            const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, \"$1\") : line;\n            // https://github.com/getsentry/sentry-javascript/issues/7813\n            // Skip Error: lines\n            if (cleanedLine.match(/\\S*Error: /)) {\n                continue;\n            }\n            for (const parser of sortedParsers){\n                const frame = parser(cleanedLine);\n                if (frame) {\n                    frames.push(frame);\n                    break;\n                }\n            }\n            if (frames.length >= STACKTRACE_FRAME_LIMIT) {\n                break;\n            }\n        }\n        return stripSentryFramesAndReverse(frames);\n    };\n}\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */ function stackParserFromStackParserOptions(stackParser) {\n    if (Array.isArray(stackParser)) {\n        return createStackParser(...stackParser);\n    }\n    return stackParser;\n}\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */ function stripSentryFramesAndReverse(stack) {\n    if (!stack.length) {\n        return [];\n    }\n    const localStack = Array.from(stack);\n    // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n    if (/sentryWrapped/.test(localStack[localStack.length - 1].function || \"\")) {\n        localStack.pop();\n    }\n    // Reversing in the middle of the procedure allows us to just pop the values off the stack\n    localStack.reverse();\n    // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n    if (STRIP_FRAME_REGEXP.test(localStack[localStack.length - 1].function || \"\")) {\n        localStack.pop();\n        // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Sentry syntheticException')`\n        // is produced within the hub itself, making it:\n        //\n        //   Sentry.captureException()\n        //   getCurrentHub().captureException()\n        //\n        // instead of just the top `Sentry` call itself.\n        // This forces us to possibly strip an additional frame in the exact same was as above.\n        if (STRIP_FRAME_REGEXP.test(localStack[localStack.length - 1].function || \"\")) {\n            localStack.pop();\n        }\n    }\n    return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map((frame)=>({\n            ...frame,\n            filename: frame.filename || localStack[localStack.length - 1].filename,\n            function: frame.function || \"?\"\n        }));\n}\nconst defaultFunctionName = \"<anonymous>\";\n/**\n * Safely extract function name from itself\n */ function getFunctionName(fn) {\n    try {\n        if (!fn || typeof fn !== \"function\") {\n            return defaultFunctionName;\n        }\n        return fn.name || defaultFunctionName;\n    } catch (e) {\n        // Just accessing custom props in some Selenium environments\n        // can cause a \"Permission denied\" exception (see raven-js#495).\n        return defaultFunctionName;\n    }\n}\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/utils so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */ function nodeStackLineParser(getModule) {\n    return [\n        90,\n        (0,_node_stack_trace_js__WEBPACK_IMPORTED_MODULE_0__.node)(getModule)\n    ];\n}\n //# sourceMappingURL=stacktrace.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/stacktrace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/string.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/string.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isMatchingPattern: () => (/* binding */ isMatchingPattern),\n/* harmony export */   safeJoin: () => (/* binding */ safeJoin),\n/* harmony export */   snipLine: () => (/* binding */ snipLine),\n/* harmony export */   stringMatchesSomePattern: () => (/* binding */ stringMatchesSomePattern),\n/* harmony export */   truncate: () => (/* binding */ truncate)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/is.js\");\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */ function truncate(str, max = 0) {\n    if (typeof str !== \"string\" || max === 0) {\n        return str;\n    }\n    return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */ function snipLine(line, colno) {\n    let newLine = line;\n    const lineLength = newLine.length;\n    if (lineLength <= 150) {\n        return newLine;\n    }\n    if (colno > lineLength) {\n        // eslint-disable-next-line no-param-reassign\n        colno = lineLength;\n    }\n    let start = Math.max(colno - 60, 0);\n    if (start < 5) {\n        start = 0;\n    }\n    let end = Math.min(start + 140, lineLength);\n    if (end > lineLength - 5) {\n        end = lineLength;\n    }\n    if (end === lineLength) {\n        start = Math.max(end - 140, 0);\n    }\n    newLine = newLine.slice(start, end);\n    if (start > 0) {\n        newLine = `'{snip} ${newLine}`;\n    }\n    if (end < lineLength) {\n        newLine += \" {snip}\";\n    }\n    return newLine;\n}\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction safeJoin(input, delimiter) {\n    if (!Array.isArray(input)) {\n        return \"\";\n    }\n    const output = [];\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for(let i = 0; i < input.length; i++){\n        const value = input[i];\n        try {\n            // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n            // console warnings. This happens when a Vue template is rendered with\n            // an undeclared variable, which we try to stringify, ultimately causing\n            // Vue to issue another warning which repeats indefinitely.\n            // see: https://github.com/getsentry/sentry-javascript/pull/8981\n            if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isVueViewModel)(value)) {\n                output.push(\"[VueViewModel]\");\n            } else {\n                output.push(String(value));\n            }\n        } catch (e) {\n            output.push(\"[value cannot be serialized]\");\n        }\n    }\n    return output.join(delimiter);\n}\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */ function isMatchingPattern(value, pattern, requireExactStringMatch = false) {\n    if (!(0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isString)(value)) {\n        return false;\n    }\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isRegExp)(pattern)) {\n        return pattern.test(value);\n    }\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isString)(pattern)) {\n        return requireExactStringMatch ? value === pattern : value.includes(pattern);\n    }\n    return false;\n}\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */ function stringMatchesSomePattern(testString, patterns = [], requireExactStringMatch = false) {\n    return patterns.some((pattern)=>isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\n //# sourceMappingURL=string.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/string.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/syncpromise.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/syncpromise.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SyncPromise: () => (/* binding */ SyncPromise),\n/* harmony export */   rejectedSyncPromise: () => (/* binding */ rejectedSyncPromise),\n/* harmony export */   resolvedSyncPromise: () => (/* binding */ resolvedSyncPromise)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/is.js\");\n\n/* eslint-disable @typescript-eslint/explicit-function-return-type */ /** SyncPromise internal states */ var States;\n(function(States) {\n    /** Pending */ const PENDING = 0;\n    States[States[\"PENDING\"] = PENDING] = \"PENDING\";\n    /** Resolved / OK */ const RESOLVED = 1;\n    States[States[\"RESOLVED\"] = RESOLVED] = \"RESOLVED\";\n    /** Rejected / Error */ const REJECTED = 2;\n    States[States[\"REJECTED\"] = REJECTED] = \"REJECTED\";\n})(States || (States = {}));\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */ function resolvedSyncPromise(value) {\n    return new SyncPromise((resolve)=>{\n        resolve(value);\n    });\n}\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */ function rejectedSyncPromise(reason) {\n    return new SyncPromise((_, reject)=>{\n        reject(reason);\n    });\n}\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */ class SyncPromise {\n    constructor(executor){\n        SyncPromise.prototype.__init.call(this);\n        SyncPromise.prototype.__init2.call(this);\n        SyncPromise.prototype.__init3.call(this);\n        SyncPromise.prototype.__init4.call(this);\n        this._state = States.PENDING;\n        this._handlers = [];\n        try {\n            executor(this._resolve, this._reject);\n        } catch (e) {\n            this._reject(e);\n        }\n    }\n    /** JSDoc */ then(onfulfilled, onrejected) {\n        return new SyncPromise((resolve, reject)=>{\n            this._handlers.push([\n                false,\n                (result)=>{\n                    if (!onfulfilled) {\n                        // TODO: ¯\\_(ツ)_/¯\n                        // TODO: FIXME\n                        resolve(result);\n                    } else {\n                        try {\n                            resolve(onfulfilled(result));\n                        } catch (e) {\n                            reject(e);\n                        }\n                    }\n                },\n                (reason)=>{\n                    if (!onrejected) {\n                        reject(reason);\n                    } else {\n                        try {\n                            resolve(onrejected(reason));\n                        } catch (e) {\n                            reject(e);\n                        }\n                    }\n                }\n            ]);\n            this._executeHandlers();\n        });\n    }\n    /** JSDoc */ catch(onrejected) {\n        return this.then((val)=>val, onrejected);\n    }\n    /** JSDoc */ finally(onfinally) {\n        return new SyncPromise((resolve, reject)=>{\n            let val;\n            let isRejected;\n            return this.then((value)=>{\n                isRejected = false;\n                val = value;\n                if (onfinally) {\n                    onfinally();\n                }\n            }, (reason)=>{\n                isRejected = true;\n                val = reason;\n                if (onfinally) {\n                    onfinally();\n                }\n            }).then(()=>{\n                if (isRejected) {\n                    reject(val);\n                    return;\n                }\n                resolve(val);\n            });\n        });\n    }\n    /** JSDoc */ __init() {\n        this._resolve = (value)=>{\n            this._setResult(States.RESOLVED, value);\n        };\n    }\n    /** JSDoc */ __init2() {\n        this._reject = (reason)=>{\n            this._setResult(States.REJECTED, reason);\n        };\n    }\n    /** JSDoc */ __init3() {\n        this._setResult = (state, value)=>{\n            if (this._state !== States.PENDING) {\n                return;\n            }\n            if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isThenable)(value)) {\n                void value.then(this._resolve, this._reject);\n                return;\n            }\n            this._state = state;\n            this._value = value;\n            this._executeHandlers();\n        };\n    }\n    /** JSDoc */ __init4() {\n        this._executeHandlers = ()=>{\n            if (this._state === States.PENDING) {\n                return;\n            }\n            const cachedHandlers = this._handlers.slice();\n            this._handlers = [];\n            cachedHandlers.forEach((handler)=>{\n                if (handler[0]) {\n                    return;\n                }\n                if (this._state === States.RESOLVED) {\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    handler[1](this._value);\n                }\n                if (this._state === States.REJECTED) {\n                    handler[2](this._value);\n                }\n                handler[0] = true;\n            });\n        };\n    }\n}\n //# sourceMappingURL=syncpromise.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/syncpromise.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/time.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/time.js ***!
  \**************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _browserPerformanceTimeOriginMode: () => (/* binding */ _browserPerformanceTimeOriginMode),\n/* harmony export */   browserPerformanceTimeOrigin: () => (/* binding */ browserPerformanceTimeOrigin),\n/* harmony export */   dateTimestampInSeconds: () => (/* binding */ dateTimestampInSeconds),\n/* harmony export */   timestampInSeconds: () => (/* binding */ timestampInSeconds),\n/* harmony export */   timestampWithMs: () => (/* binding */ timestampWithMs),\n/* harmony export */   usingPerformanceAPI: () => (/* binding */ usingPerformanceAPI)\n/* harmony export */ });\n/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/node.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/worldwide.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = (0,_worldwide_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalObject)();\n/**\n * An object that can return the current timestamp in seconds since the UNIX epoch.\n */ /**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */ const dateTimestampSource = {\n    nowSeconds: ()=>Date.now() / 1000\n};\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */ /**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */ function getBrowserPerformance() {\n    const { performance } = WINDOW;\n    if (!performance || !performance.now) {\n        return undefined;\n    }\n    // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n    //\n    // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n    // performance.now() gives a date arbitrarily in the past.\n    //\n    // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n    // undefined.\n    //\n    // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n    // interact with data coming out of performance entries.\n    //\n    // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n    // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n    // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n    // observed skews that can be as long as days, weeks or months.\n    //\n    // See https://github.com/getsentry/sentry-javascript/issues/2590.\n    //\n    // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n    // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n    // transactions of long-lived web pages.\n    const timeOrigin = Date.now() - performance.now();\n    return {\n        now: ()=>performance.now(),\n        timeOrigin\n    };\n}\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */ function getNodePerformance() {\n    try {\n        const perfHooks = (0,_node_js__WEBPACK_IMPORTED_MODULE_1__.dynamicRequire)(module, \"perf_hooks\");\n        return perfHooks.performance;\n    } catch (_) {\n        return undefined;\n    }\n}\n/**\n * The Performance API implementation for the current platform, if available.\n */ const platformPerformance = (0,_node_js__WEBPACK_IMPORTED_MODULE_1__.isNodeEnv)() ? getNodePerformance() : getBrowserPerformance();\nconst timestampSource = platformPerformance === undefined ? dateTimestampSource : {\n    nowSeconds: ()=>(platformPerformance.timeOrigin + platformPerformance.now()) / 1000\n};\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */ const dateTimestampInSeconds = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */ const timestampInSeconds = timestampSource.nowSeconds.bind(timestampSource);\n/**\n * Re-exported with an old name for backwards-compatibility.\n * TODO (v8): Remove this\n *\n * @deprecated Use `timestampInSeconds` instead.\n */ const timestampWithMs = timestampInSeconds;\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */ const usingPerformanceAPI = platformPerformance !== undefined;\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n */ let _browserPerformanceTimeOriginMode;\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */ const browserPerformanceTimeOrigin = (()=>{\n    // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n    // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n    // data as reliable if they are within a reasonable threshold of the current time.\n    const { performance } = WINDOW;\n    if (!performance || !performance.now) {\n        _browserPerformanceTimeOriginMode = \"none\";\n        return undefined;\n    }\n    const threshold = 3600 * 1000;\n    const performanceNow = performance.now();\n    const dateNow = Date.now();\n    // if timeOrigin isn't available set delta to threshold so it isn't used\n    const timeOriginDelta = performance.timeOrigin ? Math.abs(performance.timeOrigin + performanceNow - dateNow) : threshold;\n    const timeOriginIsReliable = timeOriginDelta < threshold;\n    // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n    // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n    // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n    // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n    // Date API.\n    // eslint-disable-next-line deprecation/deprecation\n    const navigationStart = performance.timing && performance.timing.navigationStart;\n    const hasNavigationStart = typeof navigationStart === \"number\";\n    // if navigationStart isn't available set delta to threshold so it isn't used\n    const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n    const navigationStartIsReliable = navigationStartDelta < threshold;\n    if (timeOriginIsReliable || navigationStartIsReliable) {\n        // Use the more reliable time origin\n        if (timeOriginDelta <= navigationStartDelta) {\n            _browserPerformanceTimeOriginMode = \"timeOrigin\";\n            return performance.timeOrigin;\n        } else {\n            _browserPerformanceTimeOriginMode = \"navigationStart\";\n            return navigationStart;\n        }\n    }\n    // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n    _browserPerformanceTimeOriginMode = \"dateNow\";\n    return dateNow;\n})();\n //# sourceMappingURL=time.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/time.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/tracing.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/tracing.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRACEPARENT_REGEXP: () => (/* binding */ TRACEPARENT_REGEXP),\n/* harmony export */   extractTraceparentData: () => (/* binding */ extractTraceparentData),\n/* harmony export */   generateSentryTraceHeader: () => (/* binding */ generateSentryTraceHeader),\n/* harmony export */   tracingContextFromHeaders: () => (/* binding */ tracingContextFromHeaders)\n/* harmony export */ });\n/* harmony import */ var _baggage_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baggage.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/baggage.js\");\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./misc.js */ \"(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/misc.js\");\n\n\nconst TRACEPARENT_REGEXP = new RegExp(\"^[ \\\\t]*\" + // whitespace\n\"([0-9a-f]{32})?\" + // trace_id\n\"-?([0-9a-f]{16})?\" + // span_id\n\"-?([01])?\" + // sampled\n\"[ \\\\t]*$\");\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */ function extractTraceparentData(traceparent) {\n    if (!traceparent) {\n        return undefined;\n    }\n    const matches = traceparent.match(TRACEPARENT_REGEXP);\n    if (!matches) {\n        return undefined;\n    }\n    let parentSampled;\n    if (matches[3] === \"1\") {\n        parentSampled = true;\n    } else if (matches[3] === \"0\") {\n        parentSampled = false;\n    }\n    return {\n        traceId: matches[1],\n        parentSampled,\n        parentSpanId: matches[2]\n    };\n}\n/**\n * Create tracing context from incoming headers.\n */ function tracingContextFromHeaders(sentryTrace, baggage) {\n    const traceparentData = extractTraceparentData(sentryTrace);\n    const dynamicSamplingContext = (0,_baggage_js__WEBPACK_IMPORTED_MODULE_0__.baggageHeaderToDynamicSamplingContext)(baggage);\n    const { traceId, parentSpanId, parentSampled } = traceparentData || {};\n    const propagationContext = {\n        traceId: traceId || (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)(),\n        spanId: (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)().substring(16),\n        sampled: parentSampled\n    };\n    if (parentSpanId) {\n        propagationContext.parentSpanId = parentSpanId;\n    }\n    if (dynamicSamplingContext) {\n        propagationContext.dsc = dynamicSamplingContext;\n    }\n    return {\n        traceparentData,\n        dynamicSamplingContext,\n        propagationContext\n    };\n}\n/**\n * Create sentry-trace header from span context values.\n */ function generateSentryTraceHeader(traceId = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)(), spanId = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)().substring(16), sampled) {\n    let sampledString = \"\";\n    if (sampled !== undefined) {\n        sampledString = sampled ? \"-1\" : \"-0\";\n    }\n    return `${traceId}-${spanId}${sampledString}`;\n}\n //# sourceMappingURL=tracing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS90cmFjaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFxRTtBQUNuQztBQUVsQyxNQUFNRSxxQkFBcUIsSUFBSUMsT0FDN0IsYUFBYSxhQUFhO0FBQ3hCLG9CQUFvQixXQUFXO0FBQy9CLHNCQUFzQixVQUFVO0FBQ2hDLGNBQWMsVUFBVTtBQUN4QjtBQUdKOzs7Ozs7Q0FNQyxHQUNELFNBQVNDLHVCQUF1QkMsV0FBVztJQUN6QyxJQUFJLENBQUNBLGFBQWE7UUFDaEIsT0FBT0M7SUFDVDtJQUVBLE1BQU1DLFVBQVVGLFlBQVlHLEtBQUssQ0FBQ047SUFDbEMsSUFBSSxDQUFDSyxTQUFTO1FBQ1osT0FBT0Q7SUFDVDtJQUVBLElBQUlHO0lBQ0osSUFBSUYsT0FBTyxDQUFDLEVBQUUsS0FBSyxLQUFLO1FBQ3RCRSxnQkFBZ0I7SUFDbEIsT0FBTyxJQUFJRixPQUFPLENBQUMsRUFBRSxLQUFLLEtBQUs7UUFDN0JFLGdCQUFnQjtJQUNsQjtJQUVBLE9BQU87UUFDTEMsU0FBU0gsT0FBTyxDQUFDLEVBQUU7UUFDbkJFO1FBQ0FFLGNBQWNKLE9BQU8sQ0FBQyxFQUFFO0lBQzFCO0FBQ0Y7QUFFQTs7Q0FFQyxHQUNELFNBQVNLLDBCQUNQQyxXQUFXLEVBQ1hDLE9BQU87SUFJUCxNQUFNQyxrQkFBa0JYLHVCQUF1QlM7SUFDL0MsTUFBTUcseUJBQXlCaEIsa0ZBQXFDQSxDQUFDYztJQUVyRSxNQUFNLEVBQUVKLE9BQU8sRUFBRUMsWUFBWSxFQUFFRixhQUFhLEVBQUUsR0FBR00sbUJBQW1CLENBQUM7SUFFckUsTUFBTUUscUJBQXFCO1FBQ3pCUCxTQUFTQSxXQUFXVCwrQ0FBS0E7UUFDekJpQixRQUFRakIsK0NBQUtBLEdBQUdrQixTQUFTLENBQUM7UUFDMUJDLFNBQVNYO0lBQ1g7SUFFQSxJQUFJRSxjQUFjO1FBQ2hCTSxtQkFBbUJOLFlBQVksR0FBR0E7SUFDcEM7SUFFQSxJQUFJSyx3QkFBd0I7UUFDMUJDLG1CQUFtQkksR0FBRyxHQUFHTDtJQUMzQjtJQUVBLE9BQU87UUFDTEQ7UUFDQUM7UUFDQUM7SUFDRjtBQUNGO0FBRUE7O0NBRUMsR0FDRCxTQUFTSywwQkFDUFosVUFBVVQsK0NBQUtBLEVBQUUsRUFDakJpQixTQUFTakIsK0NBQUtBLEdBQUdrQixTQUFTLENBQUMsR0FBRyxFQUM5QkMsT0FBTztJQUVQLElBQUlHLGdCQUFnQjtJQUNwQixJQUFJSCxZQUFZZCxXQUFXO1FBQ3pCaUIsZ0JBQWdCSCxVQUFVLE9BQU87SUFDbkM7SUFDQSxPQUFPLENBQUMsRUFBRVYsUUFBUSxDQUFDLEVBQUVRLE9BQU8sRUFBRUssY0FBYyxDQUFDO0FBQy9DO0FBRTRHLENBQzVHLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3RyYWNpbmcuanM/ODI2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBiYWdnYWdlSGVhZGVyVG9EeW5hbWljU2FtcGxpbmdDb250ZXh0IH0gZnJvbSAnLi9iYWdnYWdlLmpzJztcbmltcG9ydCB7IHV1aWQ0IH0gZnJvbSAnLi9taXNjLmpzJztcblxuY29uc3QgVFJBQ0VQQVJFTlRfUkVHRVhQID0gbmV3IFJlZ0V4cChcbiAgJ15bIFxcXFx0XSonICsgLy8gd2hpdGVzcGFjZVxuICAgICcoWzAtOWEtZl17MzJ9KT8nICsgLy8gdHJhY2VfaWRcbiAgICAnLT8oWzAtOWEtZl17MTZ9KT8nICsgLy8gc3Bhbl9pZFxuICAgICctPyhbMDFdKT8nICsgLy8gc2FtcGxlZFxuICAgICdbIFxcXFx0XSokJywgLy8gd2hpdGVzcGFjZVxuKTtcblxuLyoqXG4gKiBFeHRyYWN0IHRyYW5zYWN0aW9uIGNvbnRleHQgZGF0YSBmcm9tIGEgYHNlbnRyeS10cmFjZWAgaGVhZGVyLlxuICpcbiAqIEBwYXJhbSB0cmFjZXBhcmVudCBUcmFjZXBhcmVudCBzdHJpbmdcbiAqXG4gKiBAcmV0dXJucyBPYmplY3QgY29udGFpbmluZyBkYXRhIGZyb20gdGhlIGhlYWRlciwgb3IgdW5kZWZpbmVkIGlmIHRyYWNlcGFyZW50IHN0cmluZyBpcyBtYWxmb3JtZWRcbiAqL1xuZnVuY3Rpb24gZXh0cmFjdFRyYWNlcGFyZW50RGF0YSh0cmFjZXBhcmVudCkge1xuICBpZiAoIXRyYWNlcGFyZW50KSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbnN0IG1hdGNoZXMgPSB0cmFjZXBhcmVudC5tYXRjaChUUkFDRVBBUkVOVF9SRUdFWFApO1xuICBpZiAoIW1hdGNoZXMpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgbGV0IHBhcmVudFNhbXBsZWQ7XG4gIGlmIChtYXRjaGVzWzNdID09PSAnMScpIHtcbiAgICBwYXJlbnRTYW1wbGVkID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChtYXRjaGVzWzNdID09PSAnMCcpIHtcbiAgICBwYXJlbnRTYW1wbGVkID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRyYWNlSWQ6IG1hdGNoZXNbMV0sXG4gICAgcGFyZW50U2FtcGxlZCxcbiAgICBwYXJlbnRTcGFuSWQ6IG1hdGNoZXNbMl0sXG4gIH07XG59XG5cbi8qKlxuICogQ3JlYXRlIHRyYWNpbmcgY29udGV4dCBmcm9tIGluY29taW5nIGhlYWRlcnMuXG4gKi9cbmZ1bmN0aW9uIHRyYWNpbmdDb250ZXh0RnJvbUhlYWRlcnMoXG4gIHNlbnRyeVRyYWNlLFxuICBiYWdnYWdlLFxuKVxuXG4ge1xuICBjb25zdCB0cmFjZXBhcmVudERhdGEgPSBleHRyYWN0VHJhY2VwYXJlbnREYXRhKHNlbnRyeVRyYWNlKTtcbiAgY29uc3QgZHluYW1pY1NhbXBsaW5nQ29udGV4dCA9IGJhZ2dhZ2VIZWFkZXJUb0R5bmFtaWNTYW1wbGluZ0NvbnRleHQoYmFnZ2FnZSk7XG5cbiAgY29uc3QgeyB0cmFjZUlkLCBwYXJlbnRTcGFuSWQsIHBhcmVudFNhbXBsZWQgfSA9IHRyYWNlcGFyZW50RGF0YSB8fCB7fTtcblxuICBjb25zdCBwcm9wYWdhdGlvbkNvbnRleHQgPSB7XG4gICAgdHJhY2VJZDogdHJhY2VJZCB8fCB1dWlkNCgpLFxuICAgIHNwYW5JZDogdXVpZDQoKS5zdWJzdHJpbmcoMTYpLFxuICAgIHNhbXBsZWQ6IHBhcmVudFNhbXBsZWQsXG4gIH07XG5cbiAgaWYgKHBhcmVudFNwYW5JZCkge1xuICAgIHByb3BhZ2F0aW9uQ29udGV4dC5wYXJlbnRTcGFuSWQgPSBwYXJlbnRTcGFuSWQ7XG4gIH1cblxuICBpZiAoZHluYW1pY1NhbXBsaW5nQ29udGV4dCkge1xuICAgIHByb3BhZ2F0aW9uQ29udGV4dC5kc2MgPSBkeW5hbWljU2FtcGxpbmdDb250ZXh0IDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHJhY2VwYXJlbnREYXRhLFxuICAgIGR5bmFtaWNTYW1wbGluZ0NvbnRleHQsXG4gICAgcHJvcGFnYXRpb25Db250ZXh0LFxuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZSBzZW50cnktdHJhY2UgaGVhZGVyIGZyb20gc3BhbiBjb250ZXh0IHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVTZW50cnlUcmFjZUhlYWRlcihcbiAgdHJhY2VJZCA9IHV1aWQ0KCksXG4gIHNwYW5JZCA9IHV1aWQ0KCkuc3Vic3RyaW5nKDE2KSxcbiAgc2FtcGxlZCxcbikge1xuICBsZXQgc2FtcGxlZFN0cmluZyA9ICcnO1xuICBpZiAoc2FtcGxlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc2FtcGxlZFN0cmluZyA9IHNhbXBsZWQgPyAnLTEnIDogJy0wJztcbiAgfVxuICByZXR1cm4gYCR7dHJhY2VJZH0tJHtzcGFuSWR9JHtzYW1wbGVkU3RyaW5nfWA7XG59XG5cbmV4cG9ydCB7IFRSQUNFUEFSRU5UX1JFR0VYUCwgZXh0cmFjdFRyYWNlcGFyZW50RGF0YSwgZ2VuZXJhdGVTZW50cnlUcmFjZUhlYWRlciwgdHJhY2luZ0NvbnRleHRGcm9tSGVhZGVycyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhY2luZy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJiYWdnYWdlSGVhZGVyVG9EeW5hbWljU2FtcGxpbmdDb250ZXh0IiwidXVpZDQiLCJUUkFDRVBBUkVOVF9SRUdFWFAiLCJSZWdFeHAiLCJleHRyYWN0VHJhY2VwYXJlbnREYXRhIiwidHJhY2VwYXJlbnQiLCJ1bmRlZmluZWQiLCJtYXRjaGVzIiwibWF0Y2giLCJwYXJlbnRTYW1wbGVkIiwidHJhY2VJZCIsInBhcmVudFNwYW5JZCIsInRyYWNpbmdDb250ZXh0RnJvbUhlYWRlcnMiLCJzZW50cnlUcmFjZSIsImJhZ2dhZ2UiLCJ0cmFjZXBhcmVudERhdGEiLCJkeW5hbWljU2FtcGxpbmdDb250ZXh0IiwicHJvcGFnYXRpb25Db250ZXh0Iiwic3BhbklkIiwic3Vic3RyaW5nIiwic2FtcGxlZCIsImRzYyIsImdlbmVyYXRlU2VudHJ5VHJhY2VIZWFkZXIiLCJzYW1wbGVkU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/tracing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/url.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/url.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getNumberOfUrlSegments: () => (/* binding */ getNumberOfUrlSegments),\n/* harmony export */   getSanitizedUrlString: () => (/* binding */ getSanitizedUrlString),\n/* harmony export */   parseUrl: () => (/* binding */ parseUrl),\n/* harmony export */   stripUrlQueryAndFragment: () => (/* binding */ stripUrlQueryAndFragment)\n/* harmony export */ });\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */ function parseUrl(url) {\n    if (!url) {\n        return {};\n    }\n    const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n    if (!match) {\n        return {};\n    }\n    // coerce to undefined values to empty string so we don't get 'undefined'\n    const query = match[6] || \"\";\n    const fragment = match[8] || \"\";\n    return {\n        host: match[4],\n        path: match[5],\n        protocol: match[2],\n        search: query,\n        hash: fragment,\n        relative: match[5] + query + fragment\n    };\n}\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */ function stripUrlQueryAndFragment(urlPath) {\n    // eslint-disable-next-line no-useless-escape\n    return urlPath.split(/[\\?#]/, 1)[0];\n}\n/**\n * Returns number of URL segments of a passed string URL.\n */ function getNumberOfUrlSegments(url) {\n    // split at '/' or at '\\/' to split regex urls correctly\n    return url.split(/\\\\?\\//).filter((s)=>s.length > 0 && s !== \",\").length;\n}\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span description\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */ function getSanitizedUrlString(url) {\n    const { protocol, host, path } = url;\n    const filteredHost = host && host// Always filter out authority\n    .replace(/^.*@/, \"[filtered]:[filtered]@\")// Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n    // TODO: Use new URL global if it exists\n    .replace(/(:80)$/, \"\").replace(/(:443)$/, \"\") || \"\";\n    return `${protocol ? `${protocol}://` : \"\"}${filteredHost}${path}`;\n}\n //# sourceMappingURL=url.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS91cmwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7Q0FNQyxHQUNELFNBQVNBLFNBQVNDLEdBQUc7SUFDbkIsSUFBSSxDQUFDQSxLQUFLO1FBQ1IsT0FBTyxDQUFDO0lBQ1Y7SUFFQSxNQUFNQyxRQUFRRCxJQUFJQyxLQUFLLENBQUM7SUFFeEIsSUFBSSxDQUFDQSxPQUFPO1FBQ1YsT0FBTyxDQUFDO0lBQ1Y7SUFFQSx5RUFBeUU7SUFDekUsTUFBTUMsUUFBUUQsS0FBSyxDQUFDLEVBQUUsSUFBSTtJQUMxQixNQUFNRSxXQUFXRixLQUFLLENBQUMsRUFBRSxJQUFJO0lBQzdCLE9BQU87UUFDTEcsTUFBTUgsS0FBSyxDQUFDLEVBQUU7UUFDZEksTUFBTUosS0FBSyxDQUFDLEVBQUU7UUFDZEssVUFBVUwsS0FBSyxDQUFDLEVBQUU7UUFDbEJNLFFBQVFMO1FBQ1JNLE1BQU1MO1FBQ05NLFVBQVVSLEtBQUssQ0FBQyxFQUFFLEdBQUdDLFFBQVFDO0lBQy9CO0FBQ0Y7QUFFQTs7Ozs7Q0FLQyxHQUNELFNBQVNPLHlCQUF5QkMsT0FBTztJQUN2Qyw2Q0FBNkM7SUFDN0MsT0FBT0EsUUFBUUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUU7QUFDckM7QUFFQTs7Q0FFQyxHQUNELFNBQVNDLHVCQUF1QmIsR0FBRztJQUNqQyx3REFBd0Q7SUFDeEQsT0FBT0EsSUFBSVksS0FBSyxDQUFDLFNBQVNFLE1BQU0sQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRUMsTUFBTSxHQUFHLEtBQUtELE1BQU0sS0FBS0MsTUFBTTtBQUN6RTtBQUVBOzs7Q0FHQyxHQUNELFNBQVNDLHNCQUFzQmpCLEdBQUc7SUFDaEMsTUFBTSxFQUFFTSxRQUFRLEVBQUVGLElBQUksRUFBRUMsSUFBSSxFQUFFLEdBQUdMO0lBRWpDLE1BQU1rQixlQUNKLFFBQ0VkLElBQ0UsOEJBQThCO0tBQzdCZSxPQUFPLENBQUMsUUFBUSx5QkFDakIsNEVBQTRFO0lBQzVFLHdDQUF3QztLQUN2Q0EsT0FBTyxDQUFDLFVBQVUsSUFDbEJBLE9BQU8sQ0FBQyxXQUFXLE9BQ3hCO0lBRUYsT0FBTyxDQUFDLEVBQUViLFdBQVcsQ0FBQyxFQUFFQSxTQUFTLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRVksYUFBYSxFQUFFYixLQUFLLENBQUM7QUFDcEU7QUFFNkYsQ0FDN0YsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vdXJsLmpzPzRhNDYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQYXJzZXMgc3RyaW5nIGZvcm0gb2YgVVJMIGludG8gYW4gb2JqZWN0XG4gKiAvLyBib3Jyb3dlZCBmcm9tIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I2FwcGVuZGl4LUJcbiAqIC8vIGludGVudGlvbmFsbHkgdXNpbmcgcmVnZXggYW5kIG5vdCA8YS8+IGhyZWYgcGFyc2luZyB0cmljayBiZWNhdXNlIFJlYWN0IE5hdGl2ZSBhbmQgb3RoZXJcbiAqIC8vIGVudmlyb25tZW50cyB3aGVyZSBET00gbWlnaHQgbm90IGJlIGF2YWlsYWJsZVxuICogQHJldHVybnMgcGFyc2VkIFVSTCBvYmplY3RcbiAqL1xuZnVuY3Rpb24gcGFyc2VVcmwodXJsKSB7XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgY29uc3QgbWF0Y2ggPSB1cmwubWF0Y2goL14oKFteOi8/I10rKTopPyhcXC9cXC8oW14vPyNdKikpPyhbXj8jXSopKFxcPyhbXiNdKikpPygjKC4qKSk/JC8pO1xuXG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICAvLyBjb2VyY2UgdG8gdW5kZWZpbmVkIHZhbHVlcyB0byBlbXB0eSBzdHJpbmcgc28gd2UgZG9uJ3QgZ2V0ICd1bmRlZmluZWQnXG4gIGNvbnN0IHF1ZXJ5ID0gbWF0Y2hbNl0gfHwgJyc7XG4gIGNvbnN0IGZyYWdtZW50ID0gbWF0Y2hbOF0gfHwgJyc7XG4gIHJldHVybiB7XG4gICAgaG9zdDogbWF0Y2hbNF0sXG4gICAgcGF0aDogbWF0Y2hbNV0sXG4gICAgcHJvdG9jb2w6IG1hdGNoWzJdLFxuICAgIHNlYXJjaDogcXVlcnksXG4gICAgaGFzaDogZnJhZ21lbnQsXG4gICAgcmVsYXRpdmU6IG1hdGNoWzVdICsgcXVlcnkgKyBmcmFnbWVudCwgLy8gZXZlcnl0aGluZyBtaW51cyBvcmlnaW5cbiAgfTtcbn1cblxuLyoqXG4gKiBTdHJpcCB0aGUgcXVlcnkgc3RyaW5nIGFuZCBmcmFnbWVudCBvZmYgb2YgYSBnaXZlbiBVUkwgb3IgcGF0aCAoaWYgcHJlc2VudClcbiAqXG4gKiBAcGFyYW0gdXJsUGF0aCBGdWxsIFVSTCBvciBwYXRoLCBpbmNsdWRpbmcgcG9zc2libGUgcXVlcnkgc3RyaW5nIGFuZC9vciBmcmFnbWVudFxuICogQHJldHVybnMgVVJMIG9yIHBhdGggd2l0aG91dCBxdWVyeSBzdHJpbmcgb3IgZnJhZ21lbnRcbiAqL1xuZnVuY3Rpb24gc3RyaXBVcmxRdWVyeUFuZEZyYWdtZW50KHVybFBhdGgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG4gIHJldHVybiB1cmxQYXRoLnNwbGl0KC9bXFw/I10vLCAxKVswXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIG51bWJlciBvZiBVUkwgc2VnbWVudHMgb2YgYSBwYXNzZWQgc3RyaW5nIFVSTC5cbiAqL1xuZnVuY3Rpb24gZ2V0TnVtYmVyT2ZVcmxTZWdtZW50cyh1cmwpIHtcbiAgLy8gc3BsaXQgYXQgJy8nIG9yIGF0ICdcXC8nIHRvIHNwbGl0IHJlZ2V4IHVybHMgY29ycmVjdGx5XG4gIHJldHVybiB1cmwuc3BsaXQoL1xcXFw/XFwvLykuZmlsdGVyKHMgPT4gcy5sZW5ndGggPiAwICYmIHMgIT09ICcsJykubGVuZ3RoO1xufVxuXG4vKipcbiAqIFRha2VzIGEgVVJMIG9iamVjdCBhbmQgcmV0dXJucyBhIHNhbml0aXplZCBzdHJpbmcgd2hpY2ggaXMgc2FmZSB0byB1c2UgYXMgc3BhbiBkZXNjcmlwdGlvblxuICogc2VlOiBodHRwczovL2RldmVsb3Auc2VudHJ5LmRldi9zZGsvZGF0YS1oYW5kbGluZy8jc3RydWN0dXJpbmctZGF0YVxuICovXG5mdW5jdGlvbiBnZXRTYW5pdGl6ZWRVcmxTdHJpbmcodXJsKSB7XG4gIGNvbnN0IHsgcHJvdG9jb2wsIGhvc3QsIHBhdGggfSA9IHVybDtcblxuICBjb25zdCBmaWx0ZXJlZEhvc3QgPVxuICAgIChob3N0ICYmXG4gICAgICBob3N0XG4gICAgICAgIC8vIEFsd2F5cyBmaWx0ZXIgb3V0IGF1dGhvcml0eVxuICAgICAgICAucmVwbGFjZSgvXi4qQC8sICdbZmlsdGVyZWRdOltmaWx0ZXJlZF1AJylcbiAgICAgICAgLy8gRG9uJ3Qgc2hvdyBzdGFuZGFyZCA6ODAgKGh0dHApIGFuZCA6NDQzIChodHRwcykgcG9ydHMgdG8gcmVkdWNlIHRoZSBub2lzZVxuICAgICAgICAvLyBUT0RPOiBVc2UgbmV3IFVSTCBnbG9iYWwgaWYgaXQgZXhpc3RzXG4gICAgICAgIC5yZXBsYWNlKC8oOjgwKSQvLCAnJylcbiAgICAgICAgLnJlcGxhY2UoLyg6NDQzKSQvLCAnJykpIHx8XG4gICAgJyc7XG5cbiAgcmV0dXJuIGAke3Byb3RvY29sID8gYCR7cHJvdG9jb2x9Oi8vYCA6ICcnfSR7ZmlsdGVyZWRIb3N0fSR7cGF0aH1gO1xufVxuXG5leHBvcnQgeyBnZXROdW1iZXJPZlVybFNlZ21lbnRzLCBnZXRTYW5pdGl6ZWRVcmxTdHJpbmcsIHBhcnNlVXJsLCBzdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVybC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJwYXJzZVVybCIsInVybCIsIm1hdGNoIiwicXVlcnkiLCJmcmFnbWVudCIsImhvc3QiLCJwYXRoIiwicHJvdG9jb2wiLCJzZWFyY2giLCJoYXNoIiwicmVsYXRpdmUiLCJzdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQiLCJ1cmxQYXRoIiwic3BsaXQiLCJnZXROdW1iZXJPZlVybFNlZ21lbnRzIiwiZmlsdGVyIiwicyIsImxlbmd0aCIsImdldFNhbml0aXplZFVybFN0cmluZyIsImZpbHRlcmVkSG9zdCIsInJlcGxhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/url.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/worldwide.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/core/node_modules/@sentry/utils/esm/worldwide.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GLOBAL_OBJ: () => (/* binding */ GLOBAL_OBJ),\n/* harmony export */   getGlobalObject: () => (/* binding */ getGlobalObject),\n/* harmony export */   getGlobalSingleton: () => (/* binding */ getGlobalSingleton)\n/* harmony export */ });\n/** Internal global with common properties and Sentry extensions  */ // The code below for 'isGlobalObj' and 'GLOBAL_OBJ' was copied from core-js before modification\n// https://github.com/zloirock/core-js/blob/1b944df55282cdc99c90db5f49eb0b6eda2cc0a3/packages/core-js/internals/global.js\n// core-js has the following licence:\n//\n// Copyright (c) 2014-2022 Denis Pushkarev\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/** Returns 'obj' if it's the global object, otherwise returns undefined */ function isGlobalObj(obj) {\n    return obj && obj.Math == Math ? obj : undefined;\n}\n/** Get's the global object for the current JavaScript runtime */ const GLOBAL_OBJ = typeof globalThis == \"object\" && isGlobalObj(globalThis) || // eslint-disable-next-line no-restricted-globals\n false && 0 || typeof self == \"object\" && isGlobalObj(self) || typeof global == \"object\" && isGlobalObj(global) || function() {\n    return this;\n}() || {};\n/**\n * @deprecated Use GLOBAL_OBJ instead or WINDOW from @sentry/browser. This will be removed in v8\n */ function getGlobalObject() {\n    return GLOBAL_OBJ;\n}\n/**\n * Returns a global singleton contained in the global `__SENTRY__` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value\n * @returns the singleton\n */ function getGlobalSingleton(name, creator, obj) {\n    const gbl = obj || GLOBAL_OBJ;\n    const __SENTRY__ = gbl.__SENTRY__ = gbl.__SENTRY__ || {};\n    const singleton = __SENTRY__[name] || (__SENTRY__[name] = creator());\n    return singleton;\n}\n //# sourceMappingURL=worldwide.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS93b3JsZHdpZGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsa0VBQWtFLEdBRWxFLGdHQUFnRztBQUNoRyx5SEFBeUg7QUFDekgscUNBQXFDO0FBQ3JDLEVBQUU7QUFDRiwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLCtFQUErRTtBQUMvRSxnRkFBZ0Y7QUFDaEYsK0VBQStFO0FBQy9FLDRFQUE0RTtBQUM1RSx3RUFBd0U7QUFDeEUsMkRBQTJEO0FBQzNELEVBQUU7QUFDRiw2RUFBNkU7QUFDN0Usc0RBQXNEO0FBQ3RELEVBQUU7QUFDRiw2RUFBNkU7QUFDN0UsMkVBQTJFO0FBQzNFLDhFQUE4RTtBQUM5RSx5RUFBeUU7QUFDekUsZ0ZBQWdGO0FBQ2hGLDRFQUE0RTtBQUM1RSxnQkFBZ0I7QUFFaEIseUVBQXlFLEdBQ3pFLFNBQVNBLFlBQVlDLEdBQUc7SUFDdEIsT0FBT0EsT0FBT0EsSUFBSUMsSUFBSSxJQUFJQSxPQUFPRCxNQUFNRTtBQUN6QztBQUVBLCtEQUErRCxHQUMvRCxNQUFNQyxhQUNKLE9BQVFDLGNBQWMsWUFBWUwsWUFBWUssZUFDOUMsaURBQWlEO0FBQ2hELE1BQWlCLElBQVlMLENBQW1CTSxJQUNoRCxPQUFPQyxRQUFRLFlBQVlQLFlBQVlPLFNBQ3ZDLE9BQU9DLFVBQVUsWUFBWVIsWUFBWVEsV0FDMUM7SUFDRSxPQUFPLElBQUk7QUFDYixPQUNBLENBQUM7QUFFSDs7Q0FFQyxHQUNELFNBQVNDO0lBQ1AsT0FBT0w7QUFDVDtBQUVBOzs7Ozs7Ozs7O0NBVUMsR0FDRCxTQUFTTSxtQkFBbUJDLElBQUksRUFBRUMsT0FBTyxFQUFFWCxHQUFHO0lBQzVDLE1BQU1ZLE1BQU9aLE9BQU9HO0lBQ3BCLE1BQU1VLGFBQWNELElBQUlDLFVBQVUsR0FBR0QsSUFBSUMsVUFBVSxJQUFJLENBQUM7SUFDeEQsTUFBTUMsWUFBWUQsVUFBVSxDQUFDSCxLQUFLLElBQUtHLENBQUFBLFVBQVUsQ0FBQ0gsS0FBSyxHQUFHQyxTQUFRO0lBQ2xFLE9BQU9HO0FBQ1Q7QUFFMkQsQ0FDM0QscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vd29ybGR3aWRlLmpzPzU1NGMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIEludGVybmFsIGdsb2JhbCB3aXRoIGNvbW1vbiBwcm9wZXJ0aWVzIGFuZCBTZW50cnkgZXh0ZW5zaW9ucyAgKi9cblxuLy8gVGhlIGNvZGUgYmVsb3cgZm9yICdpc0dsb2JhbE9iaicgYW5kICdHTE9CQUxfT0JKJyB3YXMgY29waWVkIGZyb20gY29yZS1qcyBiZWZvcmUgbW9kaWZpY2F0aW9uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9ibG9iLzFiOTQ0ZGY1NTI4MmNkYzk5YzkwZGI1ZjQ5ZWIwYjZlZGEyY2MwYTMvcGFja2FnZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzXG4vLyBjb3JlLWpzIGhhcyB0aGUgZm9sbG93aW5nIGxpY2VuY2U6XG4vL1xuLy8gQ29weXJpZ2h0IChjKSAyMDE0LTIwMjIgRGVuaXMgUHVzaGthcmV2XG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuLyoqIFJldHVybnMgJ29iaicgaWYgaXQncyB0aGUgZ2xvYmFsIG9iamVjdCwgb3RoZXJ3aXNlIHJldHVybnMgdW5kZWZpbmVkICovXG5mdW5jdGlvbiBpc0dsb2JhbE9iaihvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouTWF0aCA9PSBNYXRoID8gb2JqIDogdW5kZWZpbmVkO1xufVxuXG4vKiogR2V0J3MgdGhlIGdsb2JhbCBvYmplY3QgZm9yIHRoZSBjdXJyZW50IEphdmFTY3JpcHQgcnVudGltZSAqL1xuY29uc3QgR0xPQkFMX09CSiA9XG4gICh0eXBlb2YgZ2xvYmFsVGhpcyA9PSAnb2JqZWN0JyAmJiBpc0dsb2JhbE9iaihnbG9iYWxUaGlzKSkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiBpc0dsb2JhbE9iaih3aW5kb3cpKSB8fFxuICAodHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgaXNHbG9iYWxPYmooc2VsZikpIHx8XG4gICh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGlzR2xvYmFsT2JqKGdsb2JhbCkpIHx8XG4gIChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pKCkgfHxcbiAge307XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIEdMT0JBTF9PQkogaW5zdGVhZCBvciBXSU5ET1cgZnJvbSBAc2VudHJ5L2Jyb3dzZXIuIFRoaXMgd2lsbCBiZSByZW1vdmVkIGluIHY4XG4gKi9cbmZ1bmN0aW9uIGdldEdsb2JhbE9iamVjdCgpIHtcbiAgcmV0dXJuIEdMT0JBTF9PQkogO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBnbG9iYWwgc2luZ2xldG9uIGNvbnRhaW5lZCBpbiB0aGUgZ2xvYmFsIGBfX1NFTlRSWV9fYCBvYmplY3QuXG4gKlxuICogSWYgdGhlIHNpbmdsZXRvbiBkb2Vzbid0IGFscmVhZHkgZXhpc3QgaW4gYF9fU0VOVFJZX19gLCBpdCB3aWxsIGJlIGNyZWF0ZWQgdXNpbmcgdGhlIGdpdmVuIGZhY3RvcnlcbiAqIGZ1bmN0aW9uIGFuZCBhZGRlZCB0byB0aGUgYF9fU0VOVFJZX19gIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gbmFtZSBuYW1lIG9mIHRoZSBnbG9iYWwgc2luZ2xldG9uIG9uIF9fU0VOVFJZX19cbiAqIEBwYXJhbSBjcmVhdG9yIGNyZWF0b3IgRmFjdG9yeSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIHNpbmdsZXRvbiBpZiBpdCBkb2Vzbid0IGFscmVhZHkgZXhpc3Qgb24gYF9fU0VOVFJZX19gXG4gKiBAcGFyYW0gb2JqIChPcHRpb25hbCkgVGhlIGdsb2JhbCBvYmplY3Qgb24gd2hpY2ggdG8gbG9vayBmb3IgYF9fU0VOVFJZX19gLCBpZiBub3QgYEdMT0JBTF9PQkpgJ3MgcmV0dXJuIHZhbHVlXG4gKiBAcmV0dXJucyB0aGUgc2luZ2xldG9uXG4gKi9cbmZ1bmN0aW9uIGdldEdsb2JhbFNpbmdsZXRvbihuYW1lLCBjcmVhdG9yLCBvYmopIHtcbiAgY29uc3QgZ2JsID0gKG9iaiB8fCBHTE9CQUxfT0JKKSA7XG4gIGNvbnN0IF9fU0VOVFJZX18gPSAoZ2JsLl9fU0VOVFJZX18gPSBnYmwuX19TRU5UUllfXyB8fCB7fSk7XG4gIGNvbnN0IHNpbmdsZXRvbiA9IF9fU0VOVFJZX19bbmFtZV0gfHwgKF9fU0VOVFJZX19bbmFtZV0gPSBjcmVhdG9yKCkpO1xuICByZXR1cm4gc2luZ2xldG9uO1xufVxuXG5leHBvcnQgeyBHTE9CQUxfT0JKLCBnZXRHbG9iYWxPYmplY3QsIGdldEdsb2JhbFNpbmdsZXRvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d29ybGR3aWRlLmpzLm1hcFxuIl0sIm5hbWVzIjpbImlzR2xvYmFsT2JqIiwib2JqIiwiTWF0aCIsInVuZGVmaW5lZCIsIkdMT0JBTF9PQkoiLCJnbG9iYWxUaGlzIiwid2luZG93Iiwic2VsZiIsImdsb2JhbCIsImdldEdsb2JhbE9iamVjdCIsImdldEdsb2JhbFNpbmdsZXRvbiIsIm5hbWUiLCJjcmVhdG9yIiwiZ2JsIiwiX19TRU5UUllfXyIsInNpbmdsZXRvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/core/node_modules/@sentry/utils/esm/worldwide.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/integrations/esm/rewriteframes.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/integrations/esm/rewriteframes.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RewriteFrames: () => (/* binding */ RewriteFrames)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/integrations/node_modules/@sentry/utils/esm/path.js\");\n\n/** Rewrite event frames paths */ class RewriteFrames {\n    /**\n   * @inheritDoc\n   */ static __initStatic() {\n        this.id = \"RewriteFrames\";\n    }\n    /**\n   * @inheritDoc\n   */ /**\n   * @inheritDoc\n   */ /**\n   * @inheritDoc\n   */ /**\n   * @inheritDoc\n   */ constructor(options = {}){\n        RewriteFrames.prototype.__init.call(this);\n        this.name = RewriteFrames.id;\n        if (options.root) {\n            this._root = options.root;\n        }\n        this._prefix = options.prefix || \"app:///\";\n        if (options.iteratee) {\n            this._iteratee = options.iteratee;\n        }\n    }\n    /**\n   * @inheritDoc\n   */ setupOnce(_addGlobalEventProcessor, _getCurrentHub) {\n    // noop\n    }\n    /** @inheritDoc */ processEvent(event) {\n        return this.process(event);\n    }\n    /**\n   * TODO (v8): Make this private/internal\n   */ process(originalEvent) {\n        let processedEvent = originalEvent;\n        if (originalEvent.exception && Array.isArray(originalEvent.exception.values)) {\n            processedEvent = this._processExceptionsEvent(processedEvent);\n        }\n        return processedEvent;\n    }\n    /**\n   * @inheritDoc\n   */ __init() {\n        this._iteratee = (frame)=>{\n            if (!frame.filename) {\n                return frame;\n            }\n            // Determine if this is a Windows frame by checking for a Windows-style prefix such as `C:\\`\n            const isWindowsFrame = /^[a-zA-Z]:\\\\/.test(frame.filename) || // or the presence of a backslash without a forward slash (which are not allowed on Windows)\n            frame.filename.includes(\"\\\\\") && !frame.filename.includes(\"/\");\n            // Check if the frame filename begins with `/`\n            const startsWithSlash = /^\\//.test(frame.filename);\n            if (isWindowsFrame || startsWithSlash) {\n                const filename = isWindowsFrame ? frame.filename.replace(/^[a-zA-Z]:/, \"\") // remove Windows-style prefix\n                .replace(/\\\\/g, \"/\") // replace all `\\\\` instances with `/`\n                 : frame.filename;\n                const base = this._root ? (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.relative)(this._root, filename) : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.basename)(filename);\n                frame.filename = `${this._prefix}${base}`;\n            }\n            return frame;\n        };\n    }\n    /** JSDoc */ _processExceptionsEvent(event) {\n        try {\n            return {\n                ...event,\n                exception: {\n                    ...event.exception,\n                    // The check for this is performed inside `process` call itself, safe to skip here\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    values: event.exception.values.map((value)=>({\n                            ...value,\n                            ...value.stacktrace && {\n                                stacktrace: this._processStacktrace(value.stacktrace)\n                            }\n                        }))\n                }\n            };\n        } catch (_oO) {\n            return event;\n        }\n    }\n    /** JSDoc */ _processStacktrace(stacktrace) {\n        return {\n            ...stacktrace,\n            frames: stacktrace && stacktrace.frames && stacktrace.frames.map((f)=>this._iteratee(f))\n        };\n    }\n}\nRewriteFrames.__initStatic();\n //# sourceMappingURL=rewriteframes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9pbnRlZ3JhdGlvbnMvZXNtL3Jld3JpdGVmcmFtZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBbUQ7QUFFbkQsK0JBQStCLEdBQy9CLE1BQU1FO0lBQ0o7O0dBRUMsR0FDQSxPQUFPQyxlQUFlO1FBQUMsSUFBSSxDQUFDQyxFQUFFLEdBQUc7SUFBZ0I7SUFFbEQ7O0dBRUMsR0FFRDs7R0FFQyxHQUVEOztHQUVDLEdBRUQ7O0dBRUMsR0FDQUMsWUFBWUMsVUFBVSxDQUFDLENBQUMsQ0FBRTtRQUFDSixjQUFjSyxTQUFTLENBQUNDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDLElBQUk7UUFDbEUsSUFBSSxDQUFDQyxJQUFJLEdBQUdSLGNBQWNFLEVBQUU7UUFFNUIsSUFBSUUsUUFBUUssSUFBSSxFQUFFO1lBQ2hCLElBQUksQ0FBQ0MsS0FBSyxHQUFHTixRQUFRSyxJQUFJO1FBQzNCO1FBQ0EsSUFBSSxDQUFDRSxPQUFPLEdBQUdQLFFBQVFRLE1BQU0sSUFBSTtRQUNqQyxJQUFJUixRQUFRUyxRQUFRLEVBQUU7WUFDcEIsSUFBSSxDQUFDQyxTQUFTLEdBQUdWLFFBQVFTLFFBQVE7UUFDbkM7SUFDRjtJQUVBOztHQUVDLEdBQ0FFLFVBQVVDLHdCQUF3QixFQUFFQyxjQUFjLEVBQUU7SUFDbkQsT0FBTztJQUNUO0lBRUEsZ0JBQWdCLEdBQ2ZDLGFBQWFDLEtBQUssRUFBRTtRQUNuQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDRDtJQUN0QjtJQUVBOztHQUVDLEdBQ0FDLFFBQVFDLGFBQWEsRUFBRTtRQUN0QixJQUFJQyxpQkFBaUJEO1FBRXJCLElBQUlBLGNBQWNFLFNBQVMsSUFBSUMsTUFBTUMsT0FBTyxDQUFDSixjQUFjRSxTQUFTLENBQUNHLE1BQU0sR0FBRztZQUM1RUosaUJBQWlCLElBQUksQ0FBQ0ssdUJBQXVCLENBQUNMO1FBQ2hEO1FBRUEsT0FBT0E7SUFDVDtJQUVBOztHQUVDLEdBQ0NoQixTQUFTO1FBQUMsSUFBSSxDQUFDUSxTQUFTLEdBQUcsQ0FBQ2M7WUFDNUIsSUFBSSxDQUFDQSxNQUFNQyxRQUFRLEVBQUU7Z0JBQ25CLE9BQU9EO1lBQ1Q7WUFDQSw0RkFBNEY7WUFDNUYsTUFBTUUsaUJBQ0osZUFBZUMsSUFBSSxDQUFDSCxNQUFNQyxRQUFRLEtBQ2xDLDRGQUE0RjtZQUMzRkQsTUFBTUMsUUFBUSxDQUFDRyxRQUFRLENBQUMsU0FBUyxDQUFDSixNQUFNQyxRQUFRLENBQUNHLFFBQVEsQ0FBQztZQUM3RCw4Q0FBOEM7WUFDOUMsTUFBTUMsa0JBQWtCLE1BQU1GLElBQUksQ0FBQ0gsTUFBTUMsUUFBUTtZQUNqRCxJQUFJQyxrQkFBa0JHLGlCQUFpQjtnQkFDckMsTUFBTUosV0FBV0MsaUJBQ2JGLE1BQU1DLFFBQVEsQ0FDWEssT0FBTyxDQUFDLGNBQWMsSUFBSSw4QkFBOEI7aUJBQ3hEQSxPQUFPLENBQUMsT0FBTyxLQUFLLHNDQUFzQzttQkFDN0ROLE1BQU1DLFFBQVE7Z0JBQ2xCLE1BQU1NLE9BQU8sSUFBSSxDQUFDekIsS0FBSyxHQUFHWix1REFBUUEsQ0FBQyxJQUFJLENBQUNZLEtBQUssRUFBRW1CLFlBQVk5Qix1REFBUUEsQ0FBQzhCO2dCQUNwRUQsTUFBTUMsUUFBUSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUNsQixPQUFPLENBQUMsRUFBRXdCLEtBQUssQ0FBQztZQUMzQztZQUNBLE9BQU9QO1FBQ1Q7SUFBRTtJQUVGLFVBQVUsR0FDVEQsd0JBQXdCUixLQUFLLEVBQUU7UUFDOUIsSUFBSTtZQUNGLE9BQU87Z0JBQ0wsR0FBR0EsS0FBSztnQkFDUkksV0FBVztvQkFDVCxHQUFHSixNQUFNSSxTQUFTO29CQUNsQixrRkFBa0Y7b0JBQ2xGLG9FQUFvRTtvQkFDcEVHLFFBQVFQLE1BQU1JLFNBQVMsQ0FBQ0csTUFBTSxDQUFDVSxHQUFHLENBQUNDLENBQUFBLFFBQVU7NEJBQzNDLEdBQUdBLEtBQUs7NEJBQ1IsR0FBSUEsTUFBTUMsVUFBVSxJQUFJO2dDQUFFQSxZQUFZLElBQUksQ0FBQ0Msa0JBQWtCLENBQUNGLE1BQU1DLFVBQVU7NEJBQUUsQ0FBQzt3QkFDbkY7Z0JBQ0Y7WUFDRjtRQUNGLEVBQUUsT0FBT0UsS0FBSztZQUNaLE9BQU9yQjtRQUNUO0lBQ0Y7SUFFQSxVQUFVLEdBQ1RvQixtQkFBbUJELFVBQVUsRUFBRTtRQUM5QixPQUFPO1lBQ0wsR0FBR0EsVUFBVTtZQUNiRyxRQUFRSCxjQUFjQSxXQUFXRyxNQUFNLElBQUlILFdBQVdHLE1BQU0sQ0FBQ0wsR0FBRyxDQUFDTSxDQUFBQSxJQUFLLElBQUksQ0FBQzVCLFNBQVMsQ0FBQzRCO1FBQ3ZGO0lBQ0Y7QUFDRjtBQUFFMUMsY0FBY0MsWUFBWTtBQUVILENBQ3pCLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2ludGVncmF0aW9ucy9lc20vcmV3cml0ZWZyYW1lcy5qcz9iYjM5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbGF0aXZlLCBiYXNlbmFtZSB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuXG4vKiogUmV3cml0ZSBldmVudCBmcmFtZXMgcGF0aHMgKi9cbmNsYXNzIFJld3JpdGVGcmFtZXMgIHtcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAgc3RhdGljIF9faW5pdFN0YXRpYygpIHt0aGlzLmlkID0gJ1Jld3JpdGVGcmFtZXMnO31cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtSZXdyaXRlRnJhbWVzLnByb3RvdHlwZS5fX2luaXQuY2FsbCh0aGlzKTtcbiAgICB0aGlzLm5hbWUgPSBSZXdyaXRlRnJhbWVzLmlkO1xuXG4gICAgaWYgKG9wdGlvbnMucm9vdCkge1xuICAgICAgdGhpcy5fcm9vdCA9IG9wdGlvbnMucm9vdDtcbiAgICB9XG4gICAgdGhpcy5fcHJlZml4ID0gb3B0aW9ucy5wcmVmaXggfHwgJ2FwcDovLy8nO1xuICAgIGlmIChvcHRpb25zLml0ZXJhdGVlKSB7XG4gICAgICB0aGlzLl9pdGVyYXRlZSA9IG9wdGlvbnMuaXRlcmF0ZWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAgc2V0dXBPbmNlKF9hZGRHbG9iYWxFdmVudFByb2Nlc3NvciwgX2dldEN1cnJlbnRIdWIpIHtcbiAgICAvLyBub29wXG4gIH1cblxuICAvKiogQGluaGVyaXREb2MgKi9cbiAgIHByb2Nlc3NFdmVudChldmVudCkge1xuICAgIHJldHVybiB0aGlzLnByb2Nlc3MoZXZlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRPRE8gKHY4KTogTWFrZSB0aGlzIHByaXZhdGUvaW50ZXJuYWxcbiAgICovXG4gICBwcm9jZXNzKG9yaWdpbmFsRXZlbnQpIHtcbiAgICBsZXQgcHJvY2Vzc2VkRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuXG4gICAgaWYgKG9yaWdpbmFsRXZlbnQuZXhjZXB0aW9uICYmIEFycmF5LmlzQXJyYXkob3JpZ2luYWxFdmVudC5leGNlcHRpb24udmFsdWVzKSkge1xuICAgICAgcHJvY2Vzc2VkRXZlbnQgPSB0aGlzLl9wcm9jZXNzRXhjZXB0aW9uc0V2ZW50KHByb2Nlc3NlZEV2ZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvY2Vzc2VkRXZlbnQ7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICAgX19pbml0KCkge3RoaXMuX2l0ZXJhdGVlID0gKGZyYW1lKSA9PiB7XG4gICAgaWYgKCFmcmFtZS5maWxlbmFtZSkge1xuICAgICAgcmV0dXJuIGZyYW1lO1xuICAgIH1cbiAgICAvLyBEZXRlcm1pbmUgaWYgdGhpcyBpcyBhIFdpbmRvd3MgZnJhbWUgYnkgY2hlY2tpbmcgZm9yIGEgV2luZG93cy1zdHlsZSBwcmVmaXggc3VjaCBhcyBgQzpcXGBcbiAgICBjb25zdCBpc1dpbmRvd3NGcmFtZSA9XG4gICAgICAvXlthLXpBLVpdOlxcXFwvLnRlc3QoZnJhbWUuZmlsZW5hbWUpIHx8XG4gICAgICAvLyBvciB0aGUgcHJlc2VuY2Ugb2YgYSBiYWNrc2xhc2ggd2l0aG91dCBhIGZvcndhcmQgc2xhc2ggKHdoaWNoIGFyZSBub3QgYWxsb3dlZCBvbiBXaW5kb3dzKVxuICAgICAgKGZyYW1lLmZpbGVuYW1lLmluY2x1ZGVzKCdcXFxcJykgJiYgIWZyYW1lLmZpbGVuYW1lLmluY2x1ZGVzKCcvJykpO1xuICAgIC8vIENoZWNrIGlmIHRoZSBmcmFtZSBmaWxlbmFtZSBiZWdpbnMgd2l0aCBgL2BcbiAgICBjb25zdCBzdGFydHNXaXRoU2xhc2ggPSAvXlxcLy8udGVzdChmcmFtZS5maWxlbmFtZSk7XG4gICAgaWYgKGlzV2luZG93c0ZyYW1lIHx8IHN0YXJ0c1dpdGhTbGFzaCkge1xuICAgICAgY29uc3QgZmlsZW5hbWUgPSBpc1dpbmRvd3NGcmFtZVxuICAgICAgICA/IGZyYW1lLmZpbGVuYW1lXG4gICAgICAgICAgICAucmVwbGFjZSgvXlthLXpBLVpdOi8sICcnKSAvLyByZW1vdmUgV2luZG93cy1zdHlsZSBwcmVmaXhcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcL2csICcvJykgLy8gcmVwbGFjZSBhbGwgYFxcXFxgIGluc3RhbmNlcyB3aXRoIGAvYFxuICAgICAgICA6IGZyYW1lLmZpbGVuYW1lO1xuICAgICAgY29uc3QgYmFzZSA9IHRoaXMuX3Jvb3QgPyByZWxhdGl2ZSh0aGlzLl9yb290LCBmaWxlbmFtZSkgOiBiYXNlbmFtZShmaWxlbmFtZSk7XG4gICAgICBmcmFtZS5maWxlbmFtZSA9IGAke3RoaXMuX3ByZWZpeH0ke2Jhc2V9YDtcbiAgICB9XG4gICAgcmV0dXJuIGZyYW1lO1xuICB9O31cblxuICAvKiogSlNEb2MgKi9cbiAgIF9wcm9jZXNzRXhjZXB0aW9uc0V2ZW50KGV2ZW50KSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmV2ZW50LFxuICAgICAgICBleGNlcHRpb246IHtcbiAgICAgICAgICAuLi5ldmVudC5leGNlcHRpb24sXG4gICAgICAgICAgLy8gVGhlIGNoZWNrIGZvciB0aGlzIGlzIHBlcmZvcm1lZCBpbnNpZGUgYHByb2Nlc3NgIGNhbGwgaXRzZWxmLCBzYWZlIHRvIHNraXAgaGVyZVxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgdmFsdWVzOiBldmVudC5leGNlcHRpb24udmFsdWVzLm1hcCh2YWx1ZSA9PiAoe1xuICAgICAgICAgICAgLi4udmFsdWUsXG4gICAgICAgICAgICAuLi4odmFsdWUuc3RhY2t0cmFjZSAmJiB7IHN0YWNrdHJhY2U6IHRoaXMuX3Byb2Nlc3NTdGFja3RyYWNlKHZhbHVlLnN0YWNrdHJhY2UpIH0pLFxuICAgICAgICAgIH0pKSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoX29PKSB7XG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuICB9XG5cbiAgLyoqIEpTRG9jICovXG4gICBfcHJvY2Vzc1N0YWNrdHJhY2Uoc3RhY2t0cmFjZSkge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5zdGFja3RyYWNlLFxuICAgICAgZnJhbWVzOiBzdGFja3RyYWNlICYmIHN0YWNrdHJhY2UuZnJhbWVzICYmIHN0YWNrdHJhY2UuZnJhbWVzLm1hcChmID0+IHRoaXMuX2l0ZXJhdGVlKGYpKSxcbiAgICB9O1xuICB9XG59IFJld3JpdGVGcmFtZXMuX19pbml0U3RhdGljKCk7XG5cbmV4cG9ydCB7IFJld3JpdGVGcmFtZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJld3JpdGVmcmFtZXMuanMubWFwXG4iXSwibmFtZXMiOlsicmVsYXRpdmUiLCJiYXNlbmFtZSIsIlJld3JpdGVGcmFtZXMiLCJfX2luaXRTdGF0aWMiLCJpZCIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsInByb3RvdHlwZSIsIl9faW5pdCIsImNhbGwiLCJuYW1lIiwicm9vdCIsIl9yb290IiwiX3ByZWZpeCIsInByZWZpeCIsIml0ZXJhdGVlIiwiX2l0ZXJhdGVlIiwic2V0dXBPbmNlIiwiX2FkZEdsb2JhbEV2ZW50UHJvY2Vzc29yIiwiX2dldEN1cnJlbnRIdWIiLCJwcm9jZXNzRXZlbnQiLCJldmVudCIsInByb2Nlc3MiLCJvcmlnaW5hbEV2ZW50IiwicHJvY2Vzc2VkRXZlbnQiLCJleGNlcHRpb24iLCJBcnJheSIsImlzQXJyYXkiLCJ2YWx1ZXMiLCJfcHJvY2Vzc0V4Y2VwdGlvbnNFdmVudCIsImZyYW1lIiwiZmlsZW5hbWUiLCJpc1dpbmRvd3NGcmFtZSIsInRlc3QiLCJpbmNsdWRlcyIsInN0YXJ0c1dpdGhTbGFzaCIsInJlcGxhY2UiLCJiYXNlIiwibWFwIiwidmFsdWUiLCJzdGFja3RyYWNlIiwiX3Byb2Nlc3NTdGFja3RyYWNlIiwiX29PIiwiZnJhbWVzIiwiZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/integrations/esm/rewriteframes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/integrations/node_modules/@sentry/utils/esm/path.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@sentry/integrations/node_modules/@sentry/utils/esm/path.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   basename: () => (/* binding */ basename),\n/* harmony export */   dirname: () => (/* binding */ dirname),\n/* harmony export */   isAbsolute: () => (/* binding */ isAbsolute),\n/* harmony export */   join: () => (/* binding */ join),\n/* harmony export */   normalizePath: () => (/* binding */ normalizePath),\n/* harmony export */   relative: () => (/* binding */ relative),\n/* harmony export */   resolve: () => (/* binding */ resolve)\n/* harmony export */ });\n// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://github.com/calvinmetcalf/rollup-plugin-node-builtins/blob/63ab8aacd013767445ca299e468d9a60a95328d7/src/es6/path.js\n//\n// Copyright Joyent, Inc.and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n/** JSDoc */ function normalizeArray(parts, allowAboveRoot) {\n    // if the path tries to go above the root, `up` ends up > 0\n    let up = 0;\n    for(let i = parts.length - 1; i >= 0; i--){\n        const last = parts[i];\n        if (last === \".\") {\n            parts.splice(i, 1);\n        } else if (last === \"..\") {\n            parts.splice(i, 1);\n            up++;\n        } else if (up) {\n            parts.splice(i, 1);\n            up--;\n        }\n    }\n    // if the path is allowed to go above the root, restore leading ..s\n    if (allowAboveRoot) {\n        for(; up--; up){\n            parts.unshift(\"..\");\n        }\n    }\n    return parts;\n}\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nconst splitPathRe = /^(\\S+:\\\\|\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^/\\\\]+?|)(\\.[^./\\\\]*|))(?:[/\\\\]*)$/;\n/** JSDoc */ function splitPath(filename) {\n    // Truncate files names greater than 1024 characters to avoid regex dos\n    // https://github.com/getsentry/sentry-javascript/pull/8737#discussion_r1285719172\n    const truncated = filename.length > 1024 ? `<truncated>${filename.slice(-1024)}` : filename;\n    const parts = splitPathRe.exec(truncated);\n    return parts ? parts.slice(1) : [];\n}\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */ function resolve(...args) {\n    let resolvedPath = \"\";\n    let resolvedAbsolute = false;\n    for(let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--){\n        const path = i >= 0 ? args[i] : \"/\";\n        // Skip empty entries\n        if (!path) {\n            continue;\n        }\n        resolvedPath = `${path}/${resolvedPath}`;\n        resolvedAbsolute = path.charAt(0) === \"/\";\n    }\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n    // Normalize the path\n    resolvedPath = normalizeArray(resolvedPath.split(\"/\").filter((p)=>!!p), !resolvedAbsolute).join(\"/\");\n    return (resolvedAbsolute ? \"/\" : \"\") + resolvedPath || \".\";\n}\n/** JSDoc */ function trim(arr) {\n    let start = 0;\n    for(; start < arr.length; start++){\n        if (arr[start] !== \"\") {\n            break;\n        }\n    }\n    let end = arr.length - 1;\n    for(; end >= 0; end--){\n        if (arr[end] !== \"\") {\n            break;\n        }\n    }\n    if (start > end) {\n        return [];\n    }\n    return arr.slice(start, end - start + 1);\n}\n// path.relative(from, to)\n// posix version\n/** JSDoc */ function relative(from, to) {\n    /* eslint-disable no-param-reassign */ from = resolve(from).slice(1);\n    to = resolve(to).slice(1);\n    /* eslint-enable no-param-reassign */ const fromParts = trim(from.split(\"/\"));\n    const toParts = trim(to.split(\"/\"));\n    const length = Math.min(fromParts.length, toParts.length);\n    let samePartsLength = length;\n    for(let i = 0; i < length; i++){\n        if (fromParts[i] !== toParts[i]) {\n            samePartsLength = i;\n            break;\n        }\n    }\n    let outputParts = [];\n    for(let i = samePartsLength; i < fromParts.length; i++){\n        outputParts.push(\"..\");\n    }\n    outputParts = outputParts.concat(toParts.slice(samePartsLength));\n    return outputParts.join(\"/\");\n}\n// path.normalize(path)\n// posix version\n/** JSDoc */ function normalizePath(path) {\n    const isPathAbsolute = isAbsolute(path);\n    const trailingSlash = path.slice(-1) === \"/\";\n    // Normalize the path\n    let normalizedPath = normalizeArray(path.split(\"/\").filter((p)=>!!p), !isPathAbsolute).join(\"/\");\n    if (!normalizedPath && !isPathAbsolute) {\n        normalizedPath = \".\";\n    }\n    if (normalizedPath && trailingSlash) {\n        normalizedPath += \"/\";\n    }\n    return (isPathAbsolute ? \"/\" : \"\") + normalizedPath;\n}\n// posix version\n/** JSDoc */ function isAbsolute(path) {\n    return path.charAt(0) === \"/\";\n}\n// posix version\n/** JSDoc */ function join(...args) {\n    return normalizePath(args.join(\"/\"));\n}\n/** JSDoc */ function dirname(path) {\n    const result = splitPath(path);\n    const root = result[0];\n    let dir = result[1];\n    if (!root && !dir) {\n        // No dirname whatsoever\n        return \".\";\n    }\n    if (dir) {\n        // It has a dirname, strip trailing slash\n        dir = dir.slice(0, dir.length - 1);\n    }\n    return root + dir;\n}\n/** JSDoc */ function basename(path, ext) {\n    let f = splitPath(path)[2];\n    if (ext && f.slice(ext.length * -1) === ext) {\n        f = f.slice(0, f.length - ext.length);\n    }\n    return f;\n}\n //# sourceMappingURL=path.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/integrations/node_modules/@sentry/utils/esm/path.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/_error.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/_error.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   captureUnderscoreErrorException: () => (/* binding */ captureUnderscoreErrorException)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/exports.js\");\n/* harmony import */ var _utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/responseEnd.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/responseEnd.js\");\n\n\n/**\n * Capture the exception passed by nextjs to the `_error` page, adding context data as appropriate.\n *\n * @param contextOrProps The data passed to either `getInitialProps` or `render` by nextjs\n */ async function captureUnderscoreErrorException(contextOrProps) {\n    const { req, res, err } = contextOrProps;\n    // 404s (and other 400-y friends) can trigger `_error`, but we don't want to send them to Sentry\n    const statusCode = res && res.statusCode || contextOrProps.statusCode;\n    if (statusCode && statusCode < 500) {\n        return Promise.resolve();\n    }\n    // In previous versions of the suggested `_error.js` page in which this function is meant to be used, there was a\n    // workaround for https://github.com/vercel/next.js/issues/8592 which involved an extra call to this function, in the\n    // custom error component's `render` method, just in case it hadn't been called by `getInitialProps`. Now that that\n    // issue has been fixed, the second call is unnecessary, but since it lives in user code rather than our code, users\n    // have to be the ones to get rid of it, and guaraneteedly, not all of them will. So, rather than capture the error\n    // twice, we just bail if we sense we're in that now-extraneous second call. (We can tell which function we're in\n    // because Nextjs passes `pathname` to `getInitialProps` but not to `render`.)\n    if (!contextOrProps.pathname) {\n        return Promise.resolve();\n    }\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.withScope)((scope)=>{\n        if (req) {\n            scope.setSDKProcessingMetadata({\n                request: req\n            });\n        }\n        // If third-party libraries (or users themselves) throw something falsy, we want to capture it as a message (which\n        // is what passing a string to `captureException` will wind up doing)\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.captureException)(err || `_error.js called with falsy error (${err})`, {\n            mechanism: {\n                type: \"instrument\",\n                handled: false,\n                data: {\n                    function: \"_error.getInitialProps\"\n                }\n            }\n        });\n    });\n    // In case this is being run as part of a serverless function (as is the case with the server half of nextjs apps\n    // deployed to vercel), make sure the error gets sent to Sentry before the lambda exits.\n    await (0,_utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_1__.flushQueue)();\n}\n //# sourceMappingURL=_error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvZXNtL2NvbW1vbi9fZXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJEO0FBQ1A7QUFFcEQ7Ozs7Q0FJQyxHQUNELGVBQWVHLGdDQUFnQ0MsY0FBYztJQUMzRCxNQUFNLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUUsR0FBR0g7SUFFMUIsZ0dBQWdHO0lBQ2hHLE1BQU1JLGFBQWEsT0FBUUYsSUFBSUUsVUFBVSxJQUFLSixlQUFlSSxVQUFVO0lBQ3ZFLElBQUlBLGNBQWNBLGFBQWEsS0FBSztRQUNsQyxPQUFPQyxRQUFRQyxPQUFPO0lBQ3hCO0lBRUEsaUhBQWlIO0lBQ2pILHFIQUFxSDtJQUNySCxtSEFBbUg7SUFDbkgsb0hBQW9IO0lBQ3BILG1IQUFtSDtJQUNuSCxpSEFBaUg7SUFDakgsOEVBQThFO0lBQzlFLElBQUksQ0FBQ04sZUFBZU8sUUFBUSxFQUFFO1FBQzVCLE9BQU9GLFFBQVFDLE9BQU87SUFDeEI7SUFFQVYsdURBQVNBLENBQUNZLENBQUFBO1FBQ1IsSUFBSVAsS0FBSztZQUNQTyxNQUFNQyx3QkFBd0IsQ0FBQztnQkFBRUMsU0FBU1Q7WUFBSTtRQUNoRDtRQUVBLGtIQUFrSDtRQUNsSCxxRUFBcUU7UUFDckVKLDhEQUFnQkEsQ0FBQ00sT0FBTyxDQUFDLG1DQUFtQyxFQUFFQSxJQUFJLENBQUMsQ0FBQyxFQUFFO1lBQ3BFUSxXQUFXO2dCQUNUQyxNQUFNO2dCQUNOQyxTQUFTO2dCQUNUQyxNQUFNO29CQUNKQyxVQUFVO2dCQUNaO1lBQ0Y7UUFDRjtJQUNGO0lBRUEsaUhBQWlIO0lBQ2pILHdGQUF3RjtJQUN4RixNQUFNakIsaUVBQVVBO0FBQ2xCO0FBRTJDLENBQzNDLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9lc20vY29tbW9uL19lcnJvci5qcz83ZjZiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHdpdGhTY29wZSwgY2FwdHVyZUV4Y2VwdGlvbiB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBmbHVzaFF1ZXVlIH0gZnJvbSAnLi91dGlscy9yZXNwb25zZUVuZC5qcyc7XG5cbi8qKlxuICogQ2FwdHVyZSB0aGUgZXhjZXB0aW9uIHBhc3NlZCBieSBuZXh0anMgdG8gdGhlIGBfZXJyb3JgIHBhZ2UsIGFkZGluZyBjb250ZXh0IGRhdGEgYXMgYXBwcm9wcmlhdGUuXG4gKlxuICogQHBhcmFtIGNvbnRleHRPclByb3BzIFRoZSBkYXRhIHBhc3NlZCB0byBlaXRoZXIgYGdldEluaXRpYWxQcm9wc2Agb3IgYHJlbmRlcmAgYnkgbmV4dGpzXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNhcHR1cmVVbmRlcnNjb3JlRXJyb3JFeGNlcHRpb24oY29udGV4dE9yUHJvcHMpIHtcbiAgY29uc3QgeyByZXEsIHJlcywgZXJyIH0gPSBjb250ZXh0T3JQcm9wcztcblxuICAvLyA0MDRzIChhbmQgb3RoZXIgNDAwLXkgZnJpZW5kcykgY2FuIHRyaWdnZXIgYF9lcnJvcmAsIGJ1dCB3ZSBkb24ndCB3YW50IHRvIHNlbmQgdGhlbSB0byBTZW50cnlcbiAgY29uc3Qgc3RhdHVzQ29kZSA9IChyZXMgJiYgcmVzLnN0YXR1c0NvZGUpIHx8IGNvbnRleHRPclByb3BzLnN0YXR1c0NvZGU7XG4gIGlmIChzdGF0dXNDb2RlICYmIHN0YXR1c0NvZGUgPCA1MDApIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICAvLyBJbiBwcmV2aW91cyB2ZXJzaW9ucyBvZiB0aGUgc3VnZ2VzdGVkIGBfZXJyb3IuanNgIHBhZ2UgaW4gd2hpY2ggdGhpcyBmdW5jdGlvbiBpcyBtZWFudCB0byBiZSB1c2VkLCB0aGVyZSB3YXMgYVxuICAvLyB3b3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vdmVyY2VsL25leHQuanMvaXNzdWVzLzg1OTIgd2hpY2ggaW52b2x2ZWQgYW4gZXh0cmEgY2FsbCB0byB0aGlzIGZ1bmN0aW9uLCBpbiB0aGVcbiAgLy8gY3VzdG9tIGVycm9yIGNvbXBvbmVudCdzIGByZW5kZXJgIG1ldGhvZCwganVzdCBpbiBjYXNlIGl0IGhhZG4ndCBiZWVuIGNhbGxlZCBieSBgZ2V0SW5pdGlhbFByb3BzYC4gTm93IHRoYXQgdGhhdFxuICAvLyBpc3N1ZSBoYXMgYmVlbiBmaXhlZCwgdGhlIHNlY29uZCBjYWxsIGlzIHVubmVjZXNzYXJ5LCBidXQgc2luY2UgaXQgbGl2ZXMgaW4gdXNlciBjb2RlIHJhdGhlciB0aGFuIG91ciBjb2RlLCB1c2Vyc1xuICAvLyBoYXZlIHRvIGJlIHRoZSBvbmVzIHRvIGdldCByaWQgb2YgaXQsIGFuZCBndWFyYW5ldGVlZGx5LCBub3QgYWxsIG9mIHRoZW0gd2lsbC4gU28sIHJhdGhlciB0aGFuIGNhcHR1cmUgdGhlIGVycm9yXG4gIC8vIHR3aWNlLCB3ZSBqdXN0IGJhaWwgaWYgd2Ugc2Vuc2Ugd2UncmUgaW4gdGhhdCBub3ctZXh0cmFuZW91cyBzZWNvbmQgY2FsbC4gKFdlIGNhbiB0ZWxsIHdoaWNoIGZ1bmN0aW9uIHdlJ3JlIGluXG4gIC8vIGJlY2F1c2UgTmV4dGpzIHBhc3NlcyBgcGF0aG5hbWVgIHRvIGBnZXRJbml0aWFsUHJvcHNgIGJ1dCBub3QgdG8gYHJlbmRlcmAuKVxuICBpZiAoIWNvbnRleHRPclByb3BzLnBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgd2l0aFNjb3BlKHNjb3BlID0+IHtcbiAgICBpZiAocmVxKSB7XG4gICAgICBzY29wZS5zZXRTREtQcm9jZXNzaW5nTWV0YWRhdGEoeyByZXF1ZXN0OiByZXEgfSk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhpcmQtcGFydHkgbGlicmFyaWVzIChvciB1c2VycyB0aGVtc2VsdmVzKSB0aHJvdyBzb21ldGhpbmcgZmFsc3ksIHdlIHdhbnQgdG8gY2FwdHVyZSBpdCBhcyBhIG1lc3NhZ2UgKHdoaWNoXG4gICAgLy8gaXMgd2hhdCBwYXNzaW5nIGEgc3RyaW5nIHRvIGBjYXB0dXJlRXhjZXB0aW9uYCB3aWxsIHdpbmQgdXAgZG9pbmcpXG4gICAgY2FwdHVyZUV4Y2VwdGlvbihlcnIgfHwgYF9lcnJvci5qcyBjYWxsZWQgd2l0aCBmYWxzeSBlcnJvciAoJHtlcnJ9KWAsIHtcbiAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICB0eXBlOiAnaW5zdHJ1bWVudCcsXG4gICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgZnVuY3Rpb246ICdfZXJyb3IuZ2V0SW5pdGlhbFByb3BzJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIEluIGNhc2UgdGhpcyBpcyBiZWluZyBydW4gYXMgcGFydCBvZiBhIHNlcnZlcmxlc3MgZnVuY3Rpb24gKGFzIGlzIHRoZSBjYXNlIHdpdGggdGhlIHNlcnZlciBoYWxmIG9mIG5leHRqcyBhcHBzXG4gIC8vIGRlcGxveWVkIHRvIHZlcmNlbCksIG1ha2Ugc3VyZSB0aGUgZXJyb3IgZ2V0cyBzZW50IHRvIFNlbnRyeSBiZWZvcmUgdGhlIGxhbWJkYSBleGl0cy5cbiAgYXdhaXQgZmx1c2hRdWV1ZSgpO1xufVxuXG5leHBvcnQgeyBjYXB0dXJlVW5kZXJzY29yZUVycm9yRXhjZXB0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fZXJyb3IuanMubWFwXG4iXSwibmFtZXMiOlsid2l0aFNjb3BlIiwiY2FwdHVyZUV4Y2VwdGlvbiIsImZsdXNoUXVldWUiLCJjYXB0dXJlVW5kZXJzY29yZUVycm9yRXhjZXB0aW9uIiwiY29udGV4dE9yUHJvcHMiLCJyZXEiLCJyZXMiLCJlcnIiLCJzdGF0dXNDb2RlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJwYXRobmFtZSIsInNjb3BlIiwic2V0U0RLUHJvY2Vzc2luZ01ldGFkYXRhIiwicmVxdWVzdCIsIm1lY2hhbmlzbSIsInR5cGUiLCJoYW5kbGVkIiwiZGF0YSIsImZ1bmN0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/_error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/debug-build.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/debug-build.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEBUG_BUILD: () => (/* binding */ DEBUG_BUILD)\n/* harmony export */ });\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */ const DEBUG_BUILD =  false || false;\n //# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvZXNtL2NvbW1vbi9kZWJ1Zy1idWlsZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Q0FJQyxHQUNELE1BQU1BLGNBQWUsTUFBNEIsSUFBZUMsS0FBZ0JBO0FBRXpELENBQ3ZCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9lc20vY29tbW9uL2RlYnVnLWJ1aWxkLmpzPzc5NzUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIHNlcnZlcyBhcyBhIGJ1aWxkIHRpbWUgZmxhZyB0aGF0IHdpbGwgYmUgdHJ1ZSBieSBkZWZhdWx0LCBidXQgZmFsc2UgaW4gbm9uLWRlYnVnIGJ1aWxkcyBvciBpZiB1c2VycyByZXBsYWNlIGBfX1NFTlRSWV9ERUJVR19fYCBpbiB0aGVpciBnZW5lcmF0ZWQgY29kZS5cbiAqXG4gKiBBVFRFTlRJT046IFRoaXMgY29uc3RhbnQgbXVzdCBuZXZlciBjcm9zcyBwYWNrYWdlIGJvdW5kYXJpZXMgKGkuZS4gYmUgZXhwb3J0ZWQpIHRvIGd1YXJhbnRlZSB0aGF0IGl0IGNhbiBiZSB1c2VkIGZvciB0cmVlIHNoYWtpbmcuXG4gKi9cbmNvbnN0IERFQlVHX0JVSUxEID0gKHR5cGVvZiBfX1NFTlRSWV9ERUJVR19fID09PSAndW5kZWZpbmVkJyB8fCBfX1NFTlRSWV9ERUJVR19fKTtcblxuZXhwb3J0IHsgREVCVUdfQlVJTEQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLWJ1aWxkLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkRFQlVHX0JVSUxEIiwiX19TRU5UUllfREVCVUdfXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/debug-build.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/devErrorSymbolicationEventProcessor.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/devErrorSymbolicationEventProcessor.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   devErrorSymbolicationEventProcessor: () => (/* binding */ devErrorSymbolicationEventProcessor)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/worldwide.js\");\n/* harmony import */ var stacktrace_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stacktrace-parser */ \"(ssr)/./node_modules/stacktrace-parser/dist/stack-trace-parser.esm.js\");\n\n\n\nconst globalWithInjectedValues = _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ;\nasync function resolveStackFrame(frame, error) {\n    try {\n        if (!((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n            frame,\n            \"access\",\n            (_)=>_.file,\n            \"optionalAccess\",\n            (_2)=>_2.startsWith,\n            \"call\",\n            (_3)=>_3(\"webpack-internal:\")\n        ]) || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n            frame,\n            \"access\",\n            (_4)=>_4.file,\n            \"optionalAccess\",\n            (_5)=>_5.startsWith,\n            \"call\",\n            (_6)=>_6(\"file:\")\n        ]))) {\n            return null;\n        }\n        const params = new URLSearchParams();\n        params.append(\"isServer\", String(false)); // doesn't matter since it is overwritten by isAppDirectory\n        params.append(\"isEdgeServer\", String(false)); // doesn't matter since it is overwritten by isAppDirectory\n        params.append(\"isAppDirectory\", String(true)); // will force server to do more thorough checking\n        params.append(\"errorMessage\", error.toString());\n        Object.keys(frame).forEach((key)=>{\n            params.append(key, (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._nullishCoalesce)(frame[key], ()=>\"\").toString());\n        });\n        let basePath = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._nullishCoalesce)(globalWithInjectedValues.__sentryBasePath, ()=>\"\");\n        // Prefix the basepath with a slash if it doesn't have one\n        if (basePath !== \"\" && !basePath.match(/^\\//)) {\n            basePath = `/${basePath}`;\n        }\n        const controller = new AbortController();\n        const timer = setTimeout(()=>controller.abort(), 3000);\n        const res = await fetch(`${// eslint-disable-next-line no-restricted-globals\n         true ? \"http://localhost:3000\" : 0 // TODO: handle the case where users define a different port\n        }${basePath}/__nextjs_original-stack-frame?${params.toString()}`, {\n            signal: controller.signal\n        }).finally(()=>{\n            clearTimeout(timer);\n        });\n        if (!res.ok || res.status === 204) {\n            return null;\n        }\n        const body = await res.json();\n        return {\n            originalCodeFrame: body.originalCodeFrame,\n            originalStackFrame: body.originalStackFrame\n        };\n    } catch (e) {\n        return null;\n    }\n}\nfunction parseOriginalCodeFrame(codeFrame) {\n    const preProcessedLines = codeFrame// Remove ASCII control characters that are used for syntax highlighting\n    .replace(// eslint-disable-next-line no-control-regex\n    /[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, \"\").split(\"\\n\")// Remove line that is supposed to indicate where the error happened\n    .filter((line)=>!line.match(/^\\s*\\|/))// Find the error line\n    .map((line)=>({\n            line,\n            isErrorLine: !!line.match(/^>/)\n        }))// Remove the leading part that is just for prettier output\n    .map((lineObj)=>({\n            ...lineObj,\n            line: lineObj.line.replace(/^.*\\|/, \"\")\n        }));\n    const preContextLines = [];\n    let contextLine = undefined;\n    const postContextLines = [];\n    let reachedContextLine = false;\n    for (const preProcessedLine of preProcessedLines){\n        if (preProcessedLine.isErrorLine) {\n            contextLine = preProcessedLine.line;\n            reachedContextLine = true;\n        } else if (reachedContextLine) {\n            postContextLines.push(preProcessedLine.line);\n        } else {\n            preContextLines.push(preProcessedLine.line);\n        }\n    }\n    return {\n        contextLine,\n        preContextLines,\n        postContextLines\n    };\n}\n/**\n * Event processor that will symbolicate errors by using the webpack/nextjs dev server that is used to show stack traces\n * in the dev overlay.\n */ async function devErrorSymbolicationEventProcessor(event, hint) {\n    // Due to changes across Next.js versions, there are a million things that can go wrong here so we just try-catch the  // entire event processor.Symbolicated stack traces are just a nice to have.\n    try {\n        if (hint.originalException && hint.originalException instanceof Error && hint.originalException.stack) {\n            const frames = stacktrace_parser__WEBPACK_IMPORTED_MODULE_0__.parse(hint.originalException.stack);\n            const resolvedFrames = await Promise.all(frames.map((frame)=>resolveStackFrame(frame, hint.originalException)));\n            if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n                event,\n                \"access\",\n                (_7)=>_7.exception,\n                \"optionalAccess\",\n                (_8)=>_8.values,\n                \"optionalAccess\",\n                (_9)=>_9[0],\n                \"access\",\n                (_10)=>_10.stacktrace,\n                \"optionalAccess\",\n                (_11)=>_11.frames\n            ])) {\n                event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames.map((frame, i, frames)=>{\n                    const resolvedFrame = resolvedFrames[frames.length - 1 - i];\n                    if (!resolvedFrame || !resolvedFrame.originalStackFrame || !resolvedFrame.originalCodeFrame) {\n                        return {\n                            ...frame,\n                            platform: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n                                frame,\n                                \"access\",\n                                (_12)=>_12.filename,\n                                \"optionalAccess\",\n                                (_13)=>_13.startsWith,\n                                \"call\",\n                                (_14)=>_14(\"node:internal\")\n                            ]) ? \"nodejs\" : undefined,\n                            in_app: false\n                        };\n                    }\n                    const { contextLine, preContextLines, postContextLines } = parseOriginalCodeFrame(resolvedFrame.originalCodeFrame);\n                    return {\n                        ...frame,\n                        pre_context: preContextLines,\n                        context_line: contextLine,\n                        post_context: postContextLines,\n                        function: resolvedFrame.originalStackFrame.methodName,\n                        filename: resolvedFrame.originalStackFrame.file || undefined,\n                        lineno: resolvedFrame.originalStackFrame.lineNumber || undefined,\n                        colno: resolvedFrame.originalStackFrame.column || undefined\n                    };\n                });\n            }\n        }\n    } catch (e) {\n        return event;\n    }\n    return event;\n}\n //# sourceMappingURL=devErrorSymbolicationEventProcessor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/devErrorSymbolicationEventProcessor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/getVercelEnv.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/getVercelEnv.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getVercelEnv: () => (/* binding */ getVercelEnv)\n/* harmony export */ });\n/**\n * Returns an environment setting value determined by Vercel's `VERCEL_ENV` environment variable.\n *\n * @param isClient Flag to indicate whether to use the `NEXT_PUBLIC_` prefixed version of the environment variable.\n */ function getVercelEnv(isClient) {\n    const vercelEnvVar = isClient ? process.env.NEXT_PUBLIC_VERCEL_ENV : process.env.VERCEL_ENV;\n    return vercelEnvVar ? `vercel-${vercelEnvVar}` : undefined;\n}\n //# sourceMappingURL=getVercelEnv.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvZXNtL2NvbW1vbi9nZXRWZXJjZWxFbnYuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0NBSUMsR0FDRCxTQUFTQSxhQUFhQyxRQUFRO0lBQzVCLE1BQU1DLGVBQWVELFdBQVdFLFFBQVFDLEdBQUcsQ0FBQ0Msc0JBQXNCLEdBQUdGLFFBQVFDLEdBQUcsQ0FBQ0UsVUFBVTtJQUMzRixPQUFPSixlQUFlLENBQUMsT0FBTyxFQUFFQSxhQUFhLENBQUMsR0FBR0s7QUFDbkQ7QUFFd0IsQ0FDeEIsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2VzbS9jb21tb24vZ2V0VmVyY2VsRW52LmpzPzlmOTciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXR1cm5zIGFuIGVudmlyb25tZW50IHNldHRpbmcgdmFsdWUgZGV0ZXJtaW5lZCBieSBWZXJjZWwncyBgVkVSQ0VMX0VOVmAgZW52aXJvbm1lbnQgdmFyaWFibGUuXG4gKlxuICogQHBhcmFtIGlzQ2xpZW50IEZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciB0byB1c2UgdGhlIGBORVhUX1BVQkxJQ19gIHByZWZpeGVkIHZlcnNpb24gb2YgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlLlxuICovXG5mdW5jdGlvbiBnZXRWZXJjZWxFbnYoaXNDbGllbnQpIHtcbiAgY29uc3QgdmVyY2VsRW52VmFyID0gaXNDbGllbnQgPyBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19WRVJDRUxfRU5WIDogcHJvY2Vzcy5lbnYuVkVSQ0VMX0VOVjtcbiAgcmV0dXJuIHZlcmNlbEVudlZhciA/IGB2ZXJjZWwtJHt2ZXJjZWxFbnZWYXJ9YCA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IHsgZ2V0VmVyY2VsRW52IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRWZXJjZWxFbnYuanMubWFwXG4iXSwibmFtZXMiOlsiZ2V0VmVyY2VsRW52IiwiaXNDbGllbnQiLCJ2ZXJjZWxFbnZWYXIiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfVkVSQ0VMX0VOViIsIlZFUkNFTF9FTlYiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/getVercelEnv.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/metadata.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/metadata.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildMetadata: () => (/* binding */ buildMetadata)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/version.js\");\n\nconst PACKAGE_NAME_PREFIX = \"npm:@sentry/\";\n/**\n * A builder for the SDK metadata in the options for the SDK initialization.\n * @param options sdk options object that gets mutated\n * @param names list of package names\n */ function buildMetadata(options, names) {\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n        name: \"sentry.javascript.nextjs\",\n        packages: names.map((name)=>({\n                name: `${PACKAGE_NAME_PREFIX}${name}`,\n                version: _sentry_core__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION\n            })),\n        version: _sentry_core__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION\n    };\n}\n //# sourceMappingURL=metadata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvZXNtL2NvbW1vbi9tZXRhZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEyQztBQUUzQyxNQUFNQyxzQkFBc0I7QUFFNUI7Ozs7Q0FJQyxHQUNELFNBQVNDLGNBQWNDLE9BQU8sRUFBRUMsS0FBSztJQUNuQ0QsUUFBUUUsU0FBUyxHQUFHRixRQUFRRSxTQUFTLElBQUksQ0FBQztJQUMxQ0YsUUFBUUUsU0FBUyxDQUFDQyxHQUFHLEdBQ25CSCxRQUFRRSxTQUFTLENBQUNDLEdBQUcsSUFDcEI7UUFDQ0MsTUFBTTtRQUNOQyxVQUFVSixNQUFNSyxHQUFHLENBQUNGLENBQUFBLE9BQVM7Z0JBQzNCQSxNQUFNLENBQUMsRUFBRU4sb0JBQW9CLEVBQUVNLEtBQUssQ0FBQztnQkFDckNHLFNBQVNWLHFEQUFXQTtZQUN0QjtRQUNBVSxTQUFTVixxREFBV0E7SUFDdEI7QUFDSjtBQUV5QixDQUN6QixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvZXNtL2NvbW1vbi9tZXRhZGF0YS5qcz84Y2U2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNES19WRVJTSU9OIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcblxuY29uc3QgUEFDS0FHRV9OQU1FX1BSRUZJWCA9ICducG06QHNlbnRyeS8nO1xuXG4vKipcbiAqIEEgYnVpbGRlciBmb3IgdGhlIFNESyBtZXRhZGF0YSBpbiB0aGUgb3B0aW9ucyBmb3IgdGhlIFNESyBpbml0aWFsaXphdGlvbi5cbiAqIEBwYXJhbSBvcHRpb25zIHNkayBvcHRpb25zIG9iamVjdCB0aGF0IGdldHMgbXV0YXRlZFxuICogQHBhcmFtIG5hbWVzIGxpc3Qgb2YgcGFja2FnZSBuYW1lc1xuICovXG5mdW5jdGlvbiBidWlsZE1ldGFkYXRhKG9wdGlvbnMsIG5hbWVzKSB7XG4gIG9wdGlvbnMuX21ldGFkYXRhID0gb3B0aW9ucy5fbWV0YWRhdGEgfHwge307XG4gIG9wdGlvbnMuX21ldGFkYXRhLnNkayA9XG4gICAgb3B0aW9ucy5fbWV0YWRhdGEuc2RrIHx8XG4gICAgKHtcbiAgICAgIG5hbWU6ICdzZW50cnkuamF2YXNjcmlwdC5uZXh0anMnLFxuICAgICAgcGFja2FnZXM6IG5hbWVzLm1hcChuYW1lID0+ICh7XG4gICAgICAgIG5hbWU6IGAke1BBQ0tBR0VfTkFNRV9QUkVGSVh9JHtuYW1lfWAsXG4gICAgICAgIHZlcnNpb246IFNES19WRVJTSU9OLFxuICAgICAgfSkpLFxuICAgICAgdmVyc2lvbjogU0RLX1ZFUlNJT04sXG4gICAgfSApO1xufVxuXG5leHBvcnQgeyBidWlsZE1ldGFkYXRhIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXRhZGF0YS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJTREtfVkVSU0lPTiIsIlBBQ0tBR0VfTkFNRV9QUkVGSVgiLCJidWlsZE1ldGFkYXRhIiwib3B0aW9ucyIsIm5hbWVzIiwiX21ldGFkYXRhIiwic2RrIiwibmFtZSIsInBhY2thZ2VzIiwibWFwIiwidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/metadata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/nextNavigationErrorUtils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/nextNavigationErrorUtils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNotFoundNavigationError: () => (/* binding */ isNotFoundNavigationError),\n/* harmony export */   isRedirectNavigationError: () => (/* binding */ isRedirectNavigationError)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/is.js\");\n\n/**\n * Determines whether input is a Next.js not-found error.\n * https://beta.nextjs.org/docs/api-reference/notfound#notfound\n */ function isNotFoundNavigationError(subject) {\n    return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.isError)(subject) && subject.digest === \"NEXT_NOT_FOUND\";\n}\n/**\n * Determines whether input is a Next.js redirect error.\n * https://beta.nextjs.org/docs/api-reference/redirect#redirect\n */ function isRedirectNavigationError(subject) {\n    return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.isError)(subject) && typeof subject.digest === \"string\" && subject.digest.startsWith(\"NEXT_REDIRECT;\") // a redirect digest looks like \"NEXT_REDIRECT;[redirect path]\"\n    ;\n}\n //# sourceMappingURL=nextNavigationErrorUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvZXNtL2NvbW1vbi9uZXh0TmF2aWdhdGlvbkVycm9yVXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXdDO0FBRXhDOzs7Q0FHQyxHQUNELFNBQVNDLDBCQUEwQkMsT0FBTztJQUN4QyxPQUFPRixzREFBT0EsQ0FBQ0UsWUFBWSxRQUFXQyxNQUFNLEtBQUs7QUFDbkQ7QUFFQTs7O0NBR0MsR0FDRCxTQUFTQywwQkFBMEJGLE9BQU87SUFDeEMsT0FDRUYsc0RBQU9BLENBQUNFLFlBQ1IsT0FBTyxRQUFXQyxNQUFNLEtBQUssWUFDN0IsUUFBV0EsTUFBTSxDQUFDRSxVQUFVLENBQUMsa0JBQWtCLCtEQUErRDs7QUFFbEg7QUFFZ0UsQ0FDaEUsb0RBQW9EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2VzbS9jb21tb24vbmV4dE5hdmlnYXRpb25FcnJvclV0aWxzLmpzP2RlODkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNFcnJvciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBpbnB1dCBpcyBhIE5leHQuanMgbm90LWZvdW5kIGVycm9yLlxuICogaHR0cHM6Ly9iZXRhLm5leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL25vdGZvdW5kI25vdGZvdW5kXG4gKi9cbmZ1bmN0aW9uIGlzTm90Rm91bmROYXZpZ2F0aW9uRXJyb3Ioc3ViamVjdCkge1xuICByZXR1cm4gaXNFcnJvcihzdWJqZWN0KSAmJiAoc3ViamVjdCApLmRpZ2VzdCA9PT0gJ05FWFRfTk9UX0ZPVU5EJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgaW5wdXQgaXMgYSBOZXh0LmpzIHJlZGlyZWN0IGVycm9yLlxuICogaHR0cHM6Ly9iZXRhLm5leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL3JlZGlyZWN0I3JlZGlyZWN0XG4gKi9cbmZ1bmN0aW9uIGlzUmVkaXJlY3ROYXZpZ2F0aW9uRXJyb3Ioc3ViamVjdCkge1xuICByZXR1cm4gKFxuICAgIGlzRXJyb3Ioc3ViamVjdCkgJiZcbiAgICB0eXBlb2YgKHN1YmplY3QgKS5kaWdlc3QgPT09ICdzdHJpbmcnICYmXG4gICAgKHN1YmplY3QgKS5kaWdlc3Quc3RhcnRzV2l0aCgnTkVYVF9SRURJUkVDVDsnKSAvLyBhIHJlZGlyZWN0IGRpZ2VzdCBsb29rcyBsaWtlIFwiTkVYVF9SRURJUkVDVDtbcmVkaXJlY3QgcGF0aF1cIlxuICApO1xufVxuXG5leHBvcnQgeyBpc05vdEZvdW5kTmF2aWdhdGlvbkVycm9yLCBpc1JlZGlyZWN0TmF2aWdhdGlvbkVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZXh0TmF2aWdhdGlvbkVycm9yVXRpbHMuanMubWFwXG4iXSwibmFtZXMiOlsiaXNFcnJvciIsImlzTm90Rm91bmROYXZpZ2F0aW9uRXJyb3IiLCJzdWJqZWN0IiwiZGlnZXN0IiwiaXNSZWRpcmVjdE5hdmlnYXRpb25FcnJvciIsInN0YXJ0c1dpdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/nextNavigationErrorUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/edgeWrapperUtils.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/utils/edgeWrapperUtils.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withEdgeWrapping: () => (/* binding */ withEdgeWrapping)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/hubextensions.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/exports.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/tracing.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/requestdata.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/debug-build.js\");\n/* harmony import */ var _responseEnd_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./responseEnd.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/responseEnd.js\");\n\n\n\n\n\n/**\n * Wraps a function on the edge runtime with error and performance monitoring.\n */ function withEdgeWrapping(handler, options) {\n    return async function(...args) {\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.addTracingExtensions)();\n        const req = args[0];\n        const currentScope = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.getCurrentHub)().getScope();\n        const prevSpan = currentScope.getSpan();\n        let span;\n        if (prevSpan) {\n            span = prevSpan.startChild({\n                description: options.spanDescription,\n                op: options.spanOp,\n                origin: \"auto.function.nextjs\"\n            });\n        } else if (req instanceof Request) {\n            const sentryTrace = req.headers.get(\"sentry-trace\") || \"\";\n            const baggage = req.headers.get(\"baggage\");\n            const { traceparentData, dynamicSamplingContext, propagationContext } = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.tracingContextFromHeaders)(sentryTrace, baggage);\n            currentScope.setPropagationContext(propagationContext);\n            if (traceparentData) {\n                _debug_build_js__WEBPACK_IMPORTED_MODULE_3__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log(`[Tracing] Continuing trace ${traceparentData.traceId}.`);\n            }\n            span = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.startTransaction)({\n                name: options.spanDescription,\n                op: options.spanOp,\n                origin: \"auto.ui.nextjs.withEdgeWrapping\",\n                ...traceparentData,\n                metadata: {\n                    request: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__.winterCGRequestToRequestData)(req),\n                    dynamicSamplingContext: traceparentData && !dynamicSamplingContext ? {} : dynamicSamplingContext,\n                    source: \"route\"\n                }\n            });\n        }\n        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_7__._optionalChain)([\n            currentScope,\n            \"optionalAccess\",\n            (_)=>_.setSpan,\n            \"call\",\n            (_2)=>_2(span)\n        ]);\n        try {\n            const handlerResult = await handler.apply(this, args);\n            if (handlerResult instanceof Response) {\n                (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_7__._optionalChain)([\n                    span,\n                    \"optionalAccess\",\n                    (_3)=>_3.setHttpStatus,\n                    \"call\",\n                    (_4)=>_4(handlerResult.status)\n                ]);\n            } else {\n                (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_7__._optionalChain)([\n                    span,\n                    \"optionalAccess\",\n                    (_5)=>_5.setStatus,\n                    \"call\",\n                    (_6)=>_6(\"ok\")\n                ]);\n            }\n            return handlerResult;\n        } catch (e) {\n            // In case we have a primitive, wrap it in the equivalent wrapper class (string -> String, etc.) so that we can\n            // store a seen flag on it.\n            const objectifiedErr = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_8__.objectify)(e);\n            (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_7__._optionalChain)([\n                span,\n                \"optionalAccess\",\n                (_7)=>_7.setStatus,\n                \"call\",\n                (_8)=>_8(\"internal_error\")\n            ]);\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.captureException)(objectifiedErr, (scope)=>{\n                scope.setSpan(span);\n                scope.addEventProcessor((event)=>{\n                    (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_9__.addExceptionMechanism)(event, {\n                        type: \"instrument\",\n                        handled: false,\n                        data: {\n                            function: options.mechanismFunctionName\n                        }\n                    });\n                    return event;\n                });\n                return scope;\n            });\n            throw objectifiedErr;\n        } finally{\n            (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_7__._optionalChain)([\n                span,\n                \"optionalAccess\",\n                (_9)=>_9.finish,\n                \"call\",\n                (_10)=>_10()\n            ]);\n            (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_7__._optionalChain)([\n                currentScope,\n                \"optionalAccess\",\n                (_11)=>_11.setSpan,\n                \"call\",\n                (_12)=>_12(prevSpan)\n            ]);\n            await (0,_responseEnd_js__WEBPACK_IMPORTED_MODULE_10__.flushQueue)();\n        }\n    };\n}\n //# sourceMappingURL=edgeWrapperUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/edgeWrapperUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/isBuild.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/utils/isBuild.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isBuild: () => (/* binding */ isBuild)\n/* harmony export */ });\n/* harmony import */ var next_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/constants */ \"(ssr)/./node_modules/next/constants.js\");\n/* harmony import */ var next_constants__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_constants__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\n * Decide if the currently running process is part of the build phase or happening at runtime.\n */ function isBuild() {\n    return process.env.NEXT_PHASE === next_constants__WEBPACK_IMPORTED_MODULE_0__.PHASE_PRODUCTION_BUILD;\n}\n //# sourceMappingURL=isBuild.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvZXNtL2NvbW1vbi91dGlscy9pc0J1aWxkLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF3RDtBQUV4RDs7Q0FFQyxHQUNELFNBQVNDO0lBQ1AsT0FBT0MsUUFBUUMsR0FBRyxDQUFDQyxVQUFVLEtBQUtKLGtFQUFzQkE7QUFDMUQ7QUFFbUIsQ0FDbkIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2VzbS9jb21tb24vdXRpbHMvaXNCdWlsZC5qcz85OGNmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBIQVNFX1BST0RVQ1RJT05fQlVJTEQgfSBmcm9tICduZXh0L2NvbnN0YW50cyc7XG5cbi8qKlxuICogRGVjaWRlIGlmIHRoZSBjdXJyZW50bHkgcnVubmluZyBwcm9jZXNzIGlzIHBhcnQgb2YgdGhlIGJ1aWxkIHBoYXNlIG9yIGhhcHBlbmluZyBhdCBydW50aW1lLlxuICovXG5mdW5jdGlvbiBpc0J1aWxkKCkge1xuICByZXR1cm4gcHJvY2Vzcy5lbnYuTkVYVF9QSEFTRSA9PT0gUEhBU0VfUFJPRFVDVElPTl9CVUlMRDtcbn1cblxuZXhwb3J0IHsgaXNCdWlsZCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNCdWlsZC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJQSEFTRV9QUk9EVUNUSU9OX0JVSUxEIiwiaXNCdWlsZCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BIQVNFIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/isBuild.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/platformSupportsStreaming.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/utils/platformSupportsStreaming.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   platformSupportsStreaming: () => (/* binding */ platformSupportsStreaming)\n/* harmony export */ });\nconst platformSupportsStreaming = ()=>!process.env.LAMBDA_TASK_ROOT && !process.env.VERCEL;\n //# sourceMappingURL=platformSupportsStreaming.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvZXNtL2NvbW1vbi91dGlscy9wbGF0Zm9ybVN1cHBvcnRzU3RyZWFtaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSw0QkFBNEIsSUFBTSxDQUFDQyxRQUFRQyxHQUFHLENBQUNDLGdCQUFnQixJQUFJLENBQUNGLFFBQVFDLEdBQUcsQ0FBQ0UsTUFBTTtBQUV2RCxDQUNyQyxxREFBcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvZXNtL2NvbW1vbi91dGlscy9wbGF0Zm9ybVN1cHBvcnRzU3RyZWFtaW5nLmpzPzFjNDQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcGxhdGZvcm1TdXBwb3J0c1N0cmVhbWluZyA9ICgpID0+ICFwcm9jZXNzLmVudi5MQU1CREFfVEFTS19ST09UICYmICFwcm9jZXNzLmVudi5WRVJDRUw7XG5cbmV4cG9ydCB7IHBsYXRmb3JtU3VwcG9ydHNTdHJlYW1pbmcgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBsYXRmb3JtU3VwcG9ydHNTdHJlYW1pbmcuanMubWFwXG4iXSwibmFtZXMiOlsicGxhdGZvcm1TdXBwb3J0c1N0cmVhbWluZyIsInByb2Nlc3MiLCJlbnYiLCJMQU1CREFfVEFTS19ST09UIiwiVkVSQ0VMIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/platformSupportsStreaming.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/responseEnd.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/utils/responseEnd.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   autoEndTransactionOnResponseEnd: () => (/* binding */ autoEndTransactionOnResponseEnd),\n/* harmony export */   finishTransaction: () => (/* binding */ finishTransaction),\n/* harmony export */   flushQueue: () => (/* binding */ flushQueue)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/exports.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/debug-build.js\");\n\n\n\n/**\n * Wrap `res.end()` so that it closes the transaction and flushes events before letting the request finish.\n *\n * Note: This wraps a sync method with an async method. While in general that's not a great idea in terms of keeping\n * things in the right order, in this case it's safe, because the native `.end()` actually *is* (effectively) async, and\n * its run actually *is* (literally) awaited, just manually so (which reflects the fact that the core of the\n * request/response code in Node by far predates the introduction of `async`/`await`). When `.end()` is done, it emits\n * the `prefinish` event, and only once that fires does request processing continue. See\n * https://github.com/nodejs/node/commit/7c9b607048f13741173d397795bac37707405ba7.\n *\n * Also note: `res.end()` isn't called until *after* all response data and headers have been sent, so blocking inside of\n * `end` doesn't delay data getting to the end user. See\n * https://nodejs.org/api/http.html#responseenddata-encoding-callback.\n *\n * @param transaction The transaction tracing request handling\n * @param res: The request's corresponding response\n */ function autoEndTransactionOnResponseEnd(transaction, res) {\n    const wrapEndMethod = (origEnd)=>{\n        return function sentryWrappedEnd(...args) {\n            void finishTransaction(transaction, this);\n            return origEnd.call(this, ...args);\n        };\n    };\n    // Prevent double-wrapping\n    // res.end may be undefined during build when using `next export` to statically export a Next.js app\n    if (res.end && !res.end.__sentry_original__) {\n        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.fill)(res, \"end\", wrapEndMethod);\n    }\n}\n/** Finish the given response's transaction and set HTTP status data */ async function finishTransaction(transaction, res) {\n    if (transaction) {\n        transaction.setHttpStatus(res.statusCode);\n        transaction.finish();\n    }\n}\n/** Flush the event queue to ensure that events get sent to Sentry before the response is finished and the lambda ends */ async function flushQueue() {\n    try {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.log(\"Flushing events...\");\n        await (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.flush)(2000);\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.log(\"Done flushing events\");\n    } catch (e) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.log(\"Error while flushing events:\\n\", e);\n    }\n}\n //# sourceMappingURL=responseEnd.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvZXNtL2NvbW1vbi91dGlscy9yZXNwb25zZUVuZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXFDO0FBQ1E7QUFDRztBQUVoRDs7Ozs7Ozs7Ozs7Ozs7OztDQWdCQyxHQUNELFNBQVNJLGdDQUFnQ0MsV0FBVyxFQUFFQyxHQUFHO0lBQ3ZELE1BQU1DLGdCQUFnQixDQUFDQztRQUNyQixPQUFPLFNBQVNDLGlCQUFrQixHQUFHQyxJQUFJO1lBQ3ZDLEtBQUtDLGtCQUFrQk4sYUFBYSxJQUFJO1lBQ3hDLE9BQU9HLFFBQVFJLElBQUksQ0FBQyxJQUFJLEtBQUtGO1FBQy9CO0lBQ0Y7SUFFQSwwQkFBMEI7SUFDMUIsb0dBQW9HO0lBQ3BHLElBQUlKLElBQUlPLEdBQUcsSUFBSSxDQUFDLElBQUtBLEdBQUcsQ0FBR0MsbUJBQW1CLEVBQUU7UUFDOUNiLG1EQUFJQSxDQUFDSyxLQUFLLE9BQU9DO0lBQ25CO0FBQ0Y7QUFFQSxxRUFBcUUsR0FDckUsZUFBZUksa0JBQWtCTixXQUFXLEVBQUVDLEdBQUc7SUFDL0MsSUFBSUQsYUFBYTtRQUNmQSxZQUFZVSxhQUFhLENBQUNULElBQUlVLFVBQVU7UUFDeENYLFlBQVlZLE1BQU07SUFDcEI7QUFDRjtBQUVBLHVIQUF1SCxHQUN2SCxlQUFlQztJQUNiLElBQUk7UUFDRmYsd0RBQVdBLElBQUlELGlEQUFNQSxDQUFDaUIsR0FBRyxDQUFDO1FBQzFCLE1BQU1uQixtREFBS0EsQ0FBQztRQUNaRyx3REFBV0EsSUFBSUQsaURBQU1BLENBQUNpQixHQUFHLENBQUM7SUFDNUIsRUFBRSxPQUFPQyxHQUFHO1FBQ1ZqQix3REFBV0EsSUFBSUQsaURBQU1BLENBQUNpQixHQUFHLENBQUMsa0NBQWtDQztJQUM5RDtBQUNGO0FBRTBFLENBQzFFLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9lc20vY29tbW9uL3V0aWxzL3Jlc3BvbnNlRW5kLmpzP2M5MmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZmx1c2ggfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgZmlsbCwgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBERUJVR19CVUlMRCB9IGZyb20gJy4uL2RlYnVnLWJ1aWxkLmpzJztcblxuLyoqXG4gKiBXcmFwIGByZXMuZW5kKClgIHNvIHRoYXQgaXQgY2xvc2VzIHRoZSB0cmFuc2FjdGlvbiBhbmQgZmx1c2hlcyBldmVudHMgYmVmb3JlIGxldHRpbmcgdGhlIHJlcXVlc3QgZmluaXNoLlxuICpcbiAqIE5vdGU6IFRoaXMgd3JhcHMgYSBzeW5jIG1ldGhvZCB3aXRoIGFuIGFzeW5jIG1ldGhvZC4gV2hpbGUgaW4gZ2VuZXJhbCB0aGF0J3Mgbm90IGEgZ3JlYXQgaWRlYSBpbiB0ZXJtcyBvZiBrZWVwaW5nXG4gKiB0aGluZ3MgaW4gdGhlIHJpZ2h0IG9yZGVyLCBpbiB0aGlzIGNhc2UgaXQncyBzYWZlLCBiZWNhdXNlIHRoZSBuYXRpdmUgYC5lbmQoKWAgYWN0dWFsbHkgKmlzKiAoZWZmZWN0aXZlbHkpIGFzeW5jLCBhbmRcbiAqIGl0cyBydW4gYWN0dWFsbHkgKmlzKiAobGl0ZXJhbGx5KSBhd2FpdGVkLCBqdXN0IG1hbnVhbGx5IHNvICh3aGljaCByZWZsZWN0cyB0aGUgZmFjdCB0aGF0IHRoZSBjb3JlIG9mIHRoZVxuICogcmVxdWVzdC9yZXNwb25zZSBjb2RlIGluIE5vZGUgYnkgZmFyIHByZWRhdGVzIHRoZSBpbnRyb2R1Y3Rpb24gb2YgYGFzeW5jYC9gYXdhaXRgKS4gV2hlbiBgLmVuZCgpYCBpcyBkb25lLCBpdCBlbWl0c1xuICogdGhlIGBwcmVmaW5pc2hgIGV2ZW50LCBhbmQgb25seSBvbmNlIHRoYXQgZmlyZXMgZG9lcyByZXF1ZXN0IHByb2Nlc3NpbmcgY29udGludWUuIFNlZVxuICogaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2NvbW1pdC83YzliNjA3MDQ4ZjEzNzQxMTczZDM5Nzc5NWJhYzM3NzA3NDA1YmE3LlxuICpcbiAqIEFsc28gbm90ZTogYHJlcy5lbmQoKWAgaXNuJ3QgY2FsbGVkIHVudGlsICphZnRlciogYWxsIHJlc3BvbnNlIGRhdGEgYW5kIGhlYWRlcnMgaGF2ZSBiZWVuIHNlbnQsIHNvIGJsb2NraW5nIGluc2lkZSBvZlxuICogYGVuZGAgZG9lc24ndCBkZWxheSBkYXRhIGdldHRpbmcgdG8gdGhlIGVuZCB1c2VyLiBTZWVcbiAqIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI3Jlc3BvbnNlZW5kZGF0YS1lbmNvZGluZy1jYWxsYmFjay5cbiAqXG4gKiBAcGFyYW0gdHJhbnNhY3Rpb24gVGhlIHRyYW5zYWN0aW9uIHRyYWNpbmcgcmVxdWVzdCBoYW5kbGluZ1xuICogQHBhcmFtIHJlczogVGhlIHJlcXVlc3QncyBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGF1dG9FbmRUcmFuc2FjdGlvbk9uUmVzcG9uc2VFbmQodHJhbnNhY3Rpb24sIHJlcykge1xuICBjb25zdCB3cmFwRW5kTWV0aG9kID0gKG9yaWdFbmQpID0+IHtcbiAgICByZXR1cm4gZnVuY3Rpb24gc2VudHJ5V3JhcHBlZEVuZCggLi4uYXJncykge1xuICAgICAgdm9pZCBmaW5pc2hUcmFuc2FjdGlvbih0cmFuc2FjdGlvbiwgdGhpcyk7XG4gICAgICByZXR1cm4gb3JpZ0VuZC5jYWxsKHRoaXMsIC4uLmFyZ3MpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUHJldmVudCBkb3VibGUtd3JhcHBpbmdcbiAgLy8gcmVzLmVuZCBtYXkgYmUgdW5kZWZpbmVkIGR1cmluZyBidWlsZCB3aGVuIHVzaW5nIGBuZXh0IGV4cG9ydGAgdG8gc3RhdGljYWxseSBleHBvcnQgYSBOZXh0LmpzIGFwcFxuICBpZiAocmVzLmVuZCAmJiAhKHJlcy5lbmQgKS5fX3NlbnRyeV9vcmlnaW5hbF9fKSB7XG4gICAgZmlsbChyZXMsICdlbmQnLCB3cmFwRW5kTWV0aG9kKTtcbiAgfVxufVxuXG4vKiogRmluaXNoIHRoZSBnaXZlbiByZXNwb25zZSdzIHRyYW5zYWN0aW9uIGFuZCBzZXQgSFRUUCBzdGF0dXMgZGF0YSAqL1xuYXN5bmMgZnVuY3Rpb24gZmluaXNoVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24sIHJlcykge1xuICBpZiAodHJhbnNhY3Rpb24pIHtcbiAgICB0cmFuc2FjdGlvbi5zZXRIdHRwU3RhdHVzKHJlcy5zdGF0dXNDb2RlKTtcbiAgICB0cmFuc2FjdGlvbi5maW5pc2goKTtcbiAgfVxufVxuXG4vKiogRmx1c2ggdGhlIGV2ZW50IHF1ZXVlIHRvIGVuc3VyZSB0aGF0IGV2ZW50cyBnZXQgc2VudCB0byBTZW50cnkgYmVmb3JlIHRoZSByZXNwb25zZSBpcyBmaW5pc2hlZCBhbmQgdGhlIGxhbWJkYSBlbmRzICovXG5hc3luYyBmdW5jdGlvbiBmbHVzaFF1ZXVlKCkge1xuICB0cnkge1xuICAgIERFQlVHX0JVSUxEICYmIGxvZ2dlci5sb2coJ0ZsdXNoaW5nIGV2ZW50cy4uLicpO1xuICAgIGF3YWl0IGZsdXNoKDIwMDApO1xuICAgIERFQlVHX0JVSUxEICYmIGxvZ2dlci5sb2coJ0RvbmUgZmx1c2hpbmcgZXZlbnRzJyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBERUJVR19CVUlMRCAmJiBsb2dnZXIubG9nKCdFcnJvciB3aGlsZSBmbHVzaGluZyBldmVudHM6XFxuJywgZSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgYXV0b0VuZFRyYW5zYWN0aW9uT25SZXNwb25zZUVuZCwgZmluaXNoVHJhbnNhY3Rpb24sIGZsdXNoUXVldWUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc3BvbnNlRW5kLmpzLm1hcFxuIl0sIm5hbWVzIjpbImZsdXNoIiwiZmlsbCIsImxvZ2dlciIsIkRFQlVHX0JVSUxEIiwiYXV0b0VuZFRyYW5zYWN0aW9uT25SZXNwb25zZUVuZCIsInRyYW5zYWN0aW9uIiwicmVzIiwid3JhcEVuZE1ldGhvZCIsIm9yaWdFbmQiLCJzZW50cnlXcmFwcGVkRW5kIiwiYXJncyIsImZpbmlzaFRyYW5zYWN0aW9uIiwiY2FsbCIsImVuZCIsIl9fc2VudHJ5X29yaWdpbmFsX18iLCJzZXRIdHRwU3RhdHVzIiwic3RhdHVzQ29kZSIsImZpbmlzaCIsImZsdXNoUXVldWUiLCJsb2ciLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/responseEnd.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/wrapperUtils.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/utils/wrapperUtils.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   callDataFetcherTraced: () => (/* binding */ callDataFetcherTraced),\n/* harmony export */   getTransactionFromRequest: () => (/* binding */ getTransactionFromRequest),\n/* harmony export */   withErrorInstrumentation: () => (/* binding */ withErrorInstrumentation),\n/* harmony export */   withTracedServerSideDataFetcher: () => (/* binding */ withTracedServerSideDataFetcher)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/exports.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/utils.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/tracing.js\");\n/* harmony import */ var _platformSupportsStreaming_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./platformSupportsStreaming.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/platformSupportsStreaming.js\");\n/* harmony import */ var _responseEnd_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./responseEnd.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/responseEnd.js\");\n\n\n\n\n\n/**\n * Grabs a transaction off a Next.js datafetcher request object, if it was previously put there via\n * `setTransactionOnRequest`.\n *\n * @param req The Next.js datafetcher request object\n * @returns the Transaction on the request object if there is one, or `undefined` if the request object didn't have one.\n */ function getTransactionFromRequest(req) {\n    return req._sentryTransaction;\n}\nfunction setTransactionOnRequest(transaction, req) {\n    req._sentryTransaction = transaction;\n}\n/**\n * Wraps a function that potentially throws. If it does, the error is passed to `captureException` and rethrown.\n *\n * Note: This function turns the wrapped function into an asynchronous one.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withErrorInstrumentation(origFunction) {\n    return async function(...origFunctionArguments) {\n        try {\n            return await origFunction.apply(this, origFunctionArguments);\n        } catch (e) {\n            // TODO: Extract error logic from `withSentry` in here or create a new wrapper with said logic or something like that.\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.captureException)(e, {\n                mechanism: {\n                    handled: false\n                }\n            });\n            throw e;\n        }\n    };\n}\n/**\n * Calls a server-side data fetching function (that takes a `req` and `res` object in its context) with tracing\n * instrumentation. A transaction will be created for the incoming request (if it doesn't already exist) in addition to\n * a span for the wrapped data fetching function.\n *\n * All of the above happens in an isolated domain, meaning all thrown errors will be associated with the correct span.\n *\n * @param origDataFetcher The data fetching method to call.\n * @param origFunctionArguments The arguments to call the data fetching method with.\n * @param req The data fetching function's request object.\n * @param res The data fetching function's response object.\n * @param options Options providing details for the created transaction and span.\n * @returns what the data fetching method call returned.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withTracedServerSideDataFetcher(origDataFetcher, req, res, options) {\n    return async function(...args) {\n        return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.runWithAsyncContext)(async ()=>{\n            const hub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.getCurrentHub)();\n            const scope = hub.getScope();\n            const previousSpan = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._nullishCoalesce)(getTransactionFromRequest(req), ()=>scope.getSpan());\n            let dataFetcherSpan;\n            const sentryTrace = req.headers && (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.isString)(req.headers[\"sentry-trace\"]) ? req.headers[\"sentry-trace\"] : undefined;\n            const baggage = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__._optionalChain)([\n                req,\n                \"access\",\n                (_)=>_.headers,\n                \"optionalAccess\",\n                (_2)=>_2.baggage\n            ]);\n            const { traceparentData, dynamicSamplingContext, propagationContext } = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.tracingContextFromHeaders)(sentryTrace, baggage);\n            scope.setPropagationContext(propagationContext);\n            if ((0,_platformSupportsStreaming_js__WEBPACK_IMPORTED_MODULE_6__.platformSupportsStreaming)()) {\n                let spanToContinue;\n                if (previousSpan === undefined) {\n                    const newTransaction = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.startTransaction)({\n                        op: \"http.server\",\n                        name: options.requestedRouteName,\n                        origin: \"auto.function.nextjs\",\n                        ...traceparentData,\n                        status: \"ok\",\n                        metadata: {\n                            request: req,\n                            source: \"route\",\n                            dynamicSamplingContext: traceparentData && !dynamicSamplingContext ? {} : dynamicSamplingContext\n                        }\n                    }, {\n                        request: req\n                    });\n                    if ((0,_platformSupportsStreaming_js__WEBPACK_IMPORTED_MODULE_6__.platformSupportsStreaming)()) {\n                        // On platforms that don't support streaming, doing things after res.end() is unreliable.\n                        (0,_responseEnd_js__WEBPACK_IMPORTED_MODULE_7__.autoEndTransactionOnResponseEnd)(newTransaction, res);\n                    }\n                    // Link the transaction and the request together, so that when we would normally only have access to one, it's\n                    // still possible to grab the other.\n                    setTransactionOnRequest(newTransaction, req);\n                    spanToContinue = newTransaction;\n                } else {\n                    spanToContinue = previousSpan;\n                }\n                dataFetcherSpan = spanToContinue.startChild({\n                    op: \"function.nextjs\",\n                    description: `${options.dataFetchingMethodName} (${options.dataFetcherRouteName})`,\n                    origin: \"auto.function.nextjs\",\n                    status: \"ok\"\n                });\n            } else {\n                dataFetcherSpan = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.startTransaction)({\n                    op: \"function.nextjs\",\n                    name: `${options.dataFetchingMethodName} (${options.dataFetcherRouteName})`,\n                    origin: \"auto.function.nextjs\",\n                    ...traceparentData,\n                    status: \"ok\",\n                    metadata: {\n                        request: req,\n                        source: \"route\",\n                        dynamicSamplingContext: traceparentData && !dynamicSamplingContext ? {} : dynamicSamplingContext\n                    }\n                });\n            }\n            scope.setSpan(dataFetcherSpan);\n            scope.setSDKProcessingMetadata({\n                request: req\n            });\n            try {\n                return await origDataFetcher.apply(this, args);\n            } catch (e) {\n                // Since we finish the span before the error can bubble up and trigger the handlers in `registerErrorInstrumentation`\n                // that set the transaction status, we need to manually set the status of the span & transaction\n                dataFetcherSpan.setStatus(\"internal_error\");\n                (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__._optionalChain)([\n                    previousSpan,\n                    \"optionalAccess\",\n                    (_3)=>_3.setStatus,\n                    \"call\",\n                    (_4)=>_4(\"internal_error\")\n                ]);\n                throw e;\n            } finally{\n                dataFetcherSpan.finish();\n                scope.setSpan(previousSpan);\n                if (!(0,_platformSupportsStreaming_js__WEBPACK_IMPORTED_MODULE_6__.platformSupportsStreaming)()) {\n                    await (0,_responseEnd_js__WEBPACK_IMPORTED_MODULE_7__.flushQueue)();\n                }\n            }\n        });\n    };\n}\n/**\n * Call a data fetcher and trace it. Only traces the function if there is an active transaction on the scope.\n *\n * We only do the following until we move transaction creation into this function: When called, the wrapped function\n * will also update the name of the active transaction with a parameterized route provided via the `options` argument.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function callDataFetcherTraced(origFunction, origFunctionArgs, options) {\n    const { parameterizedRoute, dataFetchingMethodName } = options;\n    const transaction = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_8__.getActiveTransaction)();\n    if (!transaction) {\n        return origFunction(...origFunctionArgs);\n    }\n    // TODO: Make sure that the given route matches the name of the active transaction (to prevent background data\n    // fetching from switching the name to a completely other route) -- We'll probably switch to creating a transaction\n    // right here so making that check will probabably not even be necessary.\n    // Logic will be: If there is no active transaction, start one with correct name and source. If there is an active\n    // transaction, create a child span with correct name and source.\n    transaction.name = parameterizedRoute;\n    transaction.metadata.source = \"route\";\n    // Capture the route, since pre-loading, revalidation, etc might mean that this span may happen during another\n    // route's transaction\n    const span = transaction.startChild({\n        op: \"function.nextjs\",\n        origin: \"auto.function.nextjs\",\n        description: `${dataFetchingMethodName} (${parameterizedRoute})`,\n        status: \"ok\"\n    });\n    try {\n        return await origFunction(...origFunctionArgs);\n    } catch (err) {\n        // Since we finish the span before the error can bubble up and trigger the handlers in `registerErrorInstrumentation`\n        // that set the transaction status, we need to manually set the status of the span & transaction\n        transaction.setStatus(\"internal_error\");\n        span.setStatus(\"internal_error\");\n        span.finish();\n        // TODO Copy more robust error handling over from `withSentry`\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.captureException)(err, {\n            mechanism: {\n                handled: false\n            }\n        });\n        throw err;\n    }\n}\n //# sourceMappingURL=wrapperUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/wrapperUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/withServerActionInstrumentation.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/withServerActionInstrumentation.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withServerActionInstrumentation: () => (/* binding */ withServerActionInstrumentation)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/hubextensions.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/trace.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/exports.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/tracing.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/debug-build.js\");\n/* harmony import */ var _utils_platformSupportsStreaming_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/platformSupportsStreaming.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/platformSupportsStreaming.js\");\n/* harmony import */ var _utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/responseEnd.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/responseEnd.js\");\n\n\n\n\n\n\n/**\n * Wraps a Next.js Server Action implementation with Sentry Error and Performance instrumentation.\n */ function withServerActionInstrumentation(...args) {\n    if (typeof args[1] === \"function\") {\n        const [serverActionName, callback] = args;\n        return withServerActionInstrumentationImplementation(serverActionName, {}, callback);\n    } else {\n        const [serverActionName, options, callback] = args;\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return withServerActionInstrumentationImplementation(serverActionName, options, callback);\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function withServerActionInstrumentationImplementation(serverActionName, options, callback) {\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.addTracingExtensions)();\n    return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.runWithAsyncContext)(async ()=>{\n        const hub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.getCurrentHub)();\n        const sendDefaultPii = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n            hub,\n            \"access\",\n            (_)=>_.getClient,\n            \"call\",\n            (_2)=>_2(),\n            \"optionalAccess\",\n            (_3)=>_3.getOptions,\n            \"call\",\n            (_4)=>_4(),\n            \"access\",\n            (_5)=>_5.sendDefaultPii\n        ]);\n        let sentryTraceHeader;\n        let baggageHeader;\n        const fullHeadersObject = {};\n        try {\n            sentryTraceHeader = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._nullishCoalesce)((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n                options,\n                \"access\",\n                (_6)=>_6.headers,\n                \"optionalAccess\",\n                (_7)=>_7.get,\n                \"call\",\n                (_8)=>_8(\"sentry-trace\")\n            ]), ()=>undefined);\n            baggageHeader = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n                options,\n                \"access\",\n                (_9)=>_9.headers,\n                \"optionalAccess\",\n                (_10)=>_10.get,\n                \"call\",\n                (_11)=>_11(\"baggage\")\n            ]);\n            (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n                options,\n                \"access\",\n                (_12)=>_12.headers,\n                \"optionalAccess\",\n                (_13)=>_13.forEach,\n                \"call\",\n                (_14)=>_14((value, key)=>{\n                        fullHeadersObject[key] = value;\n                    })\n            ]);\n        } catch (e) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_4__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.logger.warn(\"Sentry wasn't able to extract the tracing headers for a server action. Will not trace this request.\");\n        }\n        const currentScope = hub.getScope();\n        const { traceparentData, dynamicSamplingContext, propagationContext } = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__.tracingContextFromHeaders)(sentryTraceHeader, baggageHeader);\n        currentScope.setPropagationContext(propagationContext);\n        let res;\n        try {\n            res = await (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.trace)({\n                op: \"function.server_action\",\n                name: `serverAction/${serverActionName}`,\n                status: \"ok\",\n                ...traceparentData,\n                metadata: {\n                    source: \"route\",\n                    dynamicSamplingContext: traceparentData && !dynamicSamplingContext ? {} : dynamicSamplingContext,\n                    request: {\n                        headers: fullHeadersObject\n                    }\n                }\n            }, async (span)=>{\n                const result = await callback();\n                if (options.recordResponse !== undefined ? options.recordResponse : sendDefaultPii) {\n                    (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n                        span,\n                        \"optionalAccess\",\n                        (_15)=>_15.setData,\n                        \"call\",\n                        (_16)=>_16(\"server_action_result\", result)\n                    ]);\n                }\n                if (options.formData) {\n                    const formDataObject = {};\n                    options.formData.forEach((value, key)=>{\n                        if (typeof value === \"string\") {\n                            formDataObject[key] = value;\n                        } else {\n                            formDataObject[key] = \"[non-string value]\";\n                        }\n                    });\n                    (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n                        span,\n                        \"optionalAccess\",\n                        (_17)=>_17.setData,\n                        \"call\",\n                        (_18)=>_18(\"server_action_form_data\", formDataObject)\n                    ]);\n                }\n                return result;\n            }, (error)=>{\n                (0,_sentry_core__WEBPACK_IMPORTED_MODULE_8__.captureException)(error, {\n                    mechanism: {\n                        handled: false\n                    }\n                });\n            });\n        } finally{\n            if (!(0,_utils_platformSupportsStreaming_js__WEBPACK_IMPORTED_MODULE_9__.platformSupportsStreaming)()) {\n                // Lambdas require manual flushing to prevent execution freeze before the event is sent\n                await (0,_utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_10__.flushQueue)();\n            }\n            if (false) {}\n        }\n        return res;\n    });\n}\n //# sourceMappingURL=withServerActionInstrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/withServerActionInstrumentation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapApiHandlerWithSentry.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/wrapApiHandlerWithSentry.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withSentry: () => (/* binding */ withSentry),\n/* harmony export */   withSentryAPI: () => (/* binding */ withSentryAPI),\n/* harmony export */   wrapApiHandlerWithSentry: () => (/* binding */ wrapApiHandlerWithSentry)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/hubextensions.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/exports.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/tracing.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/url.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/debug-build.js\");\n/* harmony import */ var _utils_platformSupportsStreaming_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/platformSupportsStreaming.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/platformSupportsStreaming.js\");\n/* harmony import */ var _utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/responseEnd.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/responseEnd.js\");\n\n\n\n\n\n\n/**\n * Wrap the given API route handler for tracing and error capturing. Thin wrapper around `withSentry`, which only\n * applies it if it hasn't already been applied.\n *\n * @param apiHandler The handler exported from the user's API page route file, which may or may not already be\n * wrapped with `withSentry`\n * @param parameterizedRoute The page's route, passed in via the proxy loader\n * @returns The wrapped handler\n */ function wrapApiHandlerWithSentry(apiHandler, parameterizedRoute) {\n    return new Proxy(apiHandler, {\n        apply: (wrappingTarget, thisArg, args)=>{\n            // eslint-disable-next-line deprecation/deprecation\n            return withSentry(wrappingTarget, parameterizedRoute).apply(thisArg, args);\n        }\n    });\n}\n/**\n * @deprecated Use `wrapApiHandlerWithSentry()` instead\n */ const withSentryAPI = wrapApiHandlerWithSentry;\n/**\n * Legacy function for manually wrapping API route handlers, now used as the innards of `wrapApiHandlerWithSentry`.\n *\n * @param apiHandler The user's original API route handler\n * @param parameterizedRoute The route whose handler is being wrapped. Meant for internal use only.\n * @returns A wrapped version of the handler\n *\n * @deprecated Use `wrapApiWithSentry()` instead\n */ function withSentry(apiHandler, parameterizedRoute) {\n    return new Proxy(apiHandler, {\n        apply: (wrappingTarget, thisArg, args)=>{\n            const [req, res] = args;\n            if (!req) {\n                _sentry_utils__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`Wrapped API handler on route \"${parameterizedRoute}\" was not passed a request object. Will not instrument.`);\n                return wrappingTarget.apply(thisArg, args);\n            } else if (!res) {\n                _sentry_utils__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`Wrapped API handler on route \"${parameterizedRoute}\" was not passed a response object. Will not instrument.`);\n                return wrappingTarget.apply(thisArg, args);\n            }\n            // We're now auto-wrapping API route handlers using `wrapApiHandlerWithSentry` (which uses `withSentry` under the hood), but\n            // users still may have their routes manually wrapped with `withSentry`. This check makes `sentryWrappedHandler`\n            // idempotent so that those cases don't break anything.\n            if (req.__withSentry_applied__) {\n                return wrappingTarget.apply(thisArg, args);\n            }\n            req.__withSentry_applied__ = true;\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.addTracingExtensions)();\n            // eslint-disable-next-line complexity, @typescript-eslint/no-explicit-any\n            const boundHandler = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.runWithAsyncContext)(// eslint-disable-next-line complexity\n            async ()=>{\n                const hub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.getCurrentHub)();\n                let transaction;\n                const currentScope = hub.getScope();\n                const options = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._optionalChain)([\n                    hub,\n                    \"access\",\n                    (_)=>_.getClient,\n                    \"call\",\n                    (_2)=>_2(),\n                    \"optionalAccess\",\n                    (_3)=>_3.getOptions,\n                    \"call\",\n                    (_4)=>_4()\n                ]);\n                currentScope.setSDKProcessingMetadata({\n                    request: req\n                });\n                if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._optionalChain)([\n                    options,\n                    \"optionalAccess\",\n                    (_5)=>_5.instrumenter\n                ]) === \"sentry\") {\n                    const sentryTrace = req.headers && (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.isString)(req.headers[\"sentry-trace\"]) ? req.headers[\"sentry-trace\"] : undefined;\n                    const baggage = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._optionalChain)([\n                        req,\n                        \"access\",\n                        (_6)=>_6.headers,\n                        \"optionalAccess\",\n                        (_7)=>_7.baggage\n                    ]);\n                    const { traceparentData, dynamicSamplingContext, propagationContext } = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.tracingContextFromHeaders)(sentryTrace, baggage);\n                    currentScope.setPropagationContext(propagationContext);\n                    if (_debug_build_js__WEBPACK_IMPORTED_MODULE_6__.DEBUG_BUILD && traceparentData) {\n                        _sentry_utils__WEBPACK_IMPORTED_MODULE_0__.logger.log(`[Tracing] Continuing trace ${traceparentData.traceId}.`);\n                    }\n                    // prefer the parameterized route, if we have it (which we will if we've auto-wrapped the route handler)\n                    let reqPath = parameterizedRoute;\n                    // If not, fake it by just replacing parameter values with their names, hoping that none of them match either\n                    // each other or any hard-coded parts of the path\n                    if (!reqPath) {\n                        const url = `${req.url}`;\n                        // pull off query string, if any\n                        reqPath = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_7__.stripUrlQueryAndFragment)(url);\n                        // Replace with placeholder\n                        if (req.query) {\n                            for (const [key, value] of Object.entries(req.query)){\n                                reqPath = reqPath.replace(`${value}`, `[${key}]`);\n                            }\n                        }\n                    }\n                    const reqMethod = `${(req.method || \"GET\").toUpperCase()} `;\n                    transaction = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_8__.startTransaction)({\n                        name: `${reqMethod}${reqPath}`,\n                        op: \"http.server\",\n                        origin: \"auto.http.nextjs\",\n                        ...traceparentData,\n                        metadata: {\n                            dynamicSamplingContext: traceparentData && !dynamicSamplingContext ? {} : dynamicSamplingContext,\n                            source: \"route\",\n                            request: req\n                        }\n                    }, // extra context passed to the `tracesSampler`\n                    {\n                        request: req\n                    });\n                    currentScope.setSpan(transaction);\n                    if ((0,_utils_platformSupportsStreaming_js__WEBPACK_IMPORTED_MODULE_9__.platformSupportsStreaming)() && !wrappingTarget.__sentry_test_doesnt_support_streaming__) {\n                        (0,_utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_10__.autoEndTransactionOnResponseEnd)(transaction, res);\n                    } else {\n                        // If we're not on a platform that supports streaming, we're blocking res.end() until the queue is flushed.\n                        // res.json() and res.send() will implicitly call res.end(), so it is enough to wrap res.end().\n                        // eslint-disable-next-line @typescript-eslint/unbound-method\n                        const origResEnd = res.end;\n                        res.end = async function(...args) {\n                            if (transaction) {\n                                await (0,_utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_10__.finishTransaction)(transaction, res);\n                                await (0,_utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_10__.flushQueue)();\n                            }\n                            origResEnd.apply(this, args);\n                        };\n                    }\n                }\n                try {\n                    const handlerResult = await wrappingTarget.apply(thisArg, args);\n                    if ( true && !process.env.SENTRY_IGNORE_API_RESOLUTION_ERROR && !res.finished) {\n                        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.consoleSandbox)(()=>{\n                            // eslint-disable-next-line no-console\n                            console.warn(`[sentry] If Next.js logs a warning \"API resolved without sending a response\", it's a false positive, which may happen when you use \\`withSentry\\` manually to wrap your routes.\n                To suppress this warning, set \\`SENTRY_IGNORE_API_RESOLUTION_ERROR\\` to 1 in your env.\n                To suppress the nextjs warning, use the \\`externalResolver\\` API route option (see https://nextjs.org/docs/api-routes/api-middlewares#custom-config for details).`);\n                        });\n                    }\n                    return handlerResult;\n                } catch (e) {\n                    // In case we have a primitive, wrap it in the equivalent wrapper class (string -> String, etc.) so that we can\n                    // store a seen flag on it. (Because of the one-way-on-Vercel-one-way-off-of-Vercel approach we've been forced\n                    // to take, it can happen that the same thrown object gets caught in two different ways, and flagging it is a\n                    // way to prevent it from actually being reported twice.)\n                    const objectifiedErr = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_11__.objectify)(e);\n                    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_8__.captureException)(objectifiedErr, {\n                        mechanism: {\n                            type: \"instrument\",\n                            handled: false,\n                            data: {\n                                wrapped_handler: wrappingTarget.name,\n                                function: \"withSentry\"\n                            }\n                        }\n                    });\n                    // Because we're going to finish and send the transaction before passing the error onto nextjs, it won't yet\n                    // have had a chance to set the status to 500, so unless we do it ourselves now, we'll incorrectly report that\n                    // the transaction was error-free\n                    res.statusCode = 500;\n                    res.statusMessage = \"Internal Server Error\";\n                    // Make sure we have a chance to finish the transaction and flush events to Sentry before the handler errors\n                    // out. (Apps which are deployed on Vercel run their API routes in lambdas, and those lambdas will shut down the\n                    // moment they detect an error, so it's important to get this done before rethrowing the error. Apps not\n                    // deployed serverlessly will run into this cleanup code again in `res.end(), but the transaction will already\n                    // be finished and the queue will already be empty, so effectively it'll just no-op.)\n                    if ((0,_utils_platformSupportsStreaming_js__WEBPACK_IMPORTED_MODULE_9__.platformSupportsStreaming)() && !wrappingTarget.__sentry_test_doesnt_support_streaming__) {\n                        void (0,_utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_10__.finishTransaction)(transaction, res);\n                    } else {\n                        await (0,_utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_10__.finishTransaction)(transaction, res);\n                        await (0,_utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_10__.flushQueue)();\n                    }\n                    // We rethrow here so that nextjs can do with the error whatever it would normally do. (Sometimes \"whatever it\n                    // would normally do\" is to allow the error to bubble up to the global handlers - another reason we need to mark\n                    // the error as already having been captured.)\n                    throw objectifiedErr;\n                }\n            });\n            // Since API route handlers are all async, nextjs always awaits the return value (meaning it's fine for us to return\n            // a promise here rather than a real result, and it saves us the overhead of an `await` call.)\n            return boundHandler;\n        }\n    });\n}\n //# sourceMappingURL=wrapApiHandlerWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapApiHandlerWithSentry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapApiHandlerWithSentryVercelCrons.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/wrapApiHandlerWithSentryVercelCrons.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapApiHandlerWithSentryVercelCrons: () => (/* binding */ wrapApiHandlerWithSentryVercelCrons)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/hubextensions.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/exports.js\");\n\n\n/**\n * Wraps a function with Sentry crons instrumentation by automaticaly sending check-ins for the given Vercel crons config.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapApiHandlerWithSentryVercelCrons(handler, vercelCronsConfig) {\n    return new Proxy(handler, {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        apply: (originalFunction, thisArg, args)=>{\n            return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.runWithAsyncContext)(()=>{\n                if (!args || !args[0]) {\n                    return originalFunction.apply(thisArg, args);\n                }\n                (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.addTracingExtensions)();\n                const [req] = args;\n                let maybePromiseResult;\n                const cronsKey = \"nextUrl\" in req ? req.nextUrl.pathname : req.url;\n                const userAgentHeader = \"nextUrl\" in req ? req.headers.get(\"user-agent\") : req.headers[\"user-agent\"];\n                if (!vercelCronsConfig || // do nothing if vercel crons config is missing\n                !(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n                    userAgentHeader,\n                    \"optionalAccess\",\n                    (_)=>_.includes,\n                    \"call\",\n                    (_2)=>_2(\"vercel-cron\")\n                ]) // do nothing if endpoint is not called from vercel crons\n                ) {\n                    return originalFunction.apply(thisArg, args);\n                }\n                const vercelCron = vercelCronsConfig.find((vercelCron)=>vercelCron.path === cronsKey);\n                if (!vercelCron || !vercelCron.path || !vercelCron.schedule) {\n                    return originalFunction.apply(thisArg, args);\n                }\n                const monitorSlug = vercelCron.path;\n                const checkInId = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.captureCheckIn)({\n                    monitorSlug,\n                    status: \"in_progress\"\n                }, {\n                    maxRuntime: 60 * 12,\n                    schedule: {\n                        type: \"crontab\",\n                        value: vercelCron.schedule\n                    }\n                });\n                const startTime = Date.now() / 1000;\n                const handleErrorCase = ()=>{\n                    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.captureCheckIn)({\n                        checkInId,\n                        monitorSlug,\n                        status: \"error\",\n                        duration: Date.now() / 1000 - startTime\n                    });\n                };\n                try {\n                    maybePromiseResult = originalFunction.apply(thisArg, args);\n                } catch (e) {\n                    handleErrorCase();\n                    throw e;\n                }\n                if (typeof maybePromiseResult === \"object\" && maybePromiseResult !== null && \"then\" in maybePromiseResult) {\n                    Promise.resolve(maybePromiseResult).then(()=>{\n                        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.captureCheckIn)({\n                            checkInId,\n                            monitorSlug,\n                            status: \"ok\",\n                            duration: Date.now() / 1000 - startTime\n                        });\n                    }, ()=>{\n                        handleErrorCase();\n                    });\n                    // It is very important that we return the original promise here, because Next.js attaches various properties\n                    // to that promise and will throw if they are not on the returned value.\n                    return maybePromiseResult;\n                } else {\n                    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.captureCheckIn)({\n                        checkInId,\n                        monitorSlug,\n                        status: \"ok\",\n                        duration: Date.now() / 1000 - startTime\n                    });\n                    return maybePromiseResult;\n                }\n            });\n        }\n    });\n}\n //# sourceMappingURL=wrapApiHandlerWithSentryVercelCrons.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvZXNtL2NvbW1vbi93cmFwQXBpSGFuZGxlcldpdGhTZW50cnlWZXJjZWxDcm9ucy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUErQztBQUMwQztBQUV6Rjs7Q0FFQyxHQUNELDhEQUE4RDtBQUM5RCxTQUFTSSxvQ0FDUEMsT0FBTyxFQUNQQyxpQkFBaUI7SUFFakIsT0FBTyxJQUFJQyxNQUFNRixTQUFTO1FBQ3hCLDhEQUE4RDtRQUM5REcsT0FBTyxDQUFDQyxrQkFBa0JDLFNBQVNDO1lBQ2pDLE9BQU9WLGlFQUFtQkEsQ0FBQztnQkFDekIsSUFBSSxDQUFDVSxRQUFRLENBQUNBLElBQUksQ0FBQyxFQUFFLEVBQUU7b0JBQ3JCLE9BQU9GLGlCQUFpQkQsS0FBSyxDQUFDRSxTQUFTQztnQkFDekM7Z0JBRUFULGtFQUFvQkE7Z0JBQ3BCLE1BQU0sQ0FBQ1UsSUFBSSxHQUFHRDtnQkFFZCxJQUFJRTtnQkFDSixNQUFNQyxXQUFXLGFBQWFGLE1BQU1BLElBQUlHLE9BQU8sQ0FBQ0MsUUFBUSxHQUFHSixJQUFJSyxHQUFHO2dCQUNsRSxNQUFNQyxrQkFBa0IsYUFBYU4sTUFBTUEsSUFBSU8sT0FBTyxDQUFDQyxHQUFHLENBQUMsZ0JBQWdCUixJQUFJTyxPQUFPLENBQUMsYUFBYTtnQkFFcEcsSUFDRSxDQUFDYixxQkFBcUIsK0NBQStDO2dCQUNyRSxDQUFDTiw2REFBY0EsQ0FBQztvQkFBQ2tCO29CQUFpQjtvQkFBa0JHLENBQUFBLElBQUtBLEVBQUVDLFFBQVE7b0JBQUU7b0JBQVFDLENBQUFBLEtBQU1BLEdBQUc7aUJBQWUsRUFBRSx5REFBeUQ7a0JBQ2hLO29CQUNBLE9BQU9kLGlCQUFpQkQsS0FBSyxDQUFDRSxTQUFTQztnQkFDekM7Z0JBRUEsTUFBTWEsYUFBYWxCLGtCQUFrQm1CLElBQUksQ0FBQ0QsQ0FBQUEsYUFBY0EsV0FBV0UsSUFBSSxLQUFLWjtnQkFFNUUsSUFBSSxDQUFDVSxjQUFjLENBQUNBLFdBQVdFLElBQUksSUFBSSxDQUFDRixXQUFXRyxRQUFRLEVBQUU7b0JBQzNELE9BQU9sQixpQkFBaUJELEtBQUssQ0FBQ0UsU0FBU0M7Z0JBQ3pDO2dCQUVBLE1BQU1pQixjQUFjSixXQUFXRSxJQUFJO2dCQUVuQyxNQUFNRyxZQUFZMUIsNERBQWNBLENBQzlCO29CQUNFeUI7b0JBQ0FFLFFBQVE7Z0JBQ1YsR0FDQTtvQkFDRUMsWUFBWSxLQUFLO29CQUNqQkosVUFBVTt3QkFDUkssTUFBTTt3QkFDTkMsT0FBT1QsV0FBV0csUUFBUTtvQkFDNUI7Z0JBQ0Y7Z0JBR0YsTUFBTU8sWUFBWUMsS0FBS0MsR0FBRyxLQUFLO2dCQUUvQixNQUFNQyxrQkFBa0I7b0JBQ3RCbEMsNERBQWNBLENBQUM7d0JBQ2IwQjt3QkFDQUQ7d0JBQ0FFLFFBQVE7d0JBQ1JRLFVBQVVILEtBQUtDLEdBQUcsS0FBSyxPQUFPRjtvQkFDaEM7Z0JBQ0Y7Z0JBRUEsSUFBSTtvQkFDRnJCLHFCQUFxQkosaUJBQWlCRCxLQUFLLENBQUNFLFNBQVNDO2dCQUN2RCxFQUFFLE9BQU80QixHQUFHO29CQUNWRjtvQkFDQSxNQUFNRTtnQkFDUjtnQkFFQSxJQUFJLE9BQU8xQix1QkFBdUIsWUFBWUEsdUJBQXVCLFFBQVEsVUFBVUEsb0JBQW9CO29CQUN6RzJCLFFBQVFDLE9BQU8sQ0FBQzVCLG9CQUFvQjZCLElBQUksQ0FDdEM7d0JBQ0V2Qyw0REFBY0EsQ0FBQzs0QkFDYjBCOzRCQUNBRDs0QkFDQUUsUUFBUTs0QkFDUlEsVUFBVUgsS0FBS0MsR0FBRyxLQUFLLE9BQU9GO3dCQUNoQztvQkFDRixHQUNBO3dCQUNFRztvQkFDRjtvQkFHRiw2R0FBNkc7b0JBQzdHLHdFQUF3RTtvQkFDeEUsT0FBT3hCO2dCQUNULE9BQU87b0JBQ0xWLDREQUFjQSxDQUFDO3dCQUNiMEI7d0JBQ0FEO3dCQUNBRSxRQUFRO3dCQUNSUSxVQUFVSCxLQUFLQyxHQUFHLEtBQUssT0FBT0Y7b0JBQ2hDO29CQUNBLE9BQU9yQjtnQkFDVDtZQUNGO1FBQ0Y7SUFDRjtBQUNGO0FBRStDLENBQy9DLCtEQUErRCIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9lc20vY29tbW9uL3dyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeVZlcmNlbENyb25zLmpzPzliODkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX29wdGlvbmFsQ2hhaW4gfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IHJ1bldpdGhBc3luY0NvbnRleHQsIGFkZFRyYWNpbmdFeHRlbnNpb25zLCBjYXB0dXJlQ2hlY2tJbiB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5cbi8qKlxuICogV3JhcHMgYSBmdW5jdGlvbiB3aXRoIFNlbnRyeSBjcm9ucyBpbnN0cnVtZW50YXRpb24gYnkgYXV0b21hdGljYWx5IHNlbmRpbmcgY2hlY2staW5zIGZvciB0aGUgZ2l2ZW4gVmVyY2VsIGNyb25zIGNvbmZpZy5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIHdyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeVZlcmNlbENyb25zKFxuICBoYW5kbGVyLFxuICB2ZXJjZWxDcm9uc0NvbmZpZyxcbikge1xuICByZXR1cm4gbmV3IFByb3h5KGhhbmRsZXIsIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGFwcGx5OiAob3JpZ2luYWxGdW5jdGlvbiwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgcmV0dXJuIHJ1bldpdGhBc3luY0NvbnRleHQoKCkgPT4ge1xuICAgICAgICBpZiAoIWFyZ3MgfHwgIWFyZ3NbMF0pIHtcbiAgICAgICAgICByZXR1cm4gb3JpZ2luYWxGdW5jdGlvbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFkZFRyYWNpbmdFeHRlbnNpb25zKCk7XG4gICAgICAgIGNvbnN0IFtyZXFdID0gYXJncyA7XG5cbiAgICAgICAgbGV0IG1heWJlUHJvbWlzZVJlc3VsdDtcbiAgICAgICAgY29uc3QgY3JvbnNLZXkgPSAnbmV4dFVybCcgaW4gcmVxID8gcmVxLm5leHRVcmwucGF0aG5hbWUgOiByZXEudXJsO1xuICAgICAgICBjb25zdCB1c2VyQWdlbnRIZWFkZXIgPSAnbmV4dFVybCcgaW4gcmVxID8gcmVxLmhlYWRlcnMuZ2V0KCd1c2VyLWFnZW50JykgOiByZXEuaGVhZGVyc1sndXNlci1hZ2VudCddO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAhdmVyY2VsQ3JvbnNDb25maWcgfHwgLy8gZG8gbm90aGluZyBpZiB2ZXJjZWwgY3JvbnMgY29uZmlnIGlzIG1pc3NpbmdcbiAgICAgICAgICAhX29wdGlvbmFsQ2hhaW4oW3VzZXJBZ2VudEhlYWRlciwgJ29wdGlvbmFsQWNjZXNzJywgXyA9PiBfLmluY2x1ZGVzLCAnY2FsbCcsIF8yID0+IF8yKCd2ZXJjZWwtY3JvbicpXSkgLy8gZG8gbm90aGluZyBpZiBlbmRwb2ludCBpcyBub3QgY2FsbGVkIGZyb20gdmVyY2VsIGNyb25zXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBvcmlnaW5hbEZ1bmN0aW9uLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdmVyY2VsQ3JvbiA9IHZlcmNlbENyb25zQ29uZmlnLmZpbmQodmVyY2VsQ3JvbiA9PiB2ZXJjZWxDcm9uLnBhdGggPT09IGNyb25zS2V5KTtcblxuICAgICAgICBpZiAoIXZlcmNlbENyb24gfHwgIXZlcmNlbENyb24ucGF0aCB8fCAhdmVyY2VsQ3Jvbi5zY2hlZHVsZSkge1xuICAgICAgICAgIHJldHVybiBvcmlnaW5hbEZ1bmN0aW9uLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbW9uaXRvclNsdWcgPSB2ZXJjZWxDcm9uLnBhdGg7XG5cbiAgICAgICAgY29uc3QgY2hlY2tJbklkID0gY2FwdHVyZUNoZWNrSW4oXG4gICAgICAgICAge1xuICAgICAgICAgICAgbW9uaXRvclNsdWcsXG4gICAgICAgICAgICBzdGF0dXM6ICdpbl9wcm9ncmVzcycsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBtYXhSdW50aW1lOiA2MCAqIDEyLCAvLyAobWludXRlcykgc28gMTIgaG91cnMgLSBqdXN0IGEgdmVyeSBoaWdoIGFyYml0cmFyeSBudW1iZXIgc2luY2Ugd2UgZG9uJ3Qga25vdyB0aGUgYWN0dWFsIGR1cmF0aW9uIG9mIHRoZSB1c2VycyBjcm9uIGpvYlxuICAgICAgICAgICAgc2NoZWR1bGU6IHtcbiAgICAgICAgICAgICAgdHlwZTogJ2Nyb250YWInLFxuICAgICAgICAgICAgICB2YWx1ZTogdmVyY2VsQ3Jvbi5zY2hlZHVsZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpIC8gMTAwMDtcblxuICAgICAgICBjb25zdCBoYW5kbGVFcnJvckNhc2UgPSAoKSA9PiB7XG4gICAgICAgICAgY2FwdHVyZUNoZWNrSW4oe1xuICAgICAgICAgICAgY2hlY2tJbklkLFxuICAgICAgICAgICAgbW9uaXRvclNsdWcsXG4gICAgICAgICAgICBzdGF0dXM6ICdlcnJvcicsXG4gICAgICAgICAgICBkdXJhdGlvbjogRGF0ZS5ub3coKSAvIDEwMDAgLSBzdGFydFRpbWUsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBtYXliZVByb21pc2VSZXN1bHQgPSBvcmlnaW5hbEZ1bmN0aW9uLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3JDYXNlKCk7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgbWF5YmVQcm9taXNlUmVzdWx0ID09PSAnb2JqZWN0JyAmJiBtYXliZVByb21pc2VSZXN1bHQgIT09IG51bGwgJiYgJ3RoZW4nIGluIG1heWJlUHJvbWlzZVJlc3VsdCkge1xuICAgICAgICAgIFByb21pc2UucmVzb2x2ZShtYXliZVByb21pc2VSZXN1bHQpLnRoZW4oXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgIGNhcHR1cmVDaGVja0luKHtcbiAgICAgICAgICAgICAgICBjaGVja0luSWQsXG4gICAgICAgICAgICAgICAgbW9uaXRvclNsdWcsXG4gICAgICAgICAgICAgICAgc3RhdHVzOiAnb2snLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBEYXRlLm5vdygpIC8gMTAwMCAtIHN0YXJ0VGltZSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICBoYW5kbGVFcnJvckNhc2UoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIC8vIEl0IGlzIHZlcnkgaW1wb3J0YW50IHRoYXQgd2UgcmV0dXJuIHRoZSBvcmlnaW5hbCBwcm9taXNlIGhlcmUsIGJlY2F1c2UgTmV4dC5qcyBhdHRhY2hlcyB2YXJpb3VzIHByb3BlcnRpZXNcbiAgICAgICAgICAvLyB0byB0aGF0IHByb21pc2UgYW5kIHdpbGwgdGhyb3cgaWYgdGhleSBhcmUgbm90IG9uIHRoZSByZXR1cm5lZCB2YWx1ZS5cbiAgICAgICAgICByZXR1cm4gbWF5YmVQcm9taXNlUmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmVDaGVja0luKHtcbiAgICAgICAgICAgIGNoZWNrSW5JZCxcbiAgICAgICAgICAgIG1vbml0b3JTbHVnLFxuICAgICAgICAgICAgc3RhdHVzOiAnb2snLFxuICAgICAgICAgICAgZHVyYXRpb246IERhdGUubm93KCkgLyAxMDAwIC0gc3RhcnRUaW1lLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBtYXliZVByb21pc2VSZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnQgeyB3cmFwQXBpSGFuZGxlcldpdGhTZW50cnlWZXJjZWxDcm9ucyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcEFwaUhhbmRsZXJXaXRoU2VudHJ5VmVyY2VsQ3JvbnMuanMubWFwXG4iXSwibmFtZXMiOlsiX29wdGlvbmFsQ2hhaW4iLCJydW5XaXRoQXN5bmNDb250ZXh0IiwiYWRkVHJhY2luZ0V4dGVuc2lvbnMiLCJjYXB0dXJlQ2hlY2tJbiIsIndyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeVZlcmNlbENyb25zIiwiaGFuZGxlciIsInZlcmNlbENyb25zQ29uZmlnIiwiUHJveHkiLCJhcHBseSIsIm9yaWdpbmFsRnVuY3Rpb24iLCJ0aGlzQXJnIiwiYXJncyIsInJlcSIsIm1heWJlUHJvbWlzZVJlc3VsdCIsImNyb25zS2V5IiwibmV4dFVybCIsInBhdGhuYW1lIiwidXJsIiwidXNlckFnZW50SGVhZGVyIiwiaGVhZGVycyIsImdldCIsIl8iLCJpbmNsdWRlcyIsIl8yIiwidmVyY2VsQ3JvbiIsImZpbmQiLCJwYXRoIiwic2NoZWR1bGUiLCJtb25pdG9yU2x1ZyIsImNoZWNrSW5JZCIsInN0YXR1cyIsIm1heFJ1bnRpbWUiLCJ0eXBlIiwidmFsdWUiLCJzdGFydFRpbWUiLCJEYXRlIiwibm93IiwiaGFuZGxlRXJyb3JDYXNlIiwiZHVyYXRpb24iLCJlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapApiHandlerWithSentryVercelCrons.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapAppGetInitialPropsWithSentry.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/wrapAppGetInitialPropsWithSentry.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withSentryServerSideAppGetInitialProps: () => (/* binding */ withSentryServerSideAppGetInitialProps),\n/* harmony export */   wrapAppGetInitialPropsWithSentry: () => (/* binding */ wrapAppGetInitialPropsWithSentry)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/hubextensions.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/baggage.js\");\n/* harmony import */ var _utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/isBuild.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/isBuild.js\");\n/* harmony import */ var _utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/wrapperUtils.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/wrapperUtils.js\");\n\n\n\n\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom app (\"_app.js\").\n *\n * @param origAppGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */ function wrapAppGetInitialPropsWithSentry(origAppGetInitialProps) {\n    return new Proxy(origAppGetInitialProps, {\n        apply: async (wrappingTarget, thisArg, args)=>{\n            if ((0,_utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__.isBuild)()) {\n                return wrappingTarget.apply(thisArg, args);\n            }\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.addTracingExtensions)();\n            const [context] = args;\n            const { req, res } = context.ctx;\n            const errorWrappedAppGetInitialProps = (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_2__.withErrorInstrumentation)(wrappingTarget);\n            const hub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.getCurrentHub)();\n            const options = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__._optionalChain)([\n                hub,\n                \"access\",\n                (_)=>_.getClient,\n                \"call\",\n                (_2)=>_2(),\n                \"optionalAccess\",\n                (_3)=>_3.getOptions,\n                \"call\",\n                (_4)=>_4()\n            ]);\n            // Generally we can assume that `req` and `res` are always defined on the server:\n            // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n            // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n            // span with each other when there are no req or res objects, we simply do not trace them at all here.\n            if (req && res && (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__._optionalChain)([\n                options,\n                \"optionalAccess\",\n                (_5)=>_5.instrumenter\n            ]) === \"sentry\") {\n                const tracedGetInitialProps = (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_2__.withTracedServerSideDataFetcher)(errorWrappedAppGetInitialProps, req, res, {\n                    dataFetcherRouteName: \"/_app\",\n                    requestedRouteName: context.ctx.pathname,\n                    dataFetchingMethodName: \"getInitialProps\"\n                });\n                const appGetInitialProps = await tracedGetInitialProps.apply(thisArg, args);\n                const requestTransaction = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._nullishCoalesce)((0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_2__.getTransactionFromRequest)(req), ()=>hub.getScope().getTransaction());\n                // Per definition, `pageProps` is not optional, however an increased amount of users doesn't seem to call\n                // `App.getInitialProps(appContext)` in their custom `_app` pages which is required as per\n                // https://nextjs.org/docs/advanced-features/custom-app - resulting in missing `pageProps`.\n                // For this reason, we just handle the case where `pageProps` doesn't exist explicitly.\n                if (!appGetInitialProps.pageProps) {\n                    appGetInitialProps.pageProps = {};\n                }\n                if (requestTransaction) {\n                    appGetInitialProps.pageProps._sentryTraceData = requestTransaction.toTraceparent();\n                    const dynamicSamplingContext = requestTransaction.getDynamicSamplingContext();\n                    appGetInitialProps.pageProps._sentryBaggage = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__.dynamicSamplingContextToSentryBaggageHeader)(dynamicSamplingContext);\n                }\n                return appGetInitialProps;\n            } else {\n                return errorWrappedAppGetInitialProps.apply(thisArg, args);\n            }\n        }\n    });\n}\n/**\n * @deprecated Use `wrapAppGetInitialPropsWithSentry` instead.\n */ const withSentryServerSideAppGetInitialProps = wrapAppGetInitialPropsWithSentry;\n //# sourceMappingURL=wrapAppGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapAppGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapDocumentGetInitialPropsWithSentry.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/wrapDocumentGetInitialPropsWithSentry.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withSentryServerSideDocumentGetInitialProps: () => (/* binding */ withSentryServerSideDocumentGetInitialProps),\n/* harmony export */   wrapDocumentGetInitialPropsWithSentry: () => (/* binding */ wrapDocumentGetInitialPropsWithSentry)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/hubextensions.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/exports.js\");\n/* harmony import */ var _utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/isBuild.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/isBuild.js\");\n/* harmony import */ var _utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/wrapperUtils.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/wrapperUtils.js\");\n\n\n\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom document (\"_document.js\").\n *\n * @param origDocumentGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */ function wrapDocumentGetInitialPropsWithSentry(origDocumentGetInitialProps) {\n    return new Proxy(origDocumentGetInitialProps, {\n        apply: (wrappingTarget, thisArg, args)=>{\n            if ((0,_utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__.isBuild)()) {\n                return wrappingTarget.apply(thisArg, args);\n            }\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.addTracingExtensions)();\n            const [context] = args;\n            const { req, res } = context;\n            const errorWrappedGetInitialProps = (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_2__.withErrorInstrumentation)(wrappingTarget);\n            const options = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._optionalChain)([\n                _sentry_core__WEBPACK_IMPORTED_MODULE_4__.getClient,\n                \"call\",\n                (_)=>_(),\n                \"optionalAccess\",\n                (_2)=>_2.getOptions,\n                \"call\",\n                (_3)=>_3()\n            ]);\n            // Generally we can assume that `req` and `res` are always defined on the server:\n            // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n            // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n            // span with each other when there are no req or res objects, we simply do not trace them at all here.\n            if (req && res && (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._optionalChain)([\n                options,\n                \"optionalAccess\",\n                (_4)=>_4.instrumenter\n            ]) === \"sentry\") {\n                const tracedGetInitialProps = (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_2__.withTracedServerSideDataFetcher)(errorWrappedGetInitialProps, req, res, {\n                    dataFetcherRouteName: \"/_document\",\n                    requestedRouteName: context.pathname,\n                    dataFetchingMethodName: \"getInitialProps\"\n                });\n                return tracedGetInitialProps.apply(thisArg, args);\n            } else {\n                return errorWrappedGetInitialProps.apply(thisArg, args);\n            }\n        }\n    });\n}\n/**\n * @deprecated Use `wrapDocumentGetInitialPropsWithSentry` instead.\n */ const withSentryServerSideDocumentGetInitialProps = wrapDocumentGetInitialPropsWithSentry;\n //# sourceMappingURL=wrapDocumentGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvZXNtL2NvbW1vbi93cmFwRG9jdW1lbnRHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBK0M7QUFDZ0I7QUFDbEI7QUFDdUQ7QUFFcEc7Ozs7Ozs7Q0FPQyxHQUNELFNBQVNNLHNDQUNQQywyQkFBMkI7SUFFM0IsT0FBTyxJQUFJQyxNQUFNRCw2QkFBNkI7UUFDNUNFLE9BQU8sQ0FBQ0MsZ0JBQWdCQyxTQUFTQztZQUMvQixJQUFJVCwwREFBT0EsSUFBSTtnQkFDYixPQUFPTyxlQUFlRCxLQUFLLENBQUNFLFNBQVNDO1lBQ3ZDO1lBRUFYLGtFQUFvQkE7WUFFcEIsTUFBTSxDQUFDWSxRQUFRLEdBQUdEO1lBQ2xCLE1BQU0sRUFBRUUsR0FBRyxFQUFFQyxHQUFHLEVBQUUsR0FBR0Y7WUFFckIsTUFBTUcsOEJBQThCWCxnRkFBd0JBLENBQUNLO1lBQzdELE1BQU1PLFVBQVVqQiw2REFBY0EsQ0FBQztnQkFBQ0UsbURBQVNBO2dCQUFFO2dCQUFRZ0IsQ0FBQUEsSUFBS0E7Z0JBQUs7Z0JBQWtCQyxDQUFBQSxLQUFNQSxHQUFHQyxVQUFVO2dCQUFFO2dCQUFRQyxDQUFBQSxLQUFNQTthQUFLO1lBRXZILGlGQUFpRjtZQUNqRix1RkFBdUY7WUFDdkYsa0hBQWtIO1lBQ2xILHNHQUFzRztZQUN0RyxJQUFJUCxPQUFPQyxPQUFPZiw2REFBY0EsQ0FBQztnQkFBQ2lCO2dCQUFTO2dCQUFrQkssQ0FBQUEsS0FBTUEsR0FBR0MsWUFBWTthQUFDLE1BQU0sVUFBVTtnQkFDakcsTUFBTUMsd0JBQXdCcEIsdUZBQStCQSxDQUFDWSw2QkFBNkJGLEtBQUtDLEtBQUs7b0JBQ25HVSxzQkFBc0I7b0JBQ3RCQyxvQkFBb0JiLFFBQVFjLFFBQVE7b0JBQ3BDQyx3QkFBd0I7Z0JBQzFCO2dCQUVBLE9BQU9KLHNCQUFzQmYsS0FBSyxDQUFDRSxTQUFTQztZQUM5QyxPQUFPO2dCQUNMLE9BQU9JLDRCQUE0QlAsS0FBSyxDQUFDRSxTQUFTQztZQUNwRDtRQUNGO0lBQ0Y7QUFDRjtBQUVBOztDQUVDLEdBQ0QsTUFBTWlCLDhDQUE4Q3ZCO0FBRTBDLENBQzlGLGlFQUFpRSIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9lc20vY29tbW9uL3dyYXBEb2N1bWVudEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanM/NjYxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfb3B0aW9uYWxDaGFpbiB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgYWRkVHJhY2luZ0V4dGVuc2lvbnMsIGdldENsaWVudCB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBpc0J1aWxkIH0gZnJvbSAnLi91dGlscy9pc0J1aWxkLmpzJztcbmltcG9ydCB7IHdpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIsIHdpdGhFcnJvckluc3RydW1lbnRhdGlvbiB9IGZyb20gJy4vdXRpbHMvd3JhcHBlclV0aWxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIHVzZXIncyBleHBvcnRlZCBgZ2V0SW5pdGlhbFByb3BzYCBmdW5jdGlvbiBpblxuICogYSBjdXN0b20gZG9jdW1lbnQgKFwiX2RvY3VtZW50LmpzXCIpLlxuICpcbiAqIEBwYXJhbSBvcmlnRG9jdW1lbnRHZXRJbml0aWFsUHJvcHMgVGhlIHVzZXIncyBgZ2V0SW5pdGlhbFByb3BzYCBmdW5jdGlvblxuICogQHBhcmFtIHBhcmFtZXRlcml6ZWRSb3V0ZSBUaGUgcGFnZSdzIHBhcmFtZXRlcml6ZWQgcm91dGVcbiAqIEByZXR1cm5zIEEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSBmdW5jdGlvblxuICovXG5mdW5jdGlvbiB3cmFwRG9jdW1lbnRHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5KFxuICBvcmlnRG9jdW1lbnRHZXRJbml0aWFsUHJvcHMsXG4pIHtcbiAgcmV0dXJuIG5ldyBQcm94eShvcmlnRG9jdW1lbnRHZXRJbml0aWFsUHJvcHMsIHtcbiAgICBhcHBseTogKHdyYXBwaW5nVGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICBpZiAoaXNCdWlsZCgpKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGluZ1RhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgYWRkVHJhY2luZ0V4dGVuc2lvbnMoKTtcblxuICAgICAgY29uc3QgW2NvbnRleHRdID0gYXJncztcbiAgICAgIGNvbnN0IHsgcmVxLCByZXMgfSA9IGNvbnRleHQ7XG5cbiAgICAgIGNvbnN0IGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcyA9IHdpdGhFcnJvckluc3RydW1lbnRhdGlvbih3cmFwcGluZ1RhcmdldCk7XG4gICAgICBjb25zdCBvcHRpb25zID0gX29wdGlvbmFsQ2hhaW4oW2dldENsaWVudCwgJ2NhbGwnLCBfID0+IF8oKSwgJ29wdGlvbmFsQWNjZXNzJywgXzIgPT4gXzIuZ2V0T3B0aW9ucywgJ2NhbGwnLCBfMyA9PiBfMygpXSk7XG5cbiAgICAgIC8vIEdlbmVyYWxseSB3ZSBjYW4gYXNzdW1lIHRoYXQgYHJlcWAgYW5kIGByZXNgIGFyZSBhbHdheXMgZGVmaW5lZCBvbiB0aGUgc2VydmVyOlxuICAgICAgLy8gaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9kYXRhLWZldGNoaW5nL2dldC1pbml0aWFsLXByb3BzI2NvbnRleHQtb2JqZWN0XG4gICAgICAvLyBUaGlzIGRvZXMgbm90IHNlZW0gdG8gYmUgdGhlIGNhc2UgaW4gZGV2IG1vZGUuIEJlY2F1c2Ugd2UgaGF2ZSBubyBjbGVhbiB3YXkgb2YgYXNzb2NpYXRpbmcgdGhlIHRoZSBkYXRhIGZldGNoZXJcbiAgICAgIC8vIHNwYW4gd2l0aCBlYWNoIG90aGVyIHdoZW4gdGhlcmUgYXJlIG5vIHJlcSBvciByZXMgb2JqZWN0cywgd2Ugc2ltcGx5IGRvIG5vdCB0cmFjZSB0aGVtIGF0IGFsbCBoZXJlLlxuICAgICAgaWYgKHJlcSAmJiByZXMgJiYgX29wdGlvbmFsQ2hhaW4oW29wdGlvbnMsICdvcHRpb25hbEFjY2VzcycsIF80ID0+IF80Lmluc3RydW1lbnRlcl0pID09PSAnc2VudHJ5Jykge1xuICAgICAgICBjb25zdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMgPSB3aXRoVHJhY2VkU2VydmVyU2lkZURhdGFGZXRjaGVyKGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcywgcmVxLCByZXMsIHtcbiAgICAgICAgICBkYXRhRmV0Y2hlclJvdXRlTmFtZTogJy9fZG9jdW1lbnQnLFxuICAgICAgICAgIHJlcXVlc3RlZFJvdXRlTmFtZTogY29udGV4dC5wYXRobmFtZSxcbiAgICAgICAgICBkYXRhRmV0Y2hpbmdNZXRob2ROYW1lOiAnZ2V0SW5pdGlhbFByb3BzJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRyYWNlZEdldEluaXRpYWxQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBlcnJvcldyYXBwZWRHZXRJbml0aWFsUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIGB3cmFwRG9jdW1lbnRHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5YCBpbnN0ZWFkLlxuICovXG5jb25zdCB3aXRoU2VudHJ5U2VydmVyU2lkZURvY3VtZW50R2V0SW5pdGlhbFByb3BzID0gd3JhcERvY3VtZW50R2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeTtcblxuZXhwb3J0IHsgd2l0aFNlbnRyeVNlcnZlclNpZGVEb2N1bWVudEdldEluaXRpYWxQcm9wcywgd3JhcERvY3VtZW50R2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcERvY3VtZW50R2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJfb3B0aW9uYWxDaGFpbiIsImFkZFRyYWNpbmdFeHRlbnNpb25zIiwiZ2V0Q2xpZW50IiwiaXNCdWlsZCIsIndpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIiLCJ3aXRoRXJyb3JJbnN0cnVtZW50YXRpb24iLCJ3cmFwRG9jdW1lbnRHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5Iiwib3JpZ0RvY3VtZW50R2V0SW5pdGlhbFByb3BzIiwiUHJveHkiLCJhcHBseSIsIndyYXBwaW5nVGFyZ2V0IiwidGhpc0FyZyIsImFyZ3MiLCJjb250ZXh0IiwicmVxIiwicmVzIiwiZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzIiwib3B0aW9ucyIsIl8iLCJfMiIsImdldE9wdGlvbnMiLCJfMyIsIl80IiwiaW5zdHJ1bWVudGVyIiwidHJhY2VkR2V0SW5pdGlhbFByb3BzIiwiZGF0YUZldGNoZXJSb3V0ZU5hbWUiLCJyZXF1ZXN0ZWRSb3V0ZU5hbWUiLCJwYXRobmFtZSIsImRhdGFGZXRjaGluZ01ldGhvZE5hbWUiLCJ3aXRoU2VudHJ5U2VydmVyU2lkZURvY3VtZW50R2V0SW5pdGlhbFByb3BzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapDocumentGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapErrorGetInitialPropsWithSentry.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/wrapErrorGetInitialPropsWithSentry.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withSentryServerSideErrorGetInitialProps: () => (/* binding */ withSentryServerSideErrorGetInitialProps),\n/* harmony export */   wrapErrorGetInitialPropsWithSentry: () => (/* binding */ wrapErrorGetInitialPropsWithSentry)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/hubextensions.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/baggage.js\");\n/* harmony import */ var _utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/isBuild.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/isBuild.js\");\n/* harmony import */ var _utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/wrapperUtils.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/wrapperUtils.js\");\n\n\n\n\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom error page (\"_error.js\").\n *\n * @param origErrorGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */ function wrapErrorGetInitialPropsWithSentry(origErrorGetInitialProps) {\n    return new Proxy(origErrorGetInitialProps, {\n        apply: async (wrappingTarget, thisArg, args)=>{\n            if ((0,_utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__.isBuild)()) {\n                return wrappingTarget.apply(thisArg, args);\n            }\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.addTracingExtensions)();\n            const [context] = args;\n            const { req, res } = context;\n            const errorWrappedGetInitialProps = (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_2__.withErrorInstrumentation)(wrappingTarget);\n            const hub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.getCurrentHub)();\n            const options = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__._optionalChain)([\n                hub,\n                \"access\",\n                (_)=>_.getClient,\n                \"call\",\n                (_2)=>_2(),\n                \"optionalAccess\",\n                (_3)=>_3.getOptions,\n                \"call\",\n                (_4)=>_4()\n            ]);\n            // Generally we can assume that `req` and `res` are always defined on the server:\n            // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n            // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n            // span with each other when there are no req or res objects, we simply do not trace them at all here.\n            if (req && res && (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__._optionalChain)([\n                options,\n                \"optionalAccess\",\n                (_5)=>_5.instrumenter\n            ]) === \"sentry\") {\n                const tracedGetInitialProps = (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_2__.withTracedServerSideDataFetcher)(errorWrappedGetInitialProps, req, res, {\n                    dataFetcherRouteName: \"/_error\",\n                    requestedRouteName: context.pathname,\n                    dataFetchingMethodName: \"getInitialProps\"\n                });\n                const errorGetInitialProps = await tracedGetInitialProps.apply(thisArg, args);\n                const requestTransaction = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._nullishCoalesce)((0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_2__.getTransactionFromRequest)(req), ()=>hub.getScope().getTransaction());\n                if (requestTransaction) {\n                    errorGetInitialProps._sentryTraceData = requestTransaction.toTraceparent();\n                    const dynamicSamplingContext = requestTransaction.getDynamicSamplingContext();\n                    errorGetInitialProps._sentryBaggage = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__.dynamicSamplingContextToSentryBaggageHeader)(dynamicSamplingContext);\n                }\n                return errorGetInitialProps;\n            } else {\n                return errorWrappedGetInitialProps.apply(thisArg, args);\n            }\n        }\n    });\n}\n/**\n * @deprecated Use `wrapErrorGetInitialPropsWithSentry` instead.\n */ const withSentryServerSideErrorGetInitialProps = wrapErrorGetInitialPropsWithSentry;\n //# sourceMappingURL=wrapErrorGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvZXNtL2NvbW1vbi93cmFwRXJyb3JHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFpRTtBQUNFO0FBQ1M7QUFDL0I7QUFDa0Y7QUFFL0g7Ozs7Ozs7Q0FPQyxHQUNELFNBQVNTLG1DQUNQQyx3QkFBd0I7SUFFeEIsT0FBTyxJQUFJQyxNQUFNRCwwQkFBMEI7UUFDekNFLE9BQU8sT0FBT0MsZ0JBQWdCQyxTQUFTQztZQUNyQyxJQUFJViwwREFBT0EsSUFBSTtnQkFDYixPQUFPUSxlQUFlRCxLQUFLLENBQUNFLFNBQVNDO1lBQ3ZDO1lBRUFiLGtFQUFvQkE7WUFFcEIsTUFBTSxDQUFDYyxRQUFRLEdBQUdEO1lBQ2xCLE1BQU0sRUFBRUUsR0FBRyxFQUFFQyxHQUFHLEVBQUUsR0FBR0Y7WUFFckIsTUFBTUcsOEJBQThCWCxnRkFBd0JBLENBQUNLO1lBQzdELE1BQU1PLE1BQU1qQiwyREFBYUE7WUFDekIsTUFBTWtCLFVBQVVwQiw2REFBY0EsQ0FBQztnQkFBQ21CO2dCQUFLO2dCQUFVRSxDQUFBQSxJQUFLQSxFQUFFQyxTQUFTO2dCQUFFO2dCQUFRQyxDQUFBQSxLQUFNQTtnQkFBTTtnQkFBa0JDLENBQUFBLEtBQU1BLEdBQUdDLFVBQVU7Z0JBQUU7Z0JBQVFDLENBQUFBLEtBQU1BO2FBQUs7WUFFL0ksaUZBQWlGO1lBQ2pGLHVGQUF1RjtZQUN2RixrSEFBa0g7WUFDbEgsc0dBQXNHO1lBQ3RHLElBQUlWLE9BQU9DLE9BQU9qQiw2REFBY0EsQ0FBQztnQkFBQ29CO2dCQUFTO2dCQUFrQk8sQ0FBQUEsS0FBTUEsR0FBR0MsWUFBWTthQUFDLE1BQU0sVUFBVTtnQkFDakcsTUFBTUMsd0JBQXdCeEIsdUZBQStCQSxDQUFDYSw2QkFBNkJGLEtBQUtDLEtBQUs7b0JBQ25HYSxzQkFBc0I7b0JBQ3RCQyxvQkFBb0JoQixRQUFRaUIsUUFBUTtvQkFDcENDLHdCQUF3QjtnQkFDMUI7Z0JBRUEsTUFBTUMsdUJBRVgsTUFBTUwsc0JBQXNCbEIsS0FBSyxDQUFDRSxTQUFTQztnQkFFdEMsTUFBTXFCLHFCQUFxQnBDLCtEQUFnQkEsQ0FBQ08saUZBQXlCQSxDQUFDVSxNQUFNLElBQVFHLElBQUlpQixRQUFRLEdBQUdDLGNBQWM7Z0JBQ2pILElBQUlGLG9CQUFvQjtvQkFDdEJELHFCQUFxQkksZ0JBQWdCLEdBQUdILG1CQUFtQkksYUFBYTtvQkFFeEUsTUFBTUMseUJBQXlCTCxtQkFBbUJNLHlCQUF5QjtvQkFDM0VQLHFCQUFxQlEsY0FBYyxHQUFHdkMsMEZBQTJDQSxDQUFDcUM7Z0JBQ3BGO2dCQUVBLE9BQU9OO1lBQ1QsT0FBTztnQkFDTCxPQUFPaEIsNEJBQTRCUCxLQUFLLENBQUNFLFNBQVNDO1lBQ3BEO1FBQ0Y7SUFDRjtBQUNGO0FBRUE7O0NBRUMsR0FDRCxNQUFNNkIsMkNBQTJDbkM7QUFFdUMsQ0FDeEYsOERBQThEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2VzbS9jb21tb24vd3JhcEVycm9yR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcz8zYzAxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9udWxsaXNoQ29hbGVzY2UsIF9vcHRpb25hbENoYWluIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBhZGRUcmFjaW5nRXh0ZW5zaW9ucywgZ2V0Q3VycmVudEh1YiB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBkeW5hbWljU2FtcGxpbmdDb250ZXh0VG9TZW50cnlCYWdnYWdlSGVhZGVyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBpc0J1aWxkIH0gZnJvbSAnLi91dGlscy9pc0J1aWxkLmpzJztcbmltcG9ydCB7IHdpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIsIGdldFRyYW5zYWN0aW9uRnJvbVJlcXVlc3QsIHdpdGhFcnJvckluc3RydW1lbnRhdGlvbiB9IGZyb20gJy4vdXRpbHMvd3JhcHBlclV0aWxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIHVzZXIncyBleHBvcnRlZCBgZ2V0SW5pdGlhbFByb3BzYCBmdW5jdGlvbiBpblxuICogYSBjdXN0b20gZXJyb3IgcGFnZSAoXCJfZXJyb3IuanNcIikuXG4gKlxuICogQHBhcmFtIG9yaWdFcnJvckdldEluaXRpYWxQcm9wcyBUaGUgdXNlcidzIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcGFyYW1ldGVyaXplZFJvdXRlIFRoZSBwYWdlJ3MgcGFyYW1ldGVyaXplZCByb3V0ZVxuICogQHJldHVybnMgQSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHdyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkoXG4gIG9yaWdFcnJvckdldEluaXRpYWxQcm9wcyxcbikge1xuICByZXR1cm4gbmV3IFByb3h5KG9yaWdFcnJvckdldEluaXRpYWxQcm9wcywge1xuICAgIGFwcGx5OiBhc3luYyAod3JhcHBpbmdUYXJnZXQsIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGlmIChpc0J1aWxkKCkpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwaW5nVGFyZ2V0LmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICBhZGRUcmFjaW5nRXh0ZW5zaW9ucygpO1xuXG4gICAgICBjb25zdCBbY29udGV4dF0gPSBhcmdzO1xuICAgICAgY29uc3QgeyByZXEsIHJlcyB9ID0gY29udGV4dDtcblxuICAgICAgY29uc3QgZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzID0gd2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uKHdyYXBwaW5nVGFyZ2V0KTtcbiAgICAgIGNvbnN0IGh1YiA9IGdldEN1cnJlbnRIdWIoKTtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSBfb3B0aW9uYWxDaGFpbihbaHViLCAnYWNjZXNzJywgXyA9PiBfLmdldENsaWVudCwgJ2NhbGwnLCBfMiA9PiBfMigpLCAnb3B0aW9uYWxBY2Nlc3MnLCBfMyA9PiBfMy5nZXRPcHRpb25zLCAnY2FsbCcsIF80ID0+IF80KCldKTtcblxuICAgICAgLy8gR2VuZXJhbGx5IHdlIGNhbiBhc3N1bWUgdGhhdCBgcmVxYCBhbmQgYHJlc2AgYXJlIGFsd2F5cyBkZWZpbmVkIG9uIHRoZSBzZXJ2ZXI6XG4gICAgICAvLyBodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL2RhdGEtZmV0Y2hpbmcvZ2V0LWluaXRpYWwtcHJvcHMjY29udGV4dC1vYmplY3RcbiAgICAgIC8vIFRoaXMgZG9lcyBub3Qgc2VlbSB0byBiZSB0aGUgY2FzZSBpbiBkZXYgbW9kZS4gQmVjYXVzZSB3ZSBoYXZlIG5vIGNsZWFuIHdheSBvZiBhc3NvY2lhdGluZyB0aGUgdGhlIGRhdGEgZmV0Y2hlclxuICAgICAgLy8gc3BhbiB3aXRoIGVhY2ggb3RoZXIgd2hlbiB0aGVyZSBhcmUgbm8gcmVxIG9yIHJlcyBvYmplY3RzLCB3ZSBzaW1wbHkgZG8gbm90IHRyYWNlIHRoZW0gYXQgYWxsIGhlcmUuXG4gICAgICBpZiAocmVxICYmIHJlcyAmJiBfb3B0aW9uYWxDaGFpbihbb3B0aW9ucywgJ29wdGlvbmFsQWNjZXNzJywgXzUgPT4gXzUuaW5zdHJ1bWVudGVyXSkgPT09ICdzZW50cnknKSB7XG4gICAgICAgIGNvbnN0IHRyYWNlZEdldEluaXRpYWxQcm9wcyA9IHdpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIoZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzLCByZXEsIHJlcywge1xuICAgICAgICAgIGRhdGFGZXRjaGVyUm91dGVOYW1lOiAnL19lcnJvcicsXG4gICAgICAgICAgcmVxdWVzdGVkUm91dGVOYW1lOiBjb250ZXh0LnBhdGhuYW1lLFxuICAgICAgICAgIGRhdGFGZXRjaGluZ01ldGhvZE5hbWU6ICdnZXRJbml0aWFsUHJvcHMnLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBlcnJvckdldEluaXRpYWxQcm9wc1xuXG4gPSBhd2FpdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncyk7XG5cbiAgICAgICAgY29uc3QgcmVxdWVzdFRyYW5zYWN0aW9uID0gX251bGxpc2hDb2FsZXNjZShnZXRUcmFuc2FjdGlvbkZyb21SZXF1ZXN0KHJlcSksICgpID0+ICggaHViLmdldFNjb3BlKCkuZ2V0VHJhbnNhY3Rpb24oKSkpO1xuICAgICAgICBpZiAocmVxdWVzdFRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgZXJyb3JHZXRJbml0aWFsUHJvcHMuX3NlbnRyeVRyYWNlRGF0YSA9IHJlcXVlc3RUcmFuc2FjdGlvbi50b1RyYWNlcGFyZW50KCk7XG5cbiAgICAgICAgICBjb25zdCBkeW5hbWljU2FtcGxpbmdDb250ZXh0ID0gcmVxdWVzdFRyYW5zYWN0aW9uLmdldER5bmFtaWNTYW1wbGluZ0NvbnRleHQoKTtcbiAgICAgICAgICBlcnJvckdldEluaXRpYWxQcm9wcy5fc2VudHJ5QmFnZ2FnZSA9IGR5bmFtaWNTYW1wbGluZ0NvbnRleHRUb1NlbnRyeUJhZ2dhZ2VIZWFkZXIoZHluYW1pY1NhbXBsaW5nQ29udGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXJyb3JHZXRJbml0aWFsUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIFVzZSBgd3JhcEVycm9yR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeWAgaW5zdGVhZC5cbiAqL1xuY29uc3Qgd2l0aFNlbnRyeVNlcnZlclNpZGVFcnJvckdldEluaXRpYWxQcm9wcyA9IHdyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnk7XG5cbmV4cG9ydCB7IHdpdGhTZW50cnlTZXJ2ZXJTaWRlRXJyb3JHZXRJbml0aWFsUHJvcHMsIHdyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOlsiX251bGxpc2hDb2FsZXNjZSIsIl9vcHRpb25hbENoYWluIiwiYWRkVHJhY2luZ0V4dGVuc2lvbnMiLCJnZXRDdXJyZW50SHViIiwiZHluYW1pY1NhbXBsaW5nQ29udGV4dFRvU2VudHJ5QmFnZ2FnZUhlYWRlciIsImlzQnVpbGQiLCJ3aXRoVHJhY2VkU2VydmVyU2lkZURhdGFGZXRjaGVyIiwiZ2V0VHJhbnNhY3Rpb25Gcm9tUmVxdWVzdCIsIndpdGhFcnJvckluc3RydW1lbnRhdGlvbiIsIndyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkiLCJvcmlnRXJyb3JHZXRJbml0aWFsUHJvcHMiLCJQcm94eSIsImFwcGx5Iiwid3JhcHBpbmdUYXJnZXQiLCJ0aGlzQXJnIiwiYXJncyIsImNvbnRleHQiLCJyZXEiLCJyZXMiLCJlcnJvcldyYXBwZWRHZXRJbml0aWFsUHJvcHMiLCJodWIiLCJvcHRpb25zIiwiXyIsImdldENsaWVudCIsIl8yIiwiXzMiLCJnZXRPcHRpb25zIiwiXzQiLCJfNSIsImluc3RydW1lbnRlciIsInRyYWNlZEdldEluaXRpYWxQcm9wcyIsImRhdGFGZXRjaGVyUm91dGVOYW1lIiwicmVxdWVzdGVkUm91dGVOYW1lIiwicGF0aG5hbWUiLCJkYXRhRmV0Y2hpbmdNZXRob2ROYW1lIiwiZXJyb3JHZXRJbml0aWFsUHJvcHMiLCJyZXF1ZXN0VHJhbnNhY3Rpb24iLCJnZXRTY29wZSIsImdldFRyYW5zYWN0aW9uIiwiX3NlbnRyeVRyYWNlRGF0YSIsInRvVHJhY2VwYXJlbnQiLCJkeW5hbWljU2FtcGxpbmdDb250ZXh0IiwiZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dCIsIl9zZW50cnlCYWdnYWdlIiwid2l0aFNlbnRyeVNlcnZlclNpZGVFcnJvckdldEluaXRpYWxQcm9wcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapErrorGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapGetInitialPropsWithSentry.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/wrapGetInitialPropsWithSentry.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withSentryServerSideGetInitialProps: () => (/* binding */ withSentryServerSideGetInitialProps),\n/* harmony export */   wrapGetInitialPropsWithSentry: () => (/* binding */ wrapGetInitialPropsWithSentry)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_asyncNullishCoalesce.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/hubextensions.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/baggage.js\");\n/* harmony import */ var _utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/isBuild.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/isBuild.js\");\n/* harmony import */ var _utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/wrapperUtils.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/wrapperUtils.js\");\n\n\n\n\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function\n *\n * @param origGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */ function wrapGetInitialPropsWithSentry(origGetInitialProps) {\n    return new Proxy(origGetInitialProps, {\n        apply: async (wrappingTarget, thisArg, args)=>{\n            if ((0,_utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__.isBuild)()) {\n                return wrappingTarget.apply(thisArg, args);\n            }\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.addTracingExtensions)();\n            const [context] = args;\n            const { req, res } = context;\n            const errorWrappedGetInitialProps = (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_2__.withErrorInstrumentation)(wrappingTarget);\n            const hub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.getCurrentHub)();\n            const options = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__._optionalChain)([\n                hub,\n                \"access\",\n                (_)=>_.getClient,\n                \"call\",\n                (_2)=>_2(),\n                \"optionalAccess\",\n                (_3)=>_3.getOptions,\n                \"call\",\n                (_4)=>_4()\n            ]);\n            // Generally we can assume that `req` and `res` are always defined on the server:\n            // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n            // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n            // span with each other when there are no req or res objects, we simply do not trace them at all here.\n            if (req && res && (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__._optionalChain)([\n                options,\n                \"optionalAccess\",\n                (_5)=>_5.instrumenter\n            ]) === \"sentry\") {\n                const tracedGetInitialProps = (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_2__.withTracedServerSideDataFetcher)(errorWrappedGetInitialProps, req, res, {\n                    dataFetcherRouteName: context.pathname,\n                    requestedRouteName: context.pathname,\n                    dataFetchingMethodName: \"getInitialProps\"\n                });\n                const initialProps = await (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._asyncNullishCoalesce)(await tracedGetInitialProps.apply(thisArg, args), async ()=>({})); // Next.js allows undefined to be returned from a getInitialPropsFunction.\n                const requestTransaction = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__._nullishCoalesce)((0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_2__.getTransactionFromRequest)(req), ()=>hub.getScope().getTransaction());\n                if (requestTransaction) {\n                    initialProps._sentryTraceData = requestTransaction.toTraceparent();\n                    const dynamicSamplingContext = requestTransaction.getDynamicSamplingContext();\n                    initialProps._sentryBaggage = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_7__.dynamicSamplingContextToSentryBaggageHeader)(dynamicSamplingContext);\n                }\n                return initialProps;\n            } else {\n                return errorWrappedGetInitialProps.apply(thisArg, args);\n            }\n        }\n    });\n}\n/**\n * @deprecated Use `wrapGetInitialPropsWithSentry` instead.\n */ const withSentryServerSideGetInitialProps = wrapGetInitialPropsWithSentry;\n //# sourceMappingURL=wrapGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvZXNtL2NvbW1vbi93cmFwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQXdGO0FBQ3JCO0FBQ1M7QUFDL0I7QUFDa0Y7QUFFL0g7Ozs7OztDQU1DLEdBQ0QsU0FBU1UsOEJBQThCQyxtQkFBbUI7SUFDeEQsT0FBTyxJQUFJQyxNQUFNRCxxQkFBcUI7UUFDcENFLE9BQU8sT0FBT0MsZ0JBQWdCQyxTQUFTQztZQUNyQyxJQUFJViwwREFBT0EsSUFBSTtnQkFDYixPQUFPUSxlQUFlRCxLQUFLLENBQUNFLFNBQVNDO1lBQ3ZDO1lBRUFiLGtFQUFvQkE7WUFFcEIsTUFBTSxDQUFDYyxRQUFRLEdBQUdEO1lBQ2xCLE1BQU0sRUFBRUUsR0FBRyxFQUFFQyxHQUFHLEVBQUUsR0FBR0Y7WUFFckIsTUFBTUcsOEJBQThCWCxnRkFBd0JBLENBQUNLO1lBQzdELE1BQU1PLE1BQU1qQiwyREFBYUE7WUFDekIsTUFBTWtCLFVBQVVwQiw2REFBY0EsQ0FBQztnQkFBQ21CO2dCQUFLO2dCQUFVRSxDQUFBQSxJQUFLQSxFQUFFQyxTQUFTO2dCQUFFO2dCQUFRQyxDQUFBQSxLQUFNQTtnQkFBTTtnQkFBa0JDLENBQUFBLEtBQU1BLEdBQUdDLFVBQVU7Z0JBQUU7Z0JBQVFDLENBQUFBLEtBQU1BO2FBQUs7WUFFL0ksaUZBQWlGO1lBQ2pGLHVGQUF1RjtZQUN2RixrSEFBa0g7WUFDbEgsc0dBQXNHO1lBQ3RHLElBQUlWLE9BQU9DLE9BQU9qQiw2REFBY0EsQ0FBQztnQkFBQ29CO2dCQUFTO2dCQUFrQk8sQ0FBQUEsS0FBTUEsR0FBR0MsWUFBWTthQUFDLE1BQU0sVUFBVTtnQkFDakcsTUFBTUMsd0JBQXdCeEIsdUZBQStCQSxDQUFDYSw2QkFBNkJGLEtBQUtDLEtBQUs7b0JBQ25HYSxzQkFBc0JmLFFBQVFnQixRQUFRO29CQUN0Q0Msb0JBQW9CakIsUUFBUWdCLFFBQVE7b0JBQ3BDRSx3QkFBd0I7Z0JBQzFCO2dCQUVBLE1BQU1DLGVBRVgsTUFBTW5DLG9FQUFxQkEsQ0FBRSxNQUFNOEIsc0JBQXNCbEIsS0FBSyxDQUFDRSxTQUFTQyxPQUFRLFVBQWMsRUFBQyxLQUFLLDBFQUEwRTtnQkFFekssTUFBTXFCLHFCQUFxQnJDLCtEQUFnQkEsQ0FBQ1EsaUZBQXlCQSxDQUFDVSxNQUFNLElBQVFHLElBQUlpQixRQUFRLEdBQUdDLGNBQWM7Z0JBQ2pILElBQUlGLG9CQUFvQjtvQkFDdEJELGFBQWFJLGdCQUFnQixHQUFHSCxtQkFBbUJJLGFBQWE7b0JBRWhFLE1BQU1DLHlCQUF5QkwsbUJBQW1CTSx5QkFBeUI7b0JBQzNFUCxhQUFhUSxjQUFjLEdBQUd2QywwRkFBMkNBLENBQUNxQztnQkFDNUU7Z0JBRUEsT0FBT047WUFDVCxPQUFPO2dCQUNMLE9BQU9oQiw0QkFBNEJQLEtBQUssQ0FBQ0UsU0FBU0M7WUFDcEQ7UUFDRjtJQUNGO0FBQ0Y7QUFFQTs7Q0FFQyxHQUNELE1BQU02QixzQ0FBc0NuQztBQUVrQyxDQUM5RSx5REFBeUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvZXNtL2NvbW1vbi93cmFwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcz9jYTVhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9udWxsaXNoQ29hbGVzY2UsIF9hc3luY051bGxpc2hDb2FsZXNjZSwgX29wdGlvbmFsQ2hhaW4gfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IGFkZFRyYWNpbmdFeHRlbnNpb25zLCBnZXRDdXJyZW50SHViIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IGR5bmFtaWNTYW1wbGluZ0NvbnRleHRUb1NlbnRyeUJhZ2dhZ2VIZWFkZXIgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IGlzQnVpbGQgfSBmcm9tICcuL3V0aWxzL2lzQnVpbGQuanMnO1xuaW1wb3J0IHsgd2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlciwgZ2V0VHJhbnNhY3Rpb25Gcm9tUmVxdWVzdCwgd2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uIH0gZnJvbSAnLi91dGlscy93cmFwcGVyVXRpbHMuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgdXNlcidzIGV4cG9ydGVkIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIG9yaWdHZXRJbml0aWFsUHJvcHMgVGhlIHVzZXIncyBgZ2V0SW5pdGlhbFByb3BzYCBmdW5jdGlvblxuICogQHBhcmFtIHBhcmFtZXRlcml6ZWRSb3V0ZSBUaGUgcGFnZSdzIHBhcmFtZXRlcml6ZWQgcm91dGVcbiAqIEByZXR1cm5zIEEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSBmdW5jdGlvblxuICovXG5mdW5jdGlvbiB3cmFwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeShvcmlnR2V0SW5pdGlhbFByb3BzKSB7XG4gIHJldHVybiBuZXcgUHJveHkob3JpZ0dldEluaXRpYWxQcm9wcywge1xuICAgIGFwcGx5OiBhc3luYyAod3JhcHBpbmdUYXJnZXQsIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGlmIChpc0J1aWxkKCkpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwaW5nVGFyZ2V0LmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICBhZGRUcmFjaW5nRXh0ZW5zaW9ucygpO1xuXG4gICAgICBjb25zdCBbY29udGV4dF0gPSBhcmdzO1xuICAgICAgY29uc3QgeyByZXEsIHJlcyB9ID0gY29udGV4dDtcblxuICAgICAgY29uc3QgZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzID0gd2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uKHdyYXBwaW5nVGFyZ2V0KTtcbiAgICAgIGNvbnN0IGh1YiA9IGdldEN1cnJlbnRIdWIoKTtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSBfb3B0aW9uYWxDaGFpbihbaHViLCAnYWNjZXNzJywgXyA9PiBfLmdldENsaWVudCwgJ2NhbGwnLCBfMiA9PiBfMigpLCAnb3B0aW9uYWxBY2Nlc3MnLCBfMyA9PiBfMy5nZXRPcHRpb25zLCAnY2FsbCcsIF80ID0+IF80KCldKTtcblxuICAgICAgLy8gR2VuZXJhbGx5IHdlIGNhbiBhc3N1bWUgdGhhdCBgcmVxYCBhbmQgYHJlc2AgYXJlIGFsd2F5cyBkZWZpbmVkIG9uIHRoZSBzZXJ2ZXI6XG4gICAgICAvLyBodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL2RhdGEtZmV0Y2hpbmcvZ2V0LWluaXRpYWwtcHJvcHMjY29udGV4dC1vYmplY3RcbiAgICAgIC8vIFRoaXMgZG9lcyBub3Qgc2VlbSB0byBiZSB0aGUgY2FzZSBpbiBkZXYgbW9kZS4gQmVjYXVzZSB3ZSBoYXZlIG5vIGNsZWFuIHdheSBvZiBhc3NvY2lhdGluZyB0aGUgdGhlIGRhdGEgZmV0Y2hlclxuICAgICAgLy8gc3BhbiB3aXRoIGVhY2ggb3RoZXIgd2hlbiB0aGVyZSBhcmUgbm8gcmVxIG9yIHJlcyBvYmplY3RzLCB3ZSBzaW1wbHkgZG8gbm90IHRyYWNlIHRoZW0gYXQgYWxsIGhlcmUuXG4gICAgICBpZiAocmVxICYmIHJlcyAmJiBfb3B0aW9uYWxDaGFpbihbb3B0aW9ucywgJ29wdGlvbmFsQWNjZXNzJywgXzUgPT4gXzUuaW5zdHJ1bWVudGVyXSkgPT09ICdzZW50cnknKSB7XG4gICAgICAgIGNvbnN0IHRyYWNlZEdldEluaXRpYWxQcm9wcyA9IHdpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIoZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzLCByZXEsIHJlcywge1xuICAgICAgICAgIGRhdGFGZXRjaGVyUm91dGVOYW1lOiBjb250ZXh0LnBhdGhuYW1lLFxuICAgICAgICAgIHJlcXVlc3RlZFJvdXRlTmFtZTogY29udGV4dC5wYXRobmFtZSxcbiAgICAgICAgICBkYXRhRmV0Y2hpbmdNZXRob2ROYW1lOiAnZ2V0SW5pdGlhbFByb3BzJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgaW5pdGlhbFByb3BzXG5cbiA9IGF3YWl0IF9hc3luY051bGxpc2hDb2FsZXNjZSgoYXdhaXQgdHJhY2VkR2V0SW5pdGlhbFByb3BzLmFwcGx5KHRoaXNBcmcsIGFyZ3MpKSwgYXN5bmMgKCkgPT4gKCB7fSkpOyAvLyBOZXh0LmpzIGFsbG93cyB1bmRlZmluZWQgdG8gYmUgcmV0dXJuZWQgZnJvbSBhIGdldEluaXRpYWxQcm9wc0Z1bmN0aW9uLlxuXG4gICAgICAgIGNvbnN0IHJlcXVlc3RUcmFuc2FjdGlvbiA9IF9udWxsaXNoQ29hbGVzY2UoZ2V0VHJhbnNhY3Rpb25Gcm9tUmVxdWVzdChyZXEpLCAoKSA9PiAoIGh1Yi5nZXRTY29wZSgpLmdldFRyYW5zYWN0aW9uKCkpKTtcbiAgICAgICAgaWYgKHJlcXVlc3RUcmFuc2FjdGlvbikge1xuICAgICAgICAgIGluaXRpYWxQcm9wcy5fc2VudHJ5VHJhY2VEYXRhID0gcmVxdWVzdFRyYW5zYWN0aW9uLnRvVHJhY2VwYXJlbnQoKTtcblxuICAgICAgICAgIGNvbnN0IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgPSByZXF1ZXN0VHJhbnNhY3Rpb24uZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dCgpO1xuICAgICAgICAgIGluaXRpYWxQcm9wcy5fc2VudHJ5QmFnZ2FnZSA9IGR5bmFtaWNTYW1wbGluZ0NvbnRleHRUb1NlbnRyeUJhZ2dhZ2VIZWFkZXIoZHluYW1pY1NhbXBsaW5nQ29udGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5pdGlhbFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgYHdyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5YCBpbnN0ZWFkLlxuICovXG5jb25zdCB3aXRoU2VudHJ5U2VydmVyU2lkZUdldEluaXRpYWxQcm9wcyA9IHdyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5O1xuXG5leHBvcnQgeyB3aXRoU2VudHJ5U2VydmVyU2lkZUdldEluaXRpYWxQcm9wcywgd3JhcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbIl9udWxsaXNoQ29hbGVzY2UiLCJfYXN5bmNOdWxsaXNoQ29hbGVzY2UiLCJfb3B0aW9uYWxDaGFpbiIsImFkZFRyYWNpbmdFeHRlbnNpb25zIiwiZ2V0Q3VycmVudEh1YiIsImR5bmFtaWNTYW1wbGluZ0NvbnRleHRUb1NlbnRyeUJhZ2dhZ2VIZWFkZXIiLCJpc0J1aWxkIiwid2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlciIsImdldFRyYW5zYWN0aW9uRnJvbVJlcXVlc3QiLCJ3aXRoRXJyb3JJbnN0cnVtZW50YXRpb24iLCJ3cmFwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeSIsIm9yaWdHZXRJbml0aWFsUHJvcHMiLCJQcm94eSIsImFwcGx5Iiwid3JhcHBpbmdUYXJnZXQiLCJ0aGlzQXJnIiwiYXJncyIsImNvbnRleHQiLCJyZXEiLCJyZXMiLCJlcnJvcldyYXBwZWRHZXRJbml0aWFsUHJvcHMiLCJodWIiLCJvcHRpb25zIiwiXyIsImdldENsaWVudCIsIl8yIiwiXzMiLCJnZXRPcHRpb25zIiwiXzQiLCJfNSIsImluc3RydW1lbnRlciIsInRyYWNlZEdldEluaXRpYWxQcm9wcyIsImRhdGFGZXRjaGVyUm91dGVOYW1lIiwicGF0aG5hbWUiLCJyZXF1ZXN0ZWRSb3V0ZU5hbWUiLCJkYXRhRmV0Y2hpbmdNZXRob2ROYW1lIiwiaW5pdGlhbFByb3BzIiwicmVxdWVzdFRyYW5zYWN0aW9uIiwiZ2V0U2NvcGUiLCJnZXRUcmFuc2FjdGlvbiIsIl9zZW50cnlUcmFjZURhdGEiLCJ0b1RyYWNlcGFyZW50IiwiZHluYW1pY1NhbXBsaW5nQ29udGV4dCIsImdldER5bmFtaWNTYW1wbGluZ0NvbnRleHQiLCJfc2VudHJ5QmFnZ2FnZSIsIndpdGhTZW50cnlTZXJ2ZXJTaWRlR2V0SW5pdGlhbFByb3BzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapGetServerSidePropsWithSentry.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/wrapGetServerSidePropsWithSentry.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withSentryGetServerSideProps: () => (/* binding */ withSentryGetServerSideProps),\n/* harmony export */   wrapGetServerSidePropsWithSentry: () => (/* binding */ wrapGetServerSidePropsWithSentry)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/hubextensions.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/baggage.js\");\n/* harmony import */ var _utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/isBuild.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/isBuild.js\");\n/* harmony import */ var _utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/wrapperUtils.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/wrapperUtils.js\");\n\n\n\n\n\n/**\n * Create a wrapped version of the user's exported `getServerSideProps` function\n *\n * @param origGetServerSideProps The user's `getServerSideProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */ function wrapGetServerSidePropsWithSentry(origGetServerSideProps, parameterizedRoute) {\n    return new Proxy(origGetServerSideProps, {\n        apply: async (wrappingTarget, thisArg, args)=>{\n            if ((0,_utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__.isBuild)()) {\n                return wrappingTarget.apply(thisArg, args);\n            }\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.addTracingExtensions)();\n            const [context] = args;\n            const { req, res } = context;\n            const errorWrappedGetServerSideProps = (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_2__.withErrorInstrumentation)(wrappingTarget);\n            const hub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.getCurrentHub)();\n            const options = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__._optionalChain)([\n                hub,\n                \"access\",\n                (_)=>_.getClient,\n                \"call\",\n                (_2)=>_2(),\n                \"optionalAccess\",\n                (_3)=>_3.getOptions,\n                \"call\",\n                (_4)=>_4()\n            ]);\n            if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__._optionalChain)([\n                options,\n                \"optionalAccess\",\n                (_5)=>_5.instrumenter\n            ]) === \"sentry\") {\n                const tracedGetServerSideProps = (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_2__.withTracedServerSideDataFetcher)(errorWrappedGetServerSideProps, req, res, {\n                    dataFetcherRouteName: parameterizedRoute,\n                    requestedRouteName: parameterizedRoute,\n                    dataFetchingMethodName: \"getServerSideProps\"\n                });\n                const serverSideProps = await tracedGetServerSideProps.apply(thisArg, args);\n                if (serverSideProps && \"props\" in serverSideProps) {\n                    const requestTransaction = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._nullishCoalesce)((0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_2__.getTransactionFromRequest)(req), ()=>hub.getScope().getTransaction());\n                    if (requestTransaction) {\n                        serverSideProps.props._sentryTraceData = requestTransaction.toTraceparent();\n                        const dynamicSamplingContext = requestTransaction.getDynamicSamplingContext();\n                        serverSideProps.props._sentryBaggage = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__.dynamicSamplingContextToSentryBaggageHeader)(dynamicSamplingContext);\n                    }\n                }\n                return serverSideProps;\n            } else {\n                return errorWrappedGetServerSideProps.apply(thisArg, args);\n            }\n        }\n    });\n}\n/**\n * @deprecated Use `withSentryGetServerSideProps` instead.\n */ const withSentryGetServerSideProps = wrapGetServerSidePropsWithSentry;\n //# sourceMappingURL=wrapGetServerSidePropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvZXNtL2NvbW1vbi93cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBaUU7QUFDRTtBQUNTO0FBQy9CO0FBQ2tGO0FBRS9IOzs7Ozs7Q0FNQyxHQUNELFNBQVNTLGlDQUNQQyxzQkFBc0IsRUFDdEJDLGtCQUFrQjtJQUVsQixPQUFPLElBQUlDLE1BQU1GLHdCQUF3QjtRQUN2Q0csT0FBTyxPQUFPQyxnQkFBZ0JDLFNBQVNDO1lBQ3JDLElBQUlYLDBEQUFPQSxJQUFJO2dCQUNiLE9BQU9TLGVBQWVELEtBQUssQ0FBQ0UsU0FBU0M7WUFDdkM7WUFFQWQsa0VBQW9CQTtZQUVwQixNQUFNLENBQUNlLFFBQVEsR0FBR0Q7WUFDbEIsTUFBTSxFQUFFRSxHQUFHLEVBQUVDLEdBQUcsRUFBRSxHQUFHRjtZQUVyQixNQUFNRyxpQ0FBaUNiLGdGQUF3QkEsQ0FBQ087WUFDaEUsTUFBTU8sTUFBTWxCLDJEQUFhQTtZQUN6QixNQUFNbUIsVUFBVXJCLDZEQUFjQSxDQUFDO2dCQUFDb0I7Z0JBQUs7Z0JBQVVFLENBQUFBLElBQUtBLEVBQUVDLFNBQVM7Z0JBQUU7Z0JBQVFDLENBQUFBLEtBQU1BO2dCQUFNO2dCQUFrQkMsQ0FBQUEsS0FBTUEsR0FBR0MsVUFBVTtnQkFBRTtnQkFBUUMsQ0FBQUEsS0FBTUE7YUFBSztZQUUvSSxJQUFJM0IsNkRBQWNBLENBQUM7Z0JBQUNxQjtnQkFBUztnQkFBa0JPLENBQUFBLEtBQU1BLEdBQUdDLFlBQVk7YUFBQyxNQUFNLFVBQVU7Z0JBQ25GLE1BQU1DLDJCQUEyQnZCLHVGQUErQkEsQ0FBQ1ksZ0NBQWdDRixLQUFLQyxLQUFLO29CQUN6R2Esc0JBQXNCckI7b0JBQ3RCc0Isb0JBQW9CdEI7b0JBQ3BCdUIsd0JBQXdCO2dCQUMxQjtnQkFFQSxNQUFNQyxrQkFBa0IsTUFBT0oseUJBQXlCbEIsS0FBSyxDQUFDRSxTQUFTQztnQkFJdkUsSUFBSW1CLG1CQUFtQixXQUFXQSxpQkFBaUI7b0JBQ2pELE1BQU1DLHFCQUFxQnBDLCtEQUFnQkEsQ0FBQ00saUZBQXlCQSxDQUFDWSxNQUFNLElBQVFHLElBQUlnQixRQUFRLEdBQUdDLGNBQWM7b0JBQ2pILElBQUlGLG9CQUFvQjt3QkFDdEJELGdCQUFnQkksS0FBSyxDQUFDQyxnQkFBZ0IsR0FBR0osbUJBQW1CSyxhQUFhO3dCQUV6RSxNQUFNQyx5QkFBeUJOLG1CQUFtQk8seUJBQXlCO3dCQUMzRVIsZ0JBQWdCSSxLQUFLLENBQUNLLGNBQWMsR0FBR3hDLDBGQUEyQ0EsQ0FBQ3NDO29CQUNyRjtnQkFDRjtnQkFFQSxPQUFPUDtZQUNULE9BQU87Z0JBQ0wsT0FBT2YsK0JBQStCUCxLQUFLLENBQUNFLFNBQVNDO1lBQ3ZEO1FBQ0Y7SUFDRjtBQUNGO0FBRUE7O0NBRUMsR0FDRCxNQUFNNkIsK0JBQStCcEM7QUFFcUMsQ0FDMUUsNERBQTREIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2VzbS9jb21tb24vd3JhcEdldFNlcnZlclNpZGVQcm9wc1dpdGhTZW50cnkuanM/MjI4MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfbnVsbGlzaENvYWxlc2NlLCBfb3B0aW9uYWxDaGFpbiB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgYWRkVHJhY2luZ0V4dGVuc2lvbnMsIGdldEN1cnJlbnRIdWIgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgZHluYW1pY1NhbXBsaW5nQ29udGV4dFRvU2VudHJ5QmFnZ2FnZUhlYWRlciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgaXNCdWlsZCB9IGZyb20gJy4vdXRpbHMvaXNCdWlsZC5qcyc7XG5pbXBvcnQgeyBnZXRUcmFuc2FjdGlvbkZyb21SZXF1ZXN0LCB3aXRoRXJyb3JJbnN0cnVtZW50YXRpb24sIHdpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIgfSBmcm9tICcuL3V0aWxzL3dyYXBwZXJVdGlscy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlIGEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSB1c2VyJ3MgZXhwb3J0ZWQgYGdldFNlcnZlclNpZGVQcm9wc2AgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0gb3JpZ0dldFNlcnZlclNpZGVQcm9wcyBUaGUgdXNlcidzIGBnZXRTZXJ2ZXJTaWRlUHJvcHNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcGFyYW1ldGVyaXplZFJvdXRlIFRoZSBwYWdlJ3MgcGFyYW1ldGVyaXplZCByb3V0ZVxuICogQHJldHVybnMgQSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHdyYXBHZXRTZXJ2ZXJTaWRlUHJvcHNXaXRoU2VudHJ5KFxuICBvcmlnR2V0U2VydmVyU2lkZVByb3BzLFxuICBwYXJhbWV0ZXJpemVkUm91dGUsXG4pIHtcbiAgcmV0dXJuIG5ldyBQcm94eShvcmlnR2V0U2VydmVyU2lkZVByb3BzLCB7XG4gICAgYXBwbHk6IGFzeW5jICh3cmFwcGluZ1RhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgaWYgKGlzQnVpbGQoKSkge1xuICAgICAgICByZXR1cm4gd3JhcHBpbmdUYXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGFkZFRyYWNpbmdFeHRlbnNpb25zKCk7XG5cbiAgICAgIGNvbnN0IFtjb250ZXh0XSA9IGFyZ3M7XG4gICAgICBjb25zdCB7IHJlcSwgcmVzIH0gPSBjb250ZXh0O1xuXG4gICAgICBjb25zdCBlcnJvcldyYXBwZWRHZXRTZXJ2ZXJTaWRlUHJvcHMgPSB3aXRoRXJyb3JJbnN0cnVtZW50YXRpb24od3JhcHBpbmdUYXJnZXQpO1xuICAgICAgY29uc3QgaHViID0gZ2V0Q3VycmVudEh1YigpO1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IF9vcHRpb25hbENoYWluKFtodWIsICdhY2Nlc3MnLCBfID0+IF8uZ2V0Q2xpZW50LCAnY2FsbCcsIF8yID0+IF8yKCksICdvcHRpb25hbEFjY2VzcycsIF8zID0+IF8zLmdldE9wdGlvbnMsICdjYWxsJywgXzQgPT4gXzQoKV0pO1xuXG4gICAgICBpZiAoX29wdGlvbmFsQ2hhaW4oW29wdGlvbnMsICdvcHRpb25hbEFjY2VzcycsIF81ID0+IF81Lmluc3RydW1lbnRlcl0pID09PSAnc2VudHJ5Jykge1xuICAgICAgICBjb25zdCB0cmFjZWRHZXRTZXJ2ZXJTaWRlUHJvcHMgPSB3aXRoVHJhY2VkU2VydmVyU2lkZURhdGFGZXRjaGVyKGVycm9yV3JhcHBlZEdldFNlcnZlclNpZGVQcm9wcywgcmVxLCByZXMsIHtcbiAgICAgICAgICBkYXRhRmV0Y2hlclJvdXRlTmFtZTogcGFyYW1ldGVyaXplZFJvdXRlLFxuICAgICAgICAgIHJlcXVlc3RlZFJvdXRlTmFtZTogcGFyYW1ldGVyaXplZFJvdXRlLFxuICAgICAgICAgIGRhdGFGZXRjaGluZ01ldGhvZE5hbWU6ICdnZXRTZXJ2ZXJTaWRlUHJvcHMnLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBzZXJ2ZXJTaWRlUHJvcHMgPSBhd2FpdCAodHJhY2VkR2V0U2VydmVyU2lkZVByb3BzLmFwcGx5KHRoaXNBcmcsIGFyZ3MpXG5cbik7XG5cbiAgICAgICAgaWYgKHNlcnZlclNpZGVQcm9wcyAmJiAncHJvcHMnIGluIHNlcnZlclNpZGVQcm9wcykge1xuICAgICAgICAgIGNvbnN0IHJlcXVlc3RUcmFuc2FjdGlvbiA9IF9udWxsaXNoQ29hbGVzY2UoZ2V0VHJhbnNhY3Rpb25Gcm9tUmVxdWVzdChyZXEpLCAoKSA9PiAoIGh1Yi5nZXRTY29wZSgpLmdldFRyYW5zYWN0aW9uKCkpKTtcbiAgICAgICAgICBpZiAocmVxdWVzdFRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICBzZXJ2ZXJTaWRlUHJvcHMucHJvcHMuX3NlbnRyeVRyYWNlRGF0YSA9IHJlcXVlc3RUcmFuc2FjdGlvbi50b1RyYWNlcGFyZW50KCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgPSByZXF1ZXN0VHJhbnNhY3Rpb24uZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dCgpO1xuICAgICAgICAgICAgc2VydmVyU2lkZVByb3BzLnByb3BzLl9zZW50cnlCYWdnYWdlID0gZHluYW1pY1NhbXBsaW5nQ29udGV4dFRvU2VudHJ5QmFnZ2FnZUhlYWRlcihkeW5hbWljU2FtcGxpbmdDb250ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VydmVyU2lkZVByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVycm9yV3JhcHBlZEdldFNlcnZlclNpZGVQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgYHdpdGhTZW50cnlHZXRTZXJ2ZXJTaWRlUHJvcHNgIGluc3RlYWQuXG4gKi9cbmNvbnN0IHdpdGhTZW50cnlHZXRTZXJ2ZXJTaWRlUHJvcHMgPSB3cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeTtcblxuZXhwb3J0IHsgd2l0aFNlbnRyeUdldFNlcnZlclNpZGVQcm9wcywgd3JhcEdldFNlcnZlclNpZGVQcm9wc1dpdGhTZW50cnkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBHZXRTZXJ2ZXJTaWRlUHJvcHNXaXRoU2VudHJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbIl9udWxsaXNoQ29hbGVzY2UiLCJfb3B0aW9uYWxDaGFpbiIsImFkZFRyYWNpbmdFeHRlbnNpb25zIiwiZ2V0Q3VycmVudEh1YiIsImR5bmFtaWNTYW1wbGluZ0NvbnRleHRUb1NlbnRyeUJhZ2dhZ2VIZWFkZXIiLCJpc0J1aWxkIiwiZ2V0VHJhbnNhY3Rpb25Gcm9tUmVxdWVzdCIsIndpdGhFcnJvckluc3RydW1lbnRhdGlvbiIsIndpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIiLCJ3cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeSIsIm9yaWdHZXRTZXJ2ZXJTaWRlUHJvcHMiLCJwYXJhbWV0ZXJpemVkUm91dGUiLCJQcm94eSIsImFwcGx5Iiwid3JhcHBpbmdUYXJnZXQiLCJ0aGlzQXJnIiwiYXJncyIsImNvbnRleHQiLCJyZXEiLCJyZXMiLCJlcnJvcldyYXBwZWRHZXRTZXJ2ZXJTaWRlUHJvcHMiLCJodWIiLCJvcHRpb25zIiwiXyIsImdldENsaWVudCIsIl8yIiwiXzMiLCJnZXRPcHRpb25zIiwiXzQiLCJfNSIsImluc3RydW1lbnRlciIsInRyYWNlZEdldFNlcnZlclNpZGVQcm9wcyIsImRhdGFGZXRjaGVyUm91dGVOYW1lIiwicmVxdWVzdGVkUm91dGVOYW1lIiwiZGF0YUZldGNoaW5nTWV0aG9kTmFtZSIsInNlcnZlclNpZGVQcm9wcyIsInJlcXVlc3RUcmFuc2FjdGlvbiIsImdldFNjb3BlIiwiZ2V0VHJhbnNhY3Rpb24iLCJwcm9wcyIsIl9zZW50cnlUcmFjZURhdGEiLCJ0b1RyYWNlcGFyZW50IiwiZHluYW1pY1NhbXBsaW5nQ29udGV4dCIsImdldER5bmFtaWNTYW1wbGluZ0NvbnRleHQiLCJfc2VudHJ5QmFnZ2FnZSIsIndpdGhTZW50cnlHZXRTZXJ2ZXJTaWRlUHJvcHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapGetServerSidePropsWithSentry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapGetStaticPropsWithSentry.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/wrapGetStaticPropsWithSentry.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withSentryGetStaticProps: () => (/* binding */ withSentryGetStaticProps),\n/* harmony export */   wrapGetStaticPropsWithSentry: () => (/* binding */ wrapGetStaticPropsWithSentry)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/hubextensions.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/exports.js\");\n/* harmony import */ var _utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/isBuild.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/isBuild.js\");\n/* harmony import */ var _utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/wrapperUtils.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/wrapperUtils.js\");\n\n\n\n\n/**\n * Create a wrapped version of the user's exported `getStaticProps` function\n *\n * @param origGetStaticProps The user's `getStaticProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */ function wrapGetStaticPropsWithSentry(origGetStaticPropsa, parameterizedRoute) {\n    return new Proxy(origGetStaticPropsa, {\n        apply: (wrappingTarget, thisArg, args)=>{\n            if ((0,_utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__.isBuild)()) {\n                return wrappingTarget.apply(thisArg, args);\n            }\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.addTracingExtensions)();\n            const errorWrappedGetStaticProps = (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_2__.withErrorInstrumentation)(wrappingTarget);\n            const options = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._optionalChain)([\n                _sentry_core__WEBPACK_IMPORTED_MODULE_4__.getClient,\n                \"call\",\n                (_)=>_(),\n                \"optionalAccess\",\n                (_2)=>_2.getOptions,\n                \"call\",\n                (_3)=>_3()\n            ]);\n            if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._optionalChain)([\n                options,\n                \"optionalAccess\",\n                (_4)=>_4.instrumenter\n            ]) === \"sentry\") {\n                return (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_2__.callDataFetcherTraced)(errorWrappedGetStaticProps, args, {\n                    parameterizedRoute,\n                    dataFetchingMethodName: \"getStaticProps\"\n                });\n            }\n            return errorWrappedGetStaticProps.apply(thisArg, args);\n        }\n    });\n}\n/**\n * @deprecated Use `wrapGetStaticPropsWithSentry` instead.\n */ const withSentryGetStaticProps = wrapGetStaticPropsWithSentry;\n //# sourceMappingURL=wrapGetStaticPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvZXNtL2NvbW1vbi93cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBK0M7QUFDZ0I7QUFDbEI7QUFDNkM7QUFFMUY7Ozs7OztDQU1DLEdBQ0QsU0FBU00sNkJBQ1BDLG1CQUFtQixFQUNuQkMsa0JBQWtCO0lBRWxCLE9BQU8sSUFBSUMsTUFBTUYscUJBQXFCO1FBQ3BDRyxPQUFPLENBQUNDLGdCQUFnQkMsU0FBU0M7WUFDL0IsSUFBSVYsMERBQU9BLElBQUk7Z0JBQ2IsT0FBT1EsZUFBZUQsS0FBSyxDQUFDRSxTQUFTQztZQUN2QztZQUVBWixrRUFBb0JBO1lBRXBCLE1BQU1hLDZCQUE2QlQsZ0ZBQXdCQSxDQUFDTTtZQUM1RCxNQUFNSSxVQUFVZiw2REFBY0EsQ0FBQztnQkFBQ0UsbURBQVNBO2dCQUFFO2dCQUFRYyxDQUFBQSxJQUFLQTtnQkFBSztnQkFBa0JDLENBQUFBLEtBQU1BLEdBQUdDLFVBQVU7Z0JBQUU7Z0JBQVFDLENBQUFBLEtBQU1BO2FBQUs7WUFFdkgsSUFBSW5CLDZEQUFjQSxDQUFDO2dCQUFDZTtnQkFBUztnQkFBa0JLLENBQUFBLEtBQU1BLEdBQUdDLFlBQVk7YUFBQyxNQUFNLFVBQVU7Z0JBQ25GLE9BQU9qQiw2RUFBcUJBLENBQUNVLDRCQUE0QkQsTUFBTTtvQkFDN0RMO29CQUNBYyx3QkFBd0I7Z0JBQzFCO1lBQ0Y7WUFFQSxPQUFPUiwyQkFBMkJKLEtBQUssQ0FBQ0UsU0FBU0M7UUFDbkQ7SUFDRjtBQUNGO0FBRUE7O0NBRUMsR0FDRCxNQUFNVSwyQkFBMkJqQjtBQUVpQyxDQUNsRSx3REFBd0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvZXNtL2NvbW1vbi93cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5LmpzP2E5NDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX29wdGlvbmFsQ2hhaW4gfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IGFkZFRyYWNpbmdFeHRlbnNpb25zLCBnZXRDbGllbnQgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgaXNCdWlsZCB9IGZyb20gJy4vdXRpbHMvaXNCdWlsZC5qcyc7XG5pbXBvcnQgeyBjYWxsRGF0YUZldGNoZXJUcmFjZWQsIHdpdGhFcnJvckluc3RydW1lbnRhdGlvbiB9IGZyb20gJy4vdXRpbHMvd3JhcHBlclV0aWxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIHVzZXIncyBleHBvcnRlZCBgZ2V0U3RhdGljUHJvcHNgIGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIG9yaWdHZXRTdGF0aWNQcm9wcyBUaGUgdXNlcidzIGBnZXRTdGF0aWNQcm9wc2AgZnVuY3Rpb25cbiAqIEBwYXJhbSBwYXJhbWV0ZXJpemVkUm91dGUgVGhlIHBhZ2UncyBwYXJhbWV0ZXJpemVkIHJvdXRlXG4gKiBAcmV0dXJucyBBIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gd3JhcEdldFN0YXRpY1Byb3BzV2l0aFNlbnRyeShcbiAgb3JpZ0dldFN0YXRpY1Byb3BzYSxcbiAgcGFyYW1ldGVyaXplZFJvdXRlLFxuKSB7XG4gIHJldHVybiBuZXcgUHJveHkob3JpZ0dldFN0YXRpY1Byb3BzYSwge1xuICAgIGFwcGx5OiAod3JhcHBpbmdUYXJnZXQsIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGlmIChpc0J1aWxkKCkpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwaW5nVGFyZ2V0LmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICBhZGRUcmFjaW5nRXh0ZW5zaW9ucygpO1xuXG4gICAgICBjb25zdCBlcnJvcldyYXBwZWRHZXRTdGF0aWNQcm9wcyA9IHdpdGhFcnJvckluc3RydW1lbnRhdGlvbih3cmFwcGluZ1RhcmdldCk7XG4gICAgICBjb25zdCBvcHRpb25zID0gX29wdGlvbmFsQ2hhaW4oW2dldENsaWVudCwgJ2NhbGwnLCBfID0+IF8oKSwgJ29wdGlvbmFsQWNjZXNzJywgXzIgPT4gXzIuZ2V0T3B0aW9ucywgJ2NhbGwnLCBfMyA9PiBfMygpXSk7XG5cbiAgICAgIGlmIChfb3B0aW9uYWxDaGFpbihbb3B0aW9ucywgJ29wdGlvbmFsQWNjZXNzJywgXzQgPT4gXzQuaW5zdHJ1bWVudGVyXSkgPT09ICdzZW50cnknKSB7XG4gICAgICAgIHJldHVybiBjYWxsRGF0YUZldGNoZXJUcmFjZWQoZXJyb3JXcmFwcGVkR2V0U3RhdGljUHJvcHMsIGFyZ3MsIHtcbiAgICAgICAgICBwYXJhbWV0ZXJpemVkUm91dGUsXG4gICAgICAgICAgZGF0YUZldGNoaW5nTWV0aG9kTmFtZTogJ2dldFN0YXRpY1Byb3BzJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlcnJvcldyYXBwZWRHZXRTdGF0aWNQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICB9LFxuICB9KTtcbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgYHdyYXBHZXRTdGF0aWNQcm9wc1dpdGhTZW50cnlgIGluc3RlYWQuXG4gKi9cbmNvbnN0IHdpdGhTZW50cnlHZXRTdGF0aWNQcm9wcyA9IHdyYXBHZXRTdGF0aWNQcm9wc1dpdGhTZW50cnk7XG5cbmV4cG9ydCB7IHdpdGhTZW50cnlHZXRTdGF0aWNQcm9wcywgd3JhcEdldFN0YXRpY1Byb3BzV2l0aFNlbnRyeSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcEdldFN0YXRpY1Byb3BzV2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJfb3B0aW9uYWxDaGFpbiIsImFkZFRyYWNpbmdFeHRlbnNpb25zIiwiZ2V0Q2xpZW50IiwiaXNCdWlsZCIsImNhbGxEYXRhRmV0Y2hlclRyYWNlZCIsIndpdGhFcnJvckluc3RydW1lbnRhdGlvbiIsIndyYXBHZXRTdGF0aWNQcm9wc1dpdGhTZW50cnkiLCJvcmlnR2V0U3RhdGljUHJvcHNhIiwicGFyYW1ldGVyaXplZFJvdXRlIiwiUHJveHkiLCJhcHBseSIsIndyYXBwaW5nVGFyZ2V0IiwidGhpc0FyZyIsImFyZ3MiLCJlcnJvcldyYXBwZWRHZXRTdGF0aWNQcm9wcyIsIm9wdGlvbnMiLCJfIiwiXzIiLCJnZXRPcHRpb25zIiwiXzMiLCJfNCIsImluc3RydW1lbnRlciIsImRhdGFGZXRjaGluZ01ldGhvZE5hbWUiLCJ3aXRoU2VudHJ5R2V0U3RhdGljUHJvcHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapGetStaticPropsWithSentry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapMiddlewareWithSentry.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/wrapMiddlewareWithSentry.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapMiddlewareWithSentry: () => (/* binding */ wrapMiddlewareWithSentry)\n/* harmony export */ });\n/* harmony import */ var _utils_edgeWrapperUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/edgeWrapperUtils.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/edgeWrapperUtils.js\");\n\n/**\n * Wraps Next.js middleware with Sentry error and performance instrumentation.\n *\n * @param middleware The middleware handler.\n * @returns a wrapped middleware handler.\n */ function wrapMiddlewareWithSentry(middleware) {\n    return new Proxy(middleware, {\n        apply: (wrappingTarget, thisArg, args)=>{\n            return (0,_utils_edgeWrapperUtils_js__WEBPACK_IMPORTED_MODULE_0__.withEdgeWrapping)(wrappingTarget, {\n                spanDescription: \"middleware\",\n                spanOp: \"middleware.nextjs\",\n                mechanismFunctionName: \"withSentryMiddleware\"\n            }).apply(thisArg, args);\n        }\n    });\n}\n //# sourceMappingURL=wrapMiddlewareWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvZXNtL2NvbW1vbi93cmFwTWlkZGxld2FyZVdpdGhTZW50cnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0Q7QUFFL0Q7Ozs7O0NBS0MsR0FDRCxTQUFTQyx5QkFDUEMsVUFBVTtJQUVWLE9BQU8sSUFBSUMsTUFBTUQsWUFBWTtRQUMzQkUsT0FBTyxDQUFDQyxnQkFBZ0JDLFNBQVNDO1lBQy9CLE9BQU9QLDRFQUFnQkEsQ0FBQ0ssZ0JBQWdCO2dCQUN0Q0csaUJBQWlCO2dCQUNqQkMsUUFBUTtnQkFDUkMsdUJBQXVCO1lBQ3pCLEdBQUdOLEtBQUssQ0FBQ0UsU0FBU0M7UUFDcEI7SUFDRjtBQUNGO0FBRW9DLENBQ3BDLG9EQUFvRCIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9lc20vY29tbW9uL3dyYXBNaWRkbGV3YXJlV2l0aFNlbnRyeS5qcz8xN2U5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHdpdGhFZGdlV3JhcHBpbmcgfSBmcm9tICcuL3V0aWxzL2VkZ2VXcmFwcGVyVXRpbHMuanMnO1xuXG4vKipcbiAqIFdyYXBzIE5leHQuanMgbWlkZGxld2FyZSB3aXRoIFNlbnRyeSBlcnJvciBhbmQgcGVyZm9ybWFuY2UgaW5zdHJ1bWVudGF0aW9uLlxuICpcbiAqIEBwYXJhbSBtaWRkbGV3YXJlIFRoZSBtaWRkbGV3YXJlIGhhbmRsZXIuXG4gKiBAcmV0dXJucyBhIHdyYXBwZWQgbWlkZGxld2FyZSBoYW5kbGVyLlxuICovXG5mdW5jdGlvbiB3cmFwTWlkZGxld2FyZVdpdGhTZW50cnkoXG4gIG1pZGRsZXdhcmUsXG4pIHtcbiAgcmV0dXJuIG5ldyBQcm94eShtaWRkbGV3YXJlLCB7XG4gICAgYXBwbHk6ICh3cmFwcGluZ1RhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgcmV0dXJuIHdpdGhFZGdlV3JhcHBpbmcod3JhcHBpbmdUYXJnZXQsIHtcbiAgICAgICAgc3BhbkRlc2NyaXB0aW9uOiAnbWlkZGxld2FyZScsXG4gICAgICAgIHNwYW5PcDogJ21pZGRsZXdhcmUubmV4dGpzJyxcbiAgICAgICAgbWVjaGFuaXNtRnVuY3Rpb25OYW1lOiAnd2l0aFNlbnRyeU1pZGRsZXdhcmUnLFxuICAgICAgfSkuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydCB7IHdyYXBNaWRkbGV3YXJlV2l0aFNlbnRyeSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcE1pZGRsZXdhcmVXaXRoU2VudHJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbIndpdGhFZGdlV3JhcHBpbmciLCJ3cmFwTWlkZGxld2FyZVdpdGhTZW50cnkiLCJtaWRkbGV3YXJlIiwiUHJveHkiLCJhcHBseSIsIndyYXBwaW5nVGFyZ2V0IiwidGhpc0FyZyIsImFyZ3MiLCJzcGFuRGVzY3JpcHRpb24iLCJzcGFuT3AiLCJtZWNoYW5pc21GdW5jdGlvbk5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapMiddlewareWithSentry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapPageComponentWithSentry.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/wrapPageComponentWithSentry.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapPageComponentWithSentry: () => (/* binding */ wrapPageComponentWithSentry)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/hubextensions.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/exports.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/tracing.js\");\n\n\n\nfunction isReactClassComponent(target) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return typeof target === \"function\" && (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n        target,\n        \"optionalAccess\",\n        (_)=>_.prototype,\n        \"optionalAccess\",\n        (_2)=>_2.isReactComponent\n    ]);\n}\n/**\n * Wraps a page component with Sentry error instrumentation.\n */ function wrapPageComponentWithSentry(pageComponent) {\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.addTracingExtensions)();\n    if (isReactClassComponent(pageComponent)) {\n        return class SentryWrappedPageComponent extends pageComponent {\n            render(...args) {\n                return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.runWithAsyncContext)(()=>{\n                    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.configureScope)((scope)=>{\n                        // We extract the sentry trace data that is put in the component props by datafetcher wrappers\n                        const sentryTraceData = typeof this.props === \"object\" && this.props !== null && \"_sentryTraceData\" in this.props && typeof this.props._sentryTraceData === \"string\" ? this.props._sentryTraceData : undefined;\n                        if (sentryTraceData) {\n                            const traceparentData = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.extractTraceparentData)(sentryTraceData);\n                            scope.setContext(\"trace\", {\n                                span_id: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n                                    traceparentData,\n                                    \"optionalAccess\",\n                                    (_3)=>_3.parentSpanId\n                                ]),\n                                trace_id: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n                                    traceparentData,\n                                    \"optionalAccess\",\n                                    (_4)=>_4.traceId\n                                ])\n                            });\n                        }\n                    });\n                    try {\n                        return super.render(...args);\n                    } catch (e) {\n                        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.captureException)(e, {\n                            mechanism: {\n                                handled: false\n                            }\n                        });\n                        throw e;\n                    }\n                });\n            }\n        };\n    } else if (typeof pageComponent === \"function\") {\n        return new Proxy(pageComponent, {\n            apply (target, thisArg, argArray) {\n                return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.runWithAsyncContext)(()=>{\n                    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.configureScope)((scope)=>{\n                        // We extract the sentry trace data that is put in the component props by datafetcher wrappers\n                        const sentryTraceData = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n                            argArray,\n                            \"optionalAccess\",\n                            (_5)=>_5[0],\n                            \"optionalAccess\",\n                            (_6)=>_6._sentryTraceData\n                        ]);\n                        if (sentryTraceData) {\n                            const traceparentData = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.extractTraceparentData)(sentryTraceData);\n                            scope.setContext(\"trace\", {\n                                span_id: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n                                    traceparentData,\n                                    \"optionalAccess\",\n                                    (_7)=>_7.parentSpanId\n                                ]),\n                                trace_id: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n                                    traceparentData,\n                                    \"optionalAccess\",\n                                    (_8)=>_8.traceId\n                                ])\n                            });\n                        }\n                    });\n                    try {\n                        return target.apply(thisArg, argArray);\n                    } catch (e) {\n                        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.captureException)(e, {\n                            mechanism: {\n                                handled: false\n                            }\n                        });\n                        throw e;\n                    }\n                });\n            }\n        });\n    } else {\n        return pageComponent;\n    }\n}\n //# sourceMappingURL=wrapPageComponentWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvZXNtL2NvbW1vbi93cmFwUGFnZUNvbXBvbmVudFdpdGhTZW50cnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQStDO0FBQzREO0FBQ3BEO0FBRXZELFNBQVNNLHNCQUFzQkMsTUFBTTtJQUNuQyxzRUFBc0U7SUFDdEUsT0FBTyxPQUFPQSxXQUFXLGNBQWNQLDZEQUFjQSxDQUFDO1FBQUNPO1FBQVE7UUFBa0JDLENBQUFBLElBQUtBLEVBQUVDLFNBQVM7UUFBRTtRQUFrQkMsQ0FBQUEsS0FBTUEsR0FBR0MsZ0JBQWdCO0tBQUM7QUFDako7QUFFQTs7Q0FFQyxHQUNELFNBQVNDLDRCQUE0QkMsYUFBYTtJQUNoRFosa0VBQW9CQTtJQUNwQixJQUFJSyxzQkFBc0JPLGdCQUFnQjtRQUN4QyxPQUFPLE1BQU1DLG1DQUFtQ0Q7WUFDN0NFLE9BQU8sR0FBR0MsSUFBSSxFQUFFO2dCQUNmLE9BQU9kLGlFQUFtQkEsQ0FBQztvQkFDekJDLDREQUFjQSxDQUFDYyxDQUFBQTt3QkFDYiw4RkFBOEY7d0JBQzlGLE1BQU1DLGtCQUNKLE9BQU8sSUFBSSxDQUFDQyxLQUFLLEtBQUssWUFDdEIsSUFBSSxDQUFDQSxLQUFLLEtBQUssUUFDZixzQkFBc0IsSUFBSSxDQUFDQSxLQUFLLElBQ2hDLE9BQU8sSUFBSSxDQUFDQSxLQUFLLENBQUNDLGdCQUFnQixLQUFLLFdBQ25DLElBQUksQ0FBQ0QsS0FBSyxDQUFDQyxnQkFBZ0IsR0FDM0JDO3dCQUVOLElBQUlILGlCQUFpQjs0QkFDbkIsTUFBTUksa0JBQWtCakIscUVBQXNCQSxDQUFDYTs0QkFDL0NELE1BQU1NLFVBQVUsQ0FBQyxTQUFTO2dDQUN4QkMsU0FBU3hCLDZEQUFjQSxDQUFDO29DQUFDc0I7b0NBQWlCO29DQUFrQkcsQ0FBQUEsS0FBTUEsR0FBR0MsWUFBWTtpQ0FBQztnQ0FDbEZDLFVBQVUzQiw2REFBY0EsQ0FBQztvQ0FBQ3NCO29DQUFpQjtvQ0FBa0JNLENBQUFBLEtBQU1BLEdBQUdDLE9BQU87aUNBQUM7NEJBQ2hGO3dCQUNGO29CQUNGO29CQUVBLElBQUk7d0JBQ0YsT0FBTyxLQUFLLENBQUNkLFVBQVVDO29CQUN6QixFQUFFLE9BQU9jLEdBQUc7d0JBQ1YxQiw4REFBZ0JBLENBQUMwQixHQUFHOzRCQUNsQkMsV0FBVztnQ0FDVEMsU0FBUzs0QkFDWDt3QkFDRjt3QkFDQSxNQUFNRjtvQkFDUjtnQkFDRjtZQUNGO1FBQ0Y7SUFDRixPQUFPLElBQUksT0FBT2pCLGtCQUFrQixZQUFZO1FBQzlDLE9BQU8sSUFBSW9CLE1BQU1wQixlQUFlO1lBQzlCcUIsT0FBTTNCLE1BQU0sRUFBRTRCLE9BQU8sRUFBRUMsUUFBUTtnQkFDN0IsT0FBT2xDLGlFQUFtQkEsQ0FBQztvQkFDekJDLDREQUFjQSxDQUFDYyxDQUFBQTt3QkFDYiw4RkFBOEY7d0JBQzlGLE1BQU1DLGtCQUFrQmxCLDZEQUFjQSxDQUFDOzRCQUFDb0M7NEJBQVU7NEJBQWtCQyxDQUFBQSxLQUFNQSxFQUFFLENBQUMsRUFBRTs0QkFBRTs0QkFBa0JDLENBQUFBLEtBQU1BLEdBQUdsQixnQkFBZ0I7eUJBQUM7d0JBRTdILElBQUlGLGlCQUFpQjs0QkFDbkIsTUFBTUksa0JBQWtCakIscUVBQXNCQSxDQUFDYTs0QkFDL0NELE1BQU1NLFVBQVUsQ0FBQyxTQUFTO2dDQUN4QkMsU0FBU3hCLDZEQUFjQSxDQUFDO29DQUFDc0I7b0NBQWlCO29DQUFrQmlCLENBQUFBLEtBQU1BLEdBQUdiLFlBQVk7aUNBQUM7Z0NBQ2xGQyxVQUFVM0IsNkRBQWNBLENBQUM7b0NBQUNzQjtvQ0FBaUI7b0NBQWtCa0IsQ0FBQUEsS0FBTUEsR0FBR1gsT0FBTztpQ0FBQzs0QkFDaEY7d0JBQ0Y7b0JBQ0Y7b0JBQ0EsSUFBSTt3QkFDRixPQUFPdEIsT0FBTzJCLEtBQUssQ0FBQ0MsU0FBU0M7b0JBQy9CLEVBQUUsT0FBT04sR0FBRzt3QkFDVjFCLDhEQUFnQkEsQ0FBQzBCLEdBQUc7NEJBQ2xCQyxXQUFXO2dDQUNUQyxTQUFTOzRCQUNYO3dCQUNGO3dCQUNBLE1BQU1GO29CQUNSO2dCQUNGO1lBQ0Y7UUFDRjtJQUNGLE9BQU87UUFDTCxPQUFPakI7SUFDVDtBQUNGO0FBRXVDLENBQ3ZDLHVEQUF1RCIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9lc20vY29tbW9uL3dyYXBQYWdlQ29tcG9uZW50V2l0aFNlbnRyeS5qcz85NGE1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9vcHRpb25hbENoYWluIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBhZGRUcmFjaW5nRXh0ZW5zaW9ucywgcnVuV2l0aEFzeW5jQ29udGV4dCwgY29uZmlndXJlU2NvcGUsIGNhcHR1cmVFeGNlcHRpb24gfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgZXh0cmFjdFRyYWNlcGFyZW50RGF0YSB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuXG5mdW5jdGlvbiBpc1JlYWN0Q2xhc3NDb21wb25lbnQodGFyZ2V0KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgcmV0dXJuIHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicgJiYgX29wdGlvbmFsQ2hhaW4oW3RhcmdldCwgJ29wdGlvbmFsQWNjZXNzJywgXyA9PiBfLnByb3RvdHlwZSwgJ29wdGlvbmFsQWNjZXNzJywgXzIgPT4gXzIuaXNSZWFjdENvbXBvbmVudF0pO1xufVxuXG4vKipcbiAqIFdyYXBzIGEgcGFnZSBjb21wb25lbnQgd2l0aCBTZW50cnkgZXJyb3IgaW5zdHJ1bWVudGF0aW9uLlxuICovXG5mdW5jdGlvbiB3cmFwUGFnZUNvbXBvbmVudFdpdGhTZW50cnkocGFnZUNvbXBvbmVudCkge1xuICBhZGRUcmFjaW5nRXh0ZW5zaW9ucygpO1xuICBpZiAoaXNSZWFjdENsYXNzQ29tcG9uZW50KHBhZ2VDb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIGNsYXNzIFNlbnRyeVdyYXBwZWRQYWdlQ29tcG9uZW50IGV4dGVuZHMgcGFnZUNvbXBvbmVudCB7XG4gICAgICAgcmVuZGVyKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHJ1bldpdGhBc3luY0NvbnRleHQoKCkgPT4ge1xuICAgICAgICAgIGNvbmZpZ3VyZVNjb3BlKHNjb3BlID0+IHtcbiAgICAgICAgICAgIC8vIFdlIGV4dHJhY3QgdGhlIHNlbnRyeSB0cmFjZSBkYXRhIHRoYXQgaXMgcHV0IGluIHRoZSBjb21wb25lbnQgcHJvcHMgYnkgZGF0YWZldGNoZXIgd3JhcHBlcnNcbiAgICAgICAgICAgIGNvbnN0IHNlbnRyeVRyYWNlRGF0YSA9XG4gICAgICAgICAgICAgIHR5cGVvZiB0aGlzLnByb3BzID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgICB0aGlzLnByb3BzICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICdfc2VudHJ5VHJhY2VEYXRhJyBpbiB0aGlzLnByb3BzICYmXG4gICAgICAgICAgICAgIHR5cGVvZiB0aGlzLnByb3BzLl9zZW50cnlUcmFjZURhdGEgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgPyB0aGlzLnByb3BzLl9zZW50cnlUcmFjZURhdGFcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgaWYgKHNlbnRyeVRyYWNlRGF0YSkge1xuICAgICAgICAgICAgICBjb25zdCB0cmFjZXBhcmVudERhdGEgPSBleHRyYWN0VHJhY2VwYXJlbnREYXRhKHNlbnRyeVRyYWNlRGF0YSk7XG4gICAgICAgICAgICAgIHNjb3BlLnNldENvbnRleHQoJ3RyYWNlJywge1xuICAgICAgICAgICAgICAgIHNwYW5faWQ6IF9vcHRpb25hbENoYWluKFt0cmFjZXBhcmVudERhdGEsICdvcHRpb25hbEFjY2VzcycsIF8zID0+IF8zLnBhcmVudFNwYW5JZF0pLFxuICAgICAgICAgICAgICAgIHRyYWNlX2lkOiBfb3B0aW9uYWxDaGFpbihbdHJhY2VwYXJlbnREYXRhLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNCA9PiBfNC50cmFjZUlkXSksXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBzdXBlci5yZW5kZXIoLi4uYXJncyk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY2FwdHVyZUV4Y2VwdGlvbihlLCB7XG4gICAgICAgICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcGFnZUNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBuZXcgUHJveHkocGFnZUNvbXBvbmVudCwge1xuICAgICAgYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBhcmdBcnJheSkge1xuICAgICAgICByZXR1cm4gcnVuV2l0aEFzeW5jQ29udGV4dCgoKSA9PiB7XG4gICAgICAgICAgY29uZmlndXJlU2NvcGUoc2NvcGUgPT4ge1xuICAgICAgICAgICAgLy8gV2UgZXh0cmFjdCB0aGUgc2VudHJ5IHRyYWNlIGRhdGEgdGhhdCBpcyBwdXQgaW4gdGhlIGNvbXBvbmVudCBwcm9wcyBieSBkYXRhZmV0Y2hlciB3cmFwcGVyc1xuICAgICAgICAgICAgY29uc3Qgc2VudHJ5VHJhY2VEYXRhID0gX29wdGlvbmFsQ2hhaW4oW2FyZ0FycmF5LCAnb3B0aW9uYWxBY2Nlc3MnLCBfNSA9PiBfNVswXSwgJ29wdGlvbmFsQWNjZXNzJywgXzYgPT4gXzYuX3NlbnRyeVRyYWNlRGF0YV0pO1xuXG4gICAgICAgICAgICBpZiAoc2VudHJ5VHJhY2VEYXRhKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHRyYWNlcGFyZW50RGF0YSA9IGV4dHJhY3RUcmFjZXBhcmVudERhdGEoc2VudHJ5VHJhY2VEYXRhKTtcbiAgICAgICAgICAgICAgc2NvcGUuc2V0Q29udGV4dCgndHJhY2UnLCB7XG4gICAgICAgICAgICAgICAgc3Bhbl9pZDogX29wdGlvbmFsQ2hhaW4oW3RyYWNlcGFyZW50RGF0YSwgJ29wdGlvbmFsQWNjZXNzJywgXzcgPT4gXzcucGFyZW50U3BhbklkXSksXG4gICAgICAgICAgICAgICAgdHJhY2VfaWQ6IF9vcHRpb25hbENoYWluKFt0cmFjZXBhcmVudERhdGEsICdvcHRpb25hbEFjY2VzcycsIF84ID0+IF84LnRyYWNlSWRdKSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkodGhpc0FyZywgYXJnQXJyYXkpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNhcHR1cmVFeGNlcHRpb24oZSwge1xuICAgICAgICAgICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGFnZUNvbXBvbmVudDtcbiAgfVxufVxuXG5leHBvcnQgeyB3cmFwUGFnZUNvbXBvbmVudFdpdGhTZW50cnkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBQYWdlQ29tcG9uZW50V2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJfb3B0aW9uYWxDaGFpbiIsImFkZFRyYWNpbmdFeHRlbnNpb25zIiwicnVuV2l0aEFzeW5jQ29udGV4dCIsImNvbmZpZ3VyZVNjb3BlIiwiY2FwdHVyZUV4Y2VwdGlvbiIsImV4dHJhY3RUcmFjZXBhcmVudERhdGEiLCJpc1JlYWN0Q2xhc3NDb21wb25lbnQiLCJ0YXJnZXQiLCJfIiwicHJvdG90eXBlIiwiXzIiLCJpc1JlYWN0Q29tcG9uZW50Iiwid3JhcFBhZ2VDb21wb25lbnRXaXRoU2VudHJ5IiwicGFnZUNvbXBvbmVudCIsIlNlbnRyeVdyYXBwZWRQYWdlQ29tcG9uZW50IiwicmVuZGVyIiwiYXJncyIsInNjb3BlIiwic2VudHJ5VHJhY2VEYXRhIiwicHJvcHMiLCJfc2VudHJ5VHJhY2VEYXRhIiwidW5kZWZpbmVkIiwidHJhY2VwYXJlbnREYXRhIiwic2V0Q29udGV4dCIsInNwYW5faWQiLCJfMyIsInBhcmVudFNwYW5JZCIsInRyYWNlX2lkIiwiXzQiLCJ0cmFjZUlkIiwiZSIsIm1lY2hhbmlzbSIsImhhbmRsZWQiLCJQcm94eSIsImFwcGx5IiwidGhpc0FyZyIsImFyZ0FycmF5IiwiXzUiLCJfNiIsIl83IiwiXzgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapPageComponentWithSentry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapRouteHandlerWithSentry.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/wrapRouteHandlerWithSentry.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapRouteHandlerWithSentry: () => (/* binding */ wrapRouteHandlerWithSentry)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/hubextensions.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/trace.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/exports.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/tracing.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/requestdata.js\");\n/* harmony import */ var _nextNavigationErrorUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/nextNavigationErrorUtils.js\");\n/* harmony import */ var _utils_platformSupportsStreaming_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/platformSupportsStreaming.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/platformSupportsStreaming.js\");\n/* harmony import */ var _utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/responseEnd.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/responseEnd.js\");\n\n\n\n\n\n\n/**\n * Wraps a Next.js route handler with performance and error instrumentation.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapRouteHandlerWithSentry(routeHandler, context) {\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.addTracingExtensions)();\n    // eslint-disable-next-line deprecation/deprecation\n    const { method, parameterizedRoute, baggageHeader, sentryTraceHeader, headers } = context;\n    return new Proxy(routeHandler, {\n        apply: (originalFunction, thisArg, args)=>{\n            return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.runWithAsyncContext)(async ()=>{\n                const hub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.getCurrentHub)();\n                const currentScope = hub.getScope();\n                const { traceparentData, dynamicSamplingContext, propagationContext } = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.tracingContextFromHeaders)((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._nullishCoalesce)((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._nullishCoalesce)(sentryTraceHeader, ()=>(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__._optionalChain)([\n                        headers,\n                        \"optionalAccess\",\n                        (_)=>_.get,\n                        \"call\",\n                        (_2)=>_2(\"sentry-trace\")\n                    ])), ()=>undefined), (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._nullishCoalesce)(baggageHeader, ()=>(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__._optionalChain)([\n                        headers,\n                        \"optionalAccess\",\n                        (_3)=>_3.get,\n                        \"call\",\n                        (_4)=>_4(\"baggage\")\n                    ])));\n                currentScope.setPropagationContext(propagationContext);\n                let res;\n                try {\n                    res = await (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.trace)({\n                        op: \"http.server\",\n                        name: `${method} ${parameterizedRoute}`,\n                        status: \"ok\",\n                        ...traceparentData,\n                        metadata: {\n                            request: {\n                                headers: headers ? (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__.winterCGHeadersToDict)(headers) : undefined\n                            },\n                            source: \"route\",\n                            dynamicSamplingContext: traceparentData && !dynamicSamplingContext ? {} : dynamicSamplingContext\n                        }\n                    }, async (span)=>{\n                        const response = await originalFunction.apply(thisArg, args);\n                        try {\n                            (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__._optionalChain)([\n                                span,\n                                \"optionalAccess\",\n                                (_5)=>_5.setHttpStatus,\n                                \"call\",\n                                (_6)=>_6(response.status)\n                            ]);\n                        } catch (e) {\n                        // best effort\n                        }\n                        return response;\n                    }, (error)=>{\n                        // Next.js throws errors when calling `redirect()`. We don't wanna report these.\n                        if (!(0,_nextNavigationErrorUtils_js__WEBPACK_IMPORTED_MODULE_7__.isRedirectNavigationError)(error)) {\n                            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_8__.captureException)(error, {\n                                mechanism: {\n                                    handled: false\n                                }\n                            });\n                        }\n                    });\n                } finally{\n                    if (!(0,_utils_platformSupportsStreaming_js__WEBPACK_IMPORTED_MODULE_9__.platformSupportsStreaming)() || \"nodejs\" === \"edge\") {\n                        // 1. Edge tranpsort requires manual flushing\n                        // 2. Lambdas require manual flushing to prevent execution freeze before the event is sent\n                        await (0,_utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_10__.flushQueue)();\n                    }\n                }\n                return res;\n            });\n        }\n    });\n}\n //# sourceMappingURL=wrapRouteHandlerWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapRouteHandlerWithSentry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapServerComponentWithSentry.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/common/wrapServerComponentWithSentry.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapServerComponentWithSentry: () => (/* binding */ wrapServerComponentWithSentry)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/hubextensions.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/exports.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/requestdata.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/tracing.js\");\n/* harmony import */ var _nextNavigationErrorUtils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/nextNavigationErrorUtils.js\");\n/* harmony import */ var _utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/responseEnd.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/responseEnd.js\");\n\n\n\n\n\n/**\n * Wraps an `app` directory server component with Sentry error instrumentation.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapServerComponentWithSentry(appDirComponent, context) {\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.addTracingExtensions)();\n    const { componentRoute, componentType } = context;\n    // Even though users may define server components as async functions, for the client bundles\n    // Next.js will turn them into synchronous functions and it will transform any `await`s into instances of the `use`\n    // hook. 🤯\n    return new Proxy(appDirComponent, {\n        apply: (originalFunction, thisArg, args)=>{\n            return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.runWithAsyncContext)(()=>{\n                const hub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.getCurrentHub)();\n                const currentScope = hub.getScope();\n                let maybePromiseResult;\n                const completeHeadersDict = context.headers ? (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.winterCGHeadersToDict)(context.headers) : {};\n                const { traceparentData, dynamicSamplingContext, propagationContext } = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.tracingContextFromHeaders)(// eslint-disable-next-line deprecation/deprecation\n                (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__._nullishCoalesce)(context.sentryTraceHeader, ()=>completeHeadersDict[\"sentry-trace\"]), // eslint-disable-next-line deprecation/deprecation\n                (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__._nullishCoalesce)(context.baggageHeader, ()=>completeHeadersDict[\"baggage\"]));\n                currentScope.setPropagationContext(propagationContext);\n                const transaction = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.startTransaction)({\n                    op: \"function.nextjs\",\n                    name: `${componentType} Server Component (${componentRoute})`,\n                    status: \"ok\",\n                    origin: \"auto.function.nextjs\",\n                    ...traceparentData,\n                    metadata: {\n                        request: {\n                            headers: completeHeadersDict\n                        },\n                        source: \"component\",\n                        dynamicSamplingContext: traceparentData && !dynamicSamplingContext ? {} : dynamicSamplingContext\n                    }\n                });\n                currentScope.setSpan(transaction);\n                const handleErrorCase = (e)=>{\n                    if ((0,_nextNavigationErrorUtils_js__WEBPACK_IMPORTED_MODULE_6__.isNotFoundNavigationError)(e)) {\n                        // We don't want to report \"not-found\"s\n                        transaction.setStatus(\"not_found\");\n                    } else if ((0,_nextNavigationErrorUtils_js__WEBPACK_IMPORTED_MODULE_6__.isRedirectNavigationError)(e)) ;\n                    else {\n                        transaction.setStatus(\"internal_error\");\n                        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.captureException)(e, {\n                            mechanism: {\n                                handled: false\n                            }\n                        });\n                    }\n                    transaction.finish();\n                };\n                try {\n                    maybePromiseResult = originalFunction.apply(thisArg, args);\n                } catch (e) {\n                    handleErrorCase(e);\n                    void (0,_utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_7__.flushQueue)();\n                    throw e;\n                }\n                if (typeof maybePromiseResult === \"object\" && maybePromiseResult !== null && \"then\" in maybePromiseResult) {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                    Promise.resolve(maybePromiseResult).then(()=>{\n                        transaction.finish();\n                    }, (e)=>{\n                        handleErrorCase(e);\n                    }).finally(()=>{\n                        void (0,_utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_7__.flushQueue)();\n                    });\n                    // It is very important that we return the original promise here, because Next.js attaches various properties\n                    // to that promise and will throw if they are not on the returned value.\n                    return maybePromiseResult;\n                } else {\n                    transaction.finish();\n                    void (0,_utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_7__.flushQueue)();\n                    return maybePromiseResult;\n                }\n            });\n        }\n    });\n}\n //# sourceMappingURL=wrapServerComponentWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapServerComponentWithSentry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/esm/server/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/nextjs/esm/server/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_USER_INCLUDES: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_USER_INCLUDES),\n/* harmony export */   ErrorBoundary: () => (/* binding */ ErrorBoundary),\n/* harmony export */   Handlers: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.Handlers),\n/* harmony export */   Hub: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.Hub),\n/* harmony export */   IS_BUILD: () => (/* binding */ IS_BUILD),\n/* harmony export */   Integrations: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.Integrations),\n/* harmony export */   NodeClient: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.NodeClient),\n/* harmony export */   SDK_VERSION: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION),\n/* harmony export */   Scope: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.Scope),\n/* harmony export */   addBreadcrumb: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.addBreadcrumb),\n/* harmony export */   addEventProcessor: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.addEventProcessor),\n/* harmony export */   addGlobalEventProcessor: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.addGlobalEventProcessor),\n/* harmony export */   addIntegration: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.addIntegration),\n/* harmony export */   addRequestDataToEvent: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.addRequestDataToEvent),\n/* harmony export */   autoDiscoverNodePerformanceMonitoringIntegrations: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.autoDiscoverNodePerformanceMonitoringIntegrations),\n/* harmony export */   captureCheckIn: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.captureCheckIn),\n/* harmony export */   captureEvent: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.captureEvent),\n/* harmony export */   captureException: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.captureException),\n/* harmony export */   captureMessage: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.captureMessage),\n/* harmony export */   captureUnderscoreErrorException: () => (/* reexport safe */ _common_error_js__WEBPACK_IMPORTED_MODULE_2__.captureUnderscoreErrorException),\n/* harmony export */   close: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.close),\n/* harmony export */   configureScope: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.configureScope),\n/* harmony export */   continueTrace: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.continueTrace),\n/* harmony export */   createTransport: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.createTransport),\n/* harmony export */   deepReadDirSync: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.deepReadDirSync),\n/* harmony export */   defaultIntegrations: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.defaultIntegrations),\n/* harmony export */   defaultStackParser: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.defaultStackParser),\n/* harmony export */   enableAnrDetection: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.enableAnrDetection),\n/* harmony export */   extractRequestData: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.extractRequestData),\n/* harmony export */   extractTraceparentData: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.extractTraceparentData),\n/* harmony export */   flush: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.flush),\n/* harmony export */   getActiveSpan: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.getActiveSpan),\n/* harmony export */   getActiveTransaction: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.getActiveTransaction),\n/* harmony export */   getClient: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.getClient),\n/* harmony export */   getCurrentHub: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.getCurrentHub),\n/* harmony export */   getCurrentScope: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.getCurrentScope),\n/* harmony export */   getHubFromCarrier: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.getHubFromCarrier),\n/* harmony export */   getModuleFromFilename: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.getModuleFromFilename),\n/* harmony export */   getSentryRelease: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.getSentryRelease),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   isBuild: () => (/* binding */ deprecatedIsBuild),\n/* harmony export */   lastEventId: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.lastEventId),\n/* harmony export */   makeMain: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.makeMain),\n/* harmony export */   makeNodeTransport: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.makeNodeTransport),\n/* harmony export */   runWithAsyncContext: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.runWithAsyncContext),\n/* harmony export */   setContext: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.setContext),\n/* harmony export */   setExtra: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.setExtra),\n/* harmony export */   setExtras: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.setExtras),\n/* harmony export */   setMeasurement: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.setMeasurement),\n/* harmony export */   setTag: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.setTag),\n/* harmony export */   setTags: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.setTags),\n/* harmony export */   setUser: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.setUser),\n/* harmony export */   showReportDialog: () => (/* binding */ showReportDialog),\n/* harmony export */   spanStatusfromHttpCode: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.spanStatusfromHttpCode),\n/* harmony export */   startActiveSpan: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.startActiveSpan),\n/* harmony export */   startInactiveSpan: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.startInactiveSpan),\n/* harmony export */   startSpan: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.startSpan),\n/* harmony export */   startSpanManual: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.startSpanManual),\n/* harmony export */   startTransaction: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.startTransaction),\n/* harmony export */   trace: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.trace),\n/* harmony export */   withErrorBoundary: () => (/* binding */ withErrorBoundary),\n/* harmony export */   withMonitor: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.withMonitor),\n/* harmony export */   withScope: () => (/* reexport safe */ _sentry_node__WEBPACK_IMPORTED_MODULE_1__.withScope),\n/* harmony export */   withSentry: () => (/* reexport safe */ _common_wrapApiHandlerWithSentry_js__WEBPACK_IMPORTED_MODULE_15__.withSentry),\n/* harmony export */   withSentryAPI: () => (/* reexport safe */ _common_wrapApiHandlerWithSentry_js__WEBPACK_IMPORTED_MODULE_15__.withSentryAPI),\n/* harmony export */   withSentryGetServerSideProps: () => (/* reexport safe */ _common_wrapGetServerSidePropsWithSentry_js__WEBPACK_IMPORTED_MODULE_8__.withSentryGetServerSideProps),\n/* harmony export */   withSentryGetStaticProps: () => (/* reexport safe */ _common_wrapGetStaticPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_3__.withSentryGetStaticProps),\n/* harmony export */   withSentryServerSideAppGetInitialProps: () => (/* reexport safe */ _common_wrapAppGetInitialPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_5__.withSentryServerSideAppGetInitialProps),\n/* harmony export */   withSentryServerSideDocumentGetInitialProps: () => (/* reexport safe */ _common_wrapDocumentGetInitialPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_6__.withSentryServerSideDocumentGetInitialProps),\n/* harmony export */   withSentryServerSideErrorGetInitialProps: () => (/* reexport safe */ _common_wrapErrorGetInitialPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_7__.withSentryServerSideErrorGetInitialProps),\n/* harmony export */   withSentryServerSideGetInitialProps: () => (/* reexport safe */ _common_wrapGetInitialPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_4__.withSentryServerSideGetInitialProps),\n/* harmony export */   withServerActionInstrumentation: () => (/* reexport safe */ _common_withServerActionInstrumentation_js__WEBPACK_IMPORTED_MODULE_14__.withServerActionInstrumentation),\n/* harmony export */   wrapApiHandlerWithSentry: () => (/* reexport safe */ _common_wrapApiHandlerWithSentry_js__WEBPACK_IMPORTED_MODULE_15__.wrapApiHandlerWithSentry),\n/* harmony export */   wrapApiHandlerWithSentryVercelCrons: () => (/* reexport safe */ _common_wrapApiHandlerWithSentryVercelCrons_js__WEBPACK_IMPORTED_MODULE_11__.wrapApiHandlerWithSentryVercelCrons),\n/* harmony export */   wrapAppGetInitialPropsWithSentry: () => (/* reexport safe */ _common_wrapAppGetInitialPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_5__.wrapAppGetInitialPropsWithSentry),\n/* harmony export */   wrapDocumentGetInitialPropsWithSentry: () => (/* reexport safe */ _common_wrapDocumentGetInitialPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_6__.wrapDocumentGetInitialPropsWithSentry),\n/* harmony export */   wrapErrorGetInitialPropsWithSentry: () => (/* reexport safe */ _common_wrapErrorGetInitialPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_7__.wrapErrorGetInitialPropsWithSentry),\n/* harmony export */   wrapGetInitialPropsWithSentry: () => (/* reexport safe */ _common_wrapGetInitialPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_4__.wrapGetInitialPropsWithSentry),\n/* harmony export */   wrapGetServerSidePropsWithSentry: () => (/* reexport safe */ _common_wrapGetServerSidePropsWithSentry_js__WEBPACK_IMPORTED_MODULE_8__.wrapGetServerSidePropsWithSentry),\n/* harmony export */   wrapGetStaticPropsWithSentry: () => (/* reexport safe */ _common_wrapGetStaticPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_3__.wrapGetStaticPropsWithSentry),\n/* harmony export */   wrapMiddlewareWithSentry: () => (/* reexport safe */ _common_wrapMiddlewareWithSentry_js__WEBPACK_IMPORTED_MODULE_12__.wrapMiddlewareWithSentry),\n/* harmony export */   wrapPageComponentWithSentry: () => (/* reexport safe */ _common_wrapPageComponentWithSentry_js__WEBPACK_IMPORTED_MODULE_13__.wrapPageComponentWithSentry),\n/* harmony export */   wrapRouteHandlerWithSentry: () => (/* reexport safe */ _common_wrapRouteHandlerWithSentry_js__WEBPACK_IMPORTED_MODULE_10__.wrapRouteHandlerWithSentry),\n/* harmony export */   wrapServerComponentWithSentry: () => (/* reexport safe */ _common_wrapServerComponentWithSentry_js__WEBPACK_IMPORTED_MODULE_9__.wrapServerComponentWithSentry)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/hubextensions.js\");\n/* harmony import */ var _sentry_integrations__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @sentry/integrations */ \"(ssr)/./node_modules/@sentry/integrations/esm/rewriteframes.js\");\n/* harmony import */ var _sentry_node__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @sentry/node */ \"(ssr)/./node_modules/@sentry/node/esm/sdk.js\");\n/* harmony import */ var _sentry_node__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @sentry/node */ \"(ssr)/./node_modules/@sentry/core/esm/exports.js\");\n/* harmony import */ var _sentry_node__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @sentry/node */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/node */ \"(ssr)/./node_modules/@sentry/node/esm/index.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/vendor/escapeStringForRegex.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/userIntegrations.js\");\n/* harmony import */ var _common_debug_build_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../common/debug-build.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/debug-build.js\");\n/* harmony import */ var _common_devErrorSymbolicationEventProcessor_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../common/devErrorSymbolicationEventProcessor.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/devErrorSymbolicationEventProcessor.js\");\n/* harmony import */ var _common_getVercelEnv_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../common/getVercelEnv.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/getVercelEnv.js\");\n/* harmony import */ var _common_metadata_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../common/metadata.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/metadata.js\");\n/* harmony import */ var _common_utils_isBuild_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../common/utils/isBuild.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/utils/isBuild.js\");\n/* harmony import */ var _common_error_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/_error.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/_error.js\");\n/* harmony import */ var _common_wrapGetStaticPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/wrapGetStaticPropsWithSentry.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapGetStaticPropsWithSentry.js\");\n/* harmony import */ var _common_wrapGetInitialPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/wrapGetInitialPropsWithSentry.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapGetInitialPropsWithSentry.js\");\n/* harmony import */ var _common_wrapAppGetInitialPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/wrapAppGetInitialPropsWithSentry.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapAppGetInitialPropsWithSentry.js\");\n/* harmony import */ var _common_wrapDocumentGetInitialPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/wrapDocumentGetInitialPropsWithSentry.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapDocumentGetInitialPropsWithSentry.js\");\n/* harmony import */ var _common_wrapErrorGetInitialPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/wrapErrorGetInitialPropsWithSentry.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapErrorGetInitialPropsWithSentry.js\");\n/* harmony import */ var _common_wrapGetServerSidePropsWithSentry_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common/wrapGetServerSidePropsWithSentry.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapGetServerSidePropsWithSentry.js\");\n/* harmony import */ var _common_wrapServerComponentWithSentry_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../common/wrapServerComponentWithSentry.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapServerComponentWithSentry.js\");\n/* harmony import */ var _common_wrapRouteHandlerWithSentry_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../common/wrapRouteHandlerWithSentry.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapRouteHandlerWithSentry.js\");\n/* harmony import */ var _common_wrapApiHandlerWithSentryVercelCrons_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../common/wrapApiHandlerWithSentryVercelCrons.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapApiHandlerWithSentryVercelCrons.js\");\n/* harmony import */ var _common_wrapMiddlewareWithSentry_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../common/wrapMiddlewareWithSentry.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapMiddlewareWithSentry.js\");\n/* harmony import */ var _common_wrapPageComponentWithSentry_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../common/wrapPageComponentWithSentry.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapPageComponentWithSentry.js\");\n/* harmony import */ var _common_withServerActionInstrumentation_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../common/withServerActionInstrumentation.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/withServerActionInstrumentation.js\");\n/* harmony import */ var _common_wrapApiHandlerWithSentry_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../common/wrapApiHandlerWithSentry.js */ \"(ssr)/./node_modules/@sentry/nextjs/esm/common/wrapApiHandlerWithSentry.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A passthrough error boundary for the server that doesn't depend on any react. Error boundaries don't catch SSR errors\n * so they should simply be a passthrough.\n */ const ErrorBoundary = (props)=>{\n    if (!props.children) {\n        return null;\n    }\n    if (typeof props.children === \"function\") {\n        return props.children();\n    }\n    // since Next.js >= 10 requires React ^16.6.0 we are allowed to return children like this here\n    return props.children;\n};\n/**\n * A passthrough error boundary wrapper for the server that doesn't depend on any react. Error boundaries don't catch\n * SSR errors so they should simply be a passthrough.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withErrorBoundary(WrappedComponent) {\n    return WrappedComponent;\n}\n/**\n * Just a passthrough since we're on the server and showing the report dialog on the server doesn't make any sense.\n */ function showReportDialog() {\n    return;\n}\nconst globalWithInjectedValues = global;\n// TODO (v8): Remove this\n/**\n * @deprecated This constant will be removed in the next major update.\n */ const IS_BUILD = (0,_common_utils_isBuild_js__WEBPACK_IMPORTED_MODULE_16__.isBuild)();\nconst IS_VERCEL = !!process.env.VERCEL;\n/** Inits the Sentry NextJS SDK on node. */ function init(options) {\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_17__.addTracingExtensions)();\n    if ((0,_common_utils_isBuild_js__WEBPACK_IMPORTED_MODULE_16__.isBuild)()) {\n        return;\n    }\n    const opts = {\n        environment: process.env.SENTRY_ENVIRONMENT || (0,_common_getVercelEnv_js__WEBPACK_IMPORTED_MODULE_18__.getVercelEnv)(false) || \"development\",\n        ...options,\n        // Right now we only capture frontend sessions for Next.js\n        autoSessionTracking: false\n    };\n    if (_common_debug_build_js__WEBPACK_IMPORTED_MODULE_19__.DEBUG_BUILD && opts.debug) {\n        _sentry_utils__WEBPACK_IMPORTED_MODULE_20__.logger.enable();\n    }\n    _common_debug_build_js__WEBPACK_IMPORTED_MODULE_19__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_20__.logger.log(\"Initializing SDK...\");\n    if (sdkAlreadyInitialized()) {\n        _common_debug_build_js__WEBPACK_IMPORTED_MODULE_19__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_20__.logger.log(\"SDK already initialized\");\n        return;\n    }\n    (0,_common_metadata_js__WEBPACK_IMPORTED_MODULE_21__.buildMetadata)(opts, [\n        \"nextjs\",\n        \"node\"\n    ]);\n    addServerIntegrations(opts);\n    (0,_sentry_node__WEBPACK_IMPORTED_MODULE_22__.init)(opts);\n    const filterTransactions = (event)=>{\n        return event.type === \"transaction\" && event.transaction === \"/404\" ? null : event;\n    };\n    filterTransactions.id = \"NextServer404TransactionFilter\";\n    (0,_sentry_node__WEBPACK_IMPORTED_MODULE_23__.configureScope)((scope)=>{\n        scope.setTag(\"runtime\", \"node\");\n        if (IS_VERCEL) {\n            scope.setTag(\"vercel\", true);\n        }\n        scope.addEventProcessor(filterTransactions);\n        if (true) {\n            scope.addEventProcessor(_common_devErrorSymbolicationEventProcessor_js__WEBPACK_IMPORTED_MODULE_24__.devErrorSymbolicationEventProcessor);\n        }\n    });\n    _common_debug_build_js__WEBPACK_IMPORTED_MODULE_19__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_20__.logger.log(\"SDK successfully initialized\");\n}\nfunction sdkAlreadyInitialized() {\n    const hub = (0,_sentry_node__WEBPACK_IMPORTED_MODULE_25__.getCurrentHub)();\n    return !!hub.getClient();\n}\nfunction addServerIntegrations(options) {\n    let integrations = options.integrations || [];\n    // This value is injected at build time, based on the output directory specified in the build config. Though a default\n    // is set there, we set it here as well, just in case something has gone wrong with the injection.\n    const distDirName = globalWithInjectedValues.__rewriteFramesDistDir__;\n    if (distDirName) {\n        // nextjs always puts the build directory at the project root level, which is also where you run `next start` from, so\n        // we can read in the project directory from the currently running process\n        const distDirAbsPath = path__WEBPACK_IMPORTED_MODULE_0__.resolve(distDirName).replace(/(\\/|\\\\)$/, \"\"); // We strip trailing slashes because \"app:///_next\" also doesn't have one\n        const SOURCEMAP_FILENAME_REGEX = new RegExp((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_26__.escapeStringForRegex)(distDirAbsPath));\n        const defaultRewriteFramesIntegration = new _sentry_integrations__WEBPACK_IMPORTED_MODULE_27__.RewriteFrames({\n            iteratee: (frame)=>{\n                frame.filename = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_28__._optionalChain)([\n                    frame,\n                    \"access\",\n                    (_)=>_.filename,\n                    \"optionalAccess\",\n                    (_2)=>_2.replace,\n                    \"call\",\n                    (_3)=>_3(SOURCEMAP_FILENAME_REGEX, \"app:///_next\")\n                ]);\n                return frame;\n            }\n        });\n        integrations = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_29__.addOrUpdateIntegration)(defaultRewriteFramesIntegration, integrations);\n    }\n    const defaultOnUncaughtExceptionIntegration = new _sentry_node__WEBPACK_IMPORTED_MODULE_1__.Integrations.OnUncaughtException({\n        exitEvenIfOtherHandlersAreRegistered: false\n    });\n    defaultOnUncaughtExceptionIntegration.allowExclusionByUser = true;\n    integrations = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_29__.addOrUpdateIntegration)(defaultOnUncaughtExceptionIntegration, integrations, {\n        _options: {\n            exitEvenIfOtherHandlersAreRegistered: false\n        }\n    });\n    const defaultHttpTracingIntegration = new _sentry_node__WEBPACK_IMPORTED_MODULE_1__.Integrations.Http({\n        tracing: true\n    });\n    integrations = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_29__.addOrUpdateIntegration)(defaultHttpTracingIntegration, integrations, {\n        _tracing: {}\n    });\n    options.integrations = integrations;\n}\n// TODO (v8): Remove this\n/**\n * @deprecated This constant will be removed in the next major update.\n */ const deprecatedIsBuild = ()=>(0,_common_utils_isBuild_js__WEBPACK_IMPORTED_MODULE_16__.isBuild)();\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/esm/server/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/baggage.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/baggage.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BAGGAGE_HEADER_NAME: () => (/* binding */ BAGGAGE_HEADER_NAME),\n/* harmony export */   MAX_BAGGAGE_STRING_LENGTH: () => (/* binding */ MAX_BAGGAGE_STRING_LENGTH),\n/* harmony export */   SENTRY_BAGGAGE_KEY_PREFIX: () => (/* binding */ SENTRY_BAGGAGE_KEY_PREFIX),\n/* harmony export */   SENTRY_BAGGAGE_KEY_PREFIX_REGEX: () => (/* binding */ SENTRY_BAGGAGE_KEY_PREFIX_REGEX),\n/* harmony export */   baggageHeaderToDynamicSamplingContext: () => (/* binding */ baggageHeaderToDynamicSamplingContext),\n/* harmony export */   dynamicSamplingContextToSentryBaggageHeader: () => (/* binding */ dynamicSamplingContextToSentryBaggageHeader)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/debug-build.js\");\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./logger.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/logger.js\");\n\n\n\nconst BAGGAGE_HEADER_NAME = \"baggage\";\nconst SENTRY_BAGGAGE_KEY_PREFIX = \"sentry-\";\nconst SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */ const MAX_BAGGAGE_STRING_LENGTH = 8192;\n/**\n * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the \"sentry-\" prefixed values\n * from it.\n *\n * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.\n * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.\n */ function baggageHeaderToDynamicSamplingContext(// Very liberal definition of what any incoming header might look like\nbaggageHeader) {\n    if (!(0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isString)(baggageHeader) && !Array.isArray(baggageHeader)) {\n        return undefined;\n    }\n    // Intermediary object to store baggage key value pairs of incoming baggage headers on.\n    // It is later used to read Sentry-DSC-values from.\n    let baggageObject = {};\n    if (Array.isArray(baggageHeader)) {\n        // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it\n        baggageObject = baggageHeader.reduce((acc, curr)=>{\n            const currBaggageObject = baggageHeaderToObject(curr);\n            return {\n                ...acc,\n                ...currBaggageObject\n            };\n        }, {});\n    } else {\n        // Return undefined if baggage header is an empty string (technically an empty baggage header is not spec conform but\n        // this is how we choose to handle it)\n        if (!baggageHeader) {\n            return undefined;\n        }\n        baggageObject = baggageHeaderToObject(baggageHeader);\n    }\n    // Read all \"sentry-\" prefixed values out of the baggage object and put it onto a dynamic sampling context object.\n    const dynamicSamplingContext = Object.entries(baggageObject).reduce((acc, [key, value])=>{\n        if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {\n            const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);\n            acc[nonPrefixedKey] = value;\n        }\n        return acc;\n    }, {});\n    // Only return a dynamic sampling context object if there are keys in it.\n    // A keyless object means there were no sentry values on the header, which means that there is no DSC.\n    if (Object.keys(dynamicSamplingContext).length > 0) {\n        return dynamicSamplingContext;\n    } else {\n        return undefined;\n    }\n}\n/**\n * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with \"sentry-\".\n *\n * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility\n * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is\n * `undefined` the function will return `undefined`.\n * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`\n * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.\n */ function dynamicSamplingContextToSentryBaggageHeader(// this also takes undefined for convenience and bundle size in other places\ndynamicSamplingContext) {\n    if (!dynamicSamplingContext) {\n        return undefined;\n    }\n    // Prefix all DSC keys with \"sentry-\" and put them into a new object\n    const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce((acc, [dscKey, dscValue])=>{\n        if (dscValue) {\n            acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;\n        }\n        return acc;\n    }, {});\n    return objectToBaggageHeader(sentryPrefixedDSC);\n}\n/**\n * Will parse a baggage header, which is a simple key-value map, into a flat object.\n *\n * @param baggageHeader The baggage header to parse.\n * @returns a flat object containing all the key-value pairs from `baggageHeader`.\n */ function baggageHeaderToObject(baggageHeader) {\n    return baggageHeader.split(\",\").map((baggageEntry)=>baggageEntry.split(\"=\").map((keyOrValue)=>decodeURIComponent(keyOrValue.trim()))).reduce((acc, [key, value])=>{\n        acc[key] = value;\n        return acc;\n    }, {});\n}\n/**\n * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.\n *\n * @param object The object to turn into a baggage header.\n * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header\n * is not spec compliant.\n */ function objectToBaggageHeader(object) {\n    if (Object.keys(object).length === 0) {\n        // An empty baggage header is not spec compliant: We return undefined.\n        return undefined;\n    }\n    return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex)=>{\n        const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;\n        const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;\n        if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(`Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`);\n            return baggageHeader;\n        } else {\n            return newBaggageHeader;\n        }\n    }, \"\");\n}\n //# sourceMappingURL=baggage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/baggage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/browser.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/browser.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDomElement: () => (/* binding */ getDomElement),\n/* harmony export */   getLocationHref: () => (/* binding */ getLocationHref),\n/* harmony export */   htmlTreeAsString: () => (/* binding */ htmlTreeAsString)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/worldwide.js\");\n\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = (0,_worldwide_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalObject)();\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */ function htmlTreeAsString(elem, options = {}) {\n    if (!elem) {\n        return \"<unknown>\";\n    }\n    // try/catch both:\n    // - accessing event.target (see getsentry/raven-js#838, #768)\n    // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n    // - can throw an exception in some circumstances.\n    try {\n        let currentElem = elem;\n        const MAX_TRAVERSE_HEIGHT = 5;\n        const out = [];\n        let height = 0;\n        let len = 0;\n        const separator = \" > \";\n        const sepLength = separator.length;\n        let nextStr;\n        const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n        const maxStringLength = !Array.isArray(options) && options.maxStringLength || DEFAULT_MAX_STRING_LENGTH;\n        while(currentElem && height++ < MAX_TRAVERSE_HEIGHT){\n            nextStr = _htmlElementAsString(currentElem, keyAttrs);\n            // bail out if\n            // - nextStr is the 'html' element\n            // - the length of the string that would be created exceeds maxStringLength\n            //   (ignore this limit if we are on the first iteration)\n            if (nextStr === \"html\" || height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength) {\n                break;\n            }\n            out.push(nextStr);\n            len += nextStr.length;\n            currentElem = currentElem.parentNode;\n        }\n        return out.reverse().join(separator);\n    } catch (_oO) {\n        return \"<unknown>\";\n    }\n}\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */ function _htmlElementAsString(el, keyAttrs) {\n    const elem = el;\n    const out = [];\n    let className;\n    let classes;\n    let key;\n    let attr;\n    let i;\n    if (!elem || !elem.tagName) {\n        return \"\";\n    }\n    out.push(elem.tagName.toLowerCase());\n    // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n    const keyAttrPairs = keyAttrs && keyAttrs.length ? keyAttrs.filter((keyAttr)=>elem.getAttribute(keyAttr)).map((keyAttr)=>[\n            keyAttr,\n            elem.getAttribute(keyAttr)\n        ]) : null;\n    if (keyAttrPairs && keyAttrPairs.length) {\n        keyAttrPairs.forEach((keyAttrPair)=>{\n            out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n        });\n    } else {\n        if (elem.id) {\n            out.push(`#${elem.id}`);\n        }\n        // eslint-disable-next-line prefer-const\n        className = elem.className;\n        if (className && (0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isString)(className)) {\n            classes = className.split(/\\s+/);\n            for(i = 0; i < classes.length; i++){\n                out.push(`.${classes[i]}`);\n            }\n        }\n    }\n    const allowedAttrs = [\n        \"aria-label\",\n        \"type\",\n        \"name\",\n        \"title\",\n        \"alt\"\n    ];\n    for(i = 0; i < allowedAttrs.length; i++){\n        key = allowedAttrs[i];\n        attr = elem.getAttribute(key);\n        if (attr) {\n            out.push(`[${key}=\"${attr}\"]`);\n        }\n    }\n    return out.join(\"\");\n}\n/**\n * A safe form of location.href\n */ function getLocationHref() {\n    try {\n        return WINDOW.document.location.href;\n    } catch (oO) {\n        return \"\";\n    }\n}\n/**\n * Gets a DOM element by using document.querySelector.\n *\n * This wrapper will first check for the existance of the function before\n * actually calling it so that we don't have to take care of this check,\n * every time we want to access the DOM.\n *\n * Reason: DOM/querySelector is not available in all environments.\n *\n * We have to cast to any because utils can be consumed by a variety of environments,\n * and we don't want to break TS users. If you know what element will be selected by\n * `document.querySelector`, specify it as part of the generic call. For example,\n * `const element = getDomElement<Element>('selector');`\n *\n * @param selector the selector string passed on to document.querySelector\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getDomElement(selector) {\n    if (WINDOW.document && WINDOW.document.querySelector) {\n        return WINDOW.document.querySelector(selector);\n    }\n    return null;\n}\n //# sourceMappingURL=browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/browser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_asyncNullishCoalesce.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_asyncNullishCoalesce.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _asyncNullishCoalesce: () => (/* binding */ _asyncNullishCoalesce)\n/* harmony export */ });\n/* harmony import */ var _nullishCoalesce_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nullishCoalesce.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js\");\n\n// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f\n/**\n * Polyfill for the nullish coalescing operator (`??`), when used in situations where at least one of the values is the\n * result of an async operation.\n *\n * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the\n * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n *\n * @param lhs The value of the expression to the left of the `??`\n * @param rhsFn A function returning the value of the expression to the right of the `??`\n * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value\n */ async function _asyncNullishCoalesce(lhs, rhsFn) {\n    return (0,_nullishCoalesce_js__WEBPACK_IMPORTED_MODULE_0__._nullishCoalesce)(lhs, rhsFn);\n}\n// Sucrase version:\n// async function _asyncNullishCoalesce(lhs, rhsFn) {\n//   if (lhs != null) {\n//     return lhs;\n//   } else {\n//     return await rhsFn();\n//   }\n// }\n //# sourceMappingURL=_asyncNullishCoalesce.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2J1aWxkUG9seWZpbGxzL19hc3luY051bGxpc2hDb2FsZXNjZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5RDtBQUV6RCx1RkFBdUY7QUFFdkY7Ozs7Ozs7Ozs7OztDQVlDLEdBQ0QsZUFBZUMsc0JBQXNCQyxHQUFHLEVBQUVDLEtBQUs7SUFDN0MsT0FBT0gscUVBQWdCQSxDQUFDRSxLQUFLQztBQUMvQjtBQUVBLG1CQUFtQjtBQUNuQixxREFBcUQ7QUFDckQsdUJBQXVCO0FBQ3ZCLGtCQUFrQjtBQUNsQixhQUFhO0FBQ2IsNEJBQTRCO0FBQzVCLE1BQU07QUFDTixJQUFJO0FBRTZCLENBQ2pDLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vYnVpbGRQb2x5ZmlsbHMvX2FzeW5jTnVsbGlzaENvYWxlc2NlLmpzPzg1YWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX251bGxpc2hDb2FsZXNjZSB9IGZyb20gJy4vX251bGxpc2hDb2FsZXNjZS5qcyc7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlL3RyZWUvMjY1ODg3ODY4OTY2OTE3ZjNiOTI0Y2UzOGRmYWQwMWZiYWIxMzI5ZlxuXG4vKipcbiAqIFBvbHlmaWxsIGZvciB0aGUgbnVsbGlzaCBjb2FsZXNjaW5nIG9wZXJhdG9yIChgPz9gKSwgd2hlbiB1c2VkIGluIHNpdHVhdGlvbnMgd2hlcmUgYXQgbGVhc3Qgb25lIG9mIHRoZSB2YWx1ZXMgaXMgdGhlXG4gKiByZXN1bHQgb2YgYW4gYXN5bmMgb3BlcmF0aW9uLlxuICpcbiAqIE5vdGUgdGhhdCB0aGUgUkhTIGlzIHdyYXBwZWQgaW4gYSBmdW5jdGlvbiBzbyB0aGF0IGlmIGl0J3MgYSBjb21wdXRlZCB2YWx1ZSwgdGhhdCBldmFsdWF0aW9uIHdvbid0IGhhcHBlbiB1bmxlc3MgdGhlXG4gKiBMSFMgZXZhbHVhdGVzIHRvIGEgbnVsbGlzaCB2YWx1ZSwgdG8gbWltaWMgdGhlIG9wZXJhdG9yJ3Mgc2hvcnQtY2lyY3VpdGluZyBiZWhhdmlvci5cbiAqXG4gKiBBZGFwdGVkIGZyb20gU3VjcmFzZSAoaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UpXG4gKlxuICogQHBhcmFtIGxocyBUaGUgdmFsdWUgb2YgdGhlIGV4cHJlc3Npb24gdG8gdGhlIGxlZnQgb2YgdGhlIGA/P2BcbiAqIEBwYXJhbSByaHNGbiBBIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgdmFsdWUgb2YgdGhlIGV4cHJlc3Npb24gdG8gdGhlIHJpZ2h0IG9mIHRoZSBgPz9gXG4gKiBAcmV0dXJucyBUaGUgTEhTIHZhbHVlLCB1bmxlc3MgaXQncyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAsIGluIHdoaWNoIGNhc2UsIHRoZSBSSFMgdmFsdWVcbiAqL1xuYXN5bmMgZnVuY3Rpb24gX2FzeW5jTnVsbGlzaENvYWxlc2NlKGxocywgcmhzRm4pIHtcbiAgcmV0dXJuIF9udWxsaXNoQ29hbGVzY2UobGhzLCByaHNGbik7XG59XG5cbi8vIFN1Y3Jhc2UgdmVyc2lvbjpcbi8vIGFzeW5jIGZ1bmN0aW9uIF9hc3luY051bGxpc2hDb2FsZXNjZShsaHMsIHJoc0ZuKSB7XG4vLyAgIGlmIChsaHMgIT0gbnVsbCkge1xuLy8gICAgIHJldHVybiBsaHM7XG4vLyAgIH0gZWxzZSB7XG4vLyAgICAgcmV0dXJuIGF3YWl0IHJoc0ZuKCk7XG4vLyAgIH1cbi8vIH1cblxuZXhwb3J0IHsgX2FzeW5jTnVsbGlzaENvYWxlc2NlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fYXN5bmNOdWxsaXNoQ29hbGVzY2UuanMubWFwXG4iXSwibmFtZXMiOlsiX251bGxpc2hDb2FsZXNjZSIsIl9hc3luY051bGxpc2hDb2FsZXNjZSIsImxocyIsInJoc0ZuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_asyncNullishCoalesce.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _nullishCoalesce: () => (/* binding */ _nullishCoalesce)\n/* harmony export */ });\n// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2012-2018 various contributors (see AUTHORS)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n/**\n * Polyfill for the nullish coalescing operator (`??`).\n *\n * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the\n * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n *\n * @param lhs The value of the expression to the left of the `??`\n * @param rhsFn A function returning the value of the expression to the right of the `??`\n * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value\n */ function _nullishCoalesce(lhs, rhsFn) {\n    // by checking for loose equality to `null`, we catch both `null` and `undefined`\n    return lhs != null ? lhs : rhsFn();\n}\n// Sucrase version:\n// function _nullishCoalesce(lhs, rhsFn) {\n//   if (lhs != null) {\n//     return lhs;\n//   } else {\n//     return rhsFn();\n//   }\n// }\n //# sourceMappingURL=_nullishCoalesce.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2J1aWxkUG9seWZpbGxzL19udWxsaXNoQ29hbGVzY2UuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHVGQUF1RjtBQUN2RixFQUFFO0FBQ0Ysd0JBQXdCO0FBQ3hCLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtFQUErRTtBQUMvRSxnRkFBZ0Y7QUFDaEYsK0VBQStFO0FBQy9FLDRFQUE0RTtBQUM1RSx3RUFBd0U7QUFDeEUsMkRBQTJEO0FBQzNELEVBQUU7QUFDRixpRkFBaUY7QUFDakYsa0RBQWtEO0FBQ2xELEVBQUU7QUFDRiw2RUFBNkU7QUFDN0UsMkVBQTJFO0FBQzNFLDhFQUE4RTtBQUM5RSx5RUFBeUU7QUFDekUsZ0ZBQWdGO0FBQ2hGLGdGQUFnRjtBQUNoRixZQUFZO0FBRVo7Ozs7Ozs7Ozs7O0NBV0MsR0FDRCxTQUFTQSxpQkFBaUJDLEdBQUcsRUFBRUMsS0FBSztJQUNsQyxpRkFBaUY7SUFDakYsT0FBT0QsT0FBTyxPQUFPQSxNQUFNQztBQUM3QjtBQUVBLG1CQUFtQjtBQUNuQiwwQ0FBMEM7QUFDMUMsdUJBQXVCO0FBQ3ZCLGtCQUFrQjtBQUNsQixhQUFhO0FBQ2Isc0JBQXNCO0FBQ3RCLE1BQU07QUFDTixJQUFJO0FBRXdCLENBQzVCLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vYnVpbGRQb2x5ZmlsbHMvX251bGxpc2hDb2FsZXNjZS5qcz8zOGVkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlL3RyZWUvMjY1ODg3ODY4OTY2OTE3ZjNiOTI0Y2UzOGRmYWQwMWZiYWIxMzI5ZlxuLy9cbi8vIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuLy9cbi8vIENvcHlyaWdodCAoYykgMjAxMi0yMDE4IHZhcmlvdXMgY29udHJpYnV0b3JzIChzZWUgQVVUSE9SUylcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4vLyBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbi8vIFNPRlRXQVJFLlxuXG4vKipcbiAqIFBvbHlmaWxsIGZvciB0aGUgbnVsbGlzaCBjb2FsZXNjaW5nIG9wZXJhdG9yIChgPz9gKS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhlIFJIUyBpcyB3cmFwcGVkIGluIGEgZnVuY3Rpb24gc28gdGhhdCBpZiBpdCdzIGEgY29tcHV0ZWQgdmFsdWUsIHRoYXQgZXZhbHVhdGlvbiB3b24ndCBoYXBwZW4gdW5sZXNzIHRoZVxuICogTEhTIGV2YWx1YXRlcyB0byBhIG51bGxpc2ggdmFsdWUsIHRvIG1pbWljIHRoZSBvcGVyYXRvcidzIHNob3J0LWNpcmN1aXRpbmcgYmVoYXZpb3IuXG4gKlxuICogQWRhcHRlZCBmcm9tIFN1Y3Jhc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlKVxuICpcbiAqIEBwYXJhbSBsaHMgVGhlIHZhbHVlIG9mIHRoZSBleHByZXNzaW9uIHRvIHRoZSBsZWZ0IG9mIHRoZSBgPz9gXG4gKiBAcGFyYW0gcmhzRm4gQSBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIHZhbHVlIG9mIHRoZSBleHByZXNzaW9uIHRvIHRoZSByaWdodCBvZiB0aGUgYD8/YFxuICogQHJldHVybnMgVGhlIExIUyB2YWx1ZSwgdW5sZXNzIGl0J3MgYG51bGxgIG9yIGB1bmRlZmluZWRgLCBpbiB3aGljaCBjYXNlLCB0aGUgUkhTIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIF9udWxsaXNoQ29hbGVzY2UobGhzLCByaHNGbikge1xuICAvLyBieSBjaGVja2luZyBmb3IgbG9vc2UgZXF1YWxpdHkgdG8gYG51bGxgLCB3ZSBjYXRjaCBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgcmV0dXJuIGxocyAhPSBudWxsID8gbGhzIDogcmhzRm4oKTtcbn1cblxuLy8gU3VjcmFzZSB2ZXJzaW9uOlxuLy8gZnVuY3Rpb24gX251bGxpc2hDb2FsZXNjZShsaHMsIHJoc0ZuKSB7XG4vLyAgIGlmIChsaHMgIT0gbnVsbCkge1xuLy8gICAgIHJldHVybiBsaHM7XG4vLyAgIH0gZWxzZSB7XG4vLyAgICAgcmV0dXJuIHJoc0ZuKCk7XG4vLyAgIH1cbi8vIH1cblxuZXhwb3J0IHsgX251bGxpc2hDb2FsZXNjZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X251bGxpc2hDb2FsZXNjZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJfbnVsbGlzaENvYWxlc2NlIiwibGhzIiwicmhzRm4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _optionalChain: () => (/* binding */ _optionalChain)\n/* harmony export */ });\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n * See https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The value of the expression\n */ function _optionalChain(ops) {\n    let lastAccessLHS = undefined;\n    let value = ops[0];\n    let i = 1;\n    while(i < ops.length){\n        const op = ops[i];\n        const fn = ops[i + 1];\n        i += 2;\n        // by checking for loose equality to `null`, we catch both `null` and `undefined`\n        if ((op === \"optionalAccess\" || op === \"optionalCall\") && value == null) {\n            // really we're meaning to return `undefined` as an actual value here, but it saves bytes not to write it\n            return;\n        }\n        if (op === \"access\" || op === \"optionalAccess\") {\n            lastAccessLHS = value;\n            value = fn(value);\n        } else if (op === \"call\" || op === \"optionalCall\") {\n            value = fn((...args)=>value.call(lastAccessLHS, ...args));\n            lastAccessLHS = undefined;\n        }\n    }\n    return value;\n}\n// Sucrase version\n// function _optionalChain(ops) {\n//   let lastAccessLHS = undefined;\n//   let value = ops[0];\n//   let i = 1;\n//   while (i < ops.length) {\n//     const op = ops[i];\n//     const fn = ops[i + 1];\n//     i += 2;\n//     if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n//       return undefined;\n//     }\n//     if (op === 'access' || op === 'optionalAccess') {\n//       lastAccessLHS = value;\n//       value = fn(value);\n//     } else if (op === 'call' || op === 'optionalCall') {\n//       value = fn((...args) => value.call(lastAccessLHS, ...args));\n//       lastAccessLHS = undefined;\n//     }\n//   }\n//   return value;\n// }\n //# sourceMappingURL=_optionalChain.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2J1aWxkUG9seWZpbGxzL19vcHRpb25hbENoYWluLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRCxTQUFTQSxlQUFlQyxHQUFHO0lBQ3pCLElBQUlDLGdCQUFnQkM7SUFDcEIsSUFBSUMsUUFBUUgsR0FBRyxDQUFDLEVBQUU7SUFDbEIsSUFBSUksSUFBSTtJQUNSLE1BQU9BLElBQUlKLElBQUlLLE1BQU0sQ0FBRTtRQUNyQixNQUFNQyxLQUFLTixHQUFHLENBQUNJLEVBQUU7UUFDakIsTUFBTUcsS0FBS1AsR0FBRyxDQUFDSSxJQUFJLEVBQUU7UUFDckJBLEtBQUs7UUFDTCxpRkFBaUY7UUFDakYsSUFBSSxDQUFDRSxPQUFPLG9CQUFvQkEsT0FBTyxjQUFhLEtBQU1ILFNBQVMsTUFBTTtZQUN2RSx5R0FBeUc7WUFDekc7UUFDRjtRQUNBLElBQUlHLE9BQU8sWUFBWUEsT0FBTyxrQkFBa0I7WUFDOUNMLGdCQUFnQkU7WUFDaEJBLFFBQVFJLEdBQUdKO1FBQ2IsT0FBTyxJQUFJRyxPQUFPLFVBQVVBLE9BQU8sZ0JBQWdCO1lBQ2pESCxRQUFRSSxHQUFHLENBQUMsR0FBR0MsT0FBUyxNQUFTQyxJQUFJLENBQUNSLGtCQUFrQk87WUFDeERQLGdCQUFnQkM7UUFDbEI7SUFDRjtJQUNBLE9BQU9DO0FBQ1Q7QUFFQSxrQkFBa0I7QUFDbEIsaUNBQWlDO0FBQ2pDLG1DQUFtQztBQUNuQyx3QkFBd0I7QUFDeEIsZUFBZTtBQUNmLDZCQUE2QjtBQUM3Qix5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLGNBQWM7QUFDZCxpRkFBaUY7QUFDakYsMEJBQTBCO0FBQzFCLFFBQVE7QUFDUix3REFBd0Q7QUFDeEQsK0JBQStCO0FBQy9CLDJCQUEyQjtBQUMzQiwyREFBMkQ7QUFDM0QscUVBQXFFO0FBQ3JFLG1DQUFtQztBQUNuQyxRQUFRO0FBQ1IsTUFBTTtBQUNOLGtCQUFrQjtBQUNsQixJQUFJO0FBRXNCLENBQzFCLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vYnVpbGRQb2x5ZmlsbHMvX29wdGlvbmFsQ2hhaW4uanM/MDc0YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFBvbHlmaWxsIGZvciB0aGUgb3B0aW9uYWwgY2hhaW4gb3BlcmF0b3IsIGA/LmAsIGdpdmVuIHByZXZpb3VzIGNvbnZlcnNpb24gb2YgdGhlIGV4cHJlc3Npb24gaW50byBhbiBhcnJheSBvZiB2YWx1ZXMsXG4gKiBkZXNjcmlwdG9ycywgYW5kIGZ1bmN0aW9ucy5cbiAqXG4gKiBBZGFwdGVkIGZyb20gU3VjcmFzZSAoaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UpXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UvYmxvYi8yNjU4ODc4Njg5NjY5MTdmM2I5MjRjZTM4ZGZhZDAxZmJhYjEzMjlmL3NyYy90cmFuc2Zvcm1lcnMvT3B0aW9uYWxDaGFpbmluZ051bGxpc2hUcmFuc2Zvcm1lci50cyNMMTVcbiAqXG4gKiBAcGFyYW0gb3BzIEFycmF5IHJlc3VsdCBvZiBleHByZXNzaW9uIGNvbnZlcnNpb25cbiAqIEByZXR1cm5zIFRoZSB2YWx1ZSBvZiB0aGUgZXhwcmVzc2lvblxuICovXG5mdW5jdGlvbiBfb3B0aW9uYWxDaGFpbihvcHMpIHtcbiAgbGV0IGxhc3RBY2Nlc3NMSFMgPSB1bmRlZmluZWQ7XG4gIGxldCB2YWx1ZSA9IG9wc1swXTtcbiAgbGV0IGkgPSAxO1xuICB3aGlsZSAoaSA8IG9wcy5sZW5ndGgpIHtcbiAgICBjb25zdCBvcCA9IG9wc1tpXSA7XG4gICAgY29uc3QgZm4gPSBvcHNbaSArIDFdIDtcbiAgICBpICs9IDI7XG4gICAgLy8gYnkgY2hlY2tpbmcgZm9yIGxvb3NlIGVxdWFsaXR5IHRvIGBudWxsYCwgd2UgY2F0Y2ggYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gICAgaWYgKChvcCA9PT0gJ29wdGlvbmFsQWNjZXNzJyB8fCBvcCA9PT0gJ29wdGlvbmFsQ2FsbCcpICYmIHZhbHVlID09IG51bGwpIHtcbiAgICAgIC8vIHJlYWxseSB3ZSdyZSBtZWFuaW5nIHRvIHJldHVybiBgdW5kZWZpbmVkYCBhcyBhbiBhY3R1YWwgdmFsdWUgaGVyZSwgYnV0IGl0IHNhdmVzIGJ5dGVzIG5vdCB0byB3cml0ZSBpdFxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAob3AgPT09ICdhY2Nlc3MnIHx8IG9wID09PSAnb3B0aW9uYWxBY2Nlc3MnKSB7XG4gICAgICBsYXN0QWNjZXNzTEhTID0gdmFsdWU7XG4gICAgICB2YWx1ZSA9IGZuKHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKG9wID09PSAnY2FsbCcgfHwgb3AgPT09ICdvcHRpb25hbENhbGwnKSB7XG4gICAgICB2YWx1ZSA9IGZuKCguLi5hcmdzKSA9PiAodmFsdWUgKS5jYWxsKGxhc3RBY2Nlc3NMSFMsIC4uLmFyZ3MpKTtcbiAgICAgIGxhc3RBY2Nlc3NMSFMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuLy8gU3VjcmFzZSB2ZXJzaW9uXG4vLyBmdW5jdGlvbiBfb3B0aW9uYWxDaGFpbihvcHMpIHtcbi8vICAgbGV0IGxhc3RBY2Nlc3NMSFMgPSB1bmRlZmluZWQ7XG4vLyAgIGxldCB2YWx1ZSA9IG9wc1swXTtcbi8vICAgbGV0IGkgPSAxO1xuLy8gICB3aGlsZSAoaSA8IG9wcy5sZW5ndGgpIHtcbi8vICAgICBjb25zdCBvcCA9IG9wc1tpXTtcbi8vICAgICBjb25zdCBmbiA9IG9wc1tpICsgMV07XG4vLyAgICAgaSArPSAyO1xuLy8gICAgIGlmICgob3AgPT09ICdvcHRpb25hbEFjY2VzcycgfHwgb3AgPT09ICdvcHRpb25hbENhbGwnKSAmJiB2YWx1ZSA9PSBudWxsKSB7XG4vLyAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuLy8gICAgIH1cbi8vICAgICBpZiAob3AgPT09ICdhY2Nlc3MnIHx8IG9wID09PSAnb3B0aW9uYWxBY2Nlc3MnKSB7XG4vLyAgICAgICBsYXN0QWNjZXNzTEhTID0gdmFsdWU7XG4vLyAgICAgICB2YWx1ZSA9IGZuKHZhbHVlKTtcbi8vICAgICB9IGVsc2UgaWYgKG9wID09PSAnY2FsbCcgfHwgb3AgPT09ICdvcHRpb25hbENhbGwnKSB7XG4vLyAgICAgICB2YWx1ZSA9IGZuKCguLi5hcmdzKSA9PiB2YWx1ZS5jYWxsKGxhc3RBY2Nlc3NMSFMsIC4uLmFyZ3MpKTtcbi8vICAgICAgIGxhc3RBY2Nlc3NMSFMgPSB1bmRlZmluZWQ7XG4vLyAgICAgfVxuLy8gICB9XG4vLyAgIHJldHVybiB2YWx1ZTtcbi8vIH1cblxuZXhwb3J0IHsgX29wdGlvbmFsQ2hhaW4gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9vcHRpb25hbENoYWluLmpzLm1hcFxuIl0sIm5hbWVzIjpbIl9vcHRpb25hbENoYWluIiwib3BzIiwibGFzdEFjY2Vzc0xIUyIsInVuZGVmaW5lZCIsInZhbHVlIiwiaSIsImxlbmd0aCIsIm9wIiwiZm4iLCJhcmdzIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/cookie.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/cookie.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseCookie: () => (/* binding */ parseCookie)\n/* harmony export */ });\n/**\n * This code was originally copied from the 'cookie` module at v0.5.0 and was simplified for our use case.\n * https://github.com/jshttp/cookie/blob/a0c84147aab6266bdb3996cf4062e93907c0b0fc/index.js\n * It had the following license:\n *\n * (The MIT License)\n *\n * Copyright (c) 2012-2014 Roman Shtylman <shtylman@gmail.com>\n * Copyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */ /**\n * Parses a cookie string\n */ function parseCookie(str) {\n    const obj = {};\n    let index = 0;\n    while(index < str.length){\n        const eqIdx = str.indexOf(\"=\", index);\n        // no more cookie pairs\n        if (eqIdx === -1) {\n            break;\n        }\n        let endIdx = str.indexOf(\";\", index);\n        if (endIdx === -1) {\n            endIdx = str.length;\n        } else if (endIdx < eqIdx) {\n            // backtrack on prior semicolon\n            index = str.lastIndexOf(\";\", eqIdx - 1) + 1;\n            continue;\n        }\n        const key = str.slice(index, eqIdx).trim();\n        // only assign once\n        if (undefined === obj[key]) {\n            let val = str.slice(eqIdx + 1, endIdx).trim();\n            // quoted values\n            if (val.charCodeAt(0) === 0x22) {\n                val = val.slice(1, -1);\n            }\n            try {\n                obj[key] = val.indexOf(\"%\") !== -1 ? decodeURIComponent(val) : val;\n            } catch (e) {\n                obj[key] = val;\n            }\n        }\n        index = endIdx + 1;\n    }\n    return obj;\n}\n //# sourceMappingURL=cookie.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2Nvb2tpZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0E0QkMsR0FFRDs7Q0FFQyxHQUNELFNBQVNBLFlBQVlDLEdBQUc7SUFDdEIsTUFBTUMsTUFBTSxDQUFDO0lBQ2IsSUFBSUMsUUFBUTtJQUVaLE1BQU9BLFFBQVFGLElBQUlHLE1BQU0sQ0FBRTtRQUN6QixNQUFNQyxRQUFRSixJQUFJSyxPQUFPLENBQUMsS0FBS0g7UUFFL0IsdUJBQXVCO1FBQ3ZCLElBQUlFLFVBQVUsQ0FBQyxHQUFHO1lBQ2hCO1FBQ0Y7UUFFQSxJQUFJRSxTQUFTTixJQUFJSyxPQUFPLENBQUMsS0FBS0g7UUFFOUIsSUFBSUksV0FBVyxDQUFDLEdBQUc7WUFDakJBLFNBQVNOLElBQUlHLE1BQU07UUFDckIsT0FBTyxJQUFJRyxTQUFTRixPQUFPO1lBQ3pCLCtCQUErQjtZQUMvQkYsUUFBUUYsSUFBSU8sV0FBVyxDQUFDLEtBQUtILFFBQVEsS0FBSztZQUMxQztRQUNGO1FBRUEsTUFBTUksTUFBTVIsSUFBSVMsS0FBSyxDQUFDUCxPQUFPRSxPQUFPTSxJQUFJO1FBRXhDLG1CQUFtQjtRQUNuQixJQUFJQyxjQUFjVixHQUFHLENBQUNPLElBQUksRUFBRTtZQUMxQixJQUFJSSxNQUFNWixJQUFJUyxLQUFLLENBQUNMLFFBQVEsR0FBR0UsUUFBUUksSUFBSTtZQUUzQyxnQkFBZ0I7WUFDaEIsSUFBSUUsSUFBSUMsVUFBVSxDQUFDLE9BQU8sTUFBTTtnQkFDOUJELE1BQU1BLElBQUlILEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDdEI7WUFFQSxJQUFJO2dCQUNGUixHQUFHLENBQUNPLElBQUksR0FBR0ksSUFBSVAsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJUyxtQkFBbUJGLE9BQU9BO1lBQ2pFLEVBQUUsT0FBT0csR0FBRztnQkFDVmQsR0FBRyxDQUFDTyxJQUFJLEdBQUdJO1lBQ2I7UUFDRjtRQUVBVixRQUFRSSxTQUFTO0lBQ25CO0lBRUEsT0FBT0w7QUFDVDtBQUV1QixDQUN2QixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2Nvb2tpZS5qcz8xNmI3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBjb2RlIHdhcyBvcmlnaW5hbGx5IGNvcGllZCBmcm9tIHRoZSAnY29va2llYCBtb2R1bGUgYXQgdjAuNS4wIGFuZCB3YXMgc2ltcGxpZmllZCBmb3Igb3VyIHVzZSBjYXNlLlxuICogaHR0cHM6Ly9naXRodWIuY29tL2pzaHR0cC9jb29raWUvYmxvYi9hMGM4NDE0N2FhYjYyNjZiZGIzOTk2Y2Y0MDYyZTkzOTA3YzBiMGZjL2luZGV4LmpzXG4gKiBJdCBoYWQgdGhlIGZvbGxvd2luZyBsaWNlbnNlOlxuICpcbiAqIChUaGUgTUlUIExpY2Vuc2UpXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTQgUm9tYW4gU2h0eWxtYW4gPHNodHlsbWFuQGdtYWlsLmNvbT5cbiAqIENvcHlyaWdodCAoYykgMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvbiA8ZG91Z0Bzb21ldGhpbmdkb3VnLmNvbT5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmdcbiAqIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuICogJ1NvZnR3YXJlJyksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuICogd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuICogZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG4gKiBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG9cbiAqIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICogaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0ZcbiAqIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC5cbiAqIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZXG4gKiBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULFxuICogVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEVcbiAqIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5cbi8qKlxuICogUGFyc2VzIGEgY29va2llIHN0cmluZ1xuICovXG5mdW5jdGlvbiBwYXJzZUNvb2tpZShzdHIpIHtcbiAgY29uc3Qgb2JqID0ge307XG4gIGxldCBpbmRleCA9IDA7XG5cbiAgd2hpbGUgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIGNvbnN0IGVxSWR4ID0gc3RyLmluZGV4T2YoJz0nLCBpbmRleCk7XG5cbiAgICAvLyBubyBtb3JlIGNvb2tpZSBwYWlyc1xuICAgIGlmIChlcUlkeCA9PT0gLTEpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGxldCBlbmRJZHggPSBzdHIuaW5kZXhPZignOycsIGluZGV4KTtcblxuICAgIGlmIChlbmRJZHggPT09IC0xKSB7XG4gICAgICBlbmRJZHggPSBzdHIubGVuZ3RoO1xuICAgIH0gZWxzZSBpZiAoZW5kSWR4IDwgZXFJZHgpIHtcbiAgICAgIC8vIGJhY2t0cmFjayBvbiBwcmlvciBzZW1pY29sb25cbiAgICAgIGluZGV4ID0gc3RyLmxhc3RJbmRleE9mKCc7JywgZXFJZHggLSAxKSArIDE7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb25zdCBrZXkgPSBzdHIuc2xpY2UoaW5kZXgsIGVxSWR4KS50cmltKCk7XG5cbiAgICAvLyBvbmx5IGFzc2lnbiBvbmNlXG4gICAgaWYgKHVuZGVmaW5lZCA9PT0gb2JqW2tleV0pIHtcbiAgICAgIGxldCB2YWwgPSBzdHIuc2xpY2UoZXFJZHggKyAxLCBlbmRJZHgpLnRyaW0oKTtcblxuICAgICAgLy8gcXVvdGVkIHZhbHVlc1xuICAgICAgaWYgKHZhbC5jaGFyQ29kZUF0KDApID09PSAweDIyKSB7XG4gICAgICAgIHZhbCA9IHZhbC5zbGljZSgxLCAtMSk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIG9ialtrZXldID0gdmFsLmluZGV4T2YoJyUnKSAhPT0gLTEgPyBkZWNvZGVVUklDb21wb25lbnQodmFsKSA6IHZhbDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgb2JqW2tleV0gPSB2YWw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW5kZXggPSBlbmRJZHggKyAxO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZXhwb3J0IHsgcGFyc2VDb29raWUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvb2tpZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJwYXJzZUNvb2tpZSIsInN0ciIsIm9iaiIsImluZGV4IiwibGVuZ3RoIiwiZXFJZHgiLCJpbmRleE9mIiwiZW5kSWR4IiwibGFzdEluZGV4T2YiLCJrZXkiLCJzbGljZSIsInRyaW0iLCJ1bmRlZmluZWQiLCJ2YWwiLCJjaGFyQ29kZUF0IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/cookie.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/debug-build.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/debug-build.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEBUG_BUILD: () => (/* binding */ DEBUG_BUILD)\n/* harmony export */ });\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */ const DEBUG_BUILD =  false || false;\n //# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2RlYnVnLWJ1aWxkLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztDQUlDLEdBQ0QsTUFBTUEsY0FBZSxNQUE0QixJQUFlQyxLQUFnQkE7QUFFekQsQ0FDdkIsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9kZWJ1Zy1idWlsZC5qcz8wODZhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBzZXJ2ZXMgYXMgYSBidWlsZCB0aW1lIGZsYWcgdGhhdCB3aWxsIGJlIHRydWUgYnkgZGVmYXVsdCwgYnV0IGZhbHNlIGluIG5vbi1kZWJ1ZyBidWlsZHMgb3IgaWYgdXNlcnMgcmVwbGFjZSBgX19TRU5UUllfREVCVUdfX2AgaW4gdGhlaXIgZ2VuZXJhdGVkIGNvZGUuXG4gKlxuICogQVRURU5USU9OOiBUaGlzIGNvbnN0YW50IG11c3QgbmV2ZXIgY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzIChpLmUuIGJlIGV4cG9ydGVkKSB0byBndWFyYW50ZWUgdGhhdCBpdCBjYW4gYmUgdXNlZCBmb3IgdHJlZSBzaGFraW5nLlxuICovXG5jb25zdCBERUJVR19CVUlMRCA9ICh0eXBlb2YgX19TRU5UUllfREVCVUdfXyA9PT0gJ3VuZGVmaW5lZCcgfHwgX19TRU5UUllfREVCVUdfXyk7XG5cbmV4cG9ydCB7IERFQlVHX0JVSUxEIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJ1Zy1idWlsZC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJERUJVR19CVUlMRCIsIl9fU0VOVFJZX0RFQlVHX18iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/debug-build.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/is.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/is.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDOMError: () => (/* binding */ isDOMError),\n/* harmony export */   isDOMException: () => (/* binding */ isDOMException),\n/* harmony export */   isElement: () => (/* binding */ isElement),\n/* harmony export */   isError: () => (/* binding */ isError),\n/* harmony export */   isErrorEvent: () => (/* binding */ isErrorEvent),\n/* harmony export */   isEvent: () => (/* binding */ isEvent),\n/* harmony export */   isInstanceOf: () => (/* binding */ isInstanceOf),\n/* harmony export */   isNaN: () => (/* binding */ isNaN),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isPrimitive: () => (/* binding */ isPrimitive),\n/* harmony export */   isRegExp: () => (/* binding */ isRegExp),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isSyntheticEvent: () => (/* binding */ isSyntheticEvent),\n/* harmony export */   isThenable: () => (/* binding */ isThenable),\n/* harmony export */   isVueViewModel: () => (/* binding */ isVueViewModel)\n/* harmony export */ });\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isError(wat) {\n    switch(objectToString.call(wat)){\n        case \"[object Error]\":\n        case \"[object Exception]\":\n        case \"[object DOMException]\":\n            return true;\n        default:\n            return isInstanceOf(wat, Error);\n    }\n}\n/**\n * Checks whether given value is an instance of the given built-in class.\n *\n * @param wat The value to be checked\n * @param className\n * @returns A boolean representing the result.\n */ function isBuiltin(wat, className) {\n    return objectToString.call(wat) === `[object ${className}]`;\n}\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isErrorEvent(wat) {\n    return isBuiltin(wat, \"ErrorEvent\");\n}\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isDOMError(wat) {\n    return isBuiltin(wat, \"DOMError\");\n}\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isDOMException(wat) {\n    return isBuiltin(wat, \"DOMException\");\n}\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isString(wat) {\n    return isBuiltin(wat, \"String\");\n}\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isPrimitive(wat) {\n    return wat === null || typeof wat !== \"object\" && typeof wat !== \"function\";\n}\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isPlainObject(wat) {\n    return isBuiltin(wat, \"Object\");\n}\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isEvent(wat) {\n    return typeof Event !== \"undefined\" && isInstanceOf(wat, Event);\n}\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isElement(wat) {\n    return typeof Element !== \"undefined\" && isInstanceOf(wat, Element);\n}\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isRegExp(wat) {\n    return isBuiltin(wat, \"RegExp\");\n}\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */ function isThenable(wat) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return Boolean(wat && wat.then && typeof wat.then === \"function\");\n}\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isSyntheticEvent(wat) {\n    return isPlainObject(wat) && \"nativeEvent\" in wat && \"preventDefault\" in wat && \"stopPropagation\" in wat;\n}\n/**\n * Checks whether given value is NaN\n * {@link isNaN}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isNaN(wat) {\n    return typeof wat === \"number\" && wat !== wat;\n}\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */ function isInstanceOf(wat, base) {\n    try {\n        return wat instanceof base;\n    } catch (_e) {\n        return false;\n    }\n}\n/**\n * Checks whether given value's type is a Vue ViewModel.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isVueViewModel(wat) {\n    // Not using Object.prototype.toString because in Vue 3 it would read the instance's Symbol(Symbol.toStringTag) property.\n    return !!(typeof wat === \"object\" && wat !== null && (wat.__isVue || wat._isVue));\n}\n //# sourceMappingURL=is.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/is.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/logger.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/logger.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONSOLE_LEVELS: () => (/* binding */ CONSOLE_LEVELS),\n/* harmony export */   consoleSandbox: () => (/* binding */ consoleSandbox),\n/* harmony export */   logger: () => (/* binding */ logger),\n/* harmony export */   originalConsoleMethods: () => (/* binding */ originalConsoleMethods)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/debug-build.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/worldwide.js\");\n\n\n/** Prefix for logging strings */ const PREFIX = \"Sentry Logger \";\nconst CONSOLE_LEVELS = [\n    \"debug\",\n    \"info\",\n    \"warn\",\n    \"error\",\n    \"log\",\n    \"assert\",\n    \"trace\"\n];\n/** This may be mutated by the console instrumentation. */ const originalConsoleMethods = {};\n/** JSDoc */ /**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */ function consoleSandbox(callback) {\n    if (!(\"console\" in _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ)) {\n        return callback();\n    }\n    const console = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ.console;\n    const wrappedFuncs = {};\n    const wrappedLevels = Object.keys(originalConsoleMethods);\n    // Restore all wrapped console methods\n    wrappedLevels.forEach((level)=>{\n        const originalConsoleMethod = originalConsoleMethods[level];\n        wrappedFuncs[level] = console[level];\n        console[level] = originalConsoleMethod;\n    });\n    try {\n        return callback();\n    } finally{\n        // Revert restoration to wrapped state\n        wrappedLevels.forEach((level)=>{\n            console[level] = wrappedFuncs[level];\n        });\n    }\n}\nfunction makeLogger() {\n    let enabled = false;\n    const logger = {\n        enable: ()=>{\n            enabled = true;\n        },\n        disable: ()=>{\n            enabled = false;\n        },\n        isEnabled: ()=>enabled\n    };\n    if (_debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD) {\n        CONSOLE_LEVELS.forEach((name)=>{\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            logger[name] = (...args)=>{\n                if (enabled) {\n                    consoleSandbox(()=>{\n                        _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n                    });\n                }\n            };\n        });\n    } else {\n        CONSOLE_LEVELS.forEach((name)=>{\n            logger[name] = ()=>undefined;\n        });\n    }\n    return logger;\n}\nconst logger = makeLogger();\n //# sourceMappingURL=logger.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2xvZ2dlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBK0M7QUFDSDtBQUU1QywrQkFBK0IsR0FDL0IsTUFBTUUsU0FBUztBQUVmLE1BQU1DLGlCQUFpQjtJQUNyQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNEO0FBRUQsd0RBQXdELEdBQ3hELE1BQU1DLHlCQUVILENBQUM7QUFFSixVQUFVLEdBRVY7Ozs7O0NBS0MsR0FDRCxTQUFTQyxlQUFlQyxRQUFRO0lBQzlCLElBQUksQ0FBRSxtRUFBc0IsR0FBSTtRQUM5QixPQUFPQTtJQUNUO0lBRUEsTUFBTUMsVUFBVU4scURBQVVBLENBQUNNLE9BQU87SUFDbEMsTUFBTUMsZUFBZSxDQUFDO0lBRXRCLE1BQU1DLGdCQUFnQkMsT0FBT0MsSUFBSSxDQUFDUDtJQUVsQyxzQ0FBc0M7SUFDdENLLGNBQWNHLE9BQU8sQ0FBQ0MsQ0FBQUE7UUFDcEIsTUFBTUMsd0JBQXdCVixzQkFBc0IsQ0FBQ1MsTUFBTTtRQUMzREwsWUFBWSxDQUFDSyxNQUFNLEdBQUdOLE9BQU8sQ0FBQ00sTUFBTTtRQUNwQ04sT0FBTyxDQUFDTSxNQUFNLEdBQUdDO0lBQ25CO0lBRUEsSUFBSTtRQUNGLE9BQU9SO0lBQ1QsU0FBVTtRQUNSLHNDQUFzQztRQUN0Q0csY0FBY0csT0FBTyxDQUFDQyxDQUFBQTtZQUNwQk4sT0FBTyxDQUFDTSxNQUFNLEdBQUdMLFlBQVksQ0FBQ0ssTUFBTTtRQUN0QztJQUNGO0FBQ0Y7QUFFQSxTQUFTRTtJQUNQLElBQUlDLFVBQVU7SUFDZCxNQUFNQyxTQUFTO1FBQ2JDLFFBQVE7WUFDTkYsVUFBVTtRQUNaO1FBQ0FHLFNBQVM7WUFDUEgsVUFBVTtRQUNaO1FBQ0FJLFdBQVcsSUFBTUo7SUFDbkI7SUFFQSxJQUFJaEIsd0RBQVdBLEVBQUU7UUFDZkcsZUFBZVMsT0FBTyxDQUFDUyxDQUFBQTtZQUNyQiw4REFBOEQ7WUFDOURKLE1BQU0sQ0FBQ0ksS0FBSyxHQUFHLENBQUMsR0FBR0M7Z0JBQ2pCLElBQUlOLFNBQVM7b0JBQ1hYLGVBQWU7d0JBQ2JKLHFEQUFVQSxDQUFDTSxPQUFPLENBQUNjLEtBQUssQ0FBQyxDQUFDLEVBQUVuQixPQUFPLENBQUMsRUFBRW1CLEtBQUssRUFBRSxDQUFDLEtBQUtDO29CQUNyRDtnQkFDRjtZQUNGO1FBQ0Y7SUFDRixPQUFPO1FBQ0xuQixlQUFlUyxPQUFPLENBQUNTLENBQUFBO1lBQ3JCSixNQUFNLENBQUNJLEtBQUssR0FBRyxJQUFNRTtRQUN2QjtJQUNGO0lBRUEsT0FBT047QUFDVDtBQUVBLE1BQU1BLFNBQVNGO0FBRTJELENBQzFFLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vbG9nZ2VyLmpzPzc1OTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgREVCVUdfQlVJTEQgfSBmcm9tICcuL2RlYnVnLWJ1aWxkLmpzJztcbmltcG9ydCB7IEdMT0JBTF9PQkogfSBmcm9tICcuL3dvcmxkd2lkZS5qcyc7XG5cbi8qKiBQcmVmaXggZm9yIGxvZ2dpbmcgc3RyaW5ncyAqL1xuY29uc3QgUFJFRklYID0gJ1NlbnRyeSBMb2dnZXIgJztcblxuY29uc3QgQ09OU09MRV9MRVZFTFMgPSBbXG4gICdkZWJ1ZycsXG4gICdpbmZvJyxcbiAgJ3dhcm4nLFxuICAnZXJyb3InLFxuICAnbG9nJyxcbiAgJ2Fzc2VydCcsXG4gICd0cmFjZScsXG5dIDtcblxuLyoqIFRoaXMgbWF5IGJlIG11dGF0ZWQgYnkgdGhlIGNvbnNvbGUgaW5zdHJ1bWVudGF0aW9uLiAqL1xuY29uc3Qgb3JpZ2luYWxDb25zb2xlTWV0aG9kc1xuXG4gPSB7fTtcblxuLyoqIEpTRG9jICovXG5cbi8qKlxuICogVGVtcG9yYXJpbHkgZGlzYWJsZSBzZW50cnkgY29uc29sZSBpbnN0cnVtZW50YXRpb25zLlxuICpcbiAqIEBwYXJhbSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gcnVuIGFnYWluc3QgdGhlIG9yaWdpbmFsIGBjb25zb2xlYCBtZXNzYWdlc1xuICogQHJldHVybnMgVGhlIHJlc3VsdHMgb2YgdGhlIGNhbGxiYWNrXG4gKi9cbmZ1bmN0aW9uIGNvbnNvbGVTYW5kYm94KGNhbGxiYWNrKSB7XG4gIGlmICghKCdjb25zb2xlJyBpbiBHTE9CQUxfT0JKKSkge1xuICAgIHJldHVybiBjYWxsYmFjaygpO1xuICB9XG5cbiAgY29uc3QgY29uc29sZSA9IEdMT0JBTF9PQkouY29uc29sZSA7XG4gIGNvbnN0IHdyYXBwZWRGdW5jcyA9IHt9O1xuXG4gIGNvbnN0IHdyYXBwZWRMZXZlbHMgPSBPYmplY3Qua2V5cyhvcmlnaW5hbENvbnNvbGVNZXRob2RzKSA7XG5cbiAgLy8gUmVzdG9yZSBhbGwgd3JhcHBlZCBjb25zb2xlIG1ldGhvZHNcbiAgd3JhcHBlZExldmVscy5mb3JFYWNoKGxldmVsID0+IHtcbiAgICBjb25zdCBvcmlnaW5hbENvbnNvbGVNZXRob2QgPSBvcmlnaW5hbENvbnNvbGVNZXRob2RzW2xldmVsXSA7XG4gICAgd3JhcHBlZEZ1bmNzW2xldmVsXSA9IGNvbnNvbGVbbGV2ZWxdIDtcbiAgICBjb25zb2xlW2xldmVsXSA9IG9yaWdpbmFsQ29uc29sZU1ldGhvZDtcbiAgfSk7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBSZXZlcnQgcmVzdG9yYXRpb24gdG8gd3JhcHBlZCBzdGF0ZVxuICAgIHdyYXBwZWRMZXZlbHMuZm9yRWFjaChsZXZlbCA9PiB7XG4gICAgICBjb25zb2xlW2xldmVsXSA9IHdyYXBwZWRGdW5jc1tsZXZlbF0gO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VMb2dnZXIoKSB7XG4gIGxldCBlbmFibGVkID0gZmFsc2U7XG4gIGNvbnN0IGxvZ2dlciA9IHtcbiAgICBlbmFibGU6ICgpID0+IHtcbiAgICAgIGVuYWJsZWQgPSB0cnVlO1xuICAgIH0sXG4gICAgZGlzYWJsZTogKCkgPT4ge1xuICAgICAgZW5hYmxlZCA9IGZhbHNlO1xuICAgIH0sXG4gICAgaXNFbmFibGVkOiAoKSA9PiBlbmFibGVkLFxuICB9O1xuXG4gIGlmIChERUJVR19CVUlMRCkge1xuICAgIENPTlNPTEVfTEVWRUxTLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgbG9nZ2VyW25hbWVdID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgICBjb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAgICAgICBHTE9CQUxfT0JKLmNvbnNvbGVbbmFtZV0oYCR7UFJFRklYfVske25hbWV9XTpgLCAuLi5hcmdzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBDT05TT0xFX0xFVkVMUy5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgbG9nZ2VyW25hbWVdID0gKCkgPT4gdW5kZWZpbmVkO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGxvZ2dlciA7XG59XG5cbmNvbnN0IGxvZ2dlciA9IG1ha2VMb2dnZXIoKTtcblxuZXhwb3J0IHsgQ09OU09MRV9MRVZFTFMsIGNvbnNvbGVTYW5kYm94LCBsb2dnZXIsIG9yaWdpbmFsQ29uc29sZU1ldGhvZHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ2dlci5qcy5tYXBcbiJdLCJuYW1lcyI6WyJERUJVR19CVUlMRCIsIkdMT0JBTF9PQkoiLCJQUkVGSVgiLCJDT05TT0xFX0xFVkVMUyIsIm9yaWdpbmFsQ29uc29sZU1ldGhvZHMiLCJjb25zb2xlU2FuZGJveCIsImNhbGxiYWNrIiwiY29uc29sZSIsIndyYXBwZWRGdW5jcyIsIndyYXBwZWRMZXZlbHMiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImxldmVsIiwib3JpZ2luYWxDb25zb2xlTWV0aG9kIiwibWFrZUxvZ2dlciIsImVuYWJsZWQiLCJsb2dnZXIiLCJlbmFibGUiLCJkaXNhYmxlIiwiaXNFbmFibGVkIiwibmFtZSIsImFyZ3MiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/logger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/memo.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/memo.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   memoBuilder: () => (/* binding */ memoBuilder)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */ /* eslint-disable @typescript-eslint/no-explicit-any */ /**\n * Helper to decycle json objects\n */ function memoBuilder() {\n    const hasWeakSet = typeof WeakSet === \"function\";\n    const inner = hasWeakSet ? new WeakSet() : [];\n    function memoize(obj) {\n        if (hasWeakSet) {\n            if (inner.has(obj)) {\n                return true;\n            }\n            inner.add(obj);\n            return false;\n        }\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for(let i = 0; i < inner.length; i++){\n            const value = inner[i];\n            if (value === obj) {\n                return true;\n            }\n        }\n        inner.push(obj);\n        return false;\n    }\n    function unmemoize(obj) {\n        if (hasWeakSet) {\n            inner.delete(obj);\n        } else {\n            for(let i = 0; i < inner.length; i++){\n                if (inner[i] === obj) {\n                    inner.splice(i, 1);\n                    break;\n                }\n            }\n        }\n    }\n    return [\n        memoize,\n        unmemoize\n    ];\n}\n //# sourceMappingURL=memo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL21lbW8uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDZEQUE2RCxHQUM3RCxxREFBcUQsR0FFckQ7O0NBRUMsR0FDRCxTQUFTQTtJQUNQLE1BQU1DLGFBQWEsT0FBT0MsWUFBWTtJQUN0QyxNQUFNQyxRQUFRRixhQUFhLElBQUlDLFlBQVksRUFBRTtJQUM3QyxTQUFTRSxRQUFRQyxHQUFHO1FBQ2xCLElBQUlKLFlBQVk7WUFDZCxJQUFJRSxNQUFNRyxHQUFHLENBQUNELE1BQU07Z0JBQ2xCLE9BQU87WUFDVDtZQUNBRixNQUFNSSxHQUFHLENBQUNGO1lBQ1YsT0FBTztRQUNUO1FBQ0EsNERBQTREO1FBQzVELElBQUssSUFBSUcsSUFBSSxHQUFHQSxJQUFJTCxNQUFNTSxNQUFNLEVBQUVELElBQUs7WUFDckMsTUFBTUUsUUFBUVAsS0FBSyxDQUFDSyxFQUFFO1lBQ3RCLElBQUlFLFVBQVVMLEtBQUs7Z0JBQ2pCLE9BQU87WUFDVDtRQUNGO1FBQ0FGLE1BQU1RLElBQUksQ0FBQ047UUFDWCxPQUFPO0lBQ1Q7SUFFQSxTQUFTTyxVQUFVUCxHQUFHO1FBQ3BCLElBQUlKLFlBQVk7WUFDZEUsTUFBTVUsTUFBTSxDQUFDUjtRQUNmLE9BQU87WUFDTCxJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSUwsTUFBTU0sTUFBTSxFQUFFRCxJQUFLO2dCQUNyQyxJQUFJTCxLQUFLLENBQUNLLEVBQUUsS0FBS0gsS0FBSztvQkFDcEJGLE1BQU1XLE1BQU0sQ0FBQ04sR0FBRztvQkFDaEI7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0Y7SUFDQSxPQUFPO1FBQUNKO1FBQVNRO0tBQVU7QUFDN0I7QUFFdUIsQ0FDdkIsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9tZW1vLmpzPzlmZmUiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5cbi8qKlxuICogSGVscGVyIHRvIGRlY3ljbGUganNvbiBvYmplY3RzXG4gKi9cbmZ1bmN0aW9uIG1lbW9CdWlsZGVyKCkge1xuICBjb25zdCBoYXNXZWFrU2V0ID0gdHlwZW9mIFdlYWtTZXQgPT09ICdmdW5jdGlvbic7XG4gIGNvbnN0IGlubmVyID0gaGFzV2Vha1NldCA/IG5ldyBXZWFrU2V0KCkgOiBbXTtcbiAgZnVuY3Rpb24gbWVtb2l6ZShvYmopIHtcbiAgICBpZiAoaGFzV2Vha1NldCkge1xuICAgICAgaWYgKGlubmVyLmhhcyhvYmopKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaW5uZXIuYWRkKG9iaik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLWZvci1vZlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5uZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gaW5uZXJbaV07XG4gICAgICBpZiAodmFsdWUgPT09IG9iaikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaW5uZXIucHVzaChvYmopO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVubWVtb2l6ZShvYmopIHtcbiAgICBpZiAoaGFzV2Vha1NldCkge1xuICAgICAgaW5uZXIuZGVsZXRlKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5uZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGlubmVyW2ldID09PSBvYmopIHtcbiAgICAgICAgICBpbm5lci5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIFttZW1vaXplLCB1bm1lbW9pemVdO1xufVxuXG5leHBvcnQgeyBtZW1vQnVpbGRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVtby5qcy5tYXBcbiJdLCJuYW1lcyI6WyJtZW1vQnVpbGRlciIsImhhc1dlYWtTZXQiLCJXZWFrU2V0IiwiaW5uZXIiLCJtZW1vaXplIiwib2JqIiwiaGFzIiwiYWRkIiwiaSIsImxlbmd0aCIsInZhbHVlIiwicHVzaCIsInVubWVtb2l6ZSIsImRlbGV0ZSIsInNwbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/memo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/misc.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/misc.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addContextToFrame: () => (/* binding */ addContextToFrame),\n/* harmony export */   addExceptionMechanism: () => (/* binding */ addExceptionMechanism),\n/* harmony export */   addExceptionTypeValue: () => (/* binding */ addExceptionTypeValue),\n/* harmony export */   arrayify: () => (/* binding */ arrayify),\n/* harmony export */   checkOrSetAlreadyCaught: () => (/* binding */ checkOrSetAlreadyCaught),\n/* harmony export */   getEventDescription: () => (/* binding */ getEventDescription),\n/* harmony export */   parseSemver: () => (/* binding */ parseSemver),\n/* harmony export */   uuid4: () => (/* binding */ uuid4)\n/* harmony export */ });\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./string.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/string.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/worldwide.js\");\n\n\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */ function uuid4() {\n    const gbl = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ;\n    const crypto = gbl.crypto || gbl.msCrypto;\n    let getRandomByte = ()=>Math.random() * 16;\n    try {\n        if (crypto && crypto.randomUUID) {\n            return crypto.randomUUID().replace(/-/g, \"\");\n        }\n        if (crypto && crypto.getRandomValues) {\n            getRandomByte = ()=>crypto.getRandomValues(new Uint8Array(1))[0];\n        }\n    } catch (_) {\n    // some runtimes can crash invoking crypto\n    // https://github.com/getsentry/sentry-javascript/issues/8935\n    }\n    // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n    // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n    return ([\n        1e7\n    ] + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, (c)=>// eslint-disable-next-line no-bitwise\n        (c ^ (getRandomByte() & 15) >> c / 4).toString(16));\n}\nfunction getFirstException(event) {\n    return event.exception && event.exception.values ? event.exception.values[0] : undefined;\n}\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */ function getEventDescription(event) {\n    const { message, event_id: eventId } = event;\n    if (message) {\n        return message;\n    }\n    const firstException = getFirstException(event);\n    if (firstException) {\n        if (firstException.type && firstException.value) {\n            return `${firstException.type}: ${firstException.value}`;\n        }\n        return firstException.type || firstException.value || eventId || \"<unknown>\";\n    }\n    return eventId || \"<unknown>\";\n}\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */ function addExceptionTypeValue(event, value, type) {\n    const exception = event.exception = event.exception || {};\n    const values = exception.values = exception.values || [];\n    const firstException = values[0] = values[0] || {};\n    if (!firstException.value) {\n        firstException.value = value || \"\";\n    }\n    if (!firstException.type) {\n        firstException.type = type || \"Error\";\n    }\n}\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */ function addExceptionMechanism(event, newMechanism) {\n    const firstException = getFirstException(event);\n    if (!firstException) {\n        return;\n    }\n    const defaultMechanism = {\n        type: \"generic\",\n        handled: true\n    };\n    const currentMechanism = firstException.mechanism;\n    firstException.mechanism = {\n        ...defaultMechanism,\n        ...currentMechanism,\n        ...newMechanism\n    };\n    if (newMechanism && \"data\" in newMechanism) {\n        const mergedData = {\n            ...currentMechanism && currentMechanism.data,\n            ...newMechanism.data\n        };\n        firstException.mechanism.data = mergedData;\n    }\n}\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n/**\n * Represents Semantic Versioning object\n */ /**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */ function parseSemver(input) {\n    const match = input.match(SEMVER_REGEXP) || [];\n    const major = parseInt(match[1], 10);\n    const minor = parseInt(match[2], 10);\n    const patch = parseInt(match[3], 10);\n    return {\n        buildmetadata: match[5],\n        major: isNaN(major) ? undefined : major,\n        minor: isNaN(minor) ? undefined : minor,\n        patch: isNaN(patch) ? undefined : patch,\n        prerelease: match[4]\n    };\n}\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */ function addContextToFrame(lines, frame, linesOfContext = 5) {\n    // When there is no line number in the frame, attaching context is nonsensical and will even break grouping\n    if (frame.lineno === undefined) {\n        return;\n    }\n    const maxLines = lines.length;\n    const sourceLine = Math.max(Math.min(maxLines - 1, frame.lineno - 1), 0);\n    frame.pre_context = lines.slice(Math.max(0, sourceLine - linesOfContext), sourceLine).map((line)=>(0,_string_js__WEBPACK_IMPORTED_MODULE_1__.snipLine)(line, 0));\n    frame.context_line = (0,_string_js__WEBPACK_IMPORTED_MODULE_1__.snipLine)(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n    frame.post_context = lines.slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext).map((line)=>(0,_string_js__WEBPACK_IMPORTED_MODULE_1__.snipLine)(line, 0));\n}\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */ function checkOrSetAlreadyCaught(exception) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (exception && exception.__sentry_captured__) {\n        return true;\n    }\n    try {\n        // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n        // `ExtraErrorData` integration\n        (0,_object_js__WEBPACK_IMPORTED_MODULE_2__.addNonEnumerableProperty)(exception, \"__sentry_captured__\", true);\n    } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n    }\n    return false;\n}\n/**\n * Checks whether the given input is already an array, and if it isn't, wraps it in one.\n *\n * @param maybeArray Input to turn into an array, if necessary\n * @returns The input, if already an array, or an array with the input as the only element, if not\n */ function arrayify(maybeArray) {\n    return Array.isArray(maybeArray) ? maybeArray : [\n        maybeArray\n    ];\n}\n //# sourceMappingURL=misc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/misc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/node-stack-trace.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/node-stack-trace.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filenameIsInApp: () => (/* binding */ filenameIsInApp),\n/* harmony export */   node: () => (/* binding */ node)\n/* harmony export */ });\n/**\n * Does this filename look like it's part of the app code?\n */ function filenameIsInApp(filename, isNative = false) {\n    const isInternal = isNative || filename && // It's not internal if it's an absolute linux path\n    !filename.startsWith(\"/\") && // It's not internal if it's an absolute windows path\n    !filename.includes(\":\\\\\") && // It's not internal if the path is starting with a dot\n    !filename.startsWith(\".\") && // It's not internal if the frame has a protocol. In node, this is usually the case if the file got pre-processed with a bundler like webpack\n    !filename.match(/^[a-zA-Z]([a-zA-Z0-9.\\-+])*:\\/\\//); // Schema from: https://stackoverflow.com/a/3641782\n    // in_app is all that's not an internal Node function or a module within node_modules\n    // note that isNative appears to return true even for node core libraries\n    // see https://github.com/getsentry/raven-node/issues/176\n    return !isInternal && filename !== undefined && !filename.includes(\"node_modules/\");\n}\n/** Node Stack line parser */ // eslint-disable-next-line complexity\nfunction node(getModule) {\n    const FILENAME_MATCH = /^\\s*[-]{4,}$/;\n    const FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+):(\\d+):(\\d+)?|([^)]+))\\)?/;\n    // eslint-disable-next-line complexity\n    return (line)=>{\n        const lineMatch = line.match(FULL_MATCH);\n        if (lineMatch) {\n            let object;\n            let method;\n            let functionName;\n            let typeName;\n            let methodName;\n            if (lineMatch[1]) {\n                functionName = lineMatch[1];\n                let methodStart = functionName.lastIndexOf(\".\");\n                if (functionName[methodStart - 1] === \".\") {\n                    methodStart--;\n                }\n                if (methodStart > 0) {\n                    object = functionName.slice(0, methodStart);\n                    method = functionName.slice(methodStart + 1);\n                    const objectEnd = object.indexOf(\".Module\");\n                    if (objectEnd > 0) {\n                        functionName = functionName.slice(objectEnd + 1);\n                        object = object.slice(0, objectEnd);\n                    }\n                }\n                typeName = undefined;\n            }\n            if (method) {\n                typeName = object;\n                methodName = method;\n            }\n            if (method === \"<anonymous>\") {\n                methodName = undefined;\n                functionName = undefined;\n            }\n            if (functionName === undefined) {\n                methodName = methodName || \"<anonymous>\";\n                functionName = typeName ? `${typeName}.${methodName}` : methodName;\n            }\n            let filename = lineMatch[2] && lineMatch[2].startsWith(\"file://\") ? lineMatch[2].slice(7) : lineMatch[2];\n            const isNative = lineMatch[5] === \"native\";\n            if (!filename && lineMatch[5] && !isNative) {\n                filename = lineMatch[5];\n            }\n            return {\n                filename,\n                module: getModule ? getModule(filename) : undefined,\n                function: functionName,\n                lineno: parseInt(lineMatch[3], 10) || undefined,\n                colno: parseInt(lineMatch[4], 10) || undefined,\n                in_app: filenameIsInApp(filename, isNative)\n            };\n        }\n        if (line.match(FILENAME_MATCH)) {\n            return {\n                filename: line\n            };\n        }\n        return undefined;\n    };\n}\n //# sourceMappingURL=node-stack-trace.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL25vZGUtc3RhY2stdHJhY2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Q0FFQyxHQUNELFNBQVNBLGdCQUFnQkMsUUFBUSxFQUFFQyxXQUFXLEtBQUs7SUFDakQsTUFBTUMsYUFDSkQsWUFDQ0QsWUFDQyxtREFBbUQ7SUFDbkQsQ0FBQ0EsU0FBU0csVUFBVSxDQUFDLFFBQ3JCLHFEQUFxRDtJQUNyRCxDQUFDSCxTQUFTSSxRQUFRLENBQUMsVUFDbkIsdURBQXVEO0lBQ3ZELENBQUNKLFNBQVNHLFVBQVUsQ0FBQyxRQUNyQiw2SUFBNkk7SUFDN0ksQ0FBQ0gsU0FBU0ssS0FBSyxDQUFDLHFDQUFzQyxtREFBbUQ7SUFFN0cscUZBQXFGO0lBQ3JGLHlFQUF5RTtJQUN6RSx5REFBeUQ7SUFFekQsT0FBTyxDQUFDSCxjQUFjRixhQUFhTSxhQUFhLENBQUNOLFNBQVNJLFFBQVEsQ0FBQztBQUNyRTtBQUVBLDJCQUEyQixHQUMzQixzQ0FBc0M7QUFDdEMsU0FBU0csS0FBS0MsU0FBUztJQUNyQixNQUFNQyxpQkFBaUI7SUFDdkIsTUFBTUMsYUFBYTtJQUVuQixzQ0FBc0M7SUFDdEMsT0FBTyxDQUFDQztRQUNOLE1BQU1DLFlBQVlELEtBQUtOLEtBQUssQ0FBQ0s7UUFFN0IsSUFBSUUsV0FBVztZQUNiLElBQUlDO1lBQ0osSUFBSUM7WUFDSixJQUFJQztZQUNKLElBQUlDO1lBQ0osSUFBSUM7WUFFSixJQUFJTCxTQUFTLENBQUMsRUFBRSxFQUFFO2dCQUNoQkcsZUFBZUgsU0FBUyxDQUFDLEVBQUU7Z0JBRTNCLElBQUlNLGNBQWNILGFBQWFJLFdBQVcsQ0FBQztnQkFDM0MsSUFBSUosWUFBWSxDQUFDRyxjQUFjLEVBQUUsS0FBSyxLQUFLO29CQUN6Q0E7Z0JBQ0Y7Z0JBRUEsSUFBSUEsY0FBYyxHQUFHO29CQUNuQkwsU0FBU0UsYUFBYUssS0FBSyxDQUFDLEdBQUdGO29CQUMvQkosU0FBU0MsYUFBYUssS0FBSyxDQUFDRixjQUFjO29CQUMxQyxNQUFNRyxZQUFZUixPQUFPUyxPQUFPLENBQUM7b0JBQ2pDLElBQUlELFlBQVksR0FBRzt3QkFDakJOLGVBQWVBLGFBQWFLLEtBQUssQ0FBQ0MsWUFBWTt3QkFDOUNSLFNBQVNBLE9BQU9PLEtBQUssQ0FBQyxHQUFHQztvQkFDM0I7Z0JBQ0Y7Z0JBQ0FMLFdBQVdWO1lBQ2I7WUFFQSxJQUFJUSxRQUFRO2dCQUNWRSxXQUFXSDtnQkFDWEksYUFBYUg7WUFDZjtZQUVBLElBQUlBLFdBQVcsZUFBZTtnQkFDNUJHLGFBQWFYO2dCQUNiUyxlQUFlVDtZQUNqQjtZQUVBLElBQUlTLGlCQUFpQlQsV0FBVztnQkFDOUJXLGFBQWFBLGNBQWM7Z0JBQzNCRixlQUFlQyxXQUFXLENBQUMsRUFBRUEsU0FBUyxDQUFDLEVBQUVDLFdBQVcsQ0FBQyxHQUFHQTtZQUMxRDtZQUVBLElBQUlqQixXQUFXWSxTQUFTLENBQUMsRUFBRSxJQUFJQSxTQUFTLENBQUMsRUFBRSxDQUFDVCxVQUFVLENBQUMsYUFBYVMsU0FBUyxDQUFDLEVBQUUsQ0FBQ1EsS0FBSyxDQUFDLEtBQUtSLFNBQVMsQ0FBQyxFQUFFO1lBQ3hHLE1BQU1YLFdBQVdXLFNBQVMsQ0FBQyxFQUFFLEtBQUs7WUFFbEMsSUFBSSxDQUFDWixZQUFZWSxTQUFTLENBQUMsRUFBRSxJQUFJLENBQUNYLFVBQVU7Z0JBQzFDRCxXQUFXWSxTQUFTLENBQUMsRUFBRTtZQUN6QjtZQUVBLE9BQU87Z0JBQ0xaO2dCQUNBdUIsUUFBUWYsWUFBWUEsVUFBVVIsWUFBWU07Z0JBQzFDa0IsVUFBVVQ7Z0JBQ1ZVLFFBQVFDLFNBQVNkLFNBQVMsQ0FBQyxFQUFFLEVBQUUsT0FBT047Z0JBQ3RDcUIsT0FBT0QsU0FBU2QsU0FBUyxDQUFDLEVBQUUsRUFBRSxPQUFPTjtnQkFDckNzQixRQUFRN0IsZ0JBQWdCQyxVQUFVQztZQUNwQztRQUNGO1FBRUEsSUFBSVUsS0FBS04sS0FBSyxDQUFDSSxpQkFBaUI7WUFDOUIsT0FBTztnQkFDTFQsVUFBVVc7WUFDWjtRQUNGO1FBRUEsT0FBT0w7SUFDVDtBQUNGO0FBRWlDLENBQ2pDLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vbm9kZS1zdGFjay10cmFjZS5qcz81MjYyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRG9lcyB0aGlzIGZpbGVuYW1lIGxvb2sgbGlrZSBpdCdzIHBhcnQgb2YgdGhlIGFwcCBjb2RlP1xuICovXG5mdW5jdGlvbiBmaWxlbmFtZUlzSW5BcHAoZmlsZW5hbWUsIGlzTmF0aXZlID0gZmFsc2UpIHtcbiAgY29uc3QgaXNJbnRlcm5hbCA9XG4gICAgaXNOYXRpdmUgfHxcbiAgICAoZmlsZW5hbWUgJiZcbiAgICAgIC8vIEl0J3Mgbm90IGludGVybmFsIGlmIGl0J3MgYW4gYWJzb2x1dGUgbGludXggcGF0aFxuICAgICAgIWZpbGVuYW1lLnN0YXJ0c1dpdGgoJy8nKSAmJlxuICAgICAgLy8gSXQncyBub3QgaW50ZXJuYWwgaWYgaXQncyBhbiBhYnNvbHV0ZSB3aW5kb3dzIHBhdGhcbiAgICAgICFmaWxlbmFtZS5pbmNsdWRlcygnOlxcXFwnKSAmJlxuICAgICAgLy8gSXQncyBub3QgaW50ZXJuYWwgaWYgdGhlIHBhdGggaXMgc3RhcnRpbmcgd2l0aCBhIGRvdFxuICAgICAgIWZpbGVuYW1lLnN0YXJ0c1dpdGgoJy4nKSAmJlxuICAgICAgLy8gSXQncyBub3QgaW50ZXJuYWwgaWYgdGhlIGZyYW1lIGhhcyBhIHByb3RvY29sLiBJbiBub2RlLCB0aGlzIGlzIHVzdWFsbHkgdGhlIGNhc2UgaWYgdGhlIGZpbGUgZ290IHByZS1wcm9jZXNzZWQgd2l0aCBhIGJ1bmRsZXIgbGlrZSB3ZWJwYWNrXG4gICAgICAhZmlsZW5hbWUubWF0Y2goL15bYS16QS1aXShbYS16QS1aMC05LlxcLStdKSo6XFwvXFwvLykpOyAvLyBTY2hlbWEgZnJvbTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM2NDE3ODJcblxuICAvLyBpbl9hcHAgaXMgYWxsIHRoYXQncyBub3QgYW4gaW50ZXJuYWwgTm9kZSBmdW5jdGlvbiBvciBhIG1vZHVsZSB3aXRoaW4gbm9kZV9tb2R1bGVzXG4gIC8vIG5vdGUgdGhhdCBpc05hdGl2ZSBhcHBlYXJzIHRvIHJldHVybiB0cnVlIGV2ZW4gZm9yIG5vZGUgY29yZSBsaWJyYXJpZXNcbiAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvcmF2ZW4tbm9kZS9pc3N1ZXMvMTc2XG5cbiAgcmV0dXJuICFpc0ludGVybmFsICYmIGZpbGVuYW1lICE9PSB1bmRlZmluZWQgJiYgIWZpbGVuYW1lLmluY2x1ZGVzKCdub2RlX21vZHVsZXMvJyk7XG59XG5cbi8qKiBOb2RlIFN0YWNrIGxpbmUgcGFyc2VyICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuZnVuY3Rpb24gbm9kZShnZXRNb2R1bGUpIHtcbiAgY29uc3QgRklMRU5BTUVfTUFUQ0ggPSAvXlxccypbLV17NCx9JC87XG4gIGNvbnN0IEZVTExfTUFUQ0ggPSAvYXQgKD86YXN5bmMgKT8oPzooLis/KVxccytcXCgpPyg/OiguKyk6KFxcZCspOihcXGQrKT98KFteKV0rKSlcXCk/LztcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuICByZXR1cm4gKGxpbmUpID0+IHtcbiAgICBjb25zdCBsaW5lTWF0Y2ggPSBsaW5lLm1hdGNoKEZVTExfTUFUQ0gpO1xuXG4gICAgaWYgKGxpbmVNYXRjaCkge1xuICAgICAgbGV0IG9iamVjdDtcbiAgICAgIGxldCBtZXRob2Q7XG4gICAgICBsZXQgZnVuY3Rpb25OYW1lO1xuICAgICAgbGV0IHR5cGVOYW1lO1xuICAgICAgbGV0IG1ldGhvZE5hbWU7XG5cbiAgICAgIGlmIChsaW5lTWF0Y2hbMV0pIHtcbiAgICAgICAgZnVuY3Rpb25OYW1lID0gbGluZU1hdGNoWzFdO1xuXG4gICAgICAgIGxldCBtZXRob2RTdGFydCA9IGZ1bmN0aW9uTmFtZS5sYXN0SW5kZXhPZignLicpO1xuICAgICAgICBpZiAoZnVuY3Rpb25OYW1lW21ldGhvZFN0YXJ0IC0gMV0gPT09ICcuJykge1xuICAgICAgICAgIG1ldGhvZFN0YXJ0LS07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWV0aG9kU3RhcnQgPiAwKSB7XG4gICAgICAgICAgb2JqZWN0ID0gZnVuY3Rpb25OYW1lLnNsaWNlKDAsIG1ldGhvZFN0YXJ0KTtcbiAgICAgICAgICBtZXRob2QgPSBmdW5jdGlvbk5hbWUuc2xpY2UobWV0aG9kU3RhcnQgKyAxKTtcbiAgICAgICAgICBjb25zdCBvYmplY3RFbmQgPSBvYmplY3QuaW5kZXhPZignLk1vZHVsZScpO1xuICAgICAgICAgIGlmIChvYmplY3RFbmQgPiAwKSB7XG4gICAgICAgICAgICBmdW5jdGlvbk5hbWUgPSBmdW5jdGlvbk5hbWUuc2xpY2Uob2JqZWN0RW5kICsgMSk7XG4gICAgICAgICAgICBvYmplY3QgPSBvYmplY3Quc2xpY2UoMCwgb2JqZWN0RW5kKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHlwZU5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZXRob2QpIHtcbiAgICAgICAgdHlwZU5hbWUgPSBvYmplY3Q7XG4gICAgICAgIG1ldGhvZE5hbWUgPSBtZXRob2Q7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZXRob2QgPT09ICc8YW5vbnltb3VzPicpIHtcbiAgICAgICAgbWV0aG9kTmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZnVuY3Rpb25OYW1lID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBpZiAoZnVuY3Rpb25OYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbWV0aG9kTmFtZSA9IG1ldGhvZE5hbWUgfHwgJzxhbm9ueW1vdXM+JztcbiAgICAgICAgZnVuY3Rpb25OYW1lID0gdHlwZU5hbWUgPyBgJHt0eXBlTmFtZX0uJHttZXRob2ROYW1lfWAgOiBtZXRob2ROYW1lO1xuICAgICAgfVxuXG4gICAgICBsZXQgZmlsZW5hbWUgPSBsaW5lTWF0Y2hbMl0gJiYgbGluZU1hdGNoWzJdLnN0YXJ0c1dpdGgoJ2ZpbGU6Ly8nKSA/IGxpbmVNYXRjaFsyXS5zbGljZSg3KSA6IGxpbmVNYXRjaFsyXTtcbiAgICAgIGNvbnN0IGlzTmF0aXZlID0gbGluZU1hdGNoWzVdID09PSAnbmF0aXZlJztcblxuICAgICAgaWYgKCFmaWxlbmFtZSAmJiBsaW5lTWF0Y2hbNV0gJiYgIWlzTmF0aXZlKSB7XG4gICAgICAgIGZpbGVuYW1lID0gbGluZU1hdGNoWzVdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBmaWxlbmFtZSxcbiAgICAgICAgbW9kdWxlOiBnZXRNb2R1bGUgPyBnZXRNb2R1bGUoZmlsZW5hbWUpIDogdW5kZWZpbmVkLFxuICAgICAgICBmdW5jdGlvbjogZnVuY3Rpb25OYW1lLFxuICAgICAgICBsaW5lbm86IHBhcnNlSW50KGxpbmVNYXRjaFszXSwgMTApIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgY29sbm86IHBhcnNlSW50KGxpbmVNYXRjaFs0XSwgMTApIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgaW5fYXBwOiBmaWxlbmFtZUlzSW5BcHAoZmlsZW5hbWUsIGlzTmF0aXZlKSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGxpbmUubWF0Y2goRklMRU5BTUVfTUFUQ0gpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmaWxlbmFtZTogbGluZSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcbn1cblxuZXhwb3J0IHsgZmlsZW5hbWVJc0luQXBwLCBub2RlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLXN0YWNrLXRyYWNlLmpzLm1hcFxuIl0sIm5hbWVzIjpbImZpbGVuYW1lSXNJbkFwcCIsImZpbGVuYW1lIiwiaXNOYXRpdmUiLCJpc0ludGVybmFsIiwic3RhcnRzV2l0aCIsImluY2x1ZGVzIiwibWF0Y2giLCJ1bmRlZmluZWQiLCJub2RlIiwiZ2V0TW9kdWxlIiwiRklMRU5BTUVfTUFUQ0giLCJGVUxMX01BVENIIiwibGluZSIsImxpbmVNYXRjaCIsIm9iamVjdCIsIm1ldGhvZCIsImZ1bmN0aW9uTmFtZSIsInR5cGVOYW1lIiwibWV0aG9kTmFtZSIsIm1ldGhvZFN0YXJ0IiwibGFzdEluZGV4T2YiLCJzbGljZSIsIm9iamVjdEVuZCIsImluZGV4T2YiLCJtb2R1bGUiLCJmdW5jdGlvbiIsImxpbmVubyIsInBhcnNlSW50IiwiY29sbm8iLCJpbl9hcHAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/node-stack-trace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/normalize.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/normalize.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   normalizeToSize: () => (/* binding */ normalizeToSize),\n/* harmony export */   walk: () => (/* binding */ visit)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _memo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./memo.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/memo.js\");\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _stacktrace_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stacktrace.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/stacktrace.js\");\n\n\n\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction normalize(input, depth = 100, maxProperties = +Infinity) {\n    try {\n        // since we're at the outermost level, we don't provide a key\n        return visit(\"\", input, depth, maxProperties);\n    } catch (err) {\n        return {\n            ERROR: `**non-serializable** (${err})`\n        };\n    }\n}\n/** JSDoc */ function normalizeToSize(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nobject, // Default Node.js REPL depth\ndepth = 3, // 100kB, as 200kB is max payload size, so half sounds reasonable\nmaxSize = 100 * 1024) {\n    const normalized = normalize(object, depth);\n    if (jsonSize(normalized) > maxSize) {\n        return normalizeToSize(object, depth - 1, maxSize);\n    }\n    return normalized;\n}\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */ function visit(key, value, depth = +Infinity, maxProperties = +Infinity, memo = (0,_memo_js__WEBPACK_IMPORTED_MODULE_0__.memoBuilder)()) {\n    const [memoize, unmemoize] = memo;\n    // Get the simple cases out of the way first\n    if (value == null || // this matches null and undefined -> eqeq not eqeqeq\n    [\n        \"number\",\n        \"boolean\",\n        \"string\"\n    ].includes(typeof value) && !(0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isNaN)(value)) {\n        return value;\n    }\n    const stringified = stringifyValue(key, value);\n    // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n    // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n    if (!stringified.startsWith(\"[object \")) {\n        return stringified;\n    }\n    // From here on, we can assert that `value` is either an object or an array.\n    // Do not normalize objects that we know have already been normalized. As a general rule, the\n    // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n    // have already been normalized.\n    if (value[\"__sentry_skip_normalization__\"]) {\n        return value;\n    }\n    // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n    // We keep a certain amount of depth.\n    // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n    const remainingDepth = typeof value[\"__sentry_override_normalization_depth__\"] === \"number\" ? value[\"__sentry_override_normalization_depth__\"] : depth;\n    // We're also done if we've reached the max depth\n    if (remainingDepth === 0) {\n        // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n        return stringified.replace(\"object \", \"\");\n    }\n    // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n    if (memoize(value)) {\n        return \"[Circular ~]\";\n    }\n    // If the value has a `toJSON` method, we call it to extract more information\n    const valueWithToJSON = value;\n    if (valueWithToJSON && typeof valueWithToJSON.toJSON === \"function\") {\n        try {\n            const jsonValue = valueWithToJSON.toJSON();\n            // We need to normalize the return value of `.toJSON()` in case it has circular references\n            return visit(\"\", jsonValue, remainingDepth - 1, maxProperties, memo);\n        } catch (err) {\n        // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n        }\n    }\n    // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n    // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n    // property/entry, and keep track of the number of items we add to it.\n    const normalized = Array.isArray(value) ? [] : {};\n    let numAdded = 0;\n    // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n    // properties are non-enumerable and otherwise would get missed.\n    const visitable = (0,_object_js__WEBPACK_IMPORTED_MODULE_2__.convertToPlainObject)(value);\n    for(const visitKey in visitable){\n        // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n        if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n            continue;\n        }\n        if (numAdded >= maxProperties) {\n            normalized[visitKey] = \"[MaxProperties ~]\";\n            break;\n        }\n        // Recursively visit all the child nodes\n        const visitValue = visitable[visitKey];\n        normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo);\n        numAdded++;\n    }\n    // Once we've visited all the branches, remove the parent from memo storage\n    unmemoize(value);\n    // Return accumulated values\n    return normalized;\n}\n/* eslint-disable complexity */ /**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */ function stringifyValue(key, // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n// our internal use, it'll do\nvalue) {\n    try {\n        if (key === \"domain\" && value && typeof value === \"object\" && value._events) {\n            return \"[Domain]\";\n        }\n        if (key === \"domainEmitter\") {\n            return \"[DomainEmitter]\";\n        }\n        // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n        // which won't throw if they are not present.\n        if (typeof global !== \"undefined\" && value === global) {\n            return \"[Global]\";\n        }\n        // eslint-disable-next-line no-restricted-globals\n        if (false) {}\n        // eslint-disable-next-line no-restricted-globals\n        if (typeof document !== \"undefined\" && value === document) {\n            return \"[Document]\";\n        }\n        if ((0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isVueViewModel)(value)) {\n            return \"[VueViewModel]\";\n        }\n        // React's SyntheticEvent thingy\n        if ((0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isSyntheticEvent)(value)) {\n            return \"[SyntheticEvent]\";\n        }\n        if (typeof value === \"number\" && value !== value) {\n            return \"[NaN]\";\n        }\n        if (typeof value === \"function\") {\n            return `[Function: ${(0,_stacktrace_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(value)}]`;\n        }\n        if (typeof value === \"symbol\") {\n            return `[${String(value)}]`;\n        }\n        // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n        if (typeof value === \"bigint\") {\n            return `[BigInt: ${String(value)}]`;\n        }\n        // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n        // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n        // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n        // we can make sure that only plain objects come out that way.\n        const objName = getConstructorName(value);\n        // Handle HTML Elements\n        if (/^HTML(\\w*)Element$/.test(objName)) {\n            return `[HTMLElement: ${objName}]`;\n        }\n        return `[object ${objName}]`;\n    } catch (err) {\n        return `**non-serializable** (${err})`;\n    }\n}\n/* eslint-enable complexity */ function getConstructorName(value) {\n    const prototype = Object.getPrototypeOf(value);\n    return prototype ? prototype.constructor.name : \"null prototype\";\n}\n/** Calculates bytes size of input string */ function utf8Length(value) {\n    // eslint-disable-next-line no-bitwise\n    return ~-encodeURI(value).split(/%..|./).length;\n}\n/** Calculates bytes size of input object */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value) {\n    return utf8Length(JSON.stringify(value));\n}\n //# sourceMappingURL=normalize.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/normalize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/object.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/object.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addNonEnumerableProperty: () => (/* binding */ addNonEnumerableProperty),\n/* harmony export */   convertToPlainObject: () => (/* binding */ convertToPlainObject),\n/* harmony export */   dropUndefinedKeys: () => (/* binding */ dropUndefinedKeys),\n/* harmony export */   extractExceptionKeysForMessage: () => (/* binding */ extractExceptionKeysForMessage),\n/* harmony export */   fill: () => (/* binding */ fill),\n/* harmony export */   getOriginalFunction: () => (/* binding */ getOriginalFunction),\n/* harmony export */   markFunctionWrapped: () => (/* binding */ markFunctionWrapped),\n/* harmony export */   objectify: () => (/* binding */ objectify),\n/* harmony export */   urlEncode: () => (/* binding */ urlEncode)\n/* harmony export */ });\n/* harmony import */ var _browser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./browser.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/browser.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/debug-build.js\");\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./string.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/string.js\");\n\n\n\n\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */ function fill(source, name, replacementFactory) {\n    if (!(name in source)) {\n        return;\n    }\n    const original = source[name];\n    const wrapped = replacementFactory(original);\n    // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n    // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n    if (typeof wrapped === \"function\") {\n        markFunctionWrapped(wrapped, original);\n    }\n    source[name] = wrapped;\n}\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */ function addNonEnumerableProperty(obj, name, value) {\n    try {\n        Object.defineProperty(obj, name, {\n            // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n            value: value,\n            writable: true,\n            configurable: true\n        });\n    } catch (o_O) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Failed to add non-enumerable property \"${name}\" to object`, obj);\n    }\n}\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */ function markFunctionWrapped(wrapped, original) {\n    try {\n        const proto = original.prototype || {};\n        wrapped.prototype = original.prototype = proto;\n        addNonEnumerableProperty(wrapped, \"__sentry_original__\", original);\n    } catch (o_O) {} // eslint-disable-line no-empty\n}\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */ function getOriginalFunction(func) {\n    return func.__sentry_original__;\n}\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */ function urlEncode(object) {\n    return Object.keys(object).map((key)=>`${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`).join(\"&\");\n}\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argurment itself, when value is neither an Event nor\n *  an Error.\n */ function convertToPlainObject(value) {\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isError)(value)) {\n        return {\n            message: value.message,\n            name: value.name,\n            stack: value.stack,\n            ...getOwnProperties(value)\n        };\n    } else if ((0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isEvent)(value)) {\n        const newObj = {\n            type: value.type,\n            target: serializeEventTarget(value.target),\n            currentTarget: serializeEventTarget(value.currentTarget),\n            ...getOwnProperties(value)\n        };\n        if (typeof CustomEvent !== \"undefined\" && (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isInstanceOf)(value, CustomEvent)) {\n            newObj.detail = value.detail;\n        }\n        return newObj;\n    } else {\n        return value;\n    }\n}\n/** Creates a string representation of the target of an `Event` object */ function serializeEventTarget(target) {\n    try {\n        return (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isElement)(target) ? (0,_browser_js__WEBPACK_IMPORTED_MODULE_3__.htmlTreeAsString)(target) : Object.prototype.toString.call(target);\n    } catch (_oO) {\n        return \"<unknown>\";\n    }\n}\n/** Filters out all but an object's own properties */ function getOwnProperties(obj) {\n    if (typeof obj === \"object\" && obj !== null) {\n        const extractedProps = {};\n        for(const property in obj){\n            if (Object.prototype.hasOwnProperty.call(obj, property)) {\n                extractedProps[property] = obj[property];\n            }\n        }\n        return extractedProps;\n    } else {\n        return {};\n    }\n}\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */ function extractExceptionKeysForMessage(exception, maxLength = 40) {\n    const keys = Object.keys(convertToPlainObject(exception));\n    keys.sort();\n    if (!keys.length) {\n        return \"[object has no keys]\";\n    }\n    if (keys[0].length >= maxLength) {\n        return (0,_string_js__WEBPACK_IMPORTED_MODULE_4__.truncate)(keys[0], maxLength);\n    }\n    for(let includedKeys = keys.length; includedKeys > 0; includedKeys--){\n        const serialized = keys.slice(0, includedKeys).join(\", \");\n        if (serialized.length > maxLength) {\n            continue;\n        }\n        if (includedKeys === keys.length) {\n            return serialized;\n        }\n        return (0,_string_js__WEBPACK_IMPORTED_MODULE_4__.truncate)(serialized, maxLength);\n    }\n    return \"\";\n}\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n */ function dropUndefinedKeys(inputValue) {\n    // This map keeps track of what already visited nodes map to.\n    // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n    // references as the input object.\n    const memoizationMap = new Map();\n    // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n    return _dropUndefinedKeys(inputValue, memoizationMap);\n}\nfunction _dropUndefinedKeys(inputValue, memoizationMap) {\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(inputValue)) {\n        // If this node has already been visited due to a circular reference, return the object it was mapped to in the new object\n        const memoVal = memoizationMap.get(inputValue);\n        if (memoVal !== undefined) {\n            return memoVal;\n        }\n        const returnValue = {};\n        // Store the mapping of this value in case we visit it again, in case of circular data\n        memoizationMap.set(inputValue, returnValue);\n        for (const key of Object.keys(inputValue)){\n            if (typeof inputValue[key] !== \"undefined\") {\n                returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);\n            }\n        }\n        return returnValue;\n    }\n    if (Array.isArray(inputValue)) {\n        // If this node has already been visited due to a circular reference, return the array it was mapped to in the new object\n        const memoVal = memoizationMap.get(inputValue);\n        if (memoVal !== undefined) {\n            return memoVal;\n        }\n        const returnValue = [];\n        // Store the mapping of this value in case we visit it again, in case of circular data\n        memoizationMap.set(inputValue, returnValue);\n        inputValue.forEach((item)=>{\n            returnValue.push(_dropUndefinedKeys(item, memoizationMap));\n        });\n        return returnValue;\n    }\n    return inputValue;\n}\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */ function objectify(wat) {\n    let objectified;\n    switch(true){\n        case wat === undefined || wat === null:\n            objectified = new String(wat);\n            break;\n        // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n        // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n        // an object in order to wrap it.\n        case typeof wat === \"symbol\" || typeof wat === \"bigint\":\n            objectified = Object(wat);\n            break;\n        // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n        case (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isPrimitive)(wat):\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            objectified = new wat.constructor(wat);\n            break;\n        // by process of elimination, at this point we know that `wat` must already be an object\n        default:\n            objectified = wat;\n            break;\n    }\n    return objectified;\n}\n //# sourceMappingURL=object.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/object.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/requestdata.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/requestdata.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_USER_INCLUDES: () => (/* binding */ DEFAULT_USER_INCLUDES),\n/* harmony export */   addRequestDataToEvent: () => (/* binding */ addRequestDataToEvent),\n/* harmony export */   addRequestDataToTransaction: () => (/* binding */ addRequestDataToTransaction),\n/* harmony export */   extractPathForTransaction: () => (/* binding */ extractPathForTransaction),\n/* harmony export */   extractRequestData: () => (/* binding */ extractRequestData),\n/* harmony export */   winterCGHeadersToDict: () => (/* binding */ winterCGHeadersToDict),\n/* harmony export */   winterCGRequestToRequestData: () => (/* binding */ winterCGRequestToRequestData)\n/* harmony export */ });\n/* harmony import */ var _cookie_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cookie.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/cookie.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/debug-build.js\");\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./logger.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _normalize_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./normalize.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/normalize.js\");\n/* harmony import */ var _url_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./url.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/url.js\");\n\n\n\n\n\n\nconst DEFAULT_INCLUDES = {\n    ip: false,\n    request: true,\n    transaction: true,\n    user: true\n};\nconst DEFAULT_REQUEST_INCLUDES = [\n    \"cookies\",\n    \"data\",\n    \"headers\",\n    \"method\",\n    \"query_string\",\n    \"url\"\n];\nconst DEFAULT_USER_INCLUDES = [\n    \"id\",\n    \"username\",\n    \"email\"\n];\n/**\n * Sets parameterized route as transaction name e.g.: `GET /users/:id`\n * Also adds more context data on the transaction from the request\n */ function addRequestDataToTransaction(transaction, req, deps) {\n    if (!transaction) return;\n    if (!transaction.metadata.source || transaction.metadata.source === \"url\") {\n        // Attempt to grab a parameterized route off of the request\n        transaction.setName(...extractPathForTransaction(req, {\n            path: true,\n            method: true\n        }));\n    }\n    transaction.setData(\"url\", req.originalUrl || req.url);\n    if (req.baseUrl) {\n        transaction.setData(\"baseUrl\", req.baseUrl);\n    }\n    transaction.setData(\"query\", extractQueryParams(req, deps));\n}\n/**\n * Extracts a complete and parameterized path from the request object and uses it to construct transaction name.\n * If the parameterized transaction name cannot be extracted, we fall back to the raw URL.\n *\n * Additionally, this function determines and returns the transaction name source\n *\n * eg. GET /mountpoint/user/:id\n *\n * @param req A request object\n * @param options What to include in the transaction name (method, path, or a custom route name to be\n *                used instead of the request's route)\n *\n * @returns A tuple of the fully constructed transaction name [0] and its source [1] (can be either 'route' or 'url')\n */ function extractPathForTransaction(req, options = {}) {\n    const method = req.method && req.method.toUpperCase();\n    let path = \"\";\n    let source = \"url\";\n    // Check to see if there's a parameterized route we can use (as there is in Express)\n    if (options.customRoute || req.route) {\n        path = options.customRoute || `${req.baseUrl || \"\"}${req.route && req.route.path}`;\n        source = \"route\";\n    } else if (req.originalUrl || req.url) {\n        path = (0,_url_js__WEBPACK_IMPORTED_MODULE_0__.stripUrlQueryAndFragment)(req.originalUrl || req.url || \"\");\n    }\n    let name = \"\";\n    if (options.method && method) {\n        name += method;\n    }\n    if (options.method && options.path) {\n        name += \" \";\n    }\n    if (options.path && path) {\n        name += path;\n    }\n    return [\n        name,\n        source\n    ];\n}\n/** JSDoc */ function extractTransaction(req, type) {\n    switch(type){\n        case \"path\":\n            {\n                return extractPathForTransaction(req, {\n                    path: true\n                })[0];\n            }\n        case \"handler\":\n            {\n                return req.route && req.route.stack && req.route.stack[0] && req.route.stack[0].name || \"<anonymous>\";\n            }\n        case \"methodPath\":\n        default:\n            {\n                // if exist _reconstructedRoute return that path instead of route.path\n                const customRoute = req._reconstructedRoute ? req._reconstructedRoute : undefined;\n                return extractPathForTransaction(req, {\n                    path: true,\n                    method: true,\n                    customRoute\n                })[0];\n            }\n    }\n}\n/** JSDoc */ function extractUserData(user, keys) {\n    const extractedUser = {};\n    const attributes = Array.isArray(keys) ? keys : DEFAULT_USER_INCLUDES;\n    attributes.forEach((key)=>{\n        if (user && key in user) {\n            extractedUser[key] = user[key];\n        }\n    });\n    return extractedUser;\n}\n/**\n * Normalize data from the request object, accounting for framework differences.\n *\n * @param req The request object from which to extract data\n * @param options.include An optional array of keys to include in the normalized data. Defaults to\n * DEFAULT_REQUEST_INCLUDES if not provided.\n * @param options.deps Injected, platform-specific dependencies\n * @returns An object containing normalized request data\n */ function extractRequestData(req, options) {\n    const { include = DEFAULT_REQUEST_INCLUDES, deps } = options || {};\n    const requestData = {};\n    // headers:\n    //   node, express, koa, nextjs: req.headers\n    const headers = req.headers || {};\n    // method:\n    //   node, express, koa, nextjs: req.method\n    const method = req.method;\n    // host:\n    //   express: req.hostname in > 4 and req.host in < 4\n    //   koa: req.host\n    //   node, nextjs: req.headers.host\n    const host = req.hostname || req.host || headers.host || \"<no host>\";\n    // protocol:\n    //   node, nextjs: <n/a>\n    //   express, koa: req.protocol\n    const protocol = req.protocol === \"https\" || req.socket && req.socket.encrypted ? \"https\" : \"http\";\n    // url (including path and query string):\n    //   node, express: req.originalUrl\n    //   koa, nextjs: req.url\n    const originalUrl = req.originalUrl || req.url || \"\";\n    // absolute url\n    const absoluteUrl = originalUrl.startsWith(protocol) ? originalUrl : `${protocol}://${host}${originalUrl}`;\n    include.forEach((key)=>{\n        switch(key){\n            case \"headers\":\n                {\n                    requestData.headers = headers;\n                    // Remove the Cookie header in case cookie data should not be included in the event\n                    if (!include.includes(\"cookies\")) {\n                        delete requestData.headers.cookie;\n                    }\n                    break;\n                }\n            case \"method\":\n                {\n                    requestData.method = method;\n                    break;\n                }\n            case \"url\":\n                {\n                    requestData.url = absoluteUrl;\n                    break;\n                }\n            case \"cookies\":\n                {\n                    // cookies:\n                    //   node, express, koa: req.headers.cookie\n                    //   vercel, sails.js, express (w/ cookie middleware), nextjs: req.cookies\n                    requestData.cookies = // TODO (v8 / #5257): We're only sending the empty object for backwards compatibility, so the last bit can\n                    // come off in v8\n                    req.cookies || headers.cookie && (0,_cookie_js__WEBPACK_IMPORTED_MODULE_1__.parseCookie)(headers.cookie) || {};\n                    break;\n                }\n            case \"query_string\":\n                {\n                    // query string:\n                    //   node: req.url (raw)\n                    //   express, koa, nextjs: req.query\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                    requestData.query_string = extractQueryParams(req, deps);\n                    break;\n                }\n            case \"data\":\n                {\n                    if (method === \"GET\" || method === \"HEAD\") {\n                        break;\n                    }\n                    // body data:\n                    //   express, koa, nextjs: req.body\n                    //\n                    //   when using node by itself, you have to read the incoming stream(see\n                    //   https://nodejs.dev/learn/get-http-request-body-data-using-nodejs); if a user is doing that, we can't know\n                    //   where they're going to store the final result, so they'll have to capture this data themselves\n                    if (req.body !== undefined) {\n                        requestData.data = (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isString)(req.body) ? req.body : JSON.stringify((0,_normalize_js__WEBPACK_IMPORTED_MODULE_3__.normalize)(req.body));\n                    }\n                    break;\n                }\n            default:\n                {\n                    if (({}).hasOwnProperty.call(req, key)) {\n                        requestData[key] = req[key];\n                    }\n                }\n        }\n    });\n    return requestData;\n}\n/**\n * Add data from the given request to the given event\n *\n * @param event The event to which the request data will be added\n * @param req Request object\n * @param options.include Flags to control what data is included\n * @param options.deps Injected platform-specific dependencies\n * @returns The mutated `Event` object\n */ function addRequestDataToEvent(event, req, options) {\n    const include = {\n        ...DEFAULT_INCLUDES,\n        ...options && options.include\n    };\n    if (include.request) {\n        const extractedRequestData = Array.isArray(include.request) ? extractRequestData(req, {\n            include: include.request,\n            deps: options && options.deps\n        }) : extractRequestData(req, {\n            deps: options && options.deps\n        });\n        event.request = {\n            ...event.request,\n            ...extractedRequestData\n        };\n    }\n    if (include.user) {\n        const extractedUser = req.user && (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(req.user) ? extractUserData(req.user, include.user) : {};\n        if (Object.keys(extractedUser).length) {\n            event.user = {\n                ...event.user,\n                ...extractedUser\n            };\n        }\n    }\n    // client ip:\n    //   node, nextjs: req.socket.remoteAddress\n    //   express, koa: req.ip\n    if (include.ip) {\n        const ip = req.ip || req.socket && req.socket.remoteAddress;\n        if (ip) {\n            event.user = {\n                ...event.user,\n                ip_address: ip\n            };\n        }\n    }\n    if (include.transaction && !event.transaction) {\n        // TODO do we even need this anymore?\n        // TODO make this work for nextjs\n        event.transaction = extractTransaction(req, include.transaction);\n    }\n    return event;\n}\nfunction extractQueryParams(req, deps) {\n    // url (including path and query string):\n    //   node, express: req.originalUrl\n    //   koa, nextjs: req.url\n    let originalUrl = req.originalUrl || req.url || \"\";\n    if (!originalUrl) {\n        return;\n    }\n    // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and\n    // hostname on the beginning. Since the point here is just to grab the query string, it doesn't matter what we use.\n    if (originalUrl.startsWith(\"/\")) {\n        originalUrl = `http://dogs.are.great${originalUrl}`;\n    }\n    try {\n        return req.query || typeof URL !== undefined && new URL(originalUrl).search.slice(1) || // In Node 8, `URL` isn't in the global scope, so we have to use the built-in module from Node\n        deps && deps.url && deps.url.parse(originalUrl).query || undefined;\n    } catch (e2) {\n        return undefined;\n    }\n}\n/**\n * Transforms a `Headers` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into a simple key-value dict.\n * The header keys will be lower case: e.g. A \"Content-Type\" header will be stored as \"content-type\".\n */ function winterCGHeadersToDict(winterCGHeaders) {\n    const headers = {};\n    try {\n        winterCGHeaders.forEach((value, key)=>{\n            if (typeof value === \"string\") {\n                // We check that value is a string even though it might be redundant to make sure prototype pollution is not possible.\n                headers[key] = value;\n            }\n        });\n    } catch (e) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_4__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_5__.logger.warn(\"Sentry failed extracting headers from a request object. If you see this, please file an issue.\");\n    }\n    return headers;\n}\n/**\n * Converts a `Request` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into the format that the `RequestData` integration understands.\n */ function winterCGRequestToRequestData(req) {\n    const headers = winterCGHeadersToDict(req.headers);\n    return {\n        method: req.method,\n        url: req.url,\n        headers\n    };\n}\n //# sourceMappingURL=requestdata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3JlcXVlc3RkYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMEM7QUFDSztBQUNHO0FBQ2I7QUFDTTtBQUNTO0FBRXBELE1BQU1PLG1CQUFtQjtJQUN2QkMsSUFBSTtJQUNKQyxTQUFTO0lBQ1RDLGFBQWE7SUFDYkMsTUFBTTtBQUNSO0FBQ0EsTUFBTUMsMkJBQTJCO0lBQUM7SUFBVztJQUFRO0lBQVc7SUFBVTtJQUFnQjtDQUFNO0FBQ2hHLE1BQU1DLHdCQUF3QjtJQUFDO0lBQU07SUFBWTtDQUFRO0FBRXpEOzs7Q0FHQyxHQUNELFNBQVNDLDRCQUNQSixXQUFXLEVBQ1hLLEdBQUcsRUFDSEMsSUFBSTtJQUVKLElBQUksQ0FBQ04sYUFBYTtJQUNsQixJQUFJLENBQUNBLFlBQVlPLFFBQVEsQ0FBQ0MsTUFBTSxJQUFJUixZQUFZTyxRQUFRLENBQUNDLE1BQU0sS0FBSyxPQUFPO1FBQ3pFLDJEQUEyRDtRQUMzRFIsWUFBWVMsT0FBTyxJQUFJQywwQkFBMEJMLEtBQUs7WUFBRU0sTUFBTTtZQUFNQyxRQUFRO1FBQUs7SUFDbkY7SUFDQVosWUFBWWEsT0FBTyxDQUFDLE9BQU9SLElBQUlTLFdBQVcsSUFBSVQsSUFBSVUsR0FBRztJQUNyRCxJQUFJVixJQUFJVyxPQUFPLEVBQUU7UUFDZmhCLFlBQVlhLE9BQU8sQ0FBQyxXQUFXUixJQUFJVyxPQUFPO0lBQzVDO0lBQ0FoQixZQUFZYSxPQUFPLENBQUMsU0FBU0ksbUJBQW1CWixLQUFLQztBQUN2RDtBQUVBOzs7Ozs7Ozs7Ozs7O0NBYUMsR0FDRCxTQUFTSSwwQkFDUEwsR0FBRyxFQUNIYSxVQUFVLENBQUMsQ0FBQztJQUVaLE1BQU1OLFNBQVNQLElBQUlPLE1BQU0sSUFBSVAsSUFBSU8sTUFBTSxDQUFDTyxXQUFXO0lBRW5ELElBQUlSLE9BQU87SUFDWCxJQUFJSCxTQUFTO0lBRWIsb0ZBQW9GO0lBQ3BGLElBQUlVLFFBQVFFLFdBQVcsSUFBSWYsSUFBSWdCLEtBQUssRUFBRTtRQUNwQ1YsT0FBT08sUUFBUUUsV0FBVyxJQUFJLENBQUMsRUFBRWYsSUFBSVcsT0FBTyxJQUFJLEdBQUcsRUFBRVgsSUFBSWdCLEtBQUssSUFBSWhCLElBQUlnQixLQUFLLENBQUNWLElBQUksQ0FBQyxDQUFDO1FBQ2xGSCxTQUFTO0lBQ1gsT0FHSyxJQUFJSCxJQUFJUyxXQUFXLElBQUlULElBQUlVLEdBQUcsRUFBRTtRQUNuQ0osT0FBT2YsaUVBQXdCQSxDQUFDUyxJQUFJUyxXQUFXLElBQUlULElBQUlVLEdBQUcsSUFBSTtJQUNoRTtJQUVBLElBQUlPLE9BQU87SUFDWCxJQUFJSixRQUFRTixNQUFNLElBQUlBLFFBQVE7UUFDNUJVLFFBQVFWO0lBQ1Y7SUFDQSxJQUFJTSxRQUFRTixNQUFNLElBQUlNLFFBQVFQLElBQUksRUFBRTtRQUNsQ1csUUFBUTtJQUNWO0lBQ0EsSUFBSUosUUFBUVAsSUFBSSxJQUFJQSxNQUFNO1FBQ3hCVyxRQUFRWDtJQUNWO0lBRUEsT0FBTztRQUFDVztRQUFNZDtLQUFPO0FBQ3ZCO0FBRUEsVUFBVSxHQUNWLFNBQVNlLG1CQUFtQmxCLEdBQUcsRUFBRW1CLElBQUk7SUFDbkMsT0FBUUE7UUFDTixLQUFLO1lBQVE7Z0JBQ1gsT0FBT2QsMEJBQTBCTCxLQUFLO29CQUFFTSxNQUFNO2dCQUFLLEVBQUUsQ0FBQyxFQUFFO1lBQzFEO1FBQ0EsS0FBSztZQUFXO2dCQUNkLE9BQU8sSUFBS1UsS0FBSyxJQUFJaEIsSUFBSWdCLEtBQUssQ0FBQ0ksS0FBSyxJQUFJcEIsSUFBSWdCLEtBQUssQ0FBQ0ksS0FBSyxDQUFDLEVBQUUsSUFBSXBCLElBQUlnQixLQUFLLENBQUNJLEtBQUssQ0FBQyxFQUFFLENBQUNILElBQUksSUFBSztZQUM1RjtRQUNBLEtBQUs7UUFDTDtZQUFTO2dCQUNQLHNFQUFzRTtnQkFDdEUsTUFBTUYsY0FBY2YsSUFBSXFCLG1CQUFtQixHQUFHckIsSUFBSXFCLG1CQUFtQixHQUFHQztnQkFDeEUsT0FBT2pCLDBCQUEwQkwsS0FBSztvQkFBRU0sTUFBTTtvQkFBTUMsUUFBUTtvQkFBTVE7Z0JBQVksRUFBRSxDQUFDLEVBQUU7WUFDckY7SUFDRjtBQUNGO0FBRUEsVUFBVSxHQUNWLFNBQVNRLGdCQUNQM0IsSUFBSSxFQUdKNEIsSUFBSTtJQUVKLE1BQU1DLGdCQUFnQixDQUFDO0lBQ3ZCLE1BQU1DLGFBQWFDLE1BQU1DLE9BQU8sQ0FBQ0osUUFBUUEsT0FBTzFCO0lBRWhENEIsV0FBV0csT0FBTyxDQUFDQyxDQUFBQTtRQUNqQixJQUFJbEMsUUFBUWtDLE9BQU9sQyxNQUFNO1lBQ3ZCNkIsYUFBYSxDQUFDSyxJQUFJLEdBQUdsQyxJQUFJLENBQUNrQyxJQUFJO1FBQ2hDO0lBQ0Y7SUFFQSxPQUFPTDtBQUNUO0FBRUE7Ozs7Ozs7O0NBUUMsR0FDRCxTQUFTTSxtQkFDUC9CLEdBQUcsRUFDSGEsT0FBTztJQUlQLE1BQU0sRUFBRW1CLFVBQVVuQyx3QkFBd0IsRUFBRUksSUFBSSxFQUFFLEdBQUdZLFdBQVcsQ0FBQztJQUNqRSxNQUFNb0IsY0FBYyxDQUFDO0lBRXJCLFdBQVc7SUFDWCw0Q0FBNEM7SUFDNUMsTUFBTUMsVUFBV2xDLElBQUlrQyxPQUFPLElBQUksQ0FBQztJQUdqQyxVQUFVO0lBQ1YsMkNBQTJDO0lBQzNDLE1BQU0zQixTQUFTUCxJQUFJTyxNQUFNO0lBQ3pCLFFBQVE7SUFDUixxREFBcUQ7SUFDckQsa0JBQWtCO0lBQ2xCLG1DQUFtQztJQUNuQyxNQUFNNEIsT0FBT25DLElBQUlvQyxRQUFRLElBQUlwQyxJQUFJbUMsSUFBSSxJQUFJRCxRQUFRQyxJQUFJLElBQUk7SUFDekQsWUFBWTtJQUNaLHdCQUF3QjtJQUN4QiwrQkFBK0I7SUFDL0IsTUFBTUUsV0FBV3JDLElBQUlxQyxRQUFRLEtBQUssV0FBWXJDLElBQUlzQyxNQUFNLElBQUl0QyxJQUFJc0MsTUFBTSxDQUFDQyxTQUFTLEdBQUksVUFBVTtJQUM5Rix5Q0FBeUM7SUFDekMsbUNBQW1DO0lBQ25DLHlCQUF5QjtJQUN6QixNQUFNOUIsY0FBY1QsSUFBSVMsV0FBVyxJQUFJVCxJQUFJVSxHQUFHLElBQUk7SUFDbEQsZUFBZTtJQUNmLE1BQU04QixjQUFjL0IsWUFBWWdDLFVBQVUsQ0FBQ0osWUFBWTVCLGNBQWMsQ0FBQyxFQUFFNEIsU0FBUyxHQUFHLEVBQUVGLEtBQUssRUFBRTFCLFlBQVksQ0FBQztJQUMxR3VCLFFBQVFILE9BQU8sQ0FBQ0MsQ0FBQUE7UUFDZCxPQUFRQTtZQUNOLEtBQUs7Z0JBQVc7b0JBQ2RHLFlBQVlDLE9BQU8sR0FBR0E7b0JBRXRCLG1GQUFtRjtvQkFDbkYsSUFBSSxDQUFDRixRQUFRVSxRQUFRLENBQUMsWUFBWTt3QkFDaEMsT0FBTyxZQUFhUixPQUFPLENBQUdTLE1BQU07b0JBQ3RDO29CQUVBO2dCQUNGO1lBQ0EsS0FBSztnQkFBVTtvQkFDYlYsWUFBWTFCLE1BQU0sR0FBR0E7b0JBQ3JCO2dCQUNGO1lBQ0EsS0FBSztnQkFBTztvQkFDVjBCLFlBQVl2QixHQUFHLEdBQUc4QjtvQkFDbEI7Z0JBQ0Y7WUFDQSxLQUFLO2dCQUFXO29CQUNkLFdBQVc7b0JBQ1gsMkNBQTJDO29CQUMzQywwRUFBMEU7b0JBQzFFUCxZQUFZVyxPQUFPLEdBQ2pCLDBHQUEwRztvQkFDMUcsaUJBQWlCO29CQUNqQjVDLElBQUk0QyxPQUFPLElBQUtWLFFBQVFTLE1BQU0sSUFBSTFELHVEQUFXQSxDQUFDaUQsUUFBUVMsTUFBTSxLQUFNLENBQUM7b0JBQ3JFO2dCQUNGO1lBQ0EsS0FBSztnQkFBZ0I7b0JBQ25CLGdCQUFnQjtvQkFDaEIsd0JBQXdCO29CQUN4QixvQ0FBb0M7b0JBQ3BDLHNFQUFzRTtvQkFDdEVWLFlBQVlZLFlBQVksR0FBR2pDLG1CQUFtQlosS0FBS0M7b0JBQ25EO2dCQUNGO1lBQ0EsS0FBSztnQkFBUTtvQkFDWCxJQUFJTSxXQUFXLFNBQVNBLFdBQVcsUUFBUTt3QkFDekM7b0JBQ0Y7b0JBQ0EsYUFBYTtvQkFDYixtQ0FBbUM7b0JBQ25DLEVBQUU7b0JBQ0Ysd0VBQXdFO29CQUN4RSw4R0FBOEc7b0JBQzlHLG1HQUFtRztvQkFDbkcsSUFBSVAsSUFBSThDLElBQUksS0FBS3hCLFdBQVc7d0JBQzFCVyxZQUFZYyxJQUFJLEdBQUc1RCxnREFBUUEsQ0FBQ2EsSUFBSThDLElBQUksSUFBSTlDLElBQUk4QyxJQUFJLEdBQUdFLEtBQUtDLFNBQVMsQ0FBQzNELHdEQUFTQSxDQUFDVSxJQUFJOEMsSUFBSTtvQkFDdEY7b0JBQ0E7Z0JBQ0Y7WUFDQTtnQkFBUztvQkFDUCxJQUFJLEVBQUMsR0FBRUksY0FBYyxDQUFDQyxJQUFJLENBQUNuRCxLQUFLOEIsTUFBTTt3QkFDcENHLFdBQVcsQ0FBQ0gsSUFBSSxHQUFHLEdBQU0sQ0FBQ0EsSUFBSTtvQkFDaEM7Z0JBQ0Y7UUFDRjtJQUNGO0lBRUEsT0FBT0c7QUFDVDtBQUVBOzs7Ozs7OztDQVFDLEdBQ0QsU0FBU21CLHNCQUNQQyxLQUFLLEVBQ0xyRCxHQUFHLEVBQ0hhLE9BQU87SUFFUCxNQUFNbUIsVUFBVTtRQUNkLEdBQUd4QyxnQkFBZ0I7UUFDbkIsR0FBSXFCLFdBQVdBLFFBQVFtQixPQUFPO0lBQ2hDO0lBRUEsSUFBSUEsUUFBUXRDLE9BQU8sRUFBRTtRQUNuQixNQUFNNEQsdUJBQXVCM0IsTUFBTUMsT0FBTyxDQUFDSSxRQUFRdEMsT0FBTyxJQUN0RHFDLG1CQUFtQi9CLEtBQUs7WUFBRWdDLFNBQVNBLFFBQVF0QyxPQUFPO1lBQUVPLE1BQU1ZLFdBQVdBLFFBQVFaLElBQUk7UUFBQyxLQUNsRjhCLG1CQUFtQi9CLEtBQUs7WUFBRUMsTUFBTVksV0FBV0EsUUFBUVosSUFBSTtRQUFDO1FBRTVEb0QsTUFBTTNELE9BQU8sR0FBRztZQUNkLEdBQUcyRCxNQUFNM0QsT0FBTztZQUNoQixHQUFHNEQsb0JBQW9CO1FBQ3pCO0lBQ0Y7SUFFQSxJQUFJdEIsUUFBUXBDLElBQUksRUFBRTtRQUNoQixNQUFNNkIsZ0JBQWdCekIsSUFBSUosSUFBSSxJQUFJUixxREFBYUEsQ0FBQ1ksSUFBSUosSUFBSSxJQUFJMkIsZ0JBQWdCdkIsSUFBSUosSUFBSSxFQUFFb0MsUUFBUXBDLElBQUksSUFBSSxDQUFDO1FBRXZHLElBQUkyRCxPQUFPL0IsSUFBSSxDQUFDQyxlQUFlK0IsTUFBTSxFQUFFO1lBQ3JDSCxNQUFNekQsSUFBSSxHQUFHO2dCQUNYLEdBQUd5RCxNQUFNekQsSUFBSTtnQkFDYixHQUFHNkIsYUFBYTtZQUNsQjtRQUNGO0lBQ0Y7SUFFQSxhQUFhO0lBQ2IsMkNBQTJDO0lBQzNDLHlCQUF5QjtJQUN6QixJQUFJTyxRQUFRdkMsRUFBRSxFQUFFO1FBQ2QsTUFBTUEsS0FBS08sSUFBSVAsRUFBRSxJQUFLTyxJQUFJc0MsTUFBTSxJQUFJdEMsSUFBSXNDLE1BQU0sQ0FBQ21CLGFBQWE7UUFDNUQsSUFBSWhFLElBQUk7WUFDTjRELE1BQU16RCxJQUFJLEdBQUc7Z0JBQ1gsR0FBR3lELE1BQU16RCxJQUFJO2dCQUNiOEQsWUFBWWpFO1lBQ2Q7UUFDRjtJQUNGO0lBRUEsSUFBSXVDLFFBQVFyQyxXQUFXLElBQUksQ0FBQzBELE1BQU0xRCxXQUFXLEVBQUU7UUFDN0MscUNBQXFDO1FBQ3JDLGlDQUFpQztRQUNqQzBELE1BQU0xRCxXQUFXLEdBQUd1QixtQkFBbUJsQixLQUFLZ0MsUUFBUXJDLFdBQVc7SUFDakU7SUFFQSxPQUFPMEQ7QUFDVDtBQUVBLFNBQVN6QyxtQkFDUFosR0FBRyxFQUNIQyxJQUFJO0lBRUoseUNBQXlDO0lBQ3pDLG1DQUFtQztJQUNuQyx5QkFBeUI7SUFDekIsSUFBSVEsY0FBY1QsSUFBSVMsV0FBVyxJQUFJVCxJQUFJVSxHQUFHLElBQUk7SUFFaEQsSUFBSSxDQUFDRCxhQUFhO1FBQ2hCO0lBQ0Y7SUFFQSxnSEFBZ0g7SUFDaEgsbUhBQW1IO0lBQ25ILElBQUlBLFlBQVlnQyxVQUFVLENBQUMsTUFBTTtRQUMvQmhDLGNBQWMsQ0FBQyxxQkFBcUIsRUFBRUEsWUFBWSxDQUFDO0lBQ3JEO0lBRUEsSUFBSTtRQUNGLE9BQ0VULElBQUkyRCxLQUFLLElBQ1IsT0FBT0MsUUFBUXRDLGFBQWEsSUFBSXNDLElBQUluRCxhQUFhb0QsTUFBTSxDQUFDQyxLQUFLLENBQUMsTUFDL0QsOEZBQThGO1FBQzdGN0QsUUFBUUEsS0FBS1MsR0FBRyxJQUFJVCxLQUFLUyxHQUFHLENBQUNxRCxLQUFLLENBQUN0RCxhQUFha0QsS0FBSyxJQUN0RHJDO0lBRUosRUFBRSxPQUFPMEMsSUFBSTtRQUNYLE9BQU8xQztJQUNUO0FBQ0Y7QUFFQTs7O0NBR0MsR0FDRCxTQUFTMkMsc0JBQXNCQyxlQUFlO0lBQzVDLE1BQU1oQyxVQUFVLENBQUM7SUFDakIsSUFBSTtRQUNGZ0MsZ0JBQWdCckMsT0FBTyxDQUFDLENBQUNzQyxPQUFPckM7WUFDOUIsSUFBSSxPQUFPcUMsVUFBVSxVQUFVO2dCQUM3QixzSEFBc0g7Z0JBQ3RIakMsT0FBTyxDQUFDSixJQUFJLEdBQUdxQztZQUNqQjtRQUNGO0lBQ0YsRUFBRSxPQUFPQyxHQUFHO1FBQ1ZsRix3REFBV0EsSUFDVEcsOENBQU1BLENBQUNnRixJQUFJLENBQUM7SUFDaEI7SUFFQSxPQUFPbkM7QUFDVDtBQUVBOztDQUVDLEdBQ0QsU0FBU29DLDZCQUE2QnRFLEdBQUc7SUFDdkMsTUFBTWtDLFVBQVUrQixzQkFBc0JqRSxJQUFJa0MsT0FBTztJQUNqRCxPQUFPO1FBQ0wzQixRQUFRUCxJQUFJTyxNQUFNO1FBQ2xCRyxLQUFLVixJQUFJVSxHQUFHO1FBQ1p3QjtJQUNGO0FBQ0Y7QUFFeUwsQ0FDekwsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9yZXF1ZXN0ZGF0YS5qcz9jYzJmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhcnNlQ29va2llIH0gZnJvbSAnLi9jb29raWUuanMnO1xuaW1wb3J0IHsgREVCVUdfQlVJTEQgfSBmcm9tICcuL2RlYnVnLWJ1aWxkLmpzJztcbmltcG9ydCB7IGlzU3RyaW5nLCBpc1BsYWluT2JqZWN0IH0gZnJvbSAnLi9pcy5qcyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuL2xvZ2dlci5qcyc7XG5pbXBvcnQgeyBub3JtYWxpemUgfSBmcm9tICcuL25vcm1hbGl6ZS5qcyc7XG5pbXBvcnQgeyBzdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQgfSBmcm9tICcuL3VybC5qcyc7XG5cbmNvbnN0IERFRkFVTFRfSU5DTFVERVMgPSB7XG4gIGlwOiBmYWxzZSxcbiAgcmVxdWVzdDogdHJ1ZSxcbiAgdHJhbnNhY3Rpb246IHRydWUsXG4gIHVzZXI6IHRydWUsXG59O1xuY29uc3QgREVGQVVMVF9SRVFVRVNUX0lOQ0xVREVTID0gWydjb29raWVzJywgJ2RhdGEnLCAnaGVhZGVycycsICdtZXRob2QnLCAncXVlcnlfc3RyaW5nJywgJ3VybCddO1xuY29uc3QgREVGQVVMVF9VU0VSX0lOQ0xVREVTID0gWydpZCcsICd1c2VybmFtZScsICdlbWFpbCddO1xuXG4vKipcbiAqIFNldHMgcGFyYW1ldGVyaXplZCByb3V0ZSBhcyB0cmFuc2FjdGlvbiBuYW1lIGUuZy46IGBHRVQgL3VzZXJzLzppZGBcbiAqIEFsc28gYWRkcyBtb3JlIGNvbnRleHQgZGF0YSBvbiB0aGUgdHJhbnNhY3Rpb24gZnJvbSB0aGUgcmVxdWVzdFxuICovXG5mdW5jdGlvbiBhZGRSZXF1ZXN0RGF0YVRvVHJhbnNhY3Rpb24oXG4gIHRyYW5zYWN0aW9uLFxuICByZXEsXG4gIGRlcHMsXG4pIHtcbiAgaWYgKCF0cmFuc2FjdGlvbikgcmV0dXJuO1xuICBpZiAoIXRyYW5zYWN0aW9uLm1ldGFkYXRhLnNvdXJjZSB8fCB0cmFuc2FjdGlvbi5tZXRhZGF0YS5zb3VyY2UgPT09ICd1cmwnKSB7XG4gICAgLy8gQXR0ZW1wdCB0byBncmFiIGEgcGFyYW1ldGVyaXplZCByb3V0ZSBvZmYgb2YgdGhlIHJlcXVlc3RcbiAgICB0cmFuc2FjdGlvbi5zZXROYW1lKC4uLmV4dHJhY3RQYXRoRm9yVHJhbnNhY3Rpb24ocmVxLCB7IHBhdGg6IHRydWUsIG1ldGhvZDogdHJ1ZSB9KSk7XG4gIH1cbiAgdHJhbnNhY3Rpb24uc2V0RGF0YSgndXJsJywgcmVxLm9yaWdpbmFsVXJsIHx8IHJlcS51cmwpO1xuICBpZiAocmVxLmJhc2VVcmwpIHtcbiAgICB0cmFuc2FjdGlvbi5zZXREYXRhKCdiYXNlVXJsJywgcmVxLmJhc2VVcmwpO1xuICB9XG4gIHRyYW5zYWN0aW9uLnNldERhdGEoJ3F1ZXJ5JywgZXh0cmFjdFF1ZXJ5UGFyYW1zKHJlcSwgZGVwcykpO1xufVxuXG4vKipcbiAqIEV4dHJhY3RzIGEgY29tcGxldGUgYW5kIHBhcmFtZXRlcml6ZWQgcGF0aCBmcm9tIHRoZSByZXF1ZXN0IG9iamVjdCBhbmQgdXNlcyBpdCB0byBjb25zdHJ1Y3QgdHJhbnNhY3Rpb24gbmFtZS5cbiAqIElmIHRoZSBwYXJhbWV0ZXJpemVkIHRyYW5zYWN0aW9uIG5hbWUgY2Fubm90IGJlIGV4dHJhY3RlZCwgd2UgZmFsbCBiYWNrIHRvIHRoZSByYXcgVVJMLlxuICpcbiAqIEFkZGl0aW9uYWxseSwgdGhpcyBmdW5jdGlvbiBkZXRlcm1pbmVzIGFuZCByZXR1cm5zIHRoZSB0cmFuc2FjdGlvbiBuYW1lIHNvdXJjZVxuICpcbiAqIGVnLiBHRVQgL21vdW50cG9pbnQvdXNlci86aWRcbiAqXG4gKiBAcGFyYW0gcmVxIEEgcmVxdWVzdCBvYmplY3RcbiAqIEBwYXJhbSBvcHRpb25zIFdoYXQgdG8gaW5jbHVkZSBpbiB0aGUgdHJhbnNhY3Rpb24gbmFtZSAobWV0aG9kLCBwYXRoLCBvciBhIGN1c3RvbSByb3V0ZSBuYW1lIHRvIGJlXG4gKiAgICAgICAgICAgICAgICB1c2VkIGluc3RlYWQgb2YgdGhlIHJlcXVlc3QncyByb3V0ZSlcbiAqXG4gKiBAcmV0dXJucyBBIHR1cGxlIG9mIHRoZSBmdWxseSBjb25zdHJ1Y3RlZCB0cmFuc2FjdGlvbiBuYW1lIFswXSBhbmQgaXRzIHNvdXJjZSBbMV0gKGNhbiBiZSBlaXRoZXIgJ3JvdXRlJyBvciAndXJsJylcbiAqL1xuZnVuY3Rpb24gZXh0cmFjdFBhdGhGb3JUcmFuc2FjdGlvbihcbiAgcmVxLFxuICBvcHRpb25zID0ge30sXG4pIHtcbiAgY29uc3QgbWV0aG9kID0gcmVxLm1ldGhvZCAmJiByZXEubWV0aG9kLnRvVXBwZXJDYXNlKCk7XG5cbiAgbGV0IHBhdGggPSAnJztcbiAgbGV0IHNvdXJjZSA9ICd1cmwnO1xuXG4gIC8vIENoZWNrIHRvIHNlZSBpZiB0aGVyZSdzIGEgcGFyYW1ldGVyaXplZCByb3V0ZSB3ZSBjYW4gdXNlIChhcyB0aGVyZSBpcyBpbiBFeHByZXNzKVxuICBpZiAob3B0aW9ucy5jdXN0b21Sb3V0ZSB8fCByZXEucm91dGUpIHtcbiAgICBwYXRoID0gb3B0aW9ucy5jdXN0b21Sb3V0ZSB8fCBgJHtyZXEuYmFzZVVybCB8fCAnJ30ke3JlcS5yb3V0ZSAmJiByZXEucm91dGUucGF0aH1gO1xuICAgIHNvdXJjZSA9ICdyb3V0ZSc7XG4gIH1cblxuICAvLyBPdGhlcndpc2UsIGp1c3QgdGFrZSB0aGUgb3JpZ2luYWwgVVJMXG4gIGVsc2UgaWYgKHJlcS5vcmlnaW5hbFVybCB8fCByZXEudXJsKSB7XG4gICAgcGF0aCA9IHN0cmlwVXJsUXVlcnlBbmRGcmFnbWVudChyZXEub3JpZ2luYWxVcmwgfHwgcmVxLnVybCB8fCAnJyk7XG4gIH1cblxuICBsZXQgbmFtZSA9ICcnO1xuICBpZiAob3B0aW9ucy5tZXRob2QgJiYgbWV0aG9kKSB7XG4gICAgbmFtZSArPSBtZXRob2Q7XG4gIH1cbiAgaWYgKG9wdGlvbnMubWV0aG9kICYmIG9wdGlvbnMucGF0aCkge1xuICAgIG5hbWUgKz0gJyAnO1xuICB9XG4gIGlmIChvcHRpb25zLnBhdGggJiYgcGF0aCkge1xuICAgIG5hbWUgKz0gcGF0aDtcbiAgfVxuXG4gIHJldHVybiBbbmFtZSwgc291cmNlXTtcbn1cblxuLyoqIEpTRG9jICovXG5mdW5jdGlvbiBleHRyYWN0VHJhbnNhY3Rpb24ocmVxLCB0eXBlKSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3BhdGgnOiB7XG4gICAgICByZXR1cm4gZXh0cmFjdFBhdGhGb3JUcmFuc2FjdGlvbihyZXEsIHsgcGF0aDogdHJ1ZSB9KVswXTtcbiAgICB9XG4gICAgY2FzZSAnaGFuZGxlcic6IHtcbiAgICAgIHJldHVybiAocmVxLnJvdXRlICYmIHJlcS5yb3V0ZS5zdGFjayAmJiByZXEucm91dGUuc3RhY2tbMF0gJiYgcmVxLnJvdXRlLnN0YWNrWzBdLm5hbWUpIHx8ICc8YW5vbnltb3VzPic7XG4gICAgfVxuICAgIGNhc2UgJ21ldGhvZFBhdGgnOlxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIC8vIGlmIGV4aXN0IF9yZWNvbnN0cnVjdGVkUm91dGUgcmV0dXJuIHRoYXQgcGF0aCBpbnN0ZWFkIG9mIHJvdXRlLnBhdGhcbiAgICAgIGNvbnN0IGN1c3RvbVJvdXRlID0gcmVxLl9yZWNvbnN0cnVjdGVkUm91dGUgPyByZXEuX3JlY29uc3RydWN0ZWRSb3V0ZSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBleHRyYWN0UGF0aEZvclRyYW5zYWN0aW9uKHJlcSwgeyBwYXRoOiB0cnVlLCBtZXRob2Q6IHRydWUsIGN1c3RvbVJvdXRlIH0pWzBdO1xuICAgIH1cbiAgfVxufVxuXG4vKiogSlNEb2MgKi9cbmZ1bmN0aW9uIGV4dHJhY3RVc2VyRGF0YShcbiAgdXNlclxuXG4sXG4gIGtleXMsXG4pIHtcbiAgY29uc3QgZXh0cmFjdGVkVXNlciA9IHt9O1xuICBjb25zdCBhdHRyaWJ1dGVzID0gQXJyYXkuaXNBcnJheShrZXlzKSA/IGtleXMgOiBERUZBVUxUX1VTRVJfSU5DTFVERVM7XG5cbiAgYXR0cmlidXRlcy5mb3JFYWNoKGtleSA9PiB7XG4gICAgaWYgKHVzZXIgJiYga2V5IGluIHVzZXIpIHtcbiAgICAgIGV4dHJhY3RlZFVzZXJba2V5XSA9IHVzZXJba2V5XTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBleHRyYWN0ZWRVc2VyO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBkYXRhIGZyb20gdGhlIHJlcXVlc3Qgb2JqZWN0LCBhY2NvdW50aW5nIGZvciBmcmFtZXdvcmsgZGlmZmVyZW5jZXMuXG4gKlxuICogQHBhcmFtIHJlcSBUaGUgcmVxdWVzdCBvYmplY3QgZnJvbSB3aGljaCB0byBleHRyYWN0IGRhdGFcbiAqIEBwYXJhbSBvcHRpb25zLmluY2x1ZGUgQW4gb3B0aW9uYWwgYXJyYXkgb2Yga2V5cyB0byBpbmNsdWRlIGluIHRoZSBub3JtYWxpemVkIGRhdGEuIERlZmF1bHRzIHRvXG4gKiBERUZBVUxUX1JFUVVFU1RfSU5DTFVERVMgaWYgbm90IHByb3ZpZGVkLlxuICogQHBhcmFtIG9wdGlvbnMuZGVwcyBJbmplY3RlZCwgcGxhdGZvcm0tc3BlY2lmaWMgZGVwZW5kZW5jaWVzXG4gKiBAcmV0dXJucyBBbiBvYmplY3QgY29udGFpbmluZyBub3JtYWxpemVkIHJlcXVlc3QgZGF0YVxuICovXG5mdW5jdGlvbiBleHRyYWN0UmVxdWVzdERhdGEoXG4gIHJlcSxcbiAgb3B0aW9uc1xuXG4sXG4pIHtcbiAgY29uc3QgeyBpbmNsdWRlID0gREVGQVVMVF9SRVFVRVNUX0lOQ0xVREVTLCBkZXBzIH0gPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCByZXF1ZXN0RGF0YSA9IHt9O1xuXG4gIC8vIGhlYWRlcnM6XG4gIC8vICAgbm9kZSwgZXhwcmVzcywga29hLCBuZXh0anM6IHJlcS5oZWFkZXJzXG4gIGNvbnN0IGhlYWRlcnMgPSAocmVxLmhlYWRlcnMgfHwge30pXG5cbjtcbiAgLy8gbWV0aG9kOlxuICAvLyAgIG5vZGUsIGV4cHJlc3MsIGtvYSwgbmV4dGpzOiByZXEubWV0aG9kXG4gIGNvbnN0IG1ldGhvZCA9IHJlcS5tZXRob2Q7XG4gIC8vIGhvc3Q6XG4gIC8vICAgZXhwcmVzczogcmVxLmhvc3RuYW1lIGluID4gNCBhbmQgcmVxLmhvc3QgaW4gPCA0XG4gIC8vICAga29hOiByZXEuaG9zdFxuICAvLyAgIG5vZGUsIG5leHRqczogcmVxLmhlYWRlcnMuaG9zdFxuICBjb25zdCBob3N0ID0gcmVxLmhvc3RuYW1lIHx8IHJlcS5ob3N0IHx8IGhlYWRlcnMuaG9zdCB8fCAnPG5vIGhvc3Q+JztcbiAgLy8gcHJvdG9jb2w6XG4gIC8vICAgbm9kZSwgbmV4dGpzOiA8bi9hPlxuICAvLyAgIGV4cHJlc3MsIGtvYTogcmVxLnByb3RvY29sXG4gIGNvbnN0IHByb3RvY29sID0gcmVxLnByb3RvY29sID09PSAnaHR0cHMnIHx8IChyZXEuc29ja2V0ICYmIHJlcS5zb2NrZXQuZW5jcnlwdGVkKSA/ICdodHRwcycgOiAnaHR0cCc7XG4gIC8vIHVybCAoaW5jbHVkaW5nIHBhdGggYW5kIHF1ZXJ5IHN0cmluZyk6XG4gIC8vICAgbm9kZSwgZXhwcmVzczogcmVxLm9yaWdpbmFsVXJsXG4gIC8vICAga29hLCBuZXh0anM6IHJlcS51cmxcbiAgY29uc3Qgb3JpZ2luYWxVcmwgPSByZXEub3JpZ2luYWxVcmwgfHwgcmVxLnVybCB8fCAnJztcbiAgLy8gYWJzb2x1dGUgdXJsXG4gIGNvbnN0IGFic29sdXRlVXJsID0gb3JpZ2luYWxVcmwuc3RhcnRzV2l0aChwcm90b2NvbCkgPyBvcmlnaW5hbFVybCA6IGAke3Byb3RvY29sfTovLyR7aG9zdH0ke29yaWdpbmFsVXJsfWA7XG4gIGluY2x1ZGUuZm9yRWFjaChrZXkgPT4ge1xuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICBjYXNlICdoZWFkZXJzJzoge1xuICAgICAgICByZXF1ZXN0RGF0YS5oZWFkZXJzID0gaGVhZGVycztcblxuICAgICAgICAvLyBSZW1vdmUgdGhlIENvb2tpZSBoZWFkZXIgaW4gY2FzZSBjb29raWUgZGF0YSBzaG91bGQgbm90IGJlIGluY2x1ZGVkIGluIHRoZSBldmVudFxuICAgICAgICBpZiAoIWluY2x1ZGUuaW5jbHVkZXMoJ2Nvb2tpZXMnKSkge1xuICAgICAgICAgIGRlbGV0ZSAocmVxdWVzdERhdGEuaGVhZGVycyApLmNvb2tpZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnbWV0aG9kJzoge1xuICAgICAgICByZXF1ZXN0RGF0YS5tZXRob2QgPSBtZXRob2Q7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAndXJsJzoge1xuICAgICAgICByZXF1ZXN0RGF0YS51cmwgPSBhYnNvbHV0ZVVybDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdjb29raWVzJzoge1xuICAgICAgICAvLyBjb29raWVzOlxuICAgICAgICAvLyAgIG5vZGUsIGV4cHJlc3MsIGtvYTogcmVxLmhlYWRlcnMuY29va2llXG4gICAgICAgIC8vICAgdmVyY2VsLCBzYWlscy5qcywgZXhwcmVzcyAody8gY29va2llIG1pZGRsZXdhcmUpLCBuZXh0anM6IHJlcS5jb29raWVzXG4gICAgICAgIHJlcXVlc3REYXRhLmNvb2tpZXMgPVxuICAgICAgICAgIC8vIFRPRE8gKHY4IC8gIzUyNTcpOiBXZSdyZSBvbmx5IHNlbmRpbmcgdGhlIGVtcHR5IG9iamVjdCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIHNvIHRoZSBsYXN0IGJpdCBjYW5cbiAgICAgICAgICAvLyBjb21lIG9mZiBpbiB2OFxuICAgICAgICAgIHJlcS5jb29raWVzIHx8IChoZWFkZXJzLmNvb2tpZSAmJiBwYXJzZUNvb2tpZShoZWFkZXJzLmNvb2tpZSkpIHx8IHt9O1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ3F1ZXJ5X3N0cmluZyc6IHtcbiAgICAgICAgLy8gcXVlcnkgc3RyaW5nOlxuICAgICAgICAvLyAgIG5vZGU6IHJlcS51cmwgKHJhdylcbiAgICAgICAgLy8gICBleHByZXNzLCBrb2EsIG5leHRqczogcmVxLnF1ZXJ5XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgcmVxdWVzdERhdGEucXVlcnlfc3RyaW5nID0gZXh0cmFjdFF1ZXJ5UGFyYW1zKHJlcSwgZGVwcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnZGF0YSc6IHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gJ0dFVCcgfHwgbWV0aG9kID09PSAnSEVBRCcpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBib2R5IGRhdGE6XG4gICAgICAgIC8vICAgZXhwcmVzcywga29hLCBuZXh0anM6IHJlcS5ib2R5XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgd2hlbiB1c2luZyBub2RlIGJ5IGl0c2VsZiwgeW91IGhhdmUgdG8gcmVhZCB0aGUgaW5jb21pbmcgc3RyZWFtKHNlZVxuICAgICAgICAvLyAgIGh0dHBzOi8vbm9kZWpzLmRldi9sZWFybi9nZXQtaHR0cC1yZXF1ZXN0LWJvZHktZGF0YS11c2luZy1ub2RlanMpOyBpZiBhIHVzZXIgaXMgZG9pbmcgdGhhdCwgd2UgY2FuJ3Qga25vd1xuICAgICAgICAvLyAgIHdoZXJlIHRoZXkncmUgZ29pbmcgdG8gc3RvcmUgdGhlIGZpbmFsIHJlc3VsdCwgc28gdGhleSdsbCBoYXZlIHRvIGNhcHR1cmUgdGhpcyBkYXRhIHRoZW1zZWx2ZXNcbiAgICAgICAgaWYgKHJlcS5ib2R5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXF1ZXN0RGF0YS5kYXRhID0gaXNTdHJpbmcocmVxLmJvZHkpID8gcmVxLmJvZHkgOiBKU09OLnN0cmluZ2lmeShub3JtYWxpemUocmVxLmJvZHkpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgaWYgKHt9Lmhhc093blByb3BlcnR5LmNhbGwocmVxLCBrZXkpKSB7XG4gICAgICAgICAgcmVxdWVzdERhdGFba2V5XSA9IChyZXEgKVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcmVxdWVzdERhdGE7XG59XG5cbi8qKlxuICogQWRkIGRhdGEgZnJvbSB0aGUgZ2l2ZW4gcmVxdWVzdCB0byB0aGUgZ2l2ZW4gZXZlbnRcbiAqXG4gKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IHRvIHdoaWNoIHRoZSByZXF1ZXN0IGRhdGEgd2lsbCBiZSBhZGRlZFxuICogQHBhcmFtIHJlcSBSZXF1ZXN0IG9iamVjdFxuICogQHBhcmFtIG9wdGlvbnMuaW5jbHVkZSBGbGFncyB0byBjb250cm9sIHdoYXQgZGF0YSBpcyBpbmNsdWRlZFxuICogQHBhcmFtIG9wdGlvbnMuZGVwcyBJbmplY3RlZCBwbGF0Zm9ybS1zcGVjaWZpYyBkZXBlbmRlbmNpZXNcbiAqIEByZXR1cm5zIFRoZSBtdXRhdGVkIGBFdmVudGAgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGFkZFJlcXVlc3REYXRhVG9FdmVudChcbiAgZXZlbnQsXG4gIHJlcSxcbiAgb3B0aW9ucyxcbikge1xuICBjb25zdCBpbmNsdWRlID0ge1xuICAgIC4uLkRFRkFVTFRfSU5DTFVERVMsXG4gICAgLi4uKG9wdGlvbnMgJiYgb3B0aW9ucy5pbmNsdWRlKSxcbiAgfTtcblxuICBpZiAoaW5jbHVkZS5yZXF1ZXN0KSB7XG4gICAgY29uc3QgZXh0cmFjdGVkUmVxdWVzdERhdGEgPSBBcnJheS5pc0FycmF5KGluY2x1ZGUucmVxdWVzdClcbiAgICAgID8gZXh0cmFjdFJlcXVlc3REYXRhKHJlcSwgeyBpbmNsdWRlOiBpbmNsdWRlLnJlcXVlc3QsIGRlcHM6IG9wdGlvbnMgJiYgb3B0aW9ucy5kZXBzIH0pXG4gICAgICA6IGV4dHJhY3RSZXF1ZXN0RGF0YShyZXEsIHsgZGVwczogb3B0aW9ucyAmJiBvcHRpb25zLmRlcHMgfSk7XG5cbiAgICBldmVudC5yZXF1ZXN0ID0ge1xuICAgICAgLi4uZXZlbnQucmVxdWVzdCxcbiAgICAgIC4uLmV4dHJhY3RlZFJlcXVlc3REYXRhLFxuICAgIH07XG4gIH1cblxuICBpZiAoaW5jbHVkZS51c2VyKSB7XG4gICAgY29uc3QgZXh0cmFjdGVkVXNlciA9IHJlcS51c2VyICYmIGlzUGxhaW5PYmplY3QocmVxLnVzZXIpID8gZXh0cmFjdFVzZXJEYXRhKHJlcS51c2VyLCBpbmNsdWRlLnVzZXIpIDoge307XG5cbiAgICBpZiAoT2JqZWN0LmtleXMoZXh0cmFjdGVkVXNlcikubGVuZ3RoKSB7XG4gICAgICBldmVudC51c2VyID0ge1xuICAgICAgICAuLi5ldmVudC51c2VyLFxuICAgICAgICAuLi5leHRyYWN0ZWRVc2VyLFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvLyBjbGllbnQgaXA6XG4gIC8vICAgbm9kZSwgbmV4dGpzOiByZXEuc29ja2V0LnJlbW90ZUFkZHJlc3NcbiAgLy8gICBleHByZXNzLCBrb2E6IHJlcS5pcFxuICBpZiAoaW5jbHVkZS5pcCkge1xuICAgIGNvbnN0IGlwID0gcmVxLmlwIHx8IChyZXEuc29ja2V0ICYmIHJlcS5zb2NrZXQucmVtb3RlQWRkcmVzcyk7XG4gICAgaWYgKGlwKSB7XG4gICAgICBldmVudC51c2VyID0ge1xuICAgICAgICAuLi5ldmVudC51c2VyLFxuICAgICAgICBpcF9hZGRyZXNzOiBpcCxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgaWYgKGluY2x1ZGUudHJhbnNhY3Rpb24gJiYgIWV2ZW50LnRyYW5zYWN0aW9uKSB7XG4gICAgLy8gVE9ETyBkbyB3ZSBldmVuIG5lZWQgdGhpcyBhbnltb3JlP1xuICAgIC8vIFRPRE8gbWFrZSB0aGlzIHdvcmsgZm9yIG5leHRqc1xuICAgIGV2ZW50LnRyYW5zYWN0aW9uID0gZXh0cmFjdFRyYW5zYWN0aW9uKHJlcSwgaW5jbHVkZS50cmFuc2FjdGlvbik7XG4gIH1cblxuICByZXR1cm4gZXZlbnQ7XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RRdWVyeVBhcmFtcyhcbiAgcmVxLFxuICBkZXBzLFxuKSB7XG4gIC8vIHVybCAoaW5jbHVkaW5nIHBhdGggYW5kIHF1ZXJ5IHN0cmluZyk6XG4gIC8vICAgbm9kZSwgZXhwcmVzczogcmVxLm9yaWdpbmFsVXJsXG4gIC8vICAga29hLCBuZXh0anM6IHJlcS51cmxcbiAgbGV0IG9yaWdpbmFsVXJsID0gcmVxLm9yaWdpbmFsVXJsIHx8IHJlcS51cmwgfHwgJyc7XG5cbiAgaWYgKCFvcmlnaW5hbFVybCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFRoZSBgVVJMYCBjb25zdHJ1Y3RvciBjYW4ndCBoYW5kbGUgaW50ZXJuYWwgVVJMcyBvZiB0aGUgZm9ybSBgL3NvbWUvcGF0aC9oZXJlYCwgc28gc3RpY2sgYSBkdW1teSBwcm90b2NvbCBhbmRcbiAgLy8gaG9zdG5hbWUgb24gdGhlIGJlZ2lubmluZy4gU2luY2UgdGhlIHBvaW50IGhlcmUgaXMganVzdCB0byBncmFiIHRoZSBxdWVyeSBzdHJpbmcsIGl0IGRvZXNuJ3QgbWF0dGVyIHdoYXQgd2UgdXNlLlxuICBpZiAob3JpZ2luYWxVcmwuc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgb3JpZ2luYWxVcmwgPSBgaHR0cDovL2RvZ3MuYXJlLmdyZWF0JHtvcmlnaW5hbFVybH1gO1xuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gKFxuICAgICAgcmVxLnF1ZXJ5IHx8XG4gICAgICAodHlwZW9mIFVSTCAhPT0gdW5kZWZpbmVkICYmIG5ldyBVUkwob3JpZ2luYWxVcmwpLnNlYXJjaC5zbGljZSgxKSkgfHxcbiAgICAgIC8vIEluIE5vZGUgOCwgYFVSTGAgaXNuJ3QgaW4gdGhlIGdsb2JhbCBzY29wZSwgc28gd2UgaGF2ZSB0byB1c2UgdGhlIGJ1aWx0LWluIG1vZHVsZSBmcm9tIE5vZGVcbiAgICAgIChkZXBzICYmIGRlcHMudXJsICYmIGRlcHMudXJsLnBhcnNlKG9yaWdpbmFsVXJsKS5xdWVyeSkgfHxcbiAgICAgIHVuZGVmaW5lZFxuICAgICk7XG4gIH0gY2F0Y2ggKGUyKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybXMgYSBgSGVhZGVyc2Agb2JqZWN0IHRoYXQgaW1wbGVtZW50cyB0aGUgYFdlYiBGZXRjaCBBUElgIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSGVhZGVycykgaW50byBhIHNpbXBsZSBrZXktdmFsdWUgZGljdC5cbiAqIFRoZSBoZWFkZXIga2V5cyB3aWxsIGJlIGxvd2VyIGNhc2U6IGUuZy4gQSBcIkNvbnRlbnQtVHlwZVwiIGhlYWRlciB3aWxsIGJlIHN0b3JlZCBhcyBcImNvbnRlbnQtdHlwZVwiLlxuICovXG5mdW5jdGlvbiB3aW50ZXJDR0hlYWRlcnNUb0RpY3Qod2ludGVyQ0dIZWFkZXJzKSB7XG4gIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgdHJ5IHtcbiAgICB3aW50ZXJDR0hlYWRlcnMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gV2UgY2hlY2sgdGhhdCB2YWx1ZSBpcyBhIHN0cmluZyBldmVuIHRob3VnaCBpdCBtaWdodCBiZSByZWR1bmRhbnQgdG8gbWFrZSBzdXJlIHByb3RvdHlwZSBwb2xsdXRpb24gaXMgbm90IHBvc3NpYmxlLlxuICAgICAgICBoZWFkZXJzW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIERFQlVHX0JVSUxEICYmXG4gICAgICBsb2dnZXIud2FybignU2VudHJ5IGZhaWxlZCBleHRyYWN0aW5nIGhlYWRlcnMgZnJvbSBhIHJlcXVlc3Qgb2JqZWN0LiBJZiB5b3Ugc2VlIHRoaXMsIHBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICB9XG5cbiAgcmV0dXJuIGhlYWRlcnM7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBgUmVxdWVzdGAgb2JqZWN0IHRoYXQgaW1wbGVtZW50cyB0aGUgYFdlYiBGZXRjaCBBUElgIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSGVhZGVycykgaW50byB0aGUgZm9ybWF0IHRoYXQgdGhlIGBSZXF1ZXN0RGF0YWAgaW50ZWdyYXRpb24gdW5kZXJzdGFuZHMuXG4gKi9cbmZ1bmN0aW9uIHdpbnRlckNHUmVxdWVzdFRvUmVxdWVzdERhdGEocmVxKSB7XG4gIGNvbnN0IGhlYWRlcnMgPSB3aW50ZXJDR0hlYWRlcnNUb0RpY3QocmVxLmhlYWRlcnMpO1xuICByZXR1cm4ge1xuICAgIG1ldGhvZDogcmVxLm1ldGhvZCxcbiAgICB1cmw6IHJlcS51cmwsXG4gICAgaGVhZGVycyxcbiAgfTtcbn1cblxuZXhwb3J0IHsgREVGQVVMVF9VU0VSX0lOQ0xVREVTLCBhZGRSZXF1ZXN0RGF0YVRvRXZlbnQsIGFkZFJlcXVlc3REYXRhVG9UcmFuc2FjdGlvbiwgZXh0cmFjdFBhdGhGb3JUcmFuc2FjdGlvbiwgZXh0cmFjdFJlcXVlc3REYXRhLCB3aW50ZXJDR0hlYWRlcnNUb0RpY3QsIHdpbnRlckNHUmVxdWVzdFRvUmVxdWVzdERhdGEgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcXVlc3RkYXRhLmpzLm1hcFxuIl0sIm5hbWVzIjpbInBhcnNlQ29va2llIiwiREVCVUdfQlVJTEQiLCJpc1N0cmluZyIsImlzUGxhaW5PYmplY3QiLCJsb2dnZXIiLCJub3JtYWxpemUiLCJzdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQiLCJERUZBVUxUX0lOQ0xVREVTIiwiaXAiLCJyZXF1ZXN0IiwidHJhbnNhY3Rpb24iLCJ1c2VyIiwiREVGQVVMVF9SRVFVRVNUX0lOQ0xVREVTIiwiREVGQVVMVF9VU0VSX0lOQ0xVREVTIiwiYWRkUmVxdWVzdERhdGFUb1RyYW5zYWN0aW9uIiwicmVxIiwiZGVwcyIsIm1ldGFkYXRhIiwic291cmNlIiwic2V0TmFtZSIsImV4dHJhY3RQYXRoRm9yVHJhbnNhY3Rpb24iLCJwYXRoIiwibWV0aG9kIiwic2V0RGF0YSIsIm9yaWdpbmFsVXJsIiwidXJsIiwiYmFzZVVybCIsImV4dHJhY3RRdWVyeVBhcmFtcyIsIm9wdGlvbnMiLCJ0b1VwcGVyQ2FzZSIsImN1c3RvbVJvdXRlIiwicm91dGUiLCJuYW1lIiwiZXh0cmFjdFRyYW5zYWN0aW9uIiwidHlwZSIsInN0YWNrIiwiX3JlY29uc3RydWN0ZWRSb3V0ZSIsInVuZGVmaW5lZCIsImV4dHJhY3RVc2VyRGF0YSIsImtleXMiLCJleHRyYWN0ZWRVc2VyIiwiYXR0cmlidXRlcyIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJrZXkiLCJleHRyYWN0UmVxdWVzdERhdGEiLCJpbmNsdWRlIiwicmVxdWVzdERhdGEiLCJoZWFkZXJzIiwiaG9zdCIsImhvc3RuYW1lIiwicHJvdG9jb2wiLCJzb2NrZXQiLCJlbmNyeXB0ZWQiLCJhYnNvbHV0ZVVybCIsInN0YXJ0c1dpdGgiLCJpbmNsdWRlcyIsImNvb2tpZSIsImNvb2tpZXMiLCJxdWVyeV9zdHJpbmciLCJib2R5IiwiZGF0YSIsIkpTT04iLCJzdHJpbmdpZnkiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhZGRSZXF1ZXN0RGF0YVRvRXZlbnQiLCJldmVudCIsImV4dHJhY3RlZFJlcXVlc3REYXRhIiwiT2JqZWN0IiwibGVuZ3RoIiwicmVtb3RlQWRkcmVzcyIsImlwX2FkZHJlc3MiLCJxdWVyeSIsIlVSTCIsInNlYXJjaCIsInNsaWNlIiwicGFyc2UiLCJlMiIsIndpbnRlckNHSGVhZGVyc1RvRGljdCIsIndpbnRlckNHSGVhZGVycyIsInZhbHVlIiwiZSIsIndhcm4iLCJ3aW50ZXJDR1JlcXVlc3RUb1JlcXVlc3REYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/requestdata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/stacktrace.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/stacktrace.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createStackParser: () => (/* binding */ createStackParser),\n/* harmony export */   filenameIsInApp: () => (/* reexport safe */ _node_stack_trace_js__WEBPACK_IMPORTED_MODULE_0__.filenameIsInApp),\n/* harmony export */   getFunctionName: () => (/* binding */ getFunctionName),\n/* harmony export */   nodeStackLineParser: () => (/* binding */ nodeStackLineParser),\n/* harmony export */   stackParserFromStackParserOptions: () => (/* binding */ stackParserFromStackParserOptions),\n/* harmony export */   stripSentryFramesAndReverse: () => (/* binding */ stripSentryFramesAndReverse)\n/* harmony export */ });\n/* harmony import */ var _node_stack_trace_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node-stack-trace.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/node-stack-trace.js\");\n\n\nconst STACKTRACE_FRAME_LIMIT = 50;\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\nconst STRIP_FRAME_REGEXP = /captureMessage|captureException/;\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */ function createStackParser(...parsers) {\n    const sortedParsers = parsers.sort((a, b)=>a[0] - b[0]).map((p)=>p[1]);\n    return (stack, skipFirst = 0)=>{\n        const frames = [];\n        const lines = stack.split(\"\\n\");\n        for(let i = skipFirst; i < lines.length; i++){\n            const line = lines[i];\n            // Ignore lines over 1kb as they are unlikely to be stack frames.\n            // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n            // input size. Huge strings can result in hangs/Denial of Service:\n            // https://github.com/getsentry/sentry-javascript/issues/2286\n            if (line.length > 1024) {\n                continue;\n            }\n            // https://github.com/getsentry/sentry-javascript/issues/5459\n            // Remove webpack (error: *) wrappers\n            const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, \"$1\") : line;\n            // https://github.com/getsentry/sentry-javascript/issues/7813\n            // Skip Error: lines\n            if (cleanedLine.match(/\\S*Error: /)) {\n                continue;\n            }\n            for (const parser of sortedParsers){\n                const frame = parser(cleanedLine);\n                if (frame) {\n                    frames.push(frame);\n                    break;\n                }\n            }\n            if (frames.length >= STACKTRACE_FRAME_LIMIT) {\n                break;\n            }\n        }\n        return stripSentryFramesAndReverse(frames);\n    };\n}\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */ function stackParserFromStackParserOptions(stackParser) {\n    if (Array.isArray(stackParser)) {\n        return createStackParser(...stackParser);\n    }\n    return stackParser;\n}\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */ function stripSentryFramesAndReverse(stack) {\n    if (!stack.length) {\n        return [];\n    }\n    const localStack = Array.from(stack);\n    // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n    if (/sentryWrapped/.test(localStack[localStack.length - 1].function || \"\")) {\n        localStack.pop();\n    }\n    // Reversing in the middle of the procedure allows us to just pop the values off the stack\n    localStack.reverse();\n    // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n    if (STRIP_FRAME_REGEXP.test(localStack[localStack.length - 1].function || \"\")) {\n        localStack.pop();\n        // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Sentry syntheticException')`\n        // is produced within the hub itself, making it:\n        //\n        //   Sentry.captureException()\n        //   getCurrentHub().captureException()\n        //\n        // instead of just the top `Sentry` call itself.\n        // This forces us to possibly strip an additional frame in the exact same was as above.\n        if (STRIP_FRAME_REGEXP.test(localStack[localStack.length - 1].function || \"\")) {\n            localStack.pop();\n        }\n    }\n    return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map((frame)=>({\n            ...frame,\n            filename: frame.filename || localStack[localStack.length - 1].filename,\n            function: frame.function || \"?\"\n        }));\n}\nconst defaultFunctionName = \"<anonymous>\";\n/**\n * Safely extract function name from itself\n */ function getFunctionName(fn) {\n    try {\n        if (!fn || typeof fn !== \"function\") {\n            return defaultFunctionName;\n        }\n        return fn.name || defaultFunctionName;\n    } catch (e) {\n        // Just accessing custom props in some Selenium environments\n        // can cause a \"Permission denied\" exception (see raven-js#495).\n        return defaultFunctionName;\n    }\n}\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/utils so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */ function nodeStackLineParser(getModule) {\n    return [\n        90,\n        (0,_node_stack_trace_js__WEBPACK_IMPORTED_MODULE_0__.node)(getModule)\n    ];\n}\n //# sourceMappingURL=stacktrace.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/stacktrace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/string.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/string.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isMatchingPattern: () => (/* binding */ isMatchingPattern),\n/* harmony export */   safeJoin: () => (/* binding */ safeJoin),\n/* harmony export */   snipLine: () => (/* binding */ snipLine),\n/* harmony export */   stringMatchesSomePattern: () => (/* binding */ stringMatchesSomePattern),\n/* harmony export */   truncate: () => (/* binding */ truncate)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/is.js\");\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */ function truncate(str, max = 0) {\n    if (typeof str !== \"string\" || max === 0) {\n        return str;\n    }\n    return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */ function snipLine(line, colno) {\n    let newLine = line;\n    const lineLength = newLine.length;\n    if (lineLength <= 150) {\n        return newLine;\n    }\n    if (colno > lineLength) {\n        // eslint-disable-next-line no-param-reassign\n        colno = lineLength;\n    }\n    let start = Math.max(colno - 60, 0);\n    if (start < 5) {\n        start = 0;\n    }\n    let end = Math.min(start + 140, lineLength);\n    if (end > lineLength - 5) {\n        end = lineLength;\n    }\n    if (end === lineLength) {\n        start = Math.max(end - 140, 0);\n    }\n    newLine = newLine.slice(start, end);\n    if (start > 0) {\n        newLine = `'{snip} ${newLine}`;\n    }\n    if (end < lineLength) {\n        newLine += \" {snip}\";\n    }\n    return newLine;\n}\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction safeJoin(input, delimiter) {\n    if (!Array.isArray(input)) {\n        return \"\";\n    }\n    const output = [];\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for(let i = 0; i < input.length; i++){\n        const value = input[i];\n        try {\n            // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n            // console warnings. This happens when a Vue template is rendered with\n            // an undeclared variable, which we try to stringify, ultimately causing\n            // Vue to issue another warning which repeats indefinitely.\n            // see: https://github.com/getsentry/sentry-javascript/pull/8981\n            if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isVueViewModel)(value)) {\n                output.push(\"[VueViewModel]\");\n            } else {\n                output.push(String(value));\n            }\n        } catch (e) {\n            output.push(\"[value cannot be serialized]\");\n        }\n    }\n    return output.join(delimiter);\n}\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */ function isMatchingPattern(value, pattern, requireExactStringMatch = false) {\n    if (!(0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isString)(value)) {\n        return false;\n    }\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isRegExp)(pattern)) {\n        return pattern.test(value);\n    }\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isString)(pattern)) {\n        return requireExactStringMatch ? value === pattern : value.includes(pattern);\n    }\n    return false;\n}\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */ function stringMatchesSomePattern(testString, patterns = [], requireExactStringMatch = false) {\n    return patterns.some((pattern)=>isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\n //# sourceMappingURL=string.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/string.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/tracing.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/tracing.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRACEPARENT_REGEXP: () => (/* binding */ TRACEPARENT_REGEXP),\n/* harmony export */   extractTraceparentData: () => (/* binding */ extractTraceparentData),\n/* harmony export */   generateSentryTraceHeader: () => (/* binding */ generateSentryTraceHeader),\n/* harmony export */   tracingContextFromHeaders: () => (/* binding */ tracingContextFromHeaders)\n/* harmony export */ });\n/* harmony import */ var _baggage_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baggage.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/baggage.js\");\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./misc.js */ \"(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/misc.js\");\n\n\nconst TRACEPARENT_REGEXP = new RegExp(\"^[ \\\\t]*\" + // whitespace\n\"([0-9a-f]{32})?\" + // trace_id\n\"-?([0-9a-f]{16})?\" + // span_id\n\"-?([01])?\" + // sampled\n\"[ \\\\t]*$\");\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */ function extractTraceparentData(traceparent) {\n    if (!traceparent) {\n        return undefined;\n    }\n    const matches = traceparent.match(TRACEPARENT_REGEXP);\n    if (!matches) {\n        return undefined;\n    }\n    let parentSampled;\n    if (matches[3] === \"1\") {\n        parentSampled = true;\n    } else if (matches[3] === \"0\") {\n        parentSampled = false;\n    }\n    return {\n        traceId: matches[1],\n        parentSampled,\n        parentSpanId: matches[2]\n    };\n}\n/**\n * Create tracing context from incoming headers.\n */ function tracingContextFromHeaders(sentryTrace, baggage) {\n    const traceparentData = extractTraceparentData(sentryTrace);\n    const dynamicSamplingContext = (0,_baggage_js__WEBPACK_IMPORTED_MODULE_0__.baggageHeaderToDynamicSamplingContext)(baggage);\n    const { traceId, parentSpanId, parentSampled } = traceparentData || {};\n    const propagationContext = {\n        traceId: traceId || (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)(),\n        spanId: (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)().substring(16),\n        sampled: parentSampled\n    };\n    if (parentSpanId) {\n        propagationContext.parentSpanId = parentSpanId;\n    }\n    if (dynamicSamplingContext) {\n        propagationContext.dsc = dynamicSamplingContext;\n    }\n    return {\n        traceparentData,\n        dynamicSamplingContext,\n        propagationContext\n    };\n}\n/**\n * Create sentry-trace header from span context values.\n */ function generateSentryTraceHeader(traceId = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)(), spanId = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)().substring(16), sampled) {\n    let sampledString = \"\";\n    if (sampled !== undefined) {\n        sampledString = sampled ? \"-1\" : \"-0\";\n    }\n    return `${traceId}-${spanId}${sampledString}`;\n}\n //# sourceMappingURL=tracing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3RyYWNpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXFFO0FBQ25DO0FBRWxDLE1BQU1FLHFCQUFxQixJQUFJQyxPQUM3QixhQUFhLGFBQWE7QUFDeEIsb0JBQW9CLFdBQVc7QUFDL0Isc0JBQXNCLFVBQVU7QUFDaEMsY0FBYyxVQUFVO0FBQ3hCO0FBR0o7Ozs7OztDQU1DLEdBQ0QsU0FBU0MsdUJBQXVCQyxXQUFXO0lBQ3pDLElBQUksQ0FBQ0EsYUFBYTtRQUNoQixPQUFPQztJQUNUO0lBRUEsTUFBTUMsVUFBVUYsWUFBWUcsS0FBSyxDQUFDTjtJQUNsQyxJQUFJLENBQUNLLFNBQVM7UUFDWixPQUFPRDtJQUNUO0lBRUEsSUFBSUc7SUFDSixJQUFJRixPQUFPLENBQUMsRUFBRSxLQUFLLEtBQUs7UUFDdEJFLGdCQUFnQjtJQUNsQixPQUFPLElBQUlGLE9BQU8sQ0FBQyxFQUFFLEtBQUssS0FBSztRQUM3QkUsZ0JBQWdCO0lBQ2xCO0lBRUEsT0FBTztRQUNMQyxTQUFTSCxPQUFPLENBQUMsRUFBRTtRQUNuQkU7UUFDQUUsY0FBY0osT0FBTyxDQUFDLEVBQUU7SUFDMUI7QUFDRjtBQUVBOztDQUVDLEdBQ0QsU0FBU0ssMEJBQ1BDLFdBQVcsRUFDWEMsT0FBTztJQUlQLE1BQU1DLGtCQUFrQlgsdUJBQXVCUztJQUMvQyxNQUFNRyx5QkFBeUJoQixrRkFBcUNBLENBQUNjO0lBRXJFLE1BQU0sRUFBRUosT0FBTyxFQUFFQyxZQUFZLEVBQUVGLGFBQWEsRUFBRSxHQUFHTSxtQkFBbUIsQ0FBQztJQUVyRSxNQUFNRSxxQkFBcUI7UUFDekJQLFNBQVNBLFdBQVdULCtDQUFLQTtRQUN6QmlCLFFBQVFqQiwrQ0FBS0EsR0FBR2tCLFNBQVMsQ0FBQztRQUMxQkMsU0FBU1g7SUFDWDtJQUVBLElBQUlFLGNBQWM7UUFDaEJNLG1CQUFtQk4sWUFBWSxHQUFHQTtJQUNwQztJQUVBLElBQUlLLHdCQUF3QjtRQUMxQkMsbUJBQW1CSSxHQUFHLEdBQUdMO0lBQzNCO0lBRUEsT0FBTztRQUNMRDtRQUNBQztRQUNBQztJQUNGO0FBQ0Y7QUFFQTs7Q0FFQyxHQUNELFNBQVNLLDBCQUNQWixVQUFVVCwrQ0FBS0EsRUFBRSxFQUNqQmlCLFNBQVNqQiwrQ0FBS0EsR0FBR2tCLFNBQVMsQ0FBQyxHQUFHLEVBQzlCQyxPQUFPO0lBRVAsSUFBSUcsZ0JBQWdCO0lBQ3BCLElBQUlILFlBQVlkLFdBQVc7UUFDekJpQixnQkFBZ0JILFVBQVUsT0FBTztJQUNuQztJQUNBLE9BQU8sQ0FBQyxFQUFFVixRQUFRLENBQUMsRUFBRVEsT0FBTyxFQUFFSyxjQUFjLENBQUM7QUFDL0M7QUFFNEcsQ0FDNUcsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS90cmFjaW5nLmpzPzE2ZTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYmFnZ2FnZUhlYWRlclRvRHluYW1pY1NhbXBsaW5nQ29udGV4dCB9IGZyb20gJy4vYmFnZ2FnZS5qcyc7XG5pbXBvcnQgeyB1dWlkNCB9IGZyb20gJy4vbWlzYy5qcyc7XG5cbmNvbnN0IFRSQUNFUEFSRU5UX1JFR0VYUCA9IG5ldyBSZWdFeHAoXG4gICdeWyBcXFxcdF0qJyArIC8vIHdoaXRlc3BhY2VcbiAgICAnKFswLTlhLWZdezMyfSk/JyArIC8vIHRyYWNlX2lkXG4gICAgJy0/KFswLTlhLWZdezE2fSk/JyArIC8vIHNwYW5faWRcbiAgICAnLT8oWzAxXSk/JyArIC8vIHNhbXBsZWRcbiAgICAnWyBcXFxcdF0qJCcsIC8vIHdoaXRlc3BhY2Vcbik7XG5cbi8qKlxuICogRXh0cmFjdCB0cmFuc2FjdGlvbiBjb250ZXh0IGRhdGEgZnJvbSBhIGBzZW50cnktdHJhY2VgIGhlYWRlci5cbiAqXG4gKiBAcGFyYW0gdHJhY2VwYXJlbnQgVHJhY2VwYXJlbnQgc3RyaW5nXG4gKlxuICogQHJldHVybnMgT2JqZWN0IGNvbnRhaW5pbmcgZGF0YSBmcm9tIHRoZSBoZWFkZXIsIG9yIHVuZGVmaW5lZCBpZiB0cmFjZXBhcmVudCBzdHJpbmcgaXMgbWFsZm9ybWVkXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RUcmFjZXBhcmVudERhdGEodHJhY2VwYXJlbnQpIHtcbiAgaWYgKCF0cmFjZXBhcmVudCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBjb25zdCBtYXRjaGVzID0gdHJhY2VwYXJlbnQubWF0Y2goVFJBQ0VQQVJFTlRfUkVHRVhQKTtcbiAgaWYgKCFtYXRjaGVzKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGxldCBwYXJlbnRTYW1wbGVkO1xuICBpZiAobWF0Y2hlc1szXSA9PT0gJzEnKSB7XG4gICAgcGFyZW50U2FtcGxlZCA9IHRydWU7XG4gIH0gZWxzZSBpZiAobWF0Y2hlc1szXSA9PT0gJzAnKSB7XG4gICAgcGFyZW50U2FtcGxlZCA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0cmFjZUlkOiBtYXRjaGVzWzFdLFxuICAgIHBhcmVudFNhbXBsZWQsXG4gICAgcGFyZW50U3BhbklkOiBtYXRjaGVzWzJdLFxuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZSB0cmFjaW5nIGNvbnRleHQgZnJvbSBpbmNvbWluZyBoZWFkZXJzLlxuICovXG5mdW5jdGlvbiB0cmFjaW5nQ29udGV4dEZyb21IZWFkZXJzKFxuICBzZW50cnlUcmFjZSxcbiAgYmFnZ2FnZSxcbilcblxuIHtcbiAgY29uc3QgdHJhY2VwYXJlbnREYXRhID0gZXh0cmFjdFRyYWNlcGFyZW50RGF0YShzZW50cnlUcmFjZSk7XG4gIGNvbnN0IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgPSBiYWdnYWdlSGVhZGVyVG9EeW5hbWljU2FtcGxpbmdDb250ZXh0KGJhZ2dhZ2UpO1xuXG4gIGNvbnN0IHsgdHJhY2VJZCwgcGFyZW50U3BhbklkLCBwYXJlbnRTYW1wbGVkIH0gPSB0cmFjZXBhcmVudERhdGEgfHwge307XG5cbiAgY29uc3QgcHJvcGFnYXRpb25Db250ZXh0ID0ge1xuICAgIHRyYWNlSWQ6IHRyYWNlSWQgfHwgdXVpZDQoKSxcbiAgICBzcGFuSWQ6IHV1aWQ0KCkuc3Vic3RyaW5nKDE2KSxcbiAgICBzYW1wbGVkOiBwYXJlbnRTYW1wbGVkLFxuICB9O1xuXG4gIGlmIChwYXJlbnRTcGFuSWQpIHtcbiAgICBwcm9wYWdhdGlvbkNvbnRleHQucGFyZW50U3BhbklkID0gcGFyZW50U3BhbklkO1xuICB9XG5cbiAgaWYgKGR5bmFtaWNTYW1wbGluZ0NvbnRleHQpIHtcbiAgICBwcm9wYWdhdGlvbkNvbnRleHQuZHNjID0gZHluYW1pY1NhbXBsaW5nQ29udGV4dCA7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRyYWNlcGFyZW50RGF0YSxcbiAgICBkeW5hbWljU2FtcGxpbmdDb250ZXh0LFxuICAgIHByb3BhZ2F0aW9uQ29udGV4dCxcbiAgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgc2VudHJ5LXRyYWNlIGhlYWRlciBmcm9tIHNwYW4gY29udGV4dCB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlU2VudHJ5VHJhY2VIZWFkZXIoXG4gIHRyYWNlSWQgPSB1dWlkNCgpLFxuICBzcGFuSWQgPSB1dWlkNCgpLnN1YnN0cmluZygxNiksXG4gIHNhbXBsZWQsXG4pIHtcbiAgbGV0IHNhbXBsZWRTdHJpbmcgPSAnJztcbiAgaWYgKHNhbXBsZWQgIT09IHVuZGVmaW5lZCkge1xuICAgIHNhbXBsZWRTdHJpbmcgPSBzYW1wbGVkID8gJy0xJyA6ICctMCc7XG4gIH1cbiAgcmV0dXJuIGAke3RyYWNlSWR9LSR7c3BhbklkfSR7c2FtcGxlZFN0cmluZ31gO1xufVxuXG5leHBvcnQgeyBUUkFDRVBBUkVOVF9SRUdFWFAsIGV4dHJhY3RUcmFjZXBhcmVudERhdGEsIGdlbmVyYXRlU2VudHJ5VHJhY2VIZWFkZXIsIHRyYWNpbmdDb250ZXh0RnJvbUhlYWRlcnMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYWNpbmcuanMubWFwXG4iXSwibmFtZXMiOlsiYmFnZ2FnZUhlYWRlclRvRHluYW1pY1NhbXBsaW5nQ29udGV4dCIsInV1aWQ0IiwiVFJBQ0VQQVJFTlRfUkVHRVhQIiwiUmVnRXhwIiwiZXh0cmFjdFRyYWNlcGFyZW50RGF0YSIsInRyYWNlcGFyZW50IiwidW5kZWZpbmVkIiwibWF0Y2hlcyIsIm1hdGNoIiwicGFyZW50U2FtcGxlZCIsInRyYWNlSWQiLCJwYXJlbnRTcGFuSWQiLCJ0cmFjaW5nQ29udGV4dEZyb21IZWFkZXJzIiwic2VudHJ5VHJhY2UiLCJiYWdnYWdlIiwidHJhY2VwYXJlbnREYXRhIiwiZHluYW1pY1NhbXBsaW5nQ29udGV4dCIsInByb3BhZ2F0aW9uQ29udGV4dCIsInNwYW5JZCIsInN1YnN0cmluZyIsInNhbXBsZWQiLCJkc2MiLCJnZW5lcmF0ZVNlbnRyeVRyYWNlSGVhZGVyIiwic2FtcGxlZFN0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/tracing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/url.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/url.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getNumberOfUrlSegments: () => (/* binding */ getNumberOfUrlSegments),\n/* harmony export */   getSanitizedUrlString: () => (/* binding */ getSanitizedUrlString),\n/* harmony export */   parseUrl: () => (/* binding */ parseUrl),\n/* harmony export */   stripUrlQueryAndFragment: () => (/* binding */ stripUrlQueryAndFragment)\n/* harmony export */ });\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */ function parseUrl(url) {\n    if (!url) {\n        return {};\n    }\n    const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n    if (!match) {\n        return {};\n    }\n    // coerce to undefined values to empty string so we don't get 'undefined'\n    const query = match[6] || \"\";\n    const fragment = match[8] || \"\";\n    return {\n        host: match[4],\n        path: match[5],\n        protocol: match[2],\n        search: query,\n        hash: fragment,\n        relative: match[5] + query + fragment\n    };\n}\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */ function stripUrlQueryAndFragment(urlPath) {\n    // eslint-disable-next-line no-useless-escape\n    return urlPath.split(/[\\?#]/, 1)[0];\n}\n/**\n * Returns number of URL segments of a passed string URL.\n */ function getNumberOfUrlSegments(url) {\n    // split at '/' or at '\\/' to split regex urls correctly\n    return url.split(/\\\\?\\//).filter((s)=>s.length > 0 && s !== \",\").length;\n}\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span description\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */ function getSanitizedUrlString(url) {\n    const { protocol, host, path } = url;\n    const filteredHost = host && host// Always filter out authority\n    .replace(/^.*@/, \"[filtered]:[filtered]@\")// Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n    // TODO: Use new URL global if it exists\n    .replace(/(:80)$/, \"\").replace(/(:443)$/, \"\") || \"\";\n    return `${protocol ? `${protocol}://` : \"\"}${filteredHost}${path}`;\n}\n //# sourceMappingURL=url.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3VybC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7OztDQU1DLEdBQ0QsU0FBU0EsU0FBU0MsR0FBRztJQUNuQixJQUFJLENBQUNBLEtBQUs7UUFDUixPQUFPLENBQUM7SUFDVjtJQUVBLE1BQU1DLFFBQVFELElBQUlDLEtBQUssQ0FBQztJQUV4QixJQUFJLENBQUNBLE9BQU87UUFDVixPQUFPLENBQUM7SUFDVjtJQUVBLHlFQUF5RTtJQUN6RSxNQUFNQyxRQUFRRCxLQUFLLENBQUMsRUFBRSxJQUFJO0lBQzFCLE1BQU1FLFdBQVdGLEtBQUssQ0FBQyxFQUFFLElBQUk7SUFDN0IsT0FBTztRQUNMRyxNQUFNSCxLQUFLLENBQUMsRUFBRTtRQUNkSSxNQUFNSixLQUFLLENBQUMsRUFBRTtRQUNkSyxVQUFVTCxLQUFLLENBQUMsRUFBRTtRQUNsQk0sUUFBUUw7UUFDUk0sTUFBTUw7UUFDTk0sVUFBVVIsS0FBSyxDQUFDLEVBQUUsR0FBR0MsUUFBUUM7SUFDL0I7QUFDRjtBQUVBOzs7OztDQUtDLEdBQ0QsU0FBU08seUJBQXlCQyxPQUFPO0lBQ3ZDLDZDQUE2QztJQUM3QyxPQUFPQSxRQUFRQyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRTtBQUNyQztBQUVBOztDQUVDLEdBQ0QsU0FBU0MsdUJBQXVCYixHQUFHO0lBQ2pDLHdEQUF3RDtJQUN4RCxPQUFPQSxJQUFJWSxLQUFLLENBQUMsU0FBU0UsTUFBTSxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFQyxNQUFNLEdBQUcsS0FBS0QsTUFBTSxLQUFLQyxNQUFNO0FBQ3pFO0FBRUE7OztDQUdDLEdBQ0QsU0FBU0Msc0JBQXNCakIsR0FBRztJQUNoQyxNQUFNLEVBQUVNLFFBQVEsRUFBRUYsSUFBSSxFQUFFQyxJQUFJLEVBQUUsR0FBR0w7SUFFakMsTUFBTWtCLGVBQ0osUUFDRWQsSUFDRSw4QkFBOEI7S0FDN0JlLE9BQU8sQ0FBQyxRQUFRLHlCQUNqQiw0RUFBNEU7SUFDNUUsd0NBQXdDO0tBQ3ZDQSxPQUFPLENBQUMsVUFBVSxJQUNsQkEsT0FBTyxDQUFDLFdBQVcsT0FDeEI7SUFFRixPQUFPLENBQUMsRUFBRWIsV0FBVyxDQUFDLEVBQUVBLFNBQVMsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUFFWSxhQUFhLEVBQUViLEtBQUssQ0FBQztBQUNwRTtBQUU2RixDQUM3RiwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3VybC5qcz8wM2Q3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUGFyc2VzIHN0cmluZyBmb3JtIG9mIFVSTCBpbnRvIGFuIG9iamVjdFxuICogLy8gYm9ycm93ZWQgZnJvbSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNhcHBlbmRpeC1CXG4gKiAvLyBpbnRlbnRpb25hbGx5IHVzaW5nIHJlZ2V4IGFuZCBub3QgPGEvPiBocmVmIHBhcnNpbmcgdHJpY2sgYmVjYXVzZSBSZWFjdCBOYXRpdmUgYW5kIG90aGVyXG4gKiAvLyBlbnZpcm9ubWVudHMgd2hlcmUgRE9NIG1pZ2h0IG5vdCBiZSBhdmFpbGFibGVcbiAqIEByZXR1cm5zIHBhcnNlZCBVUkwgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIHBhcnNlVXJsKHVybCkge1xuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGNvbnN0IG1hdGNoID0gdXJsLm1hdGNoKC9eKChbXjovPyNdKyk6KT8oXFwvXFwvKFteLz8jXSopKT8oW14/I10qKShcXD8oW14jXSopKT8oIyguKikpPyQvKTtcblxuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgLy8gY29lcmNlIHRvIHVuZGVmaW5lZCB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5nIHNvIHdlIGRvbid0IGdldCAndW5kZWZpbmVkJ1xuICBjb25zdCBxdWVyeSA9IG1hdGNoWzZdIHx8ICcnO1xuICBjb25zdCBmcmFnbWVudCA9IG1hdGNoWzhdIHx8ICcnO1xuICByZXR1cm4ge1xuICAgIGhvc3Q6IG1hdGNoWzRdLFxuICAgIHBhdGg6IG1hdGNoWzVdLFxuICAgIHByb3RvY29sOiBtYXRjaFsyXSxcbiAgICBzZWFyY2g6IHF1ZXJ5LFxuICAgIGhhc2g6IGZyYWdtZW50LFxuICAgIHJlbGF0aXZlOiBtYXRjaFs1XSArIHF1ZXJ5ICsgZnJhZ21lbnQsIC8vIGV2ZXJ5dGhpbmcgbWludXMgb3JpZ2luXG4gIH07XG59XG5cbi8qKlxuICogU3RyaXAgdGhlIHF1ZXJ5IHN0cmluZyBhbmQgZnJhZ21lbnQgb2ZmIG9mIGEgZ2l2ZW4gVVJMIG9yIHBhdGggKGlmIHByZXNlbnQpXG4gKlxuICogQHBhcmFtIHVybFBhdGggRnVsbCBVUkwgb3IgcGF0aCwgaW5jbHVkaW5nIHBvc3NpYmxlIHF1ZXJ5IHN0cmluZyBhbmQvb3IgZnJhZ21lbnRcbiAqIEByZXR1cm5zIFVSTCBvciBwYXRoIHdpdGhvdXQgcXVlcnkgc3RyaW5nIG9yIGZyYWdtZW50XG4gKi9cbmZ1bmN0aW9uIHN0cmlwVXJsUXVlcnlBbmRGcmFnbWVudCh1cmxQYXRoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuICByZXR1cm4gdXJsUGF0aC5zcGxpdCgvW1xcPyNdLywgMSlbMF07XG59XG5cbi8qKlxuICogUmV0dXJucyBudW1iZXIgb2YgVVJMIHNlZ21lbnRzIG9mIGEgcGFzc2VkIHN0cmluZyBVUkwuXG4gKi9cbmZ1bmN0aW9uIGdldE51bWJlck9mVXJsU2VnbWVudHModXJsKSB7XG4gIC8vIHNwbGl0IGF0ICcvJyBvciBhdCAnXFwvJyB0byBzcGxpdCByZWdleCB1cmxzIGNvcnJlY3RseVxuICByZXR1cm4gdXJsLnNwbGl0KC9cXFxcP1xcLy8pLmZpbHRlcihzID0+IHMubGVuZ3RoID4gMCAmJiBzICE9PSAnLCcpLmxlbmd0aDtcbn1cblxuLyoqXG4gKiBUYWtlcyBhIFVSTCBvYmplY3QgYW5kIHJldHVybnMgYSBzYW5pdGl6ZWQgc3RyaW5nIHdoaWNoIGlzIHNhZmUgdG8gdXNlIGFzIHNwYW4gZGVzY3JpcHRpb25cbiAqIHNlZTogaHR0cHM6Ly9kZXZlbG9wLnNlbnRyeS5kZXYvc2RrL2RhdGEtaGFuZGxpbmcvI3N0cnVjdHVyaW5nLWRhdGFcbiAqL1xuZnVuY3Rpb24gZ2V0U2FuaXRpemVkVXJsU3RyaW5nKHVybCkge1xuICBjb25zdCB7IHByb3RvY29sLCBob3N0LCBwYXRoIH0gPSB1cmw7XG5cbiAgY29uc3QgZmlsdGVyZWRIb3N0ID1cbiAgICAoaG9zdCAmJlxuICAgICAgaG9zdFxuICAgICAgICAvLyBBbHdheXMgZmlsdGVyIG91dCBhdXRob3JpdHlcbiAgICAgICAgLnJlcGxhY2UoL14uKkAvLCAnW2ZpbHRlcmVkXTpbZmlsdGVyZWRdQCcpXG4gICAgICAgIC8vIERvbid0IHNob3cgc3RhbmRhcmQgOjgwIChodHRwKSBhbmQgOjQ0MyAoaHR0cHMpIHBvcnRzIHRvIHJlZHVjZSB0aGUgbm9pc2VcbiAgICAgICAgLy8gVE9ETzogVXNlIG5ldyBVUkwgZ2xvYmFsIGlmIGl0IGV4aXN0c1xuICAgICAgICAucmVwbGFjZSgvKDo4MCkkLywgJycpXG4gICAgICAgIC5yZXBsYWNlKC8oOjQ0MykkLywgJycpKSB8fFxuICAgICcnO1xuXG4gIHJldHVybiBgJHtwcm90b2NvbCA/IGAke3Byb3RvY29sfTovL2AgOiAnJ30ke2ZpbHRlcmVkSG9zdH0ke3BhdGh9YDtcbn1cblxuZXhwb3J0IHsgZ2V0TnVtYmVyT2ZVcmxTZWdtZW50cywgZ2V0U2FuaXRpemVkVXJsU3RyaW5nLCBwYXJzZVVybCwgc3RyaXBVcmxRdWVyeUFuZEZyYWdtZW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cmwuanMubWFwXG4iXSwibmFtZXMiOlsicGFyc2VVcmwiLCJ1cmwiLCJtYXRjaCIsInF1ZXJ5IiwiZnJhZ21lbnQiLCJob3N0IiwicGF0aCIsInByb3RvY29sIiwic2VhcmNoIiwiaGFzaCIsInJlbGF0aXZlIiwic3RyaXBVcmxRdWVyeUFuZEZyYWdtZW50IiwidXJsUGF0aCIsInNwbGl0IiwiZ2V0TnVtYmVyT2ZVcmxTZWdtZW50cyIsImZpbHRlciIsInMiLCJsZW5ndGgiLCJnZXRTYW5pdGl6ZWRVcmxTdHJpbmciLCJmaWx0ZXJlZEhvc3QiLCJyZXBsYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/url.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/userIntegrations.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/userIntegrations.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addOrUpdateIntegration: () => (/* binding */ addOrUpdateIntegration)\n/* harmony export */ });\n/**\n * Recursively traverses an object to update an existing nested key.\n * Note: The provided key path must include existing properties,\n * the function will not create objects while traversing.\n *\n * @param obj An object to update\n * @param value The value to update the nested key with\n * @param keyPath The path to the key to update ex. fizz.buzz.foo\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setNestedKey(obj, keyPath, value) {\n    // Ex. foo.bar.zoop will extract foo and bar.zoop\n    const match = keyPath.match(/([a-z_]+)\\.(.*)/i);\n    // The match will be null when there's no more recursing to do, i.e., when we've reached the right level of the object\n    if (match === null) {\n        obj[keyPath] = value;\n    } else {\n        // `match[1]` is the initial segment of the path, and `match[2]` is the remainder of the path\n        const innerObj = obj[match[1]];\n        setNestedKey(innerObj, match[2], value);\n    }\n}\n/**\n * Enforces inclusion of a given integration with specified options in an integration array originally determined by the\n * user, by either including the given default instance or by patching an existing user instance with the given options.\n *\n * Ideally this would happen when integrations are set up, but there isn't currently a mechanism there for merging\n * options from a default integration instance with those from a user-provided instance of the same integration, only\n * for allowing the user to override a default instance entirely. (TODO: Fix that.)\n *\n * @param defaultIntegrationInstance An instance of the integration with the correct options already set\n * @param userIntegrations Integrations defined by the user.\n * @param forcedOptions Options with which to patch an existing user-derived instance on the integration.\n * @returns A final integrations array.\n */ function addOrUpdateIntegration(defaultIntegrationInstance, userIntegrations, forcedOptions = {}) {\n    return Array.isArray(userIntegrations) ? addOrUpdateIntegrationInArray(defaultIntegrationInstance, userIntegrations, forcedOptions) : addOrUpdateIntegrationInFunction(defaultIntegrationInstance, // Somehow TS can't figure out that not being an array makes this necessarily a function\n    userIntegrations, forcedOptions);\n}\nfunction addOrUpdateIntegrationInArray(defaultIntegrationInstance, userIntegrations, forcedOptions) {\n    const userInstance = userIntegrations.find((integration)=>integration.name === defaultIntegrationInstance.name);\n    if (userInstance) {\n        for (const [keyPath, value] of Object.entries(forcedOptions)){\n            setNestedKey(userInstance, keyPath, value);\n        }\n        return userIntegrations;\n    }\n    return [\n        ...userIntegrations,\n        defaultIntegrationInstance\n    ];\n}\nfunction addOrUpdateIntegrationInFunction(defaultIntegrationInstance, userIntegrationsFunc, forcedOptions) {\n    const wrapper = (defaultIntegrations)=>{\n        const userFinalIntegrations = userIntegrationsFunc(defaultIntegrations);\n        // There are instances where we want the user to be able to prevent an integration from appearing at all, which they\n        // would do by providing a function which filters out the integration in question. If that's happened in one of\n        // those cases, don't add our default back in.\n        if (defaultIntegrationInstance.allowExclusionByUser) {\n            const userFinalInstance = userFinalIntegrations.find((integration)=>integration.name === defaultIntegrationInstance.name);\n            if (!userFinalInstance) {\n                return userFinalIntegrations;\n            }\n        }\n        return addOrUpdateIntegrationInArray(defaultIntegrationInstance, userFinalIntegrations, forcedOptions);\n    };\n    return wrapper;\n}\n //# sourceMappingURL=userIntegrations.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3VzZXJJbnRlZ3JhdGlvbnMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7OztDQVFDLEdBQ0QsOERBQThEO0FBQzlELFNBQVNBLGFBQWFDLEdBQUcsRUFBRUMsT0FBTyxFQUFFQyxLQUFLO0lBQ3ZDLGlEQUFpRDtJQUNqRCxNQUFNQyxRQUFRRixRQUFRRSxLQUFLLENBQUM7SUFDNUIsc0hBQXNIO0lBQ3RILElBQUlBLFVBQVUsTUFBTTtRQUNsQkgsR0FBRyxDQUFDQyxRQUFRLEdBQUdDO0lBQ2pCLE9BQU87UUFDTCw2RkFBNkY7UUFDN0YsTUFBTUUsV0FBV0osR0FBRyxDQUFDRyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQzlCSixhQUFhSyxVQUFVRCxLQUFLLENBQUMsRUFBRSxFQUFFRDtJQUNuQztBQUNGO0FBRUE7Ozs7Ozs7Ozs7OztDQVlDLEdBQ0QsU0FBU0csdUJBQ1BDLDBCQUEwQixFQUMxQkMsZ0JBQWdCLEVBQ2hCQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBRWxCLE9BQ0VDLE1BQU1DLE9BQU8sQ0FBQ0gsb0JBQ1ZJLDhCQUE4QkwsNEJBQTRCQyxrQkFBa0JDLGlCQUM1RUksaUNBQ0VOLDRCQUNBLHdGQUF3RjtJQUN4RkMsa0JBQ0FDO0FBR1Y7QUFFQSxTQUFTRyw4QkFDUEwsMEJBQTBCLEVBQzFCQyxnQkFBZ0IsRUFDaEJDLGFBQWE7SUFFYixNQUFNSyxlQUFlTixpQkFBaUJPLElBQUksQ0FBQ0MsQ0FBQUEsY0FBZUEsWUFBWUMsSUFBSSxLQUFLViwyQkFBMkJVLElBQUk7SUFFOUcsSUFBSUgsY0FBYztRQUNoQixLQUFLLE1BQU0sQ0FBQ1osU0FBU0MsTUFBTSxJQUFJZSxPQUFPQyxPQUFPLENBQUNWLGVBQWdCO1lBQzVEVCxhQUFhYyxjQUFjWixTQUFTQztRQUN0QztRQUVBLE9BQU9LO0lBQ1Q7SUFFQSxPQUFPO1dBQUlBO1FBQWtCRDtLQUEyQjtBQUMxRDtBQUVBLFNBQVNNLGlDQUNQTiwwQkFBMEIsRUFDMUJhLG9CQUFvQixFQUNwQlgsYUFBYTtJQUViLE1BQU1ZLFVBQVVDLENBQUFBO1FBQ2QsTUFBTUMsd0JBQXdCSCxxQkFBcUJFO1FBRW5ELG9IQUFvSDtRQUNwSCwrR0FBK0c7UUFDL0csOENBQThDO1FBQzlDLElBQUlmLDJCQUEyQmlCLG9CQUFvQixFQUFFO1lBQ25ELE1BQU1DLG9CQUFvQkYsc0JBQXNCUixJQUFJLENBQ2xEQyxDQUFBQSxjQUFlQSxZQUFZQyxJQUFJLEtBQUtWLDJCQUEyQlUsSUFBSTtZQUVyRSxJQUFJLENBQUNRLG1CQUFtQjtnQkFDdEIsT0FBT0Y7WUFDVDtRQUNGO1FBRUEsT0FBT1gsOEJBQThCTCw0QkFBNEJnQix1QkFBdUJkO0lBQzFGO0lBRUEsT0FBT1k7QUFDVDtBQUVrQyxDQUNsQyw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3VzZXJJbnRlZ3JhdGlvbnMuanM/YTI3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlcyBhbiBvYmplY3QgdG8gdXBkYXRlIGFuIGV4aXN0aW5nIG5lc3RlZCBrZXkuXG4gKiBOb3RlOiBUaGUgcHJvdmlkZWQga2V5IHBhdGggbXVzdCBpbmNsdWRlIGV4aXN0aW5nIHByb3BlcnRpZXMsXG4gKiB0aGUgZnVuY3Rpb24gd2lsbCBub3QgY3JlYXRlIG9iamVjdHMgd2hpbGUgdHJhdmVyc2luZy5cbiAqXG4gKiBAcGFyYW0gb2JqIEFuIG9iamVjdCB0byB1cGRhdGVcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gdXBkYXRlIHRoZSBuZXN0ZWQga2V5IHdpdGhcbiAqIEBwYXJhbSBrZXlQYXRoIFRoZSBwYXRoIHRvIHRoZSBrZXkgdG8gdXBkYXRlIGV4LiBmaXp6LmJ1enouZm9vXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBzZXROZXN0ZWRLZXkob2JqLCBrZXlQYXRoLCB2YWx1ZSkge1xuICAvLyBFeC4gZm9vLmJhci56b29wIHdpbGwgZXh0cmFjdCBmb28gYW5kIGJhci56b29wXG4gIGNvbnN0IG1hdGNoID0ga2V5UGF0aC5tYXRjaCgvKFthLXpfXSspXFwuKC4qKS9pKTtcbiAgLy8gVGhlIG1hdGNoIHdpbGwgYmUgbnVsbCB3aGVuIHRoZXJlJ3Mgbm8gbW9yZSByZWN1cnNpbmcgdG8gZG8sIGkuZS4sIHdoZW4gd2UndmUgcmVhY2hlZCB0aGUgcmlnaHQgbGV2ZWwgb2YgdGhlIG9iamVjdFxuICBpZiAobWF0Y2ggPT09IG51bGwpIHtcbiAgICBvYmpba2V5UGF0aF0gPSB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBgbWF0Y2hbMV1gIGlzIHRoZSBpbml0aWFsIHNlZ21lbnQgb2YgdGhlIHBhdGgsIGFuZCBgbWF0Y2hbMl1gIGlzIHRoZSByZW1haW5kZXIgb2YgdGhlIHBhdGhcbiAgICBjb25zdCBpbm5lck9iaiA9IG9ialttYXRjaFsxXV07XG4gICAgc2V0TmVzdGVkS2V5KGlubmVyT2JqLCBtYXRjaFsyXSwgdmFsdWUpO1xuICB9XG59XG5cbi8qKlxuICogRW5mb3JjZXMgaW5jbHVzaW9uIG9mIGEgZ2l2ZW4gaW50ZWdyYXRpb24gd2l0aCBzcGVjaWZpZWQgb3B0aW9ucyBpbiBhbiBpbnRlZ3JhdGlvbiBhcnJheSBvcmlnaW5hbGx5IGRldGVybWluZWQgYnkgdGhlXG4gKiB1c2VyLCBieSBlaXRoZXIgaW5jbHVkaW5nIHRoZSBnaXZlbiBkZWZhdWx0IGluc3RhbmNlIG9yIGJ5IHBhdGNoaW5nIGFuIGV4aXN0aW5nIHVzZXIgaW5zdGFuY2Ugd2l0aCB0aGUgZ2l2ZW4gb3B0aW9ucy5cbiAqXG4gKiBJZGVhbGx5IHRoaXMgd291bGQgaGFwcGVuIHdoZW4gaW50ZWdyYXRpb25zIGFyZSBzZXQgdXAsIGJ1dCB0aGVyZSBpc24ndCBjdXJyZW50bHkgYSBtZWNoYW5pc20gdGhlcmUgZm9yIG1lcmdpbmdcbiAqIG9wdGlvbnMgZnJvbSBhIGRlZmF1bHQgaW50ZWdyYXRpb24gaW5zdGFuY2Ugd2l0aCB0aG9zZSBmcm9tIGEgdXNlci1wcm92aWRlZCBpbnN0YW5jZSBvZiB0aGUgc2FtZSBpbnRlZ3JhdGlvbiwgb25seVxuICogZm9yIGFsbG93aW5nIHRoZSB1c2VyIHRvIG92ZXJyaWRlIGEgZGVmYXVsdCBpbnN0YW5jZSBlbnRpcmVseS4gKFRPRE86IEZpeCB0aGF0LilcbiAqXG4gKiBAcGFyYW0gZGVmYXVsdEludGVncmF0aW9uSW5zdGFuY2UgQW4gaW5zdGFuY2Ugb2YgdGhlIGludGVncmF0aW9uIHdpdGggdGhlIGNvcnJlY3Qgb3B0aW9ucyBhbHJlYWR5IHNldFxuICogQHBhcmFtIHVzZXJJbnRlZ3JhdGlvbnMgSW50ZWdyYXRpb25zIGRlZmluZWQgYnkgdGhlIHVzZXIuXG4gKiBAcGFyYW0gZm9yY2VkT3B0aW9ucyBPcHRpb25zIHdpdGggd2hpY2ggdG8gcGF0Y2ggYW4gZXhpc3RpbmcgdXNlci1kZXJpdmVkIGluc3RhbmNlIG9uIHRoZSBpbnRlZ3JhdGlvbi5cbiAqIEByZXR1cm5zIEEgZmluYWwgaW50ZWdyYXRpb25zIGFycmF5LlxuICovXG5mdW5jdGlvbiBhZGRPclVwZGF0ZUludGVncmF0aW9uKFxuICBkZWZhdWx0SW50ZWdyYXRpb25JbnN0YW5jZSxcbiAgdXNlckludGVncmF0aW9ucyxcbiAgZm9yY2VkT3B0aW9ucyA9IHt9LFxuKSB7XG4gIHJldHVybiAoXG4gICAgQXJyYXkuaXNBcnJheSh1c2VySW50ZWdyYXRpb25zKVxuICAgICAgPyBhZGRPclVwZGF0ZUludGVncmF0aW9uSW5BcnJheShkZWZhdWx0SW50ZWdyYXRpb25JbnN0YW5jZSwgdXNlckludGVncmF0aW9ucywgZm9yY2VkT3B0aW9ucylcbiAgICAgIDogYWRkT3JVcGRhdGVJbnRlZ3JhdGlvbkluRnVuY3Rpb24oXG4gICAgICAgICAgZGVmYXVsdEludGVncmF0aW9uSW5zdGFuY2UsXG4gICAgICAgICAgLy8gU29tZWhvdyBUUyBjYW4ndCBmaWd1cmUgb3V0IHRoYXQgbm90IGJlaW5nIGFuIGFycmF5IG1ha2VzIHRoaXMgbmVjZXNzYXJpbHkgYSBmdW5jdGlvblxuICAgICAgICAgIHVzZXJJbnRlZ3JhdGlvbnMgLFxuICAgICAgICAgIGZvcmNlZE9wdGlvbnMsXG4gICAgICAgIClcbiAgKSA7XG59XG5cbmZ1bmN0aW9uIGFkZE9yVXBkYXRlSW50ZWdyYXRpb25JbkFycmF5KFxuICBkZWZhdWx0SW50ZWdyYXRpb25JbnN0YW5jZSxcbiAgdXNlckludGVncmF0aW9ucyxcbiAgZm9yY2VkT3B0aW9ucyxcbikge1xuICBjb25zdCB1c2VySW5zdGFuY2UgPSB1c2VySW50ZWdyYXRpb25zLmZpbmQoaW50ZWdyYXRpb24gPT4gaW50ZWdyYXRpb24ubmFtZSA9PT0gZGVmYXVsdEludGVncmF0aW9uSW5zdGFuY2UubmFtZSk7XG5cbiAgaWYgKHVzZXJJbnN0YW5jZSkge1xuICAgIGZvciAoY29uc3QgW2tleVBhdGgsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhmb3JjZWRPcHRpb25zKSkge1xuICAgICAgc2V0TmVzdGVkS2V5KHVzZXJJbnN0YW5jZSwga2V5UGF0aCwgdmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB1c2VySW50ZWdyYXRpb25zO1xuICB9XG5cbiAgcmV0dXJuIFsuLi51c2VySW50ZWdyYXRpb25zLCBkZWZhdWx0SW50ZWdyYXRpb25JbnN0YW5jZV07XG59XG5cbmZ1bmN0aW9uIGFkZE9yVXBkYXRlSW50ZWdyYXRpb25JbkZ1bmN0aW9uKFxuICBkZWZhdWx0SW50ZWdyYXRpb25JbnN0YW5jZSxcbiAgdXNlckludGVncmF0aW9uc0Z1bmMsXG4gIGZvcmNlZE9wdGlvbnMsXG4pIHtcbiAgY29uc3Qgd3JhcHBlciA9IGRlZmF1bHRJbnRlZ3JhdGlvbnMgPT4ge1xuICAgIGNvbnN0IHVzZXJGaW5hbEludGVncmF0aW9ucyA9IHVzZXJJbnRlZ3JhdGlvbnNGdW5jKGRlZmF1bHRJbnRlZ3JhdGlvbnMpO1xuXG4gICAgLy8gVGhlcmUgYXJlIGluc3RhbmNlcyB3aGVyZSB3ZSB3YW50IHRoZSB1c2VyIHRvIGJlIGFibGUgdG8gcHJldmVudCBhbiBpbnRlZ3JhdGlvbiBmcm9tIGFwcGVhcmluZyBhdCBhbGwsIHdoaWNoIHRoZXlcbiAgICAvLyB3b3VsZCBkbyBieSBwcm92aWRpbmcgYSBmdW5jdGlvbiB3aGljaCBmaWx0ZXJzIG91dCB0aGUgaW50ZWdyYXRpb24gaW4gcXVlc3Rpb24uIElmIHRoYXQncyBoYXBwZW5lZCBpbiBvbmUgb2ZcbiAgICAvLyB0aG9zZSBjYXNlcywgZG9uJ3QgYWRkIG91ciBkZWZhdWx0IGJhY2sgaW4uXG4gICAgaWYgKGRlZmF1bHRJbnRlZ3JhdGlvbkluc3RhbmNlLmFsbG93RXhjbHVzaW9uQnlVc2VyKSB7XG4gICAgICBjb25zdCB1c2VyRmluYWxJbnN0YW5jZSA9IHVzZXJGaW5hbEludGVncmF0aW9ucy5maW5kKFxuICAgICAgICBpbnRlZ3JhdGlvbiA9PiBpbnRlZ3JhdGlvbi5uYW1lID09PSBkZWZhdWx0SW50ZWdyYXRpb25JbnN0YW5jZS5uYW1lLFxuICAgICAgKTtcbiAgICAgIGlmICghdXNlckZpbmFsSW5zdGFuY2UpIHtcbiAgICAgICAgcmV0dXJuIHVzZXJGaW5hbEludGVncmF0aW9ucztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYWRkT3JVcGRhdGVJbnRlZ3JhdGlvbkluQXJyYXkoZGVmYXVsdEludGVncmF0aW9uSW5zdGFuY2UsIHVzZXJGaW5hbEludGVncmF0aW9ucywgZm9yY2VkT3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIHdyYXBwZXI7XG59XG5cbmV4cG9ydCB7IGFkZE9yVXBkYXRlSW50ZWdyYXRpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZXJJbnRlZ3JhdGlvbnMuanMubWFwXG4iXSwibmFtZXMiOlsic2V0TmVzdGVkS2V5Iiwib2JqIiwia2V5UGF0aCIsInZhbHVlIiwibWF0Y2giLCJpbm5lck9iaiIsImFkZE9yVXBkYXRlSW50ZWdyYXRpb24iLCJkZWZhdWx0SW50ZWdyYXRpb25JbnN0YW5jZSIsInVzZXJJbnRlZ3JhdGlvbnMiLCJmb3JjZWRPcHRpb25zIiwiQXJyYXkiLCJpc0FycmF5IiwiYWRkT3JVcGRhdGVJbnRlZ3JhdGlvbkluQXJyYXkiLCJhZGRPclVwZGF0ZUludGVncmF0aW9uSW5GdW5jdGlvbiIsInVzZXJJbnN0YW5jZSIsImZpbmQiLCJpbnRlZ3JhdGlvbiIsIm5hbWUiLCJPYmplY3QiLCJlbnRyaWVzIiwidXNlckludGVncmF0aW9uc0Z1bmMiLCJ3cmFwcGVyIiwiZGVmYXVsdEludGVncmF0aW9ucyIsInVzZXJGaW5hbEludGVncmF0aW9ucyIsImFsbG93RXhjbHVzaW9uQnlVc2VyIiwidXNlckZpbmFsSW5zdGFuY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/userIntegrations.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/vendor/escapeStringForRegex.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/vendor/escapeStringForRegex.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   escapeStringForRegex: () => (/* binding */ escapeStringForRegex)\n/* harmony export */ });\n// Based on https://github.com/sindresorhus/escape-string-regexp but with modifications to:\n//   a) reduce the size by skipping the runtime type - checking\n//   b) ensure it gets down - compiled for old versions of Node(the published package only supports Node 12+).\n//\n// MIT License\n//\n// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files(the \"Software\"), to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and\n// to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of\n// the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO\n// THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n/**\n * Given a string, escape characters which have meaning in the regex grammar, such that the result is safe to feed to\n * `new RegExp()`.\n *\n * @param regexString The string to escape\n * @returns An version of the string with all special regex characters escaped\n */ function escapeStringForRegex(regexString) {\n    // escape the hyphen separately so we can also replace it with a unicode literal hyphen, to avoid the problems\n    // discussed in https://github.com/sindresorhus/escape-string-regexp/issues/20.\n    return regexString.replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\").replace(/-/g, \"\\\\x2d\");\n}\n //# sourceMappingURL=escapeStringForRegex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3ZlbmRvci9lc2NhcGVTdHJpbmdGb3JSZWdleC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMkZBQTJGO0FBQzNGLCtEQUErRDtBQUMvRCw4R0FBOEc7QUFDOUcsRUFBRTtBQUNGLGNBQWM7QUFDZCxFQUFFO0FBQ0Ysa0ZBQWtGO0FBQ2xGLEVBQUU7QUFDRiwrR0FBK0c7QUFDL0csaUhBQWlIO0FBQ2pILHFIQUFxSDtBQUNySCxxR0FBcUc7QUFDckcsRUFBRTtBQUNGLG1IQUFtSDtBQUNuSCxnQkFBZ0I7QUFDaEIsRUFBRTtBQUNGLG1IQUFtSDtBQUNuSCxnSEFBZ0g7QUFDaEgsc0hBQXNIO0FBQ3RILDBHQUEwRztBQUMxRyxtQkFBbUI7QUFFbkI7Ozs7OztDQU1DLEdBQ0QsU0FBU0EscUJBQXFCQyxXQUFXO0lBQ3ZDLDhHQUE4RztJQUM5RywrRUFBK0U7SUFDL0UsT0FBT0EsWUFBWUMsT0FBTyxDQUFDLHVCQUF1QixRQUFRQSxPQUFPLENBQUMsTUFBTTtBQUMxRTtBQUVnQyxDQUNoQyxnREFBZ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3ZlbmRvci9lc2NhcGVTdHJpbmdGb3JSZWdleC5qcz8xM2VkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvZXNjYXBlLXN0cmluZy1yZWdleHAgYnV0IHdpdGggbW9kaWZpY2F0aW9ucyB0bzpcbi8vICAgYSkgcmVkdWNlIHRoZSBzaXplIGJ5IHNraXBwaW5nIHRoZSBydW50aW1lIHR5cGUgLSBjaGVja2luZ1xuLy8gICBiKSBlbnN1cmUgaXQgZ2V0cyBkb3duIC0gY29tcGlsZWQgZm9yIG9sZCB2ZXJzaW9ucyBvZiBOb2RlKHRoZSBwdWJsaXNoZWQgcGFja2FnZSBvbmx5IHN1cHBvcnRzIE5vZGUgMTIrKS5cbi8vXG4vLyBNSVQgTGljZW5zZVxuLy9cbi8vIENvcHlyaWdodCAoYykgU2luZHJlIFNvcmh1cyA8c2luZHJlc29yaHVzQGdtYWlsLmNvbT4gKGh0dHBzOi8vc2luZHJlc29yaHVzLmNvbSlcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWRcbi8vIGRvY3VtZW50YXRpb24gZmlsZXModGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb25cbi8vIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQgLyBvciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZFxuLy8gdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mXG4vLyB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPXG4vLyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsXG4vLyBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTXG4vLyBJTiBUSEUgU09GVFdBUkUuXG5cbi8qKlxuICogR2l2ZW4gYSBzdHJpbmcsIGVzY2FwZSBjaGFyYWN0ZXJzIHdoaWNoIGhhdmUgbWVhbmluZyBpbiB0aGUgcmVnZXggZ3JhbW1hciwgc3VjaCB0aGF0IHRoZSByZXN1bHQgaXMgc2FmZSB0byBmZWVkIHRvXG4gKiBgbmV3IFJlZ0V4cCgpYC5cbiAqXG4gKiBAcGFyYW0gcmVnZXhTdHJpbmcgVGhlIHN0cmluZyB0byBlc2NhcGVcbiAqIEByZXR1cm5zIEFuIHZlcnNpb24gb2YgdGhlIHN0cmluZyB3aXRoIGFsbCBzcGVjaWFsIHJlZ2V4IGNoYXJhY3RlcnMgZXNjYXBlZFxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmdGb3JSZWdleChyZWdleFN0cmluZykge1xuICAvLyBlc2NhcGUgdGhlIGh5cGhlbiBzZXBhcmF0ZWx5IHNvIHdlIGNhbiBhbHNvIHJlcGxhY2UgaXQgd2l0aCBhIHVuaWNvZGUgbGl0ZXJhbCBoeXBoZW4sIHRvIGF2b2lkIHRoZSBwcm9ibGVtc1xuICAvLyBkaXNjdXNzZWQgaW4gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9lc2NhcGUtc3RyaW5nLXJlZ2V4cC9pc3N1ZXMvMjAuXG4gIHJldHVybiByZWdleFN0cmluZy5yZXBsYWNlKC9bfFxcXFx7fSgpW1xcXV4kKyo/Ll0vZywgJ1xcXFwkJicpLnJlcGxhY2UoLy0vZywgJ1xcXFx4MmQnKTtcbn1cblxuZXhwb3J0IHsgZXNjYXBlU3RyaW5nRm9yUmVnZXggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVzY2FwZVN0cmluZ0ZvclJlZ2V4LmpzLm1hcFxuIl0sIm5hbWVzIjpbImVzY2FwZVN0cmluZ0ZvclJlZ2V4IiwicmVnZXhTdHJpbmciLCJyZXBsYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/vendor/escapeStringForRegex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/worldwide.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/worldwide.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GLOBAL_OBJ: () => (/* binding */ GLOBAL_OBJ),\n/* harmony export */   getGlobalObject: () => (/* binding */ getGlobalObject),\n/* harmony export */   getGlobalSingleton: () => (/* binding */ getGlobalSingleton)\n/* harmony export */ });\n/** Internal global with common properties and Sentry extensions  */ // The code below for 'isGlobalObj' and 'GLOBAL_OBJ' was copied from core-js before modification\n// https://github.com/zloirock/core-js/blob/1b944df55282cdc99c90db5f49eb0b6eda2cc0a3/packages/core-js/internals/global.js\n// core-js has the following licence:\n//\n// Copyright (c) 2014-2022 Denis Pushkarev\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/** Returns 'obj' if it's the global object, otherwise returns undefined */ function isGlobalObj(obj) {\n    return obj && obj.Math == Math ? obj : undefined;\n}\n/** Get's the global object for the current JavaScript runtime */ const GLOBAL_OBJ = typeof globalThis == \"object\" && isGlobalObj(globalThis) || // eslint-disable-next-line no-restricted-globals\n false && 0 || typeof self == \"object\" && isGlobalObj(self) || typeof global == \"object\" && isGlobalObj(global) || function() {\n    return this;\n}() || {};\n/**\n * @deprecated Use GLOBAL_OBJ instead or WINDOW from @sentry/browser. This will be removed in v8\n */ function getGlobalObject() {\n    return GLOBAL_OBJ;\n}\n/**\n * Returns a global singleton contained in the global `__SENTRY__` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value\n * @returns the singleton\n */ function getGlobalSingleton(name, creator, obj) {\n    const gbl = obj || GLOBAL_OBJ;\n    const __SENTRY__ = gbl.__SENTRY__ = gbl.__SENTRY__ || {};\n    const singleton = __SENTRY__[name] || (__SENTRY__[name] = creator());\n    return singleton;\n}\n //# sourceMappingURL=worldwide.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3dvcmxkd2lkZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxrRUFBa0UsR0FFbEUsZ0dBQWdHO0FBQ2hHLHlIQUF5SDtBQUN6SCxxQ0FBcUM7QUFDckMsRUFBRTtBQUNGLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0YsK0VBQStFO0FBQy9FLGdGQUFnRjtBQUNoRiwrRUFBK0U7QUFDL0UsNEVBQTRFO0FBQzVFLHdFQUF3RTtBQUN4RSwyREFBMkQ7QUFDM0QsRUFBRTtBQUNGLDZFQUE2RTtBQUM3RSxzREFBc0Q7QUFDdEQsRUFBRTtBQUNGLDZFQUE2RTtBQUM3RSwyRUFBMkU7QUFDM0UsOEVBQThFO0FBQzlFLHlFQUF5RTtBQUN6RSxnRkFBZ0Y7QUFDaEYsNEVBQTRFO0FBQzVFLGdCQUFnQjtBQUVoQix5RUFBeUUsR0FDekUsU0FBU0EsWUFBWUMsR0FBRztJQUN0QixPQUFPQSxPQUFPQSxJQUFJQyxJQUFJLElBQUlBLE9BQU9ELE1BQU1FO0FBQ3pDO0FBRUEsK0RBQStELEdBQy9ELE1BQU1DLGFBQ0osT0FBUUMsY0FBYyxZQUFZTCxZQUFZSyxlQUM5QyxpREFBaUQ7QUFDaEQsTUFBaUIsSUFBWUwsQ0FBbUJNLElBQ2hELE9BQU9DLFFBQVEsWUFBWVAsWUFBWU8sU0FDdkMsT0FBT0MsVUFBVSxZQUFZUixZQUFZUSxXQUMxQztJQUNFLE9BQU8sSUFBSTtBQUNiLE9BQ0EsQ0FBQztBQUVIOztDQUVDLEdBQ0QsU0FBU0M7SUFDUCxPQUFPTDtBQUNUO0FBRUE7Ozs7Ozs7Ozs7Q0FVQyxHQUNELFNBQVNNLG1CQUFtQkMsSUFBSSxFQUFFQyxPQUFPLEVBQUVYLEdBQUc7SUFDNUMsTUFBTVksTUFBT1osT0FBT0c7SUFDcEIsTUFBTVUsYUFBY0QsSUFBSUMsVUFBVSxHQUFHRCxJQUFJQyxVQUFVLElBQUksQ0FBQztJQUN4RCxNQUFNQyxZQUFZRCxVQUFVLENBQUNILEtBQUssSUFBS0csQ0FBQUEsVUFBVSxDQUFDSCxLQUFLLEdBQUdDLFNBQVE7SUFDbEUsT0FBT0c7QUFDVDtBQUUyRCxDQUMzRCxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3dvcmxkd2lkZS5qcz8wYjNjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBJbnRlcm5hbCBnbG9iYWwgd2l0aCBjb21tb24gcHJvcGVydGllcyBhbmQgU2VudHJ5IGV4dGVuc2lvbnMgICovXG5cbi8vIFRoZSBjb2RlIGJlbG93IGZvciAnaXNHbG9iYWxPYmonIGFuZCAnR0xPQkFMX09CSicgd2FzIGNvcGllZCBmcm9tIGNvcmUtanMgYmVmb3JlIG1vZGlmaWNhdGlvblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvYmxvYi8xYjk0NGRmNTUyODJjZGM5OWM5MGRiNWY0OWViMGI2ZWRhMmNjMGEzL3BhY2thZ2VzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qc1xuLy8gY29yZS1qcyBoYXMgdGhlIGZvbGxvd2luZyBsaWNlbmNlOlxuLy9cbi8vIENvcHlyaWdodCAoYykgMjAxNC0yMDIyIERlbmlzIFB1c2hrYXJldlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbi8qKiBSZXR1cm5zICdvYmonIGlmIGl0J3MgdGhlIGdsb2JhbCBvYmplY3QsIG90aGVyd2lzZSByZXR1cm5zIHVuZGVmaW5lZCAqL1xuZnVuY3Rpb24gaXNHbG9iYWxPYmoob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLk1hdGggPT0gTWF0aCA/IG9iaiA6IHVuZGVmaW5lZDtcbn1cblxuLyoqIEdldCdzIHRoZSBnbG9iYWwgb2JqZWN0IGZvciB0aGUgY3VycmVudCBKYXZhU2NyaXB0IHJ1bnRpbWUgKi9cbmNvbnN0IEdMT0JBTF9PQkogPVxuICAodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgaXNHbG9iYWxPYmooZ2xvYmFsVGhpcykpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgKHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgaXNHbG9iYWxPYmood2luZG93KSkgfHxcbiAgKHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIGlzR2xvYmFsT2JqKHNlbGYpKSB8fFxuICAodHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBpc0dsb2JhbE9iaihnbG9iYWwpKSB8fFxuICAoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KSgpIHx8XG4gIHt9O1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFVzZSBHTE9CQUxfT0JKIGluc3RlYWQgb3IgV0lORE9XIGZyb20gQHNlbnRyeS9icm93c2VyLiBUaGlzIHdpbGwgYmUgcmVtb3ZlZCBpbiB2OFxuICovXG5mdW5jdGlvbiBnZXRHbG9iYWxPYmplY3QoKSB7XG4gIHJldHVybiBHTE9CQUxfT0JKIDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZ2xvYmFsIHNpbmdsZXRvbiBjb250YWluZWQgaW4gdGhlIGdsb2JhbCBgX19TRU5UUllfX2Agb2JqZWN0LlxuICpcbiAqIElmIHRoZSBzaW5nbGV0b24gZG9lc24ndCBhbHJlYWR5IGV4aXN0IGluIGBfX1NFTlRSWV9fYCwgaXQgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRoZSBnaXZlbiBmYWN0b3J5XG4gKiBmdW5jdGlvbiBhbmQgYWRkZWQgdG8gdGhlIGBfX1NFTlRSWV9fYCBvYmplY3QuXG4gKlxuICogQHBhcmFtIG5hbWUgbmFtZSBvZiB0aGUgZ2xvYmFsIHNpbmdsZXRvbiBvbiBfX1NFTlRSWV9fXG4gKiBAcGFyYW0gY3JlYXRvciBjcmVhdG9yIEZhY3RvcnkgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBzaW5nbGV0b24gaWYgaXQgZG9lc24ndCBhbHJlYWR5IGV4aXN0IG9uIGBfX1NFTlRSWV9fYFxuICogQHBhcmFtIG9iaiAoT3B0aW9uYWwpIFRoZSBnbG9iYWwgb2JqZWN0IG9uIHdoaWNoIHRvIGxvb2sgZm9yIGBfX1NFTlRSWV9fYCwgaWYgbm90IGBHTE9CQUxfT0JKYCdzIHJldHVybiB2YWx1ZVxuICogQHJldHVybnMgdGhlIHNpbmdsZXRvblxuICovXG5mdW5jdGlvbiBnZXRHbG9iYWxTaW5nbGV0b24obmFtZSwgY3JlYXRvciwgb2JqKSB7XG4gIGNvbnN0IGdibCA9IChvYmogfHwgR0xPQkFMX09CSikgO1xuICBjb25zdCBfX1NFTlRSWV9fID0gKGdibC5fX1NFTlRSWV9fID0gZ2JsLl9fU0VOVFJZX18gfHwge30pO1xuICBjb25zdCBzaW5nbGV0b24gPSBfX1NFTlRSWV9fW25hbWVdIHx8IChfX1NFTlRSWV9fW25hbWVdID0gY3JlYXRvcigpKTtcbiAgcmV0dXJuIHNpbmdsZXRvbjtcbn1cblxuZXhwb3J0IHsgR0xPQkFMX09CSiwgZ2V0R2xvYmFsT2JqZWN0LCBnZXRHbG9iYWxTaW5nbGV0b24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdvcmxkd2lkZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJpc0dsb2JhbE9iaiIsIm9iaiIsIk1hdGgiLCJ1bmRlZmluZWQiLCJHTE9CQUxfT0JKIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsInNlbGYiLCJnbG9iYWwiLCJnZXRHbG9iYWxPYmplY3QiLCJnZXRHbG9iYWxTaW5nbGV0b24iLCJuYW1lIiwiY3JlYXRvciIsImdibCIsIl9fU0VOVFJZX18iLCJzaW5nbGV0b24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/nextjs/node_modules/@sentry/utils/esm/worldwide.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/anr/debugger.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sentry/node/esm/anr/debugger.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   captureStackTrace: () => (/* binding */ captureStackTrace)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/anr.js\");\n/* harmony import */ var _module_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../module.js */ \"(ssr)/./node_modules/@sentry/node/esm/module.js\");\n/* harmony import */ var _websocket_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./websocket.js */ \"(ssr)/./node_modules/@sentry/node/esm/anr/websocket.js\");\n\n\n\n// The only messages we care about\n/**\n * Wraps a websocket connection with the basic logic of the Node debugger protocol.\n * @param url The URL to connect to\n * @param onMessage A callback that will be called with each return message from the debugger\n * @returns A function that can be used to send commands to the debugger\n */ async function webSocketDebugger(url, onMessage) {\n    let id = 0;\n    const webSocket = await (0,_websocket_js__WEBPACK_IMPORTED_MODULE_0__.createWebSocketClient)(url);\n    webSocket.on(\"message\", (data)=>{\n        const message = JSON.parse(data.toString());\n        onMessage(message);\n    });\n    return (method)=>{\n        webSocket.send(JSON.stringify({\n            id: id++,\n            method\n        }));\n    };\n}\n/**\n * Captures stack traces from the Node debugger.\n * @param url The URL to connect to\n * @param callback A callback that will be called with the stack frames\n * @returns A function that triggers the debugger to pause and capture a stack trace\n */ async function captureStackTrace(url, callback) {\n    const sendCommand = await webSocketDebugger(url, (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.createDebugPauseMessageHandler)((cmd)=>sendCommand(cmd), _module_js__WEBPACK_IMPORTED_MODULE_2__.getModuleFromFilename, callback));\n    return ()=>{\n        sendCommand(\"Debugger.enable\");\n        sendCommand(\"Debugger.pause\");\n    };\n}\n //# sourceMappingURL=debugger.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9hbnIvZGVidWdnZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUErRDtBQUNWO0FBQ0U7QUFFdkQsa0NBQWtDO0FBRWxDOzs7OztDQUtDLEdBQ0QsZUFBZUcsa0JBQ2JDLEdBQUcsRUFDSEMsU0FBUztJQUVULElBQUlDLEtBQUs7SUFDVCxNQUFNQyxZQUFZLE1BQU1MLG9FQUFxQkEsQ0FBQ0U7SUFFOUNHLFVBQVVDLEVBQUUsQ0FBQyxXQUFXLENBQUNDO1FBQ3ZCLE1BQU1DLFVBQVVDLEtBQUtDLEtBQUssQ0FBQ0gsS0FBS0ksUUFBUTtRQUN4Q1IsVUFBVUs7SUFDWjtJQUVBLE9BQU8sQ0FBQ0k7UUFDTlAsVUFBVVEsSUFBSSxDQUFDSixLQUFLSyxTQUFTLENBQUM7WUFBRVYsSUFBSUE7WUFBTVE7UUFBTztJQUNuRDtBQUNGO0FBRUE7Ozs7O0NBS0MsR0FDRCxlQUFlRyxrQkFBa0JiLEdBQUcsRUFBRWMsUUFBUTtJQUM1QyxNQUFNQyxjQUFjLE1BQU1oQixrQkFDeEJDLEtBQ0FKLDZFQUE4QkEsQ0FBQ29CLENBQUFBLE1BQU9ELFlBQVlDLE1BQU1uQiw2REFBcUJBLEVBQUVpQjtJQUdqRixPQUFPO1FBQ0xDLFlBQVk7UUFDWkEsWUFBWTtJQUNkO0FBQ0Y7QUFFNkIsQ0FDN0Isb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9lc20vYW5yL2RlYnVnZ2VyLmpzPzFmMGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlRGVidWdQYXVzZU1lc3NhZ2VIYW5kbGVyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBnZXRNb2R1bGVGcm9tRmlsZW5hbWUgfSBmcm9tICcuLi9tb2R1bGUuanMnO1xuaW1wb3J0IHsgY3JlYXRlV2ViU29ja2V0Q2xpZW50IH0gZnJvbSAnLi93ZWJzb2NrZXQuanMnO1xuXG4vLyBUaGUgb25seSBtZXNzYWdlcyB3ZSBjYXJlIGFib3V0XG5cbi8qKlxuICogV3JhcHMgYSB3ZWJzb2NrZXQgY29ubmVjdGlvbiB3aXRoIHRoZSBiYXNpYyBsb2dpYyBvZiB0aGUgTm9kZSBkZWJ1Z2dlciBwcm90b2NvbC5cbiAqIEBwYXJhbSB1cmwgVGhlIFVSTCB0byBjb25uZWN0IHRvXG4gKiBAcGFyYW0gb25NZXNzYWdlIEEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGNhbGxlZCB3aXRoIGVhY2ggcmV0dXJuIG1lc3NhZ2UgZnJvbSB0aGUgZGVidWdnZXJcbiAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byBzZW5kIGNvbW1hbmRzIHRvIHRoZSBkZWJ1Z2dlclxuICovXG5hc3luYyBmdW5jdGlvbiB3ZWJTb2NrZXREZWJ1Z2dlcihcbiAgdXJsLFxuICBvbk1lc3NhZ2UsXG4pIHtcbiAgbGV0IGlkID0gMDtcbiAgY29uc3Qgd2ViU29ja2V0ID0gYXdhaXQgY3JlYXRlV2ViU29ja2V0Q2xpZW50KHVybCk7XG5cbiAgd2ViU29ja2V0Lm9uKCdtZXNzYWdlJywgKGRhdGEpID0+IHtcbiAgICBjb25zdCBtZXNzYWdlID0gSlNPTi5wYXJzZShkYXRhLnRvU3RyaW5nKCkpIDtcbiAgICBvbk1lc3NhZ2UobWVzc2FnZSk7XG4gIH0pO1xuXG4gIHJldHVybiAobWV0aG9kKSA9PiB7XG4gICAgd2ViU29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoeyBpZDogaWQrKywgbWV0aG9kIH0pKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDYXB0dXJlcyBzdGFjayB0cmFjZXMgZnJvbSB0aGUgTm9kZSBkZWJ1Z2dlci5cbiAqIEBwYXJhbSB1cmwgVGhlIFVSTCB0byBjb25uZWN0IHRvXG4gKiBAcGFyYW0gY2FsbGJhY2sgQSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIHN0YWNrIGZyYW1lc1xuICogQHJldHVybnMgQSBmdW5jdGlvbiB0aGF0IHRyaWdnZXJzIHRoZSBkZWJ1Z2dlciB0byBwYXVzZSBhbmQgY2FwdHVyZSBhIHN0YWNrIHRyYWNlXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNhcHR1cmVTdGFja1RyYWNlKHVybCwgY2FsbGJhY2spIHtcbiAgY29uc3Qgc2VuZENvbW1hbmQgPSBhd2FpdCB3ZWJTb2NrZXREZWJ1Z2dlcihcbiAgICB1cmwsXG4gICAgY3JlYXRlRGVidWdQYXVzZU1lc3NhZ2VIYW5kbGVyKGNtZCA9PiBzZW5kQ29tbWFuZChjbWQpLCBnZXRNb2R1bGVGcm9tRmlsZW5hbWUsIGNhbGxiYWNrKSxcbiAgKTtcblxuICByZXR1cm4gKCkgPT4ge1xuICAgIHNlbmRDb21tYW5kKCdEZWJ1Z2dlci5lbmFibGUnKTtcbiAgICBzZW5kQ29tbWFuZCgnRGVidWdnZXIucGF1c2UnKTtcbiAgfTtcbn1cblxuZXhwb3J0IHsgY2FwdHVyZVN0YWNrVHJhY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnZ2VyLmpzLm1hcFxuIl0sIm5hbWVzIjpbImNyZWF0ZURlYnVnUGF1c2VNZXNzYWdlSGFuZGxlciIsImdldE1vZHVsZUZyb21GaWxlbmFtZSIsImNyZWF0ZVdlYlNvY2tldENsaWVudCIsIndlYlNvY2tldERlYnVnZ2VyIiwidXJsIiwib25NZXNzYWdlIiwiaWQiLCJ3ZWJTb2NrZXQiLCJvbiIsImRhdGEiLCJtZXNzYWdlIiwiSlNPTiIsInBhcnNlIiwidG9TdHJpbmciLCJtZXRob2QiLCJzZW5kIiwic3RyaW5naWZ5IiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJjYWxsYmFjayIsInNlbmRDb21tYW5kIiwiY21kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/anr/debugger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/anr/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/node/esm/anr/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   enableAnrDetection: () => (/* binding */ enableAnrDetection),\n/* harmony export */   isAnrChildProcess: () => (/* binding */ isAnrChildProcess)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(child_process__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/session.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/exports.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/baseclient.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/anr.js\");\n/* harmony import */ var _debugger_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./debugger.js */ \"(ssr)/./node_modules/@sentry/node/esm/anr/debugger.js\");\n\n\n\n\n\nconst DEFAULT_INTERVAL = 50;\nconst DEFAULT_HANG_THRESHOLD = 5000;\nfunction createAnrEvent(blockedMs, frames) {\n    return {\n        level: \"error\",\n        exception: {\n            values: [\n                {\n                    type: \"ApplicationNotResponding\",\n                    value: `Application Not Responding for at least ${blockedMs} ms`,\n                    stacktrace: {\n                        frames\n                    },\n                    mechanism: {\n                        // This ensures the UI doesn't say 'Crashed in' for the stack trace\n                        type: \"ANR\"\n                    }\n                }\n            ]\n        }\n    };\n}\n/**\n * Starts the node debugger and returns the inspector url.\n *\n * When inspector.url() returns undefined, it means the port is already in use so we try the next port.\n */ function startInspector(startPort = 9229) {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const inspector = __webpack_require__(/*! inspector */ \"inspector\");\n    let inspectorUrl = undefined;\n    let port = startPort;\n    while(inspectorUrl === undefined && port < startPort + 100){\n        inspector.open(port);\n        inspectorUrl = inspector.url();\n        port++;\n    }\n    return inspectorUrl;\n}\nfunction startChildProcess(options) {\n    function log(message, ...args) {\n        _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.logger.log(`[ANR] ${message}`, ...args);\n    }\n    const hub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.getCurrentHub)();\n    try {\n        const env = {\n            ...process.env\n        };\n        env.SENTRY_ANR_CHILD_PROCESS = \"true\";\n        if (options.captureStackTrace) {\n            env.SENTRY_INSPECT_URL = startInspector();\n        }\n        log(`Spawning child process with execPath:'${process.execPath}' and entryScript:'${options.entryScript}'`);\n        const child = (0,child_process__WEBPACK_IMPORTED_MODULE_0__.spawn)(process.execPath, [\n            options.entryScript\n        ], {\n            env,\n            stdio: _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.logger.isEnabled() ? [\n                \"inherit\",\n                \"inherit\",\n                \"inherit\",\n                \"ipc\"\n            ] : [\n                \"ignore\",\n                \"ignore\",\n                \"ignore\",\n                \"ipc\"\n            ]\n        });\n        // The child process should not keep the main process alive\n        child.unref();\n        const timer = setInterval(()=>{\n            try {\n                const currentSession = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._optionalChain)([\n                    hub,\n                    \"access\",\n                    (_2)=>_2.getScope,\n                    \"call\",\n                    (_3)=>_3(),\n                    \"optionalAccess\",\n                    (_4)=>_4.getSession,\n                    \"call\",\n                    (_5)=>_5()\n                ]);\n                // We need to copy the session object and remove the toJSON method so it can be sent to the child process\n                // serialized without making it a SerializedSession\n                const session = currentSession ? {\n                    ...currentSession,\n                    toJSON: undefined\n                } : undefined;\n                // message the child process to tell it the main event loop is still running\n                child.send({\n                    session\n                });\n            } catch (_) {\n            //\n            }\n        }, options.pollInterval);\n        child.on(\"message\", (msg)=>{\n            if (msg === \"session-ended\") {\n                log(\"ANR event sent from child process. Clearing session in this process.\");\n                (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._optionalChain)([\n                    hub,\n                    \"access\",\n                    (_6)=>_6.getScope,\n                    \"call\",\n                    (_7)=>_7(),\n                    \"optionalAccess\",\n                    (_8)=>_8.setSession,\n                    \"call\",\n                    (_9)=>_9(undefined)\n                ]);\n            }\n        });\n        const end = (type)=>{\n            return (...args)=>{\n                clearInterval(timer);\n                log(`Child process ${type}`, ...args);\n            };\n        };\n        child.on(\"error\", end(\"error\"));\n        child.on(\"disconnect\", end(\"disconnect\"));\n        child.on(\"exit\", end(\"exit\"));\n    } catch (e) {\n        log(\"Failed to start child process\", e);\n    }\n}\nfunction createHrTimer() {\n    let lastPoll = process.hrtime();\n    return {\n        getTimeMs: ()=>{\n            const [seconds, nanoSeconds] = process.hrtime(lastPoll);\n            return Math.floor(seconds * 1e3 + nanoSeconds / 1e6);\n        },\n        reset: ()=>{\n            lastPoll = process.hrtime();\n        }\n    };\n}\nfunction handleChildProcess(options) {\n    process.title = \"sentry-anr\";\n    function log(message) {\n        _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.logger.log(`[ANR child process] ${message}`);\n    }\n    log(\"Started\");\n    let session;\n    function sendAnrEvent(frames) {\n        if (session) {\n            log(\"Sending abnormal session\");\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.updateSession)(session, {\n                status: \"abnormal\",\n                abnormal_mechanism: \"anr_foreground\"\n            });\n            (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._optionalChain)([\n                _sentry_core__WEBPACK_IMPORTED_MODULE_5__.getClient,\n                \"call\",\n                (_10)=>_10(),\n                \"optionalAccess\",\n                (_11)=>_11.sendSession,\n                \"call\",\n                (_12)=>_12(session)\n            ]);\n            try {\n                // Notify the main process that the session has ended so the session can be cleared from the scope\n                (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__._optionalChain)([\n                    process,\n                    \"access\",\n                    (_13)=>_13.send,\n                    \"optionalCall\",\n                    (_14)=>_14(\"session-ended\")\n                ]);\n            } catch (_) {\n            // ignore\n            }\n        }\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.captureEvent)(createAnrEvent(options.anrThreshold, frames));\n        void (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.flush)(3000).then(()=>{\n            // We only capture one event to avoid spamming users with errors\n            process.exit();\n        });\n    }\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_6__.addEventProcessor)((event)=>{\n        // Strip sdkProcessingMetadata from all child process events to remove trace info\n        delete event.sdkProcessingMetadata;\n        event.tags = {\n            ...event.tags,\n            \"process.name\": \"ANR\"\n        };\n        return event;\n    });\n    let debuggerPause;\n    // if attachStackTrace is enabled, we'll have a debugger url to connect to\n    if (process.env.SENTRY_INSPECT_URL) {\n        log(\"Connecting to debugger\");\n        debuggerPause = (0,_debugger_js__WEBPACK_IMPORTED_MODULE_7__.captureStackTrace)(process.env.SENTRY_INSPECT_URL, (frames)=>{\n            log(\"Capturing event with stack frames\");\n            sendAnrEvent(frames);\n        });\n    }\n    async function watchdogTimeout() {\n        log(\"Watchdog timeout\");\n        try {\n            const pauseAndCapture = await debuggerPause;\n            if (pauseAndCapture) {\n                log(\"Pausing debugger to capture stack trace\");\n                pauseAndCapture();\n                return;\n            }\n        } catch (_) {\n        // ignore\n        }\n        log(\"Capturing event\");\n        sendAnrEvent();\n    }\n    const { poll } = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_8__.watchdogTimer)(createHrTimer, options.pollInterval, options.anrThreshold, watchdogTimeout);\n    process.on(\"message\", (msg)=>{\n        if (msg.session) {\n            session = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.makeSession)(msg.session);\n        }\n        poll();\n    });\n    process.on(\"disconnect\", ()=>{\n        // Parent process has exited.\n        process.exit();\n    });\n}\n/**\n * Returns true if the current process is an ANR child process.\n */ function isAnrChildProcess() {\n    return !!process.send && !!process.env.SENTRY_ANR_CHILD_PROCESS;\n}\n/**\n * **Note** This feature is still in beta so there may be breaking changes in future releases.\n *\n * Starts a child process that detects Application Not Responding (ANR) errors.\n *\n * It's important to await on the returned promise before your app code to ensure this code does not run in the ANR\n * child process.\n *\n * ```js\n * import { init, enableAnrDetection } from '@sentry/node';\n *\n * init({ dsn: \"__DSN__\" });\n *\n * // with ESM + Node 14+\n * await enableAnrDetection({ captureStackTrace: true });\n * runApp();\n *\n * // with CJS or Node 10+\n * enableAnrDetection({ captureStackTrace: true }).then(() => {\n *   runApp();\n * });\n * ```\n */ function enableAnrDetection(options) {\n    // When pm2 runs the script in cluster mode, process.argv[1] is the pm2 script and process.env.pm_exec_path is the\n    // path to the entry script\n    const entryScript = options.entryScript || process.env.pm_exec_path || process.argv[1];\n    const anrOptions = {\n        entryScript,\n        pollInterval: options.pollInterval || DEFAULT_INTERVAL,\n        anrThreshold: options.anrThreshold || DEFAULT_HANG_THRESHOLD,\n        captureStackTrace: !!options.captureStackTrace,\n        // eslint-disable-next-line deprecation/deprecation\n        debug: !!options.debug\n    };\n    if (isAnrChildProcess()) {\n        handleChildProcess(anrOptions);\n        // In the child process, the promise never resolves which stops the app code from running\n        return new Promise(()=>{\n        // Never resolve\n        });\n    } else {\n        startChildProcess(anrOptions);\n        // In the main process, the promise resolves immediately\n        return Promise.resolve();\n    }\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/anr/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/anr/websocket.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/node/esm/anr/websocket.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createWebSocketClient: () => (/* binding */ createWebSocketClient)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(http__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(url__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n/* eslint-disable no-bitwise */ const OPCODES = {\n    CONTINUATION: 0,\n    TEXT: 1,\n    BINARY: 2,\n    TERMINATE: 8,\n    PING: 9,\n    PONG: 10\n};\nconst GUID = \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\";\nfunction isCompleteFrame(frame) {\n    return Buffer.byteLength(frame.payload) >= frame.payloadLength;\n}\nfunction unmaskPayload(payload, mask, offset) {\n    if (mask === undefined) {\n        return payload;\n    }\n    for(let i = 0; i < payload.length; i++){\n        payload[i] ^= mask[offset + i & 3];\n    }\n    return payload;\n}\nfunction buildFrame(opts) {\n    const { opcode, fin, data } = opts;\n    let offset = 6;\n    let dataLength = data.length;\n    if (dataLength >= 65536) {\n        offset += 8;\n        dataLength = 127;\n    } else if (dataLength > 125) {\n        offset += 2;\n        dataLength = 126;\n    }\n    const head = Buffer.allocUnsafe(offset);\n    head[0] = fin ? opcode | 128 : opcode;\n    head[1] = dataLength;\n    if (dataLength === 126) {\n        head.writeUInt16BE(data.length, 2);\n    } else if (dataLength === 127) {\n        head.writeUInt32BE(0, 2);\n        head.writeUInt32BE(data.length, 6);\n    }\n    const mask = crypto__WEBPACK_IMPORTED_MODULE_0__.randomBytes(4);\n    head[1] |= 128;\n    head[offset - 4] = mask[0];\n    head[offset - 3] = mask[1];\n    head[offset - 2] = mask[2];\n    head[offset - 1] = mask[3];\n    const masked = Buffer.alloc(dataLength);\n    for(let i = 0; i < dataLength; ++i){\n        masked[i] = data[i] ^ mask[i & 3];\n    }\n    return Buffer.concat([\n        head,\n        masked\n    ]);\n}\nfunction parseFrame(buffer) {\n    const firstByte = buffer.readUInt8(0);\n    const isFinalFrame = Boolean(firstByte >>> 7 & 1);\n    const opcode = firstByte & 15;\n    const secondByte = buffer.readUInt8(1);\n    const isMasked = Boolean(secondByte >>> 7 & 1);\n    // Keep track of our current position as we advance through the buffer\n    let currentOffset = 2;\n    let payloadLength = secondByte & 127;\n    if (payloadLength > 125) {\n        if (payloadLength === 126) {\n            payloadLength = buffer.readUInt16BE(currentOffset);\n            currentOffset += 2;\n        } else if (payloadLength === 127) {\n            const leftPart = buffer.readUInt32BE(currentOffset);\n            currentOffset += 4;\n            // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n            // if payload length is greater than this number.\n            if (leftPart >= Number.MAX_SAFE_INTEGER) {\n                throw new Error(\"Unsupported WebSocket frame: payload length > 2^53 - 1\");\n            }\n            const rightPart = buffer.readUInt32BE(currentOffset);\n            currentOffset += 4;\n            payloadLength = leftPart * Math.pow(2, 32) + rightPart;\n        } else {\n            throw new Error(\"Unknown payload length\");\n        }\n    }\n    // Get the masking key if one exists\n    let mask;\n    if (isMasked) {\n        mask = buffer.slice(currentOffset, currentOffset + 4);\n        currentOffset += 4;\n    }\n    const payload = unmaskPayload(buffer.slice(currentOffset), mask, 0);\n    return {\n        fin: isFinalFrame,\n        opcode,\n        mask,\n        payload,\n        payloadLength\n    };\n}\nfunction createKey(key) {\n    return crypto__WEBPACK_IMPORTED_MODULE_0__.createHash(\"sha1\").update(`${key}${GUID}`).digest(\"base64\");\n}\nclass WebSocketInterface extends events__WEBPACK_IMPORTED_MODULE_1__.EventEmitter {\n    constructor(socket){\n        super();\n        // When a frame is set here then any additional continuation frames payloads will be appended\n        this._unfinishedFrame = undefined;\n        // When a frame is set here, all additional chunks will be appended until we reach the correct payloadLength\n        this._incompleteFrame = undefined;\n        this._socket = socket;\n        this._alive = true;\n        socket.on(\"data\", (buff)=>{\n            this._addBuffer(buff);\n        });\n        socket.on(\"error\", (err)=>{\n            if (err.code === \"ECONNRESET\") {\n                this.emit(\"close\");\n            } else {\n                this.emit(\"error\");\n            }\n        });\n        socket.on(\"close\", ()=>{\n            this.end();\n        });\n    }\n    end() {\n        if (!this._alive) {\n            return;\n        }\n        this._alive = false;\n        this.emit(\"close\");\n        this._socket.end();\n    }\n    send(buff) {\n        this._sendFrame({\n            opcode: OPCODES.TEXT,\n            fin: true,\n            data: Buffer.from(buff)\n        });\n    }\n    _sendFrame(frameOpts) {\n        this._socket.write(buildFrame(frameOpts));\n    }\n    _completeFrame(frame) {\n        // If we have an unfinished frame then only allow continuations\n        const { _unfinishedFrame: unfinishedFrame } = this;\n        if (unfinishedFrame !== undefined) {\n            if (frame.opcode === OPCODES.CONTINUATION) {\n                unfinishedFrame.payload = Buffer.concat([\n                    unfinishedFrame.payload,\n                    unmaskPayload(frame.payload, unfinishedFrame.mask, unfinishedFrame.payload.length)\n                ]);\n                if (frame.fin) {\n                    this._unfinishedFrame = undefined;\n                    this._completeFrame(unfinishedFrame);\n                }\n                return;\n            } else {\n                // Silently ignore the previous frame...\n                this._unfinishedFrame = undefined;\n            }\n        }\n        if (frame.fin) {\n            if (frame.opcode === OPCODES.PING) {\n                this._sendFrame({\n                    opcode: OPCODES.PONG,\n                    fin: true,\n                    data: frame.payload\n                });\n            } else {\n                // Trim off any excess payload\n                let excess;\n                if (frame.payload.length > frame.payloadLength) {\n                    excess = frame.payload.slice(frame.payloadLength);\n                    frame.payload = frame.payload.slice(0, frame.payloadLength);\n                }\n                this.emit(\"message\", frame.payload);\n                if (excess !== undefined) {\n                    this._addBuffer(excess);\n                }\n            }\n        } else {\n            this._unfinishedFrame = frame;\n        }\n    }\n    _addBufferToIncompleteFrame(incompleteFrame, buff) {\n        incompleteFrame.payload = Buffer.concat([\n            incompleteFrame.payload,\n            unmaskPayload(buff, incompleteFrame.mask, incompleteFrame.payload.length)\n        ]);\n        if (isCompleteFrame(incompleteFrame)) {\n            this._incompleteFrame = undefined;\n            this._completeFrame(incompleteFrame);\n        }\n    }\n    _addBuffer(buff) {\n        // Check if we're still waiting for the rest of a payload\n        const { _incompleteFrame: incompleteFrame } = this;\n        if (incompleteFrame !== undefined) {\n            this._addBufferToIncompleteFrame(incompleteFrame, buff);\n            return;\n        }\n        // There needs to be atleast two values in the buffer for us to parse\n        // a frame from it.\n        // See: https://github.com/getsentry/sentry-javascript/issues/9307\n        if (buff.length <= 1) {\n            return;\n        }\n        const frame = parseFrame(buff);\n        if (isCompleteFrame(frame)) {\n            // Frame has been completed!\n            this._completeFrame(frame);\n        } else {\n            this._incompleteFrame = frame;\n        }\n    }\n}\n/**\n * Creates a WebSocket client\n */ async function createWebSocketClient(rawUrl) {\n    const parts = url__WEBPACK_IMPORTED_MODULE_3__.parse(rawUrl);\n    return new Promise((resolve, reject)=>{\n        const key = crypto__WEBPACK_IMPORTED_MODULE_0__.randomBytes(16).toString(\"base64\");\n        const digest = createKey(key);\n        const req = http__WEBPACK_IMPORTED_MODULE_2__.request({\n            hostname: parts.hostname,\n            port: parts.port,\n            path: parts.path,\n            method: \"GET\",\n            headers: {\n                Connection: \"Upgrade\",\n                Upgrade: \"websocket\",\n                \"Sec-WebSocket-Key\": key,\n                \"Sec-WebSocket-Version\": \"13\"\n            }\n        });\n        req.on(\"response\", (res)=>{\n            if (res.statusCode && res.statusCode >= 400) {\n                process.stderr.write(`Unexpected HTTP code: ${res.statusCode}\\n`);\n                res.pipe(process.stderr);\n            } else {\n                res.pipe(process.stderr);\n            }\n        });\n        req.on(\"upgrade\", (res, socket)=>{\n            if (res.headers[\"sec-websocket-accept\"] !== digest) {\n                socket.end();\n                reject(new Error(`Digest mismatch ${digest} !== ${res.headers[\"sec-websocket-accept\"]}`));\n                return;\n            }\n            const client = new WebSocketInterface(socket);\n            resolve(client);\n        });\n        req.on(\"error\", (err)=>{\n            reject(err);\n        });\n        req.end();\n    });\n}\n //# sourceMappingURL=websocket.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/anr/websocket.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/async/domain.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sentry/node/esm/async/domain.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setDomainAsyncContextStrategy: () => (/* binding */ setDomainAsyncContextStrategy)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var domain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domain */ \"domain\");\n/* harmony import */ var domain__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(domain__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n\n\n\nfunction getActiveDomain() {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    return domain__WEBPACK_IMPORTED_MODULE_0__.active;\n}\nfunction getCurrentHub() {\n    const activeDomain = getActiveDomain();\n    // If there's no active domain, just return undefined and the global hub will be used\n    if (!activeDomain) {\n        return undefined;\n    }\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.ensureHubOnCarrier)(activeDomain);\n    return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.getHubFromCarrier)(activeDomain);\n}\nfunction createNewHub(parent) {\n    const carrier = {};\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.ensureHubOnCarrier)(carrier, parent);\n    return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.getHubFromCarrier)(carrier);\n}\nfunction runWithAsyncContext(callback, options) {\n    const activeDomain = getActiveDomain();\n    if (activeDomain && (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n        options,\n        \"optionalAccess\",\n        (_)=>_.reuseExisting\n    ])) {\n        // We're already in a domain, so we don't need to create a new one, just call the callback with the current hub\n        return callback();\n    }\n    const local = domain__WEBPACK_IMPORTED_MODULE_0__.create();\n    const parentHub = activeDomain ? (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.getHubFromCarrier)(activeDomain) : undefined;\n    const newHub = createNewHub(parentHub);\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.setHubOnCarrier)(local, newHub);\n    return local.bind(()=>{\n        return callback();\n    })();\n}\n/**\n * Sets the async context strategy to use Node.js domains.\n */ function setDomainAsyncContextStrategy() {\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.setAsyncContextStrategy)({\n        getCurrentHub,\n        runWithAsyncContext\n    });\n}\n //# sourceMappingURL=domain.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9hc3luYy9kb21haW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBK0M7QUFDZDtBQUM4RTtBQUUvRyxTQUFTTTtJQUNQLDBHQUEwRztJQUMxRyxPQUFPLDBDQUFnQjtBQUN6QjtBQUVBLFNBQVNFO0lBQ1AsTUFBTUMsZUFBZUg7SUFFckIscUZBQXFGO0lBQ3JGLElBQUksQ0FBQ0csY0FBYztRQUNqQixPQUFPQztJQUNUO0lBRUFQLGdFQUFrQkEsQ0FBQ007SUFFbkIsT0FBT0wsK0RBQWlCQSxDQUFDSztBQUMzQjtBQUVBLFNBQVNFLGFBQWFDLE1BQU07SUFDMUIsTUFBTUMsVUFBVSxDQUFDO0lBQ2pCVixnRUFBa0JBLENBQUNVLFNBQVNEO0lBQzVCLE9BQU9SLCtEQUFpQkEsQ0FBQ1M7QUFDM0I7QUFFQSxTQUFTQyxvQkFBb0JDLFFBQVEsRUFBRUMsT0FBTztJQUM1QyxNQUFNUCxlQUFlSDtJQUVyQixJQUFJRyxnQkFBZ0JULDZEQUFjQSxDQUFDO1FBQUNnQjtRQUFTO1FBQWtCQyxDQUFBQSxJQUFLQSxFQUFFQyxhQUFhO0tBQUMsR0FBRztRQUNyRiwrR0FBK0c7UUFDL0csT0FBT0g7SUFDVDtJQUVBLE1BQU1JLFFBQVFsQiwwQ0FBYTtJQUUzQixNQUFNb0IsWUFBWVosZUFBZUwsK0RBQWlCQSxDQUFDSyxnQkFBZ0JDO0lBQ25FLE1BQU1ZLFNBQVNYLGFBQWFVO0lBQzVCaEIsNkRBQWVBLENBQUNjLE9BQU9HO0lBRXZCLE9BQU9ILE1BQU1JLElBQUksQ0FBQztRQUNoQixPQUFPUjtJQUNUO0FBQ0Y7QUFFQTs7Q0FFQyxHQUNELFNBQVNTO0lBQ1B0QixxRUFBdUJBLENBQUM7UUFBRU07UUFBZU07SUFBb0I7QUFDL0Q7QUFFeUMsQ0FDekMsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9lc20vYXN5bmMvZG9tYWluLmpzPzEwZTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX29wdGlvbmFsQ2hhaW4gfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCAqIGFzIGRvbWFpbiBmcm9tICdkb21haW4nO1xuaW1wb3J0IHsgc2V0QXN5bmNDb250ZXh0U3RyYXRlZ3ksIGVuc3VyZUh1Yk9uQ2FycmllciwgZ2V0SHViRnJvbUNhcnJpZXIsIHNldEh1Yk9uQ2FycmllciB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5cbmZ1bmN0aW9uIGdldEFjdGl2ZURvbWFpbigpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICByZXR1cm4gKGRvbWFpbiApLmFjdGl2ZSA7XG59XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRIdWIoKSB7XG4gIGNvbnN0IGFjdGl2ZURvbWFpbiA9IGdldEFjdGl2ZURvbWFpbigpO1xuXG4gIC8vIElmIHRoZXJlJ3Mgbm8gYWN0aXZlIGRvbWFpbiwganVzdCByZXR1cm4gdW5kZWZpbmVkIGFuZCB0aGUgZ2xvYmFsIGh1YiB3aWxsIGJlIHVzZWRcbiAgaWYgKCFhY3RpdmVEb21haW4pIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgZW5zdXJlSHViT25DYXJyaWVyKGFjdGl2ZURvbWFpbik7XG5cbiAgcmV0dXJuIGdldEh1YkZyb21DYXJyaWVyKGFjdGl2ZURvbWFpbik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU5ld0h1YihwYXJlbnQpIHtcbiAgY29uc3QgY2FycmllciA9IHt9O1xuICBlbnN1cmVIdWJPbkNhcnJpZXIoY2FycmllciwgcGFyZW50KTtcbiAgcmV0dXJuIGdldEh1YkZyb21DYXJyaWVyKGNhcnJpZXIpO1xufVxuXG5mdW5jdGlvbiBydW5XaXRoQXN5bmNDb250ZXh0KGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gIGNvbnN0IGFjdGl2ZURvbWFpbiA9IGdldEFjdGl2ZURvbWFpbigpO1xuXG4gIGlmIChhY3RpdmVEb21haW4gJiYgX29wdGlvbmFsQ2hhaW4oW29wdGlvbnMsICdvcHRpb25hbEFjY2VzcycsIF8gPT4gXy5yZXVzZUV4aXN0aW5nXSkpIHtcbiAgICAvLyBXZSdyZSBhbHJlYWR5IGluIGEgZG9tYWluLCBzbyB3ZSBkb24ndCBuZWVkIHRvIGNyZWF0ZSBhIG5ldyBvbmUsIGp1c3QgY2FsbCB0aGUgY2FsbGJhY2sgd2l0aCB0aGUgY3VycmVudCBodWJcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgfVxuXG4gIGNvbnN0IGxvY2FsID0gZG9tYWluLmNyZWF0ZSgpIDtcblxuICBjb25zdCBwYXJlbnRIdWIgPSBhY3RpdmVEb21haW4gPyBnZXRIdWJGcm9tQ2FycmllcihhY3RpdmVEb21haW4pIDogdW5kZWZpbmVkO1xuICBjb25zdCBuZXdIdWIgPSBjcmVhdGVOZXdIdWIocGFyZW50SHViKTtcbiAgc2V0SHViT25DYXJyaWVyKGxvY2FsLCBuZXdIdWIpO1xuXG4gIHJldHVybiBsb2NhbC5iaW5kKCgpID0+IHtcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgfSkoKTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBhc3luYyBjb250ZXh0IHN0cmF0ZWd5IHRvIHVzZSBOb2RlLmpzIGRvbWFpbnMuXG4gKi9cbmZ1bmN0aW9uIHNldERvbWFpbkFzeW5jQ29udGV4dFN0cmF0ZWd5KCkge1xuICBzZXRBc3luY0NvbnRleHRTdHJhdGVneSh7IGdldEN1cnJlbnRIdWIsIHJ1bldpdGhBc3luY0NvbnRleHQgfSk7XG59XG5cbmV4cG9ydCB7IHNldERvbWFpbkFzeW5jQ29udGV4dFN0cmF0ZWd5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kb21haW4uanMubWFwXG4iXSwibmFtZXMiOlsiX29wdGlvbmFsQ2hhaW4iLCJkb21haW4iLCJzZXRBc3luY0NvbnRleHRTdHJhdGVneSIsImVuc3VyZUh1Yk9uQ2FycmllciIsImdldEh1YkZyb21DYXJyaWVyIiwic2V0SHViT25DYXJyaWVyIiwiZ2V0QWN0aXZlRG9tYWluIiwiYWN0aXZlIiwiZ2V0Q3VycmVudEh1YiIsImFjdGl2ZURvbWFpbiIsInVuZGVmaW5lZCIsImNyZWF0ZU5ld0h1YiIsInBhcmVudCIsImNhcnJpZXIiLCJydW5XaXRoQXN5bmNDb250ZXh0IiwiY2FsbGJhY2siLCJvcHRpb25zIiwiXyIsInJldXNlRXhpc3RpbmciLCJsb2NhbCIsImNyZWF0ZSIsInBhcmVudEh1YiIsIm5ld0h1YiIsImJpbmQiLCJzZXREb21haW5Bc3luY0NvbnRleHRTdHJhdGVneSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/async/domain.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/async/hooks.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/node/esm/async/hooks.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setHooksAsyncContextStrategy: () => (/* binding */ setHooksAsyncContextStrategy)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var async_hooks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! async_hooks */ \"async_hooks\");\n/* harmony import */ var async_hooks__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(async_hooks__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\nlet asyncStorage;\n/**\n * Sets the async context strategy to use AsyncLocalStorage which requires Node v12.17.0 or v13.10.0.\n */ function setHooksAsyncContextStrategy() {\n    if (!asyncStorage) {\n        asyncStorage = new async_hooks__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage();\n    }\n    function getCurrentHub() {\n        return asyncStorage.getStore();\n    }\n    function createNewHub(parent) {\n        const carrier = {};\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.ensureHubOnCarrier)(carrier, parent);\n        return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.getHubFromCarrier)(carrier);\n    }\n    function runWithAsyncContext(callback, options) {\n        const existingHub = getCurrentHub();\n        if (existingHub && (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n            options,\n            \"optionalAccess\",\n            (_)=>_.reuseExisting\n        ])) {\n            // We're already in an async context, so we don't need to create a new one\n            // just call the callback with the current hub\n            return callback();\n        }\n        const newHub = createNewHub(existingHub);\n        return asyncStorage.run(newHub, ()=>{\n            return callback();\n        });\n    }\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.setAsyncContextStrategy)({\n        getCurrentHub,\n        runWithAsyncContext\n    });\n}\n //# sourceMappingURL=hooks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9hc3luYy9ob29rcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUErQztBQUMrQztBQUNuRDtBQUUzQyxJQUFJSztBQUVKOztDQUVDLEdBQ0QsU0FBU0M7SUFDUCxJQUFJLENBQUNELGNBQWM7UUFDakJBLGVBQWUsSUFBSSwwREFBZ0M7SUFDckQ7SUFFQSxTQUFTRztRQUNQLE9BQU9ILGFBQWFJLFFBQVE7SUFDOUI7SUFFQSxTQUFTQyxhQUFhQyxNQUFNO1FBQzFCLE1BQU1DLFVBQVUsQ0FBQztRQUNqQlYsZ0VBQWtCQSxDQUFDVSxTQUFTRDtRQUM1QixPQUFPUiwrREFBaUJBLENBQUNTO0lBQzNCO0lBRUEsU0FBU0Msb0JBQW9CQyxRQUFRLEVBQUVDLE9BQU87UUFDNUMsTUFBTUMsY0FBY1I7UUFFcEIsSUFBSVEsZUFBZWhCLDZEQUFjQSxDQUFDO1lBQUNlO1lBQVM7WUFBa0JFLENBQUFBLElBQUtBLEVBQUVDLGFBQWE7U0FBQyxHQUFHO1lBQ3BGLDBFQUEwRTtZQUMxRSw4Q0FBOEM7WUFDOUMsT0FBT0o7UUFDVDtRQUVBLE1BQU1LLFNBQVNULGFBQWFNO1FBRTVCLE9BQU9YLGFBQWFlLEdBQUcsQ0FBQ0QsUUFBUTtZQUM5QixPQUFPTDtRQUNUO0lBQ0Y7SUFFQWIscUVBQXVCQSxDQUFDO1FBQUVPO1FBQWVLO0lBQW9CO0FBQy9EO0FBRXdDLENBQ3hDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvZXNtL2FzeW5jL2hvb2tzLmpzPzdiYTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX29wdGlvbmFsQ2hhaW4gfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IHNldEFzeW5jQ29udGV4dFN0cmF0ZWd5LCBlbnN1cmVIdWJPbkNhcnJpZXIsIGdldEh1YkZyb21DYXJyaWVyIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCAqIGFzIGFzeW5jX2hvb2tzIGZyb20gJ2FzeW5jX2hvb2tzJztcblxubGV0IGFzeW5jU3RvcmFnZTtcblxuLyoqXG4gKiBTZXRzIHRoZSBhc3luYyBjb250ZXh0IHN0cmF0ZWd5IHRvIHVzZSBBc3luY0xvY2FsU3RvcmFnZSB3aGljaCByZXF1aXJlcyBOb2RlIHYxMi4xNy4wIG9yIHYxMy4xMC4wLlxuICovXG5mdW5jdGlvbiBzZXRIb29rc0FzeW5jQ29udGV4dFN0cmF0ZWd5KCkge1xuICBpZiAoIWFzeW5jU3RvcmFnZSkge1xuICAgIGFzeW5jU3RvcmFnZSA9IG5ldyAoYXN5bmNfaG9va3MgKS5Bc3luY0xvY2FsU3RvcmFnZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q3VycmVudEh1YigpIHtcbiAgICByZXR1cm4gYXN5bmNTdG9yYWdlLmdldFN0b3JlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVOZXdIdWIocGFyZW50KSB7XG4gICAgY29uc3QgY2FycmllciA9IHt9O1xuICAgIGVuc3VyZUh1Yk9uQ2FycmllcihjYXJyaWVyLCBwYXJlbnQpO1xuICAgIHJldHVybiBnZXRIdWJGcm9tQ2FycmllcihjYXJyaWVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1bldpdGhBc3luY0NvbnRleHQoY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgICBjb25zdCBleGlzdGluZ0h1YiA9IGdldEN1cnJlbnRIdWIoKTtcblxuICAgIGlmIChleGlzdGluZ0h1YiAmJiBfb3B0aW9uYWxDaGFpbihbb3B0aW9ucywgJ29wdGlvbmFsQWNjZXNzJywgXyA9PiBfLnJldXNlRXhpc3RpbmddKSkge1xuICAgICAgLy8gV2UncmUgYWxyZWFkeSBpbiBhbiBhc3luYyBjb250ZXh0LCBzbyB3ZSBkb24ndCBuZWVkIHRvIGNyZWF0ZSBhIG5ldyBvbmVcbiAgICAgIC8vIGp1c3QgY2FsbCB0aGUgY2FsbGJhY2sgd2l0aCB0aGUgY3VycmVudCBodWJcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIGNvbnN0IG5ld0h1YiA9IGNyZWF0ZU5ld0h1YihleGlzdGluZ0h1Yik7XG5cbiAgICByZXR1cm4gYXN5bmNTdG9yYWdlLnJ1bihuZXdIdWIsICgpID0+IHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH0pO1xuICB9XG5cbiAgc2V0QXN5bmNDb250ZXh0U3RyYXRlZ3koeyBnZXRDdXJyZW50SHViLCBydW5XaXRoQXN5bmNDb250ZXh0IH0pO1xufVxuXG5leHBvcnQgeyBzZXRIb29rc0FzeW5jQ29udGV4dFN0cmF0ZWd5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ob29rcy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJfb3B0aW9uYWxDaGFpbiIsInNldEFzeW5jQ29udGV4dFN0cmF0ZWd5IiwiZW5zdXJlSHViT25DYXJyaWVyIiwiZ2V0SHViRnJvbUNhcnJpZXIiLCJhc3luY19ob29rcyIsImFzeW5jU3RvcmFnZSIsInNldEhvb2tzQXN5bmNDb250ZXh0U3RyYXRlZ3kiLCJBc3luY0xvY2FsU3RvcmFnZSIsImdldEN1cnJlbnRIdWIiLCJnZXRTdG9yZSIsImNyZWF0ZU5ld0h1YiIsInBhcmVudCIsImNhcnJpZXIiLCJydW5XaXRoQXN5bmNDb250ZXh0IiwiY2FsbGJhY2siLCJvcHRpb25zIiwiZXhpc3RpbmdIdWIiLCJfIiwicmV1c2VFeGlzdGluZyIsIm5ld0h1YiIsInJ1biJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/async/hooks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/async/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/node/esm/async/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setNodeAsyncContextStrategy: () => (/* binding */ setNodeAsyncContextStrategy)\n/* harmony export */ });\n/* harmony import */ var _nodeVersion_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../nodeVersion.js */ \"(ssr)/./node_modules/@sentry/node/esm/nodeVersion.js\");\n/* harmony import */ var _domain_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./domain.js */ \"(ssr)/./node_modules/@sentry/node/esm/async/domain.js\");\n/* harmony import */ var _hooks_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hooks.js */ \"(ssr)/./node_modules/@sentry/node/esm/async/hooks.js\");\n\n\n\n/**\n * Sets the correct async context strategy for Node.js\n *\n * Node.js >= 14 uses AsyncLocalStorage\n * Node.js < 14 uses domains\n */ function setNodeAsyncContextStrategy() {\n    if (_nodeVersion_js__WEBPACK_IMPORTED_MODULE_0__.NODE_VERSION.major && _nodeVersion_js__WEBPACK_IMPORTED_MODULE_0__.NODE_VERSION.major >= 14) {\n        (0,_hooks_js__WEBPACK_IMPORTED_MODULE_1__.setHooksAsyncContextStrategy)();\n    } else {\n        (0,_domain_js__WEBPACK_IMPORTED_MODULE_2__.setDomainAsyncContextStrategy)();\n    }\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9hc3luYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWlEO0FBQ1c7QUFDRjtBQUUxRDs7Ozs7Q0FLQyxHQUNELFNBQVNHO0lBQ1AsSUFBSUgseURBQVlBLENBQUNJLEtBQUssSUFBSUoseURBQVlBLENBQUNJLEtBQUssSUFBSSxJQUFJO1FBQ2xERix1RUFBNEJBO0lBQzlCLE9BQU87UUFDTEQseUVBQTZCQTtJQUMvQjtBQUNGO0FBRXVDLENBQ3ZDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvZXNtL2FzeW5jL2luZGV4LmpzPzcyMTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTk9ERV9WRVJTSU9OIH0gZnJvbSAnLi4vbm9kZVZlcnNpb24uanMnO1xuaW1wb3J0IHsgc2V0RG9tYWluQXN5bmNDb250ZXh0U3RyYXRlZ3kgfSBmcm9tICcuL2RvbWFpbi5qcyc7XG5pbXBvcnQgeyBzZXRIb29rc0FzeW5jQ29udGV4dFN0cmF0ZWd5IH0gZnJvbSAnLi9ob29rcy5qcyc7XG5cbi8qKlxuICogU2V0cyB0aGUgY29ycmVjdCBhc3luYyBjb250ZXh0IHN0cmF0ZWd5IGZvciBOb2RlLmpzXG4gKlxuICogTm9kZS5qcyA+PSAxNCB1c2VzIEFzeW5jTG9jYWxTdG9yYWdlXG4gKiBOb2RlLmpzIDwgMTQgdXNlcyBkb21haW5zXG4gKi9cbmZ1bmN0aW9uIHNldE5vZGVBc3luY0NvbnRleHRTdHJhdGVneSgpIHtcbiAgaWYgKE5PREVfVkVSU0lPTi5tYWpvciAmJiBOT0RFX1ZFUlNJT04ubWFqb3IgPj0gMTQpIHtcbiAgICBzZXRIb29rc0FzeW5jQ29udGV4dFN0cmF0ZWd5KCk7XG4gIH0gZWxzZSB7XG4gICAgc2V0RG9tYWluQXN5bmNDb250ZXh0U3RyYXRlZ3koKTtcbiAgfVxufVxuXG5leHBvcnQgeyBzZXROb2RlQXN5bmNDb250ZXh0U3RyYXRlZ3kgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk5PREVfVkVSU0lPTiIsInNldERvbWFpbkFzeW5jQ29udGV4dFN0cmF0ZWd5Iiwic2V0SG9va3NBc3luY0NvbnRleHRTdHJhdGVneSIsInNldE5vZGVBc3luY0NvbnRleHRTdHJhdGVneSIsIm1ham9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/async/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/client.js":
/*!*************************************************!*\
  !*** ./node_modules/@sentry/node/esm/client.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NodeClient: () => (/* binding */ NodeClient)\n/* harmony export */ });\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! os */ \"os\");\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(os__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/server-runtime-client.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/version.js\");\n\n\n\n/**\n * The Sentry Node SDK Client.\n *\n * @see NodeClientOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */ class NodeClient extends _sentry_core__WEBPACK_IMPORTED_MODULE_2__.ServerRuntimeClient {\n    /**\n   * Creates a new Node SDK instance.\n   * @param options Configuration options for this SDK.\n   */ constructor(options){\n        options._metadata = options._metadata || {};\n        options._metadata.sdk = options._metadata.sdk || {\n            name: \"sentry.javascript.node\",\n            packages: [\n                {\n                    name: \"npm:@sentry/node\",\n                    version: _sentry_core__WEBPACK_IMPORTED_MODULE_3__.SDK_VERSION\n                }\n            ],\n            version: _sentry_core__WEBPACK_IMPORTED_MODULE_3__.SDK_VERSION\n        };\n        // Until node supports global TextEncoder in all versions we support, we are forced to pass it from util\n        options.transportOptions = {\n            textEncoder: new util__WEBPACK_IMPORTED_MODULE_1__.TextEncoder(),\n            ...options.transportOptions\n        };\n        const clientOptions = {\n            ...options,\n            platform: \"node\",\n            runtime: {\n                name: \"node\",\n                version: global.process.version\n            },\n            serverName: options.serverName || global.process.env.SENTRY_NAME || os__WEBPACK_IMPORTED_MODULE_0__.hostname()\n        };\n        super(clientOptions);\n    }\n}\n //# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9jbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUF5QjtBQUNVO0FBQzZCO0FBRWhFOzs7OztDQUtDLEdBQ0QsTUFBTUksbUJBQW1CRiw2REFBbUJBO0lBQzFDOzs7R0FHQyxHQUNBRyxZQUFZQyxPQUFPLENBQUU7UUFDcEJBLFFBQVFDLFNBQVMsR0FBR0QsUUFBUUMsU0FBUyxJQUFJLENBQUM7UUFDMUNELFFBQVFDLFNBQVMsQ0FBQ0MsR0FBRyxHQUFHRixRQUFRQyxTQUFTLENBQUNDLEdBQUcsSUFBSTtZQUMvQ0MsTUFBTTtZQUNOQyxVQUFVO2dCQUNSO29CQUNFRCxNQUFNO29CQUNORSxTQUFTUixxREFBV0E7Z0JBQ3RCO2FBQ0Q7WUFDRFEsU0FBU1IscURBQVdBO1FBQ3RCO1FBRUEsd0dBQXdHO1FBQ3hHRyxRQUFRTSxnQkFBZ0IsR0FBRztZQUN6QkMsYUFBYSxJQUFJWiw2Q0FBV0E7WUFDNUIsR0FBR0ssUUFBUU0sZ0JBQWdCO1FBQzdCO1FBRUEsTUFBTUUsZ0JBQWdCO1lBQ3BCLEdBQUdSLE9BQU87WUFDVlMsVUFBVTtZQUNWQyxTQUFTO2dCQUFFUCxNQUFNO2dCQUFRRSxTQUFTTSxPQUFPQyxPQUFPLENBQUNQLE9BQU87WUFBQztZQUN6RFEsWUFBWWIsUUFBUWEsVUFBVSxJQUFJRixPQUFPQyxPQUFPLENBQUNFLEdBQUcsQ0FBQ0MsV0FBVyxJQUFJckIsd0NBQVc7UUFDakY7UUFFQSxLQUFLLENBQUNjO0lBQ1I7QUFDRjtBQUVzQixDQUN0QixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9jbGllbnQuanM/Y2U5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7XG5pbXBvcnQgeyBUZXh0RW5jb2RlciB9IGZyb20gJ3V0aWwnO1xuaW1wb3J0IHsgU2VydmVyUnVudGltZUNsaWVudCwgU0RLX1ZFUlNJT04gfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuXG4vKipcbiAqIFRoZSBTZW50cnkgTm9kZSBTREsgQ2xpZW50LlxuICpcbiAqIEBzZWUgTm9kZUNsaWVudE9wdGlvbnMgZm9yIGRvY3VtZW50YXRpb24gb24gY29uZmlndXJhdGlvbiBvcHRpb25zLlxuICogQHNlZSBTZW50cnlDbGllbnQgZm9yIHVzYWdlIGRvY3VtZW50YXRpb24uXG4gKi9cbmNsYXNzIE5vZGVDbGllbnQgZXh0ZW5kcyBTZXJ2ZXJSdW50aW1lQ2xpZW50IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgTm9kZSBTREsgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSBvcHRpb25zIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhpcyBTREsuXG4gICAqL1xuICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIG9wdGlvbnMuX21ldGFkYXRhID0gb3B0aW9ucy5fbWV0YWRhdGEgfHwge307XG4gICAgb3B0aW9ucy5fbWV0YWRhdGEuc2RrID0gb3B0aW9ucy5fbWV0YWRhdGEuc2RrIHx8IHtcbiAgICAgIG5hbWU6ICdzZW50cnkuamF2YXNjcmlwdC5ub2RlJyxcbiAgICAgIHBhY2thZ2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnbnBtOkBzZW50cnkvbm9kZScsXG4gICAgICAgICAgdmVyc2lvbjogU0RLX1ZFUlNJT04sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgdmVyc2lvbjogU0RLX1ZFUlNJT04sXG4gICAgfTtcblxuICAgIC8vIFVudGlsIG5vZGUgc3VwcG9ydHMgZ2xvYmFsIFRleHRFbmNvZGVyIGluIGFsbCB2ZXJzaW9ucyB3ZSBzdXBwb3J0LCB3ZSBhcmUgZm9yY2VkIHRvIHBhc3MgaXQgZnJvbSB1dGlsXG4gICAgb3B0aW9ucy50cmFuc3BvcnRPcHRpb25zID0ge1xuICAgICAgdGV4dEVuY29kZXI6IG5ldyBUZXh0RW5jb2RlcigpLFxuICAgICAgLi4ub3B0aW9ucy50cmFuc3BvcnRPcHRpb25zLFxuICAgIH07XG5cbiAgICBjb25zdCBjbGllbnRPcHRpb25zID0ge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHBsYXRmb3JtOiAnbm9kZScsXG4gICAgICBydW50aW1lOiB7IG5hbWU6ICdub2RlJywgdmVyc2lvbjogZ2xvYmFsLnByb2Nlc3MudmVyc2lvbiB9LFxuICAgICAgc2VydmVyTmFtZTogb3B0aW9ucy5zZXJ2ZXJOYW1lIHx8IGdsb2JhbC5wcm9jZXNzLmVudi5TRU5UUllfTkFNRSB8fCBvcy5ob3N0bmFtZSgpLFxuICAgIH07XG5cbiAgICBzdXBlcihjbGllbnRPcHRpb25zKTtcbiAgfVxufVxuXG5leHBvcnQgeyBOb2RlQ2xpZW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGllbnQuanMubWFwXG4iXSwibmFtZXMiOlsib3MiLCJUZXh0RW5jb2RlciIsIlNlcnZlclJ1bnRpbWVDbGllbnQiLCJTREtfVkVSU0lPTiIsIk5vZGVDbGllbnQiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJfbWV0YWRhdGEiLCJzZGsiLCJuYW1lIiwicGFja2FnZXMiLCJ2ZXJzaW9uIiwidHJhbnNwb3J0T3B0aW9ucyIsInRleHRFbmNvZGVyIiwiY2xpZW50T3B0aW9ucyIsInBsYXRmb3JtIiwicnVudGltZSIsImdsb2JhbCIsInByb2Nlc3MiLCJzZXJ2ZXJOYW1lIiwiZW52IiwiU0VOVFJZX05BTUUiLCJob3N0bmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/debug-build.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/node/esm/debug-build.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEBUG_BUILD: () => (/* binding */ DEBUG_BUILD)\n/* harmony export */ });\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */ const DEBUG_BUILD =  false || false;\n //# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9kZWJ1Zy1idWlsZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Q0FJQyxHQUNELE1BQU1BLGNBQWUsTUFBNEIsSUFBZUMsS0FBZ0JBO0FBRXpELENBQ3ZCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvZXNtL2RlYnVnLWJ1aWxkLmpzP2E3ZGQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIHNlcnZlcyBhcyBhIGJ1aWxkIHRpbWUgZmxhZyB0aGF0IHdpbGwgYmUgdHJ1ZSBieSBkZWZhdWx0LCBidXQgZmFsc2UgaW4gbm9uLWRlYnVnIGJ1aWxkcyBvciBpZiB1c2VycyByZXBsYWNlIGBfX1NFTlRSWV9ERUJVR19fYCBpbiB0aGVpciBnZW5lcmF0ZWQgY29kZS5cbiAqXG4gKiBBVFRFTlRJT046IFRoaXMgY29uc3RhbnQgbXVzdCBuZXZlciBjcm9zcyBwYWNrYWdlIGJvdW5kYXJpZXMgKGkuZS4gYmUgZXhwb3J0ZWQpIHRvIGd1YXJhbnRlZSB0aGF0IGl0IGNhbiBiZSB1c2VkIGZvciB0cmVlIHNoYWtpbmcuXG4gKi9cbmNvbnN0IERFQlVHX0JVSUxEID0gKHR5cGVvZiBfX1NFTlRSWV9ERUJVR19fID09PSAndW5kZWZpbmVkJyB8fCBfX1NFTlRSWV9ERUJVR19fKTtcblxuZXhwb3J0IHsgREVCVUdfQlVJTEQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLWJ1aWxkLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkRFQlVHX0JVSUxEIiwiX19TRU5UUllfREVCVUdfXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/debug-build.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/handlers.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/node/esm/handlers.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   errorHandler: () => (/* binding */ errorHandler),\n/* harmony export */   extractRequestData: () => (/* reexport safe */ _requestDataDeprecated_js__WEBPACK_IMPORTED_MODULE_0__.extractRequestData),\n/* harmony export */   parseRequest: () => (/* reexport safe */ _requestDataDeprecated_js__WEBPACK_IMPORTED_MODULE_0__.parseRequest),\n/* harmony export */   requestHandler: () => (/* binding */ requestHandler),\n/* harmony export */   tracingHandler: () => (/* binding */ tracingHandler),\n/* harmony export */   trpcMiddleware: () => (/* binding */ trpcMiddleware)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/utils/hasTracingEnabled.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/trace.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/exports.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/requestdata.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/normalize.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/node/esm/debug-build.js\");\n/* harmony import */ var _sdk_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./sdk.js */ \"(ssr)/./node_modules/@sentry/node/esm/sdk.js\");\n/* harmony import */ var _requestDataDeprecated_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./requestDataDeprecated.js */ \"(ssr)/./node_modules/@sentry/node/esm/requestDataDeprecated.js\");\n\n\n\n\n\n\n/**\n * Express-compatible tracing handler.\n * @see Exposed as `Handlers.tracingHandler`\n */ function tracingHandler() {\n    return function sentryTracingMiddleware(req, res, next) {\n        const hub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.getCurrentHub)();\n        const options = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n            hub,\n            \"access\",\n            (_)=>_.getClient,\n            \"call\",\n            (_2)=>_2(),\n            \"optionalAccess\",\n            (_3)=>_3.getOptions,\n            \"call\",\n            (_4)=>_4()\n        ]);\n        if (!options || options.instrumenter !== \"sentry\" || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n            req,\n            \"access\",\n            (_5)=>_5.method,\n            \"optionalAccess\",\n            (_6)=>_6.toUpperCase,\n            \"call\",\n            (_7)=>_7()\n        ]) === \"OPTIONS\" || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n            req,\n            \"access\",\n            (_8)=>_8.method,\n            \"optionalAccess\",\n            (_9)=>_9.toUpperCase,\n            \"call\",\n            (_10)=>_10()\n        ]) === \"HEAD\") {\n            return next();\n        }\n        const sentryTrace = req.headers && (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.isString)(req.headers[\"sentry-trace\"]) ? req.headers[\"sentry-trace\"] : undefined;\n        const baggage = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n            req,\n            \"access\",\n            (_11)=>_11.headers,\n            \"optionalAccess\",\n            (_12)=>_12.baggage\n        ]);\n        if (!(0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.hasTracingEnabled)(options)) {\n            return next();\n        }\n        const [name, source] = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.extractPathForTransaction)(req, {\n            path: true,\n            method: true\n        });\n        const transaction = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_6__.continueTrace)({\n            sentryTrace,\n            baggage\n        }, (ctx)=>(0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.startTransaction)({\n                name,\n                op: \"http.server\",\n                origin: \"auto.http.node.tracingHandler\",\n                ...ctx,\n                metadata: {\n                    ...ctx.metadata,\n                    // The request should already have been stored in `scope.sdkProcessingMetadata` (which will become\n                    // `event.sdkProcessingMetadata` the same way the metadata here will) by `sentryRequestMiddleware`, but on the\n                    // off chance someone is using `sentryTracingMiddleware` without `sentryRequestMiddleware`, it doesn't hurt to\n                    // be sure\n                    request: req,\n                    source\n                }\n            }, // extra context passed to the tracesSampler\n            {\n                request: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.extractRequestData)(req)\n            }));\n        // We put the transaction on the scope so users can attach children to it\n        hub.configureScope((scope)=>{\n            scope.setSpan(transaction);\n        });\n        // We also set __sentry_transaction on the response so people can grab the transaction there to add\n        // spans to it later.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        res.__sentry_transaction = transaction;\n        res.once(\"finish\", ()=>{\n            // Push `transaction.finish` to the next event loop so open spans have a chance to finish before the transaction\n            // closes\n            setImmediate(()=>{\n                (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.addRequestDataToTransaction)(transaction, req);\n                transaction.setHttpStatus(res.statusCode);\n                transaction.finish();\n            });\n        });\n        next();\n    };\n}\n/**\n * Backwards compatibility shim which can be removed in v8. Forces the given options to follow the\n * `AddRequestDataToEventOptions` interface.\n *\n * TODO (v8): Get rid of this, and stop passing `requestDataOptionsFromExpressHandler` to `setSDKProcessingMetadata`.\n */ function convertReqHandlerOptsToAddReqDataOpts(reqHandlerOptions = {}) {\n    let addRequestDataOptions;\n    if (\"include\" in reqHandlerOptions) {\n        addRequestDataOptions = {\n            include: reqHandlerOptions.include\n        };\n    } else {\n        // eslint-disable-next-line deprecation/deprecation\n        const { ip, request, transaction, user } = reqHandlerOptions;\n        if (ip || request || transaction || user) {\n            addRequestDataOptions = {\n                include: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_8__.dropUndefinedKeys)({\n                    ip,\n                    request,\n                    transaction,\n                    user\n                })\n            };\n        }\n    }\n    return addRequestDataOptions;\n}\n/**\n * Express compatible request handler.\n * @see Exposed as `Handlers.requestHandler`\n */ function requestHandler(options) {\n    // TODO (v8): Get rid of this\n    const requestDataOptions = convertReqHandlerOptsToAddReqDataOpts(options);\n    const currentHub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.getCurrentHub)();\n    const client = currentHub.getClient();\n    // Initialise an instance of SessionFlusher on the client when `autoSessionTracking` is enabled and the\n    // `requestHandler` middleware is used indicating that we are running in SessionAggregates mode\n    if (client && (0,_sdk_js__WEBPACK_IMPORTED_MODULE_9__.isAutoSessionTrackingEnabled)(client)) {\n        client.initSessionFlusher();\n        // If Scope contains a Single mode Session, it is removed in favor of using Session Aggregates mode\n        const scope = currentHub.getScope();\n        if (scope.getSession()) {\n            scope.setSession();\n        }\n    }\n    return function sentryRequestMiddleware(req, res, next) {\n        if (options && options.flushTimeout && options.flushTimeout > 0) {\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            const _end = res.end;\n            res.end = function(chunk, encoding, cb) {\n                void (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.flush)(options.flushTimeout).then(()=>{\n                    _end.call(this, chunk, encoding, cb);\n                }).then(null, (e)=>{\n                    _debug_build_js__WEBPACK_IMPORTED_MODULE_10__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_11__.logger.error(e);\n                    _end.call(this, chunk, encoding, cb);\n                });\n            };\n        }\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.runWithAsyncContext)(()=>{\n            const currentHub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.getCurrentHub)();\n            currentHub.configureScope((scope)=>{\n                scope.setSDKProcessingMetadata({\n                    request: req,\n                    // TODO (v8): Stop passing this\n                    requestDataOptionsFromExpressHandler: requestDataOptions\n                });\n                const client = currentHub.getClient();\n                if ((0,_sdk_js__WEBPACK_IMPORTED_MODULE_9__.isAutoSessionTrackingEnabled)(client)) {\n                    const scope = currentHub.getScope();\n                    // Set `status` of `RequestSession` to Ok, at the beginning of the request\n                    scope.setRequestSession({\n                        status: \"ok\"\n                    });\n                }\n            });\n            res.once(\"finish\", ()=>{\n                const client = currentHub.getClient();\n                if ((0,_sdk_js__WEBPACK_IMPORTED_MODULE_9__.isAutoSessionTrackingEnabled)(client)) {\n                    setImmediate(()=>{\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                        if (client && client._captureRequestSession) {\n                            // Calling _captureRequestSession to capture request session at the end of the request by incrementing\n                            // the correct SessionAggregates bucket i.e. crashed, errored or exited\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                            client._captureRequestSession();\n                        }\n                    });\n                }\n            });\n            next();\n        });\n    };\n}\n/** JSDoc */ /** JSDoc */ function getStatusCodeFromResponse(error) {\n    const statusCode = error.status || error.statusCode || error.status_code || error.output && error.output.statusCode;\n    return statusCode ? parseInt(statusCode, 10) : 500;\n}\n/** Returns true if response code is internal server error */ function defaultShouldHandleError(error) {\n    const status = getStatusCodeFromResponse(error);\n    return status >= 500;\n}\n/**\n * Express compatible error handler.\n * @see Exposed as `Handlers.errorHandler`\n */ function errorHandler(options) {\n    return function sentryErrorMiddleware(error, _req, res, next) {\n        const shouldHandleError = options && options.shouldHandleError || defaultShouldHandleError;\n        if (shouldHandleError(error)) {\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.withScope)((_scope)=>{\n                // The request should already have been stored in `scope.sdkProcessingMetadata` by `sentryRequestMiddleware`,\n                // but on the off chance someone is using `sentryErrorMiddleware` without `sentryRequestMiddleware`, it doesn't\n                // hurt to be sure\n                _scope.setSDKProcessingMetadata({\n                    request: _req\n                });\n                // For some reason we need to set the transaction on the scope again\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                const transaction = res.__sentry_transaction;\n                if (transaction && _scope.getSpan() === undefined) {\n                    _scope.setSpan(transaction);\n                }\n                const client = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.getClient)();\n                if (client && (0,_sdk_js__WEBPACK_IMPORTED_MODULE_9__.isAutoSessionTrackingEnabled)(client)) {\n                    // Check if the `SessionFlusher` is instantiated on the client to go into this branch that marks the\n                    // `requestSession.status` as `Crashed`, and this check is necessary because the `SessionFlusher` is only\n                    // instantiated when the the`requestHandler` middleware is initialised, which indicates that we should be\n                    // running in SessionAggregates mode\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                    const isSessionAggregatesMode = client._sessionFlusher !== undefined;\n                    if (isSessionAggregatesMode) {\n                        const requestSession = _scope.getRequestSession();\n                        // If an error bubbles to the `errorHandler`, then this is an unhandled error, and should be reported as a\n                        // Crashed session. The `_requestSession.status` is checked to ensure that this error is happening within\n                        // the bounds of a request, and if so the status is updated\n                        if (requestSession && requestSession.status !== undefined) {\n                            requestSession.status = \"crashed\";\n                        }\n                    }\n                }\n                const eventId = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.captureException)(error, {\n                    mechanism: {\n                        type: \"middleware\",\n                        handled: false\n                    }\n                });\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                res.sentry = eventId;\n                next(error);\n            });\n            return;\n        }\n        next(error);\n    };\n}\n/**\n * Sentry tRPC middleware that names the handling transaction after the called procedure.\n *\n * Use the Sentry tRPC middleware in combination with the Sentry server integration,\n * e.g. Express Request Handlers or Next.js SDK.\n */ function trpcMiddleware(options = {}) {\n    return function({ path, type, next, rawInput }) {\n        const hub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.getCurrentHub)();\n        const clientOptions = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n            hub,\n            \"access\",\n            (_13)=>_13.getClient,\n            \"call\",\n            (_14)=>_14(),\n            \"optionalAccess\",\n            (_15)=>_15.getOptions,\n            \"call\",\n            (_16)=>_16()\n        ]);\n        const sentryTransaction = hub.getScope().getTransaction();\n        if (sentryTransaction) {\n            sentryTransaction.setName(`trpc/${path}`, \"route\");\n            sentryTransaction.op = \"rpc.server\";\n            const trpcContext = {\n                procedure_type: type\n            };\n            if (options.attachRpcInput !== undefined ? options.attachRpcInput : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n                clientOptions,\n                \"optionalAccess\",\n                (_17)=>_17.sendDefaultPii\n            ])) {\n                trpcContext.input = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_12__.normalize)(rawInput);\n            }\n            sentryTransaction.setContext(\"trpc\", trpcContext);\n        }\n        function captureIfError(nextResult) {\n            if (!nextResult.ok) {\n                (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.captureException)(nextResult.error, {\n                    mechanism: {\n                        handled: false,\n                        data: {\n                            function: \"trpcMiddleware\"\n                        }\n                    }\n                });\n            }\n        }\n        let maybePromiseResult;\n        try {\n            maybePromiseResult = next();\n        } catch (e) {\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.captureException)(e, {\n                mechanism: {\n                    handled: false,\n                    data: {\n                        function: \"trpcMiddleware\"\n                    }\n                }\n            });\n            throw e;\n        }\n        if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.isThenable)(maybePromiseResult)) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            Promise.resolve(maybePromiseResult).then((nextResult)=>{\n                captureIfError(nextResult);\n            }, (e)=>{\n                (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.captureException)(e, {\n                    mechanism: {\n                        handled: false,\n                        data: {\n                            function: \"trpcMiddleware\"\n                        }\n                    }\n                });\n            });\n        } else {\n            captureIfError(maybePromiseResult);\n        }\n        // We return the original promise just to be safe.\n        return maybePromiseResult;\n    };\n}\n //# sourceMappingURL=handlers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/handlers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/index.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/node/esm/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_USER_INCLUDES: () => (/* reexport safe */ _sentry_utils__WEBPACK_IMPORTED_MODULE_16__.DEFAULT_USER_INCLUDES),\n/* harmony export */   Handlers: () => (/* reexport module object */ _handlers_js__WEBPACK_IMPORTED_MODULE_20__),\n/* harmony export */   Hub: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_0__.Hub),\n/* harmony export */   Integrations: () => (/* binding */ INTEGRATIONS),\n/* harmony export */   NodeClient: () => (/* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_13__.NodeClient),\n/* harmony export */   SDK_VERSION: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION),\n/* harmony export */   Scope: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_2__.Scope),\n/* harmony export */   addBreadcrumb: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.addBreadcrumb),\n/* harmony export */   addEventProcessor: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_4__.addEventProcessor),\n/* harmony export */   addGlobalEventProcessor: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_5__.addGlobalEventProcessor),\n/* harmony export */   addIntegration: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_6__.addIntegration),\n/* harmony export */   addRequestDataToEvent: () => (/* reexport safe */ _sentry_utils__WEBPACK_IMPORTED_MODULE_16__.addRequestDataToEvent),\n/* harmony export */   autoDiscoverNodePerformanceMonitoringIntegrations: () => (/* reexport safe */ _tracing_index_js__WEBPACK_IMPORTED_MODULE_12__.autoDiscoverNodePerformanceMonitoringIntegrations),\n/* harmony export */   captureCheckIn: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.captureCheckIn),\n/* harmony export */   captureEvent: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.captureEvent),\n/* harmony export */   captureException: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.captureException),\n/* harmony export */   captureMessage: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.captureMessage),\n/* harmony export */   close: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.close),\n/* harmony export */   configureScope: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.configureScope),\n/* harmony export */   continueTrace: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_7__.continueTrace),\n/* harmony export */   createTransport: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_8__.createTransport),\n/* harmony export */   deepReadDirSync: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_17__.deepReadDirSync),\n/* harmony export */   defaultIntegrations: () => (/* reexport safe */ _sdk_js__WEBPACK_IMPORTED_MODULE_15__.defaultIntegrations),\n/* harmony export */   defaultStackParser: () => (/* reexport safe */ _sdk_js__WEBPACK_IMPORTED_MODULE_15__.defaultStackParser),\n/* harmony export */   enableAnrDetection: () => (/* reexport safe */ _anr_index_js__WEBPACK_IMPORTED_MODULE_19__.enableAnrDetection),\n/* harmony export */   extractRequestData: () => (/* reexport safe */ _sentry_utils__WEBPACK_IMPORTED_MODULE_16__.extractRequestData),\n/* harmony export */   extractTraceparentData: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_9__.extractTraceparentData),\n/* harmony export */   flush: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.flush),\n/* harmony export */   getActiveSpan: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_7__.getActiveSpan),\n/* harmony export */   getActiveTransaction: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_9__.getActiveTransaction),\n/* harmony export */   getClient: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.getClient),\n/* harmony export */   getCurrentHub: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub),\n/* harmony export */   getCurrentScope: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.getCurrentScope),\n/* harmony export */   getHubFromCarrier: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_0__.getHubFromCarrier),\n/* harmony export */   getModuleFromFilename: () => (/* reexport safe */ _module_js__WEBPACK_IMPORTED_MODULE_18__.getModuleFromFilename),\n/* harmony export */   getSentryRelease: () => (/* reexport safe */ _sdk_js__WEBPACK_IMPORTED_MODULE_15__.getSentryRelease),\n/* harmony export */   init: () => (/* reexport safe */ _sdk_js__WEBPACK_IMPORTED_MODULE_15__.init),\n/* harmony export */   lastEventId: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.lastEventId),\n/* harmony export */   makeMain: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_0__.makeMain),\n/* harmony export */   makeNodeTransport: () => (/* reexport safe */ _transports_http_js__WEBPACK_IMPORTED_MODULE_14__.makeNodeTransport),\n/* harmony export */   runWithAsyncContext: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_0__.runWithAsyncContext),\n/* harmony export */   setContext: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.setContext),\n/* harmony export */   setExtra: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.setExtra),\n/* harmony export */   setExtras: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.setExtras),\n/* harmony export */   setMeasurement: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_10__.setMeasurement),\n/* harmony export */   setTag: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.setTag),\n/* harmony export */   setTags: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.setTags),\n/* harmony export */   setUser: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.setUser),\n/* harmony export */   spanStatusfromHttpCode: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_11__.spanStatusfromHttpCode),\n/* harmony export */   startActiveSpan: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_7__.startActiveSpan),\n/* harmony export */   startInactiveSpan: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_7__.startInactiveSpan),\n/* harmony export */   startSpan: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_7__.startSpan),\n/* harmony export */   startSpanManual: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_7__.startSpanManual),\n/* harmony export */   startTransaction: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.startTransaction),\n/* harmony export */   trace: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_7__.trace),\n/* harmony export */   withMonitor: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.withMonitor),\n/* harmony export */   withScope: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.withScope)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/integrations/index.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/version.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/scope.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/exports.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/baseclient.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/eventProcessors.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/integration.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/trace.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/transports/base.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/utils.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/measurement.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/span.js\");\n/* harmony import */ var _tracing_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./tracing/index.js */ \"(ssr)/./node_modules/@sentry/node/esm/tracing/index.js\");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./client.js */ \"(ssr)/./node_modules/@sentry/node/esm/client.js\");\n/* harmony import */ var _transports_http_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./transports/http.js */ \"(ssr)/./node_modules/@sentry/node/esm/transports/http.js\");\n/* harmony import */ var _sdk_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./sdk.js */ \"(ssr)/./node_modules/@sentry/node/esm/sdk.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/requestdata.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@sentry/node/esm/utils.js\");\n/* harmony import */ var _module_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./module.js */ \"(ssr)/./node_modules/@sentry/node/esm/module.js\");\n/* harmony import */ var _anr_index_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./anr/index.js */ \"(ssr)/./node_modules/@sentry/node/esm/anr/index.js\");\n/* harmony import */ var _handlers_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./handlers.js */ \"(ssr)/./node_modules/@sentry/node/esm/handlers.js\");\n/* harmony import */ var _integrations_index_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./integrations/index.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/index.js\");\n/* harmony import */ var _tracing_integrations_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./tracing/integrations.js */ \"(ssr)/./node_modules/@sentry/node/esm/tracing/integrations.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst INTEGRATIONS = {\n    ..._sentry_core__WEBPACK_IMPORTED_MODULE_21__,\n    ..._integrations_index_js__WEBPACK_IMPORTED_MODULE_22__,\n    ..._tracing_integrations_js__WEBPACK_IMPORTED_MODULE_23__\n};\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNEM7QUFDK2tCO0FBQ3BpQjtBQUM5QztBQUNnQjtBQUNrQztBQUNNO0FBQ3BEO0FBQ087QUFDQTtBQUNWO0FBQ1Y7QUFDaUI7QUFDUztBQUUxRCxNQUFNNEQsZUFBZTtJQUNuQixHQUFHNUQsMENBQVk7SUFDZixHQUFHMEQsb0RBQUs7SUFDUixHQUFHQyxzREFBWTtBQUNqQjtBQUV3QyxDQUN4QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9pbmRleC5qcz8yNDQ5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEludGVncmF0aW9ucyB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5leHBvcnQgeyBIdWIsIFNES19WRVJTSU9OLCBTY29wZSwgYWRkQnJlYWRjcnVtYiwgYWRkRXZlbnRQcm9jZXNzb3IsIGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yLCBhZGRJbnRlZ3JhdGlvbiwgY2FwdHVyZUNoZWNrSW4sIGNhcHR1cmVFdmVudCwgY2FwdHVyZUV4Y2VwdGlvbiwgY2FwdHVyZU1lc3NhZ2UsIGNsb3NlLCBjb25maWd1cmVTY29wZSwgY29udGludWVUcmFjZSwgY3JlYXRlVHJhbnNwb3J0LCBleHRyYWN0VHJhY2VwYXJlbnREYXRhLCBmbHVzaCwgZ2V0QWN0aXZlU3BhbiwgZ2V0QWN0aXZlVHJhbnNhY3Rpb24sIGdldENsaWVudCwgZ2V0Q3VycmVudEh1YiwgZ2V0Q3VycmVudFNjb3BlLCBnZXRIdWJGcm9tQ2FycmllciwgbGFzdEV2ZW50SWQsIG1ha2VNYWluLCBydW5XaXRoQXN5bmNDb250ZXh0LCBzZXRDb250ZXh0LCBzZXRFeHRyYSwgc2V0RXh0cmFzLCBzZXRNZWFzdXJlbWVudCwgc2V0VGFnLCBzZXRUYWdzLCBzZXRVc2VyLCBzcGFuU3RhdHVzZnJvbUh0dHBDb2RlLCBzdGFydEFjdGl2ZVNwYW4sIHN0YXJ0SW5hY3RpdmVTcGFuLCBzdGFydFNwYW4sIHN0YXJ0U3Bhbk1hbnVhbCwgc3RhcnRUcmFuc2FjdGlvbiwgdHJhY2UsIHdpdGhNb25pdG9yLCB3aXRoU2NvcGUgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuZXhwb3J0IHsgYXV0b0Rpc2NvdmVyTm9kZVBlcmZvcm1hbmNlTW9uaXRvcmluZ0ludGVncmF0aW9ucyB9IGZyb20gJy4vdHJhY2luZy9pbmRleC5qcyc7XG5leHBvcnQgeyBOb2RlQ2xpZW50IH0gZnJvbSAnLi9jbGllbnQuanMnO1xuZXhwb3J0IHsgbWFrZU5vZGVUcmFuc3BvcnQgfSBmcm9tICcuL3RyYW5zcG9ydHMvaHR0cC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0SW50ZWdyYXRpb25zLCBkZWZhdWx0U3RhY2tQYXJzZXIsIGdldFNlbnRyeVJlbGVhc2UsIGluaXQgfSBmcm9tICcuL3Nkay5qcyc7XG5leHBvcnQgeyBERUZBVUxUX1VTRVJfSU5DTFVERVMsIGFkZFJlcXVlc3REYXRhVG9FdmVudCwgZXh0cmFjdFJlcXVlc3REYXRhIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5leHBvcnQgeyBkZWVwUmVhZERpclN5bmMgfSBmcm9tICcuL3V0aWxzLmpzJztcbmV4cG9ydCB7IGdldE1vZHVsZUZyb21GaWxlbmFtZSB9IGZyb20gJy4vbW9kdWxlLmpzJztcbmV4cG9ydCB7IGVuYWJsZUFuckRldGVjdGlvbiB9IGZyb20gJy4vYW5yL2luZGV4LmpzJztcbmltcG9ydCAqIGFzIGhhbmRsZXJzIGZyb20gJy4vaGFuZGxlcnMuanMnO1xuZXhwb3J0IHsgaGFuZGxlcnMgYXMgSGFuZGxlcnMgfTtcbmltcG9ydCAqIGFzIGluZGV4IGZyb20gJy4vaW50ZWdyYXRpb25zL2luZGV4LmpzJztcbmltcG9ydCAqIGFzIGludGVncmF0aW9ucyBmcm9tICcuL3RyYWNpbmcvaW50ZWdyYXRpb25zLmpzJztcblxuY29uc3QgSU5URUdSQVRJT05TID0ge1xuICAuLi5JbnRlZ3JhdGlvbnMsXG4gIC4uLmluZGV4LFxuICAuLi5pbnRlZ3JhdGlvbnMsXG59O1xuXG5leHBvcnQgeyBJTlRFR1JBVElPTlMgYXMgSW50ZWdyYXRpb25zIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJJbnRlZ3JhdGlvbnMiLCJIdWIiLCJTREtfVkVSU0lPTiIsIlNjb3BlIiwiYWRkQnJlYWRjcnVtYiIsImFkZEV2ZW50UHJvY2Vzc29yIiwiYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IiLCJhZGRJbnRlZ3JhdGlvbiIsImNhcHR1cmVDaGVja0luIiwiY2FwdHVyZUV2ZW50IiwiY2FwdHVyZUV4Y2VwdGlvbiIsImNhcHR1cmVNZXNzYWdlIiwiY2xvc2UiLCJjb25maWd1cmVTY29wZSIsImNvbnRpbnVlVHJhY2UiLCJjcmVhdGVUcmFuc3BvcnQiLCJleHRyYWN0VHJhY2VwYXJlbnREYXRhIiwiZmx1c2giLCJnZXRBY3RpdmVTcGFuIiwiZ2V0QWN0aXZlVHJhbnNhY3Rpb24iLCJnZXRDbGllbnQiLCJnZXRDdXJyZW50SHViIiwiZ2V0Q3VycmVudFNjb3BlIiwiZ2V0SHViRnJvbUNhcnJpZXIiLCJsYXN0RXZlbnRJZCIsIm1ha2VNYWluIiwicnVuV2l0aEFzeW5jQ29udGV4dCIsInNldENvbnRleHQiLCJzZXRFeHRyYSIsInNldEV4dHJhcyIsInNldE1lYXN1cmVtZW50Iiwic2V0VGFnIiwic2V0VGFncyIsInNldFVzZXIiLCJzcGFuU3RhdHVzZnJvbUh0dHBDb2RlIiwic3RhcnRBY3RpdmVTcGFuIiwic3RhcnRJbmFjdGl2ZVNwYW4iLCJzdGFydFNwYW4iLCJzdGFydFNwYW5NYW51YWwiLCJzdGFydFRyYW5zYWN0aW9uIiwidHJhY2UiLCJ3aXRoTW9uaXRvciIsIndpdGhTY29wZSIsImF1dG9EaXNjb3Zlck5vZGVQZXJmb3JtYW5jZU1vbml0b3JpbmdJbnRlZ3JhdGlvbnMiLCJOb2RlQ2xpZW50IiwibWFrZU5vZGVUcmFuc3BvcnQiLCJkZWZhdWx0SW50ZWdyYXRpb25zIiwiZGVmYXVsdFN0YWNrUGFyc2VyIiwiZ2V0U2VudHJ5UmVsZWFzZSIsImluaXQiLCJERUZBVUxUX1VTRVJfSU5DTFVERVMiLCJhZGRSZXF1ZXN0RGF0YVRvRXZlbnQiLCJleHRyYWN0UmVxdWVzdERhdGEiLCJkZWVwUmVhZERpclN5bmMiLCJnZXRNb2R1bGVGcm9tRmlsZW5hbWUiLCJlbmFibGVBbnJEZXRlY3Rpb24iLCJoYW5kbGVycyIsIkhhbmRsZXJzIiwiaW5kZXgiLCJpbnRlZ3JhdGlvbnMiLCJJTlRFR1JBVElPTlMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/integrations/console.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/node/esm/integrations/console.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Console: () => (/* binding */ Console)\n/* harmony export */ });\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/instrument/console.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/severity.js\");\n\n\n\n/** Console module integration */ class Console {\n    constructor(){\n        Console.prototype.__init.call(this);\n    }\n    /**\n   * @inheritDoc\n   */ static __initStatic() {\n        this.id = \"Console\";\n    }\n    /**\n   * @inheritDoc\n   */ __init() {\n        this.name = Console.id;\n    }\n    /**\n   * @inheritDoc\n   */ setupOnce() {\n        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.addConsoleInstrumentationHandler)(({ args, level })=>{\n            const hub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.getCurrentHub)();\n            if (!hub.getIntegration(Console)) {\n                return;\n            }\n            hub.addBreadcrumb({\n                category: \"console\",\n                level: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.severityLevelFromString)(level),\n                message: util__WEBPACK_IMPORTED_MODULE_0__.format.apply(undefined, args)\n            }, {\n                input: [\n                    ...args\n                ],\n                level\n            });\n        });\n    }\n}\nConsole.__initStatic();\n //# sourceMappingURL=console.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9pbnRlZ3JhdGlvbnMvY29uc29sZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBNkI7QUFDZ0I7QUFDNkM7QUFFMUYsK0JBQStCLEdBQy9CLE1BQU1JO0lBQVVDLGFBQWM7UUFBRUQsUUFBUUUsU0FBUyxDQUFDQyxNQUFNLENBQUNDLElBQUksQ0FBQyxJQUFJO0lBQUc7SUFDbkU7O0dBRUMsR0FDQSxPQUFPQyxlQUFlO1FBQUMsSUFBSSxDQUFDQyxFQUFFLEdBQUc7SUFBVTtJQUU1Qzs7R0FFQyxHQUNBSCxTQUFTO1FBQUMsSUFBSSxDQUFDSSxJQUFJLEdBQUdQLFFBQVFNLEVBQUU7SUFBQztJQUVsQzs7R0FFQyxHQUNBRSxZQUFZO1FBQ1hWLCtFQUFnQ0EsQ0FBQyxDQUFDLEVBQUVXLElBQUksRUFBRUMsS0FBSyxFQUFFO1lBQy9DLE1BQU1DLE1BQU1kLDJEQUFhQTtZQUV6QixJQUFJLENBQUNjLElBQUlDLGNBQWMsQ0FBQ1osVUFBVTtnQkFDaEM7WUFDRjtZQUVBVyxJQUFJRSxhQUFhLENBQ2Y7Z0JBQ0VDLFVBQVU7Z0JBQ1ZKLE9BQU9YLHNFQUF1QkEsQ0FBQ1c7Z0JBQy9CSyxTQUFTbkIsd0NBQVcsQ0FBQ3FCLEtBQUssQ0FBQ0MsV0FBV1Q7WUFDeEMsR0FDQTtnQkFDRVUsT0FBTzt1QkFBSVY7aUJBQUs7Z0JBQ2hCQztZQUNGO1FBRUo7SUFDRjtBQUNGO0FBQUVWLFFBQVFLLFlBQVk7QUFFSCxDQUNuQixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9pbnRlZ3JhdGlvbnMvY29uc29sZS5qcz84ZjUwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHV0aWwgZnJvbSAndXRpbCc7XG5pbXBvcnQgeyBnZXRDdXJyZW50SHViIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IGFkZENvbnNvbGVJbnN0cnVtZW50YXRpb25IYW5kbGVyLCBzZXZlcml0eUxldmVsRnJvbVN0cmluZyB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuXG4vKiogQ29uc29sZSBtb2R1bGUgaW50ZWdyYXRpb24gKi9cbmNsYXNzIENvbnNvbGUgIHtjb25zdHJ1Y3RvcigpIHsgQ29uc29sZS5wcm90b3R5cGUuX19pbml0LmNhbGwodGhpcyk7IH1cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAgc3RhdGljIF9faW5pdFN0YXRpYygpIHt0aGlzLmlkID0gJ0NvbnNvbGUnO31cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBfX2luaXQoKSB7dGhpcy5uYW1lID0gQ29uc29sZS5pZDt9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAgc2V0dXBPbmNlKCkge1xuICAgIGFkZENvbnNvbGVJbnN0cnVtZW50YXRpb25IYW5kbGVyKCh7IGFyZ3MsIGxldmVsIH0pID0+IHtcbiAgICAgIGNvbnN0IGh1YiA9IGdldEN1cnJlbnRIdWIoKTtcblxuICAgICAgaWYgKCFodWIuZ2V0SW50ZWdyYXRpb24oQ29uc29sZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBodWIuYWRkQnJlYWRjcnVtYihcbiAgICAgICAge1xuICAgICAgICAgIGNhdGVnb3J5OiAnY29uc29sZScsXG4gICAgICAgICAgbGV2ZWw6IHNldmVyaXR5TGV2ZWxGcm9tU3RyaW5nKGxldmVsKSxcbiAgICAgICAgICBtZXNzYWdlOiB1dGlsLmZvcm1hdC5hcHBseSh1bmRlZmluZWQsIGFyZ3MpLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaW5wdXQ6IFsuLi5hcmdzXSxcbiAgICAgICAgICBsZXZlbCxcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cbn0gQ29uc29sZS5fX2luaXRTdGF0aWMoKTtcblxuZXhwb3J0IHsgQ29uc29sZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc29sZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJ1dGlsIiwiZ2V0Q3VycmVudEh1YiIsImFkZENvbnNvbGVJbnN0cnVtZW50YXRpb25IYW5kbGVyIiwic2V2ZXJpdHlMZXZlbEZyb21TdHJpbmciLCJDb25zb2xlIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfX2luaXQiLCJjYWxsIiwiX19pbml0U3RhdGljIiwiaWQiLCJuYW1lIiwic2V0dXBPbmNlIiwiYXJncyIsImxldmVsIiwiaHViIiwiZ2V0SW50ZWdyYXRpb24iLCJhZGRCcmVhZGNydW1iIiwiY2F0ZWdvcnkiLCJtZXNzYWdlIiwiZm9ybWF0IiwiYXBwbHkiLCJ1bmRlZmluZWQiLCJpbnB1dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/integrations/console.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/integrations/context.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/node/esm/integrations/context.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Context: () => (/* binding */ Context),\n/* harmony export */   getDeviceContext: () => (/* binding */ getDeviceContext),\n/* harmony export */   readDirAsync: () => (/* binding */ readDirAsync),\n/* harmony export */   readFileAsync: () => (/* binding */ readFileAsync)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(child_process__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! os */ \"os\");\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(os__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\n// TODO: Required until we drop support for Node v8\nconst readFileAsync = (0,util__WEBPACK_IMPORTED_MODULE_4__.promisify)(fs__WEBPACK_IMPORTED_MODULE_1__.readFile);\nconst readDirAsync = (0,util__WEBPACK_IMPORTED_MODULE_4__.promisify)(fs__WEBPACK_IMPORTED_MODULE_1__.readdir);\n/** Add node modules / packages to the event */ class Context {\n    /**\n   * @inheritDoc\n   */ static __initStatic() {\n        this.id = \"Context\";\n    }\n    /**\n   * @inheritDoc\n   */ __init() {\n        this.name = Context.id;\n    }\n    /**\n   * Caches context so it's only evaluated once\n   */ constructor(_options = {\n        app: true,\n        os: true,\n        device: true,\n        culture: true,\n        cloudResource: true\n    }){\n        this._options = _options;\n        Context.prototype.__init.call(this);\n    }\n    /**\n   * @inheritDoc\n   */ setupOnce(addGlobalEventProcessor) {\n        addGlobalEventProcessor((event)=>this.addContext(event));\n    }\n    /** Processes an event and adds context */ async addContext(event) {\n        if (this._cachedContext === undefined) {\n            this._cachedContext = this._getContexts();\n        }\n        const updatedContext = this._updateContext(await this._cachedContext);\n        event.contexts = {\n            ...event.contexts,\n            app: {\n                ...updatedContext.app,\n                ...(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._optionalChain)([\n                    event,\n                    \"access\",\n                    (_)=>_.contexts,\n                    \"optionalAccess\",\n                    (_2)=>_2.app\n                ])\n            },\n            os: {\n                ...updatedContext.os,\n                ...(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._optionalChain)([\n                    event,\n                    \"access\",\n                    (_3)=>_3.contexts,\n                    \"optionalAccess\",\n                    (_4)=>_4.os\n                ])\n            },\n            device: {\n                ...updatedContext.device,\n                ...(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._optionalChain)([\n                    event,\n                    \"access\",\n                    (_5)=>_5.contexts,\n                    \"optionalAccess\",\n                    (_6)=>_6.device\n                ])\n            },\n            culture: {\n                ...updatedContext.culture,\n                ...(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._optionalChain)([\n                    event,\n                    \"access\",\n                    (_7)=>_7.contexts,\n                    \"optionalAccess\",\n                    (_8)=>_8.culture\n                ])\n            },\n            cloud_resource: {\n                ...updatedContext.cloud_resource,\n                ...(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._optionalChain)([\n                    event,\n                    \"access\",\n                    (_9)=>_9.contexts,\n                    \"optionalAccess\",\n                    (_10)=>_10.cloud_resource\n                ])\n            }\n        };\n        return event;\n    }\n    /**\n   * Updates the context with dynamic values that can change\n   */ _updateContext(contexts) {\n        // Only update properties if they exist\n        if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._optionalChain)([\n            contexts,\n            \"optionalAccess\",\n            (_11)=>_11.app,\n            \"optionalAccess\",\n            (_12)=>_12.app_memory\n        ])) {\n            contexts.app.app_memory = process.memoryUsage().rss;\n        }\n        if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__._optionalChain)([\n            contexts,\n            \"optionalAccess\",\n            (_13)=>_13.device,\n            \"optionalAccess\",\n            (_14)=>_14.free_memory\n        ])) {\n            contexts.device.free_memory = os__WEBPACK_IMPORTED_MODULE_2__.freemem();\n        }\n        return contexts;\n    }\n    /**\n   * Gets the contexts for the current environment\n   */ async _getContexts() {\n        const contexts = {};\n        if (this._options.os) {\n            contexts.os = await getOsContext();\n        }\n        if (this._options.app) {\n            contexts.app = getAppContext();\n        }\n        if (this._options.device) {\n            contexts.device = getDeviceContext(this._options.device);\n        }\n        if (this._options.culture) {\n            const culture = getCultureContext();\n            if (culture) {\n                contexts.culture = culture;\n            }\n        }\n        if (this._options.cloudResource) {\n            contexts.cloud_resource = getCloudResourceContext();\n        }\n        return contexts;\n    }\n}\nContext.__initStatic();\n/**\n * Returns the operating system context.\n *\n * Based on the current platform, this uses a different strategy to provide the\n * most accurate OS information. Since this might involve spawning subprocesses\n * or accessing the file system, this should only be executed lazily and cached.\n *\n *  - On macOS (Darwin), this will execute the `sw_vers` utility. The context\n *    has a `name`, `version`, `build` and `kernel_version` set.\n *  - On Linux, this will try to load a distribution release from `/etc` and set\n *    the `name`, `version` and `kernel_version` fields.\n *  - On all other platforms, only a `name` and `version` will be returned. Note\n *    that `version` might actually be the kernel version.\n */ async function getOsContext() {\n    const platformId = os__WEBPACK_IMPORTED_MODULE_2__.platform();\n    switch(platformId){\n        case \"darwin\":\n            return getDarwinInfo();\n        case \"linux\":\n            return getLinuxInfo();\n        default:\n            return {\n                name: PLATFORM_NAMES[platformId] || platformId,\n                version: os__WEBPACK_IMPORTED_MODULE_2__.release()\n            };\n    }\n}\nfunction getCultureContext() {\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n        if (typeof process.versions.icu !== \"string\") {\n            // Node was built without ICU support\n            return;\n        }\n        // Check that node was built with full Intl support. Its possible it was built without support for non-English\n        // locales which will make resolvedOptions inaccurate\n        //\n        // https://nodejs.org/api/intl.html#detecting-internationalization-support\n        const january = new Date(9e8);\n        const spanish = new Intl.DateTimeFormat(\"es\", {\n            month: \"long\"\n        });\n        if (spanish.format(january) === \"enero\") {\n            const options = Intl.DateTimeFormat().resolvedOptions();\n            return {\n                locale: options.locale,\n                timezone: options.timeZone\n            };\n        }\n    } catch (err) {\n    //\n    }\n    return;\n}\nfunction getAppContext() {\n    const app_memory = process.memoryUsage().rss;\n    const app_start_time = new Date(Date.now() - process.uptime() * 1000).toISOString();\n    return {\n        app_start_time,\n        app_memory\n    };\n}\n/**\n * Gets device information from os\n */ function getDeviceContext(deviceOpt) {\n    const device = {};\n    // Sometimes os.uptime() throws due to lacking permissions: https://github.com/getsentry/sentry-javascript/issues/8202\n    let uptime;\n    try {\n        uptime = os__WEBPACK_IMPORTED_MODULE_2__.uptime && os__WEBPACK_IMPORTED_MODULE_2__.uptime();\n    } catch (e) {\n    // noop\n    }\n    // os.uptime or its return value seem to be undefined in certain environments (e.g. Azure functions).\n    // Hence, we only set boot time, if we get a valid uptime value.\n    // @see https://github.com/getsentry/sentry-javascript/issues/5856\n    if (typeof uptime === \"number\") {\n        device.boot_time = new Date(Date.now() - uptime * 1000).toISOString();\n    }\n    device.arch = os__WEBPACK_IMPORTED_MODULE_2__.arch();\n    if (deviceOpt === true || deviceOpt.memory) {\n        device.memory_size = os__WEBPACK_IMPORTED_MODULE_2__.totalmem();\n        device.free_memory = os__WEBPACK_IMPORTED_MODULE_2__.freemem();\n    }\n    if (deviceOpt === true || deviceOpt.cpu) {\n        const cpuInfo = os__WEBPACK_IMPORTED_MODULE_2__.cpus();\n        if (cpuInfo && cpuInfo.length) {\n            const firstCpu = cpuInfo[0];\n            device.processor_count = cpuInfo.length;\n            device.cpu_description = firstCpu.model;\n            device.processor_frequency = firstCpu.speed;\n        }\n    }\n    return device;\n}\n/** Mapping of Node's platform names to actual OS names. */ const PLATFORM_NAMES = {\n    aix: \"IBM AIX\",\n    freebsd: \"FreeBSD\",\n    openbsd: \"OpenBSD\",\n    sunos: \"SunOS\",\n    win32: \"Windows\"\n};\n/** Linux version file to check for a distribution. */ /** Mapping of linux release files located in /etc to distributions. */ const LINUX_DISTROS = [\n    {\n        name: \"fedora-release\",\n        distros: [\n            \"Fedora\"\n        ]\n    },\n    {\n        name: \"redhat-release\",\n        distros: [\n            \"Red Hat Linux\",\n            \"Centos\"\n        ]\n    },\n    {\n        name: \"redhat_version\",\n        distros: [\n            \"Red Hat Linux\"\n        ]\n    },\n    {\n        name: \"SuSE-release\",\n        distros: [\n            \"SUSE Linux\"\n        ]\n    },\n    {\n        name: \"lsb-release\",\n        distros: [\n            \"Ubuntu Linux\",\n            \"Arch Linux\"\n        ]\n    },\n    {\n        name: \"debian_version\",\n        distros: [\n            \"Debian\"\n        ]\n    },\n    {\n        name: \"debian_release\",\n        distros: [\n            \"Debian\"\n        ]\n    },\n    {\n        name: \"arch-release\",\n        distros: [\n            \"Arch Linux\"\n        ]\n    },\n    {\n        name: \"gentoo-release\",\n        distros: [\n            \"Gentoo Linux\"\n        ]\n    },\n    {\n        name: \"novell-release\",\n        distros: [\n            \"SUSE Linux\"\n        ]\n    },\n    {\n        name: \"alpine-release\",\n        distros: [\n            \"Alpine Linux\"\n        ]\n    }\n];\n/** Functions to extract the OS version from Linux release files. */ const LINUX_VERSIONS = {\n    alpine: (content)=>content,\n    arch: (content)=>matchFirst(/distrib_release=(.*)/, content),\n    centos: (content)=>matchFirst(/release ([^ ]+)/, content),\n    debian: (content)=>content,\n    fedora: (content)=>matchFirst(/release (..)/, content),\n    mint: (content)=>matchFirst(/distrib_release=(.*)/, content),\n    red: (content)=>matchFirst(/release ([^ ]+)/, content),\n    suse: (content)=>matchFirst(/VERSION = (.*)\\n/, content),\n    ubuntu: (content)=>matchFirst(/distrib_release=(.*)/, content)\n};\n/**\n * Executes a regular expression with one capture group.\n *\n * @param regex A regular expression to execute.\n * @param text Content to execute the RegEx on.\n * @returns The captured string if matched; otherwise undefined.\n */ function matchFirst(regex, text) {\n    const match = regex.exec(text);\n    return match ? match[1] : undefined;\n}\n/** Loads the macOS operating system context. */ async function getDarwinInfo() {\n    // Default values that will be used in case no operating system information\n    // can be loaded. The default version is computed via heuristics from the\n    // kernel version, but the build ID is missing.\n    const darwinInfo = {\n        kernel_version: os__WEBPACK_IMPORTED_MODULE_2__.release(),\n        name: \"Mac OS X\",\n        version: `10.${Number(os__WEBPACK_IMPORTED_MODULE_2__.release().split(\".\")[0]) - 4}`\n    };\n    try {\n        // We try to load the actual macOS version by executing the `sw_vers` tool.\n        // This tool should be available on every standard macOS installation. In\n        // case this fails, we stick with the values computed above.\n        const output = await new Promise((resolve, reject)=>{\n            (0,child_process__WEBPACK_IMPORTED_MODULE_0__.execFile)(\"/usr/bin/sw_vers\", (error, stdout)=>{\n                if (error) {\n                    reject(error);\n                    return;\n                }\n                resolve(stdout);\n            });\n        });\n        darwinInfo.name = matchFirst(/^ProductName:\\s+(.*)$/m, output);\n        darwinInfo.version = matchFirst(/^ProductVersion:\\s+(.*)$/m, output);\n        darwinInfo.build = matchFirst(/^BuildVersion:\\s+(.*)$/m, output);\n    } catch (e) {\n    // ignore\n    }\n    return darwinInfo;\n}\n/** Returns a distribution identifier to look up version callbacks. */ function getLinuxDistroId(name) {\n    return name.split(\" \")[0].toLowerCase();\n}\n/** Loads the Linux operating system context. */ async function getLinuxInfo() {\n    // By default, we cannot assume anything about the distribution or Linux\n    // version. `os.release()` returns the kernel version and we assume a generic\n    // \"Linux\" name, which will be replaced down below.\n    const linuxInfo = {\n        kernel_version: os__WEBPACK_IMPORTED_MODULE_2__.release(),\n        name: \"Linux\"\n    };\n    try {\n        // We start guessing the distribution by listing files in the /etc\n        // directory. This is were most Linux distributions (except Knoppix) store\n        // release files with certain distribution-dependent meta data. We search\n        // for exactly one known file defined in `LINUX_DISTROS` and exit if none\n        // are found. In case there are more than one file, we just stick with the\n        // first one.\n        const etcFiles = await readDirAsync(\"/etc\");\n        const distroFile = LINUX_DISTROS.find((file)=>etcFiles.includes(file.name));\n        if (!distroFile) {\n            return linuxInfo;\n        }\n        // Once that file is known, load its contents. To make searching in those\n        // files easier, we lowercase the file contents. Since these files are\n        // usually quite small, this should not allocate too much memory and we only\n        // hold on to it for a very short amount of time.\n        const distroPath = (0,path__WEBPACK_IMPORTED_MODULE_3__.join)(\"/etc\", distroFile.name);\n        const contents = (await readFileAsync(distroPath, {\n            encoding: \"utf-8\"\n        })).toLowerCase();\n        // Some Linux distributions store their release information in the same file\n        // (e.g. RHEL and Centos). In those cases, we scan the file for an\n        // identifier, that basically consists of the first word of the linux\n        // distribution name (e.g. \"red\" for Red Hat). In case there is no match, we\n        // just assume the first distribution in our list.\n        const { distros } = distroFile;\n        linuxInfo.name = distros.find((d)=>contents.indexOf(getLinuxDistroId(d)) >= 0) || distros[0];\n        // Based on the found distribution, we can now compute the actual version\n        // number. This is different for every distribution, so several strategies\n        // are computed in `LINUX_VERSIONS`.\n        const id = getLinuxDistroId(linuxInfo.name);\n        linuxInfo.version = LINUX_VERSIONS[id](contents);\n    } catch (e) {\n    // ignore\n    }\n    return linuxInfo;\n}\n/**\n * Grabs some information about hosting provider based on best effort.\n */ function getCloudResourceContext() {\n    if (process.env.VERCEL) {\n        // https://vercel.com/docs/concepts/projects/environment-variables/system-environment-variables#system-environment-variables\n        return {\n            \"cloud.provider\": \"vercel\",\n            \"cloud.region\": process.env.VERCEL_REGION\n        };\n    } else if (process.env.AWS_REGION) {\n        // https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html\n        return {\n            \"cloud.provider\": \"aws\",\n            \"cloud.region\": process.env.AWS_REGION,\n            \"cloud.platform\": process.env.AWS_EXECUTION_ENV\n        };\n    } else if (process.env.GCP_PROJECT) {\n        // https://cloud.google.com/composer/docs/how-to/managing/environment-variables#reserved_variables\n        return {\n            \"cloud.provider\": \"gcp\"\n        };\n    } else if (process.env.ALIYUN_REGION_ID) {\n        // TODO: find where I found these environment variables - at least gc.github.com returns something\n        return {\n            \"cloud.provider\": \"alibaba_cloud\",\n            \"cloud.region\": process.env.ALIYUN_REGION_ID\n        };\n    } else if (process.env.WEBSITE_SITE_NAME && process.env.REGION_NAME) {\n        // https://learn.microsoft.com/en-us/azure/app-service/reference-app-settings?tabs=kudu%2Cdotnet#app-environment\n        return {\n            \"cloud.provider\": \"azure\",\n            \"cloud.region\": process.env.REGION_NAME\n        };\n    } else if (process.env.IBM_CLOUD_REGION) {\n        // TODO: find where I found these environment variables - at least gc.github.com returns something\n        return {\n            \"cloud.provider\": \"ibm_cloud\",\n            \"cloud.region\": process.env.IBM_CLOUD_REGION\n        };\n    } else if (process.env.TENCENTCLOUD_REGION) {\n        // https://www.tencentcloud.com/document/product/583/32748\n        return {\n            \"cloud.provider\": \"tencent_cloud\",\n            \"cloud.region\": process.env.TENCENTCLOUD_REGION,\n            \"cloud.account.id\": process.env.TENCENTCLOUD_APPID,\n            \"cloud.availability_zone\": process.env.TENCENTCLOUD_ZONE\n        };\n    } else if (process.env.NETLIFY) {\n        // https://docs.netlify.com/configure-builds/environment-variables/#read-only-variables\n        return {\n            \"cloud.provider\": \"netlify\"\n        };\n    } else if (process.env.FLY_REGION) {\n        // https://fly.io/docs/reference/runtime-environment/\n        return {\n            \"cloud.provider\": \"fly.io\",\n            \"cloud.region\": process.env.FLY_REGION\n        };\n    } else if (process.env.DYNO) {\n        // https://devcenter.heroku.com/articles/dynos#local-environment-variables\n        return {\n            \"cloud.provider\": \"heroku\"\n        };\n    } else {\n        return undefined;\n    }\n}\n //# sourceMappingURL=context.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/integrations/context.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/integrations/contextlines.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/node/esm/integrations/contextlines.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContextLines: () => (/* binding */ ContextLines)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/lru.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/misc.js\");\n\n\n\nconst FILE_CONTENT_CACHE = new _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.LRUMap(100);\nconst DEFAULT_LINES_OF_CONTEXT = 7;\n// TODO: Replace with promisify when minimum supported node >= v8\nfunction readTextFileAsync(path) {\n    return new Promise((resolve, reject)=>{\n        (0,fs__WEBPACK_IMPORTED_MODULE_0__.readFile)(path, \"utf8\", (err, data)=>{\n            if (err) reject(err);\n            else resolve(data);\n        });\n    });\n}\n/** Add node modules / packages to the event */ class ContextLines {\n    /**\n   * @inheritDoc\n   */ static __initStatic() {\n        this.id = \"ContextLines\";\n    }\n    /**\n   * @inheritDoc\n   */ __init() {\n        this.name = ContextLines.id;\n    }\n    constructor(_options = {}){\n        this._options = _options;\n        ContextLines.prototype.__init.call(this);\n    }\n    /** Get's the number of context lines to add */ get _contextLines() {\n        return this._options.frameContextLines !== undefined ? this._options.frameContextLines : DEFAULT_LINES_OF_CONTEXT;\n    }\n    /**\n   * @inheritDoc\n   */ setupOnce(addGlobalEventProcessor, getCurrentHub) {\n        addGlobalEventProcessor((event)=>{\n            const self = getCurrentHub().getIntegration(ContextLines);\n            if (!self) {\n                return event;\n            }\n            return this.addSourceContext(event);\n        });\n    }\n    /** Processes an event and adds context lines */ async addSourceContext(event) {\n        // keep a lookup map of which files we've already enqueued to read,\n        // so we don't enqueue the same file multiple times which would cause multiple i/o reads\n        const enqueuedReadSourceFileTasks = {};\n        const readSourceFileTasks = [];\n        if (this._contextLines > 0 && (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n            event,\n            \"access\",\n            (_2)=>_2.exception,\n            \"optionalAccess\",\n            (_3)=>_3.values\n        ])) {\n            for (const exception of event.exception.values){\n                if (!(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n                    exception,\n                    \"access\",\n                    (_4)=>_4.stacktrace,\n                    \"optionalAccess\",\n                    (_5)=>_5.frames\n                ])) {\n                    continue;\n                }\n                // We want to iterate in reverse order as calling cache.get will bump the file in our LRU cache.\n                // This ends up prioritizes source context for frames at the top of the stack instead of the bottom.\n                for(let i = exception.stacktrace.frames.length - 1; i >= 0; i--){\n                    const frame = exception.stacktrace.frames[i];\n                    // Call cache.get to bump the file to the top of the cache and ensure we have not already\n                    // enqueued a read operation for this filename\n                    if (frame.filename && !enqueuedReadSourceFileTasks[frame.filename] && !FILE_CONTENT_CACHE.get(frame.filename)) {\n                        readSourceFileTasks.push(_readSourceFile(frame.filename));\n                        enqueuedReadSourceFileTasks[frame.filename] = 1;\n                    }\n                }\n            }\n        }\n        // check if files to read > 0, if so, await all of them to be read before adding source contexts.\n        // Normally, Promise.all here could be short circuited if one of the promises rejects, but we\n        // are guarding from that by wrapping the i/o read operation in a try/catch.\n        if (readSourceFileTasks.length > 0) {\n            await Promise.all(readSourceFileTasks);\n        }\n        // Perform the same loop as above, but this time we can assume all files are in the cache\n        // and attempt to add source context to frames.\n        if (this._contextLines > 0 && (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n            event,\n            \"access\",\n            (_6)=>_6.exception,\n            \"optionalAccess\",\n            (_7)=>_7.values\n        ])) {\n            for (const exception of event.exception.values){\n                if (exception.stacktrace && exception.stacktrace.frames) {\n                    await this.addSourceContextToFrames(exception.stacktrace.frames);\n                }\n            }\n        }\n        return event;\n    }\n    /** Adds context lines to frames */ addSourceContextToFrames(frames) {\n        for (const frame of frames){\n            // Only add context if we have a filename and it hasn't already been added\n            if (frame.filename && frame.context_line === undefined) {\n                const sourceFileLines = FILE_CONTENT_CACHE.get(frame.filename);\n                if (sourceFileLines) {\n                    try {\n                        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.addContextToFrame)(sourceFileLines, frame, this._contextLines);\n                    } catch (e) {\n                    // anomaly, being defensive in case\n                    // unlikely to ever happen in practice but can definitely happen in theory\n                    }\n                }\n            }\n        }\n    }\n}\nContextLines.__initStatic();\n/**\n * Reads file contents and caches them in a global LRU cache.\n * If reading fails, mark the file as null in the cache so we don't try again.\n *\n * @param filename filepath to read content from.\n */ async function _readSourceFile(filename) {\n    const cachedFile = FILE_CONTENT_CACHE.get(filename);\n    // We have already attempted to read this file and failed, do not try again\n    if (cachedFile === null) {\n        return null;\n    }\n    // We have a cache hit, return it\n    if (cachedFile !== undefined) {\n        return cachedFile;\n    }\n    // Guard from throwing if readFile fails, this enables us to use Promise.all and\n    // not have it short circuiting if one of the promises rejects + since context lines are added\n    // on a best effort basis, we want to throw here anyways.\n    // If we made it to here, it means that our file is not cache nor marked as failed, so attempt to read it\n    let content = null;\n    try {\n        const rawFileContents = await readTextFileAsync(filename);\n        content = rawFileContents.split(\"\\n\");\n    } catch (_) {\n    // if we fail, we will mark the file as null in the cache and short circuit next time we try to read it\n    }\n    FILE_CONTENT_CACHE.set(filename, content);\n    return content;\n}\n //# sourceMappingURL=contextlines.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/integrations/contextlines.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/integrations/http.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/node/esm/integrations/http.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Http: () => (/* binding */ Http)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/utils/isSentryRequestUrl.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/dynamicSamplingContext.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/lru.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/string.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/tracing.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/baggage.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/node/esm/debug-build.js\");\n/* harmony import */ var _nodeVersion_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../nodeVersion.js */ \"(ssr)/./node_modules/@sentry/node/esm/nodeVersion.js\");\n/* harmony import */ var _utils_http_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/http.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/utils/http.js\");\n\n\n\n\n\n\n/**\n * The http module integration instruments Node's internal http module. It creates breadcrumbs, transactions for outgoing\n * http requests and attaches trace data when tracing is enabled via its `tracing` option.\n */ class Http {\n    /**\n   * @inheritDoc\n   */ static __initStatic() {\n        this.id = \"Http\";\n    }\n    /**\n   * @inheritDoc\n   */ __init() {\n        this.name = Http.id;\n    }\n    /**\n   * @inheritDoc\n   */ constructor(options = {}){\n        Http.prototype.__init.call(this);\n        this._breadcrumbs = typeof options.breadcrumbs === \"undefined\" ? true : options.breadcrumbs;\n        this._tracing = !options.tracing ? undefined : options.tracing === true ? {} : options.tracing;\n    }\n    /**\n   * @inheritDoc\n   */ setupOnce(_addGlobalEventProcessor, setupOnceGetCurrentHub) {\n        // No need to instrument if we don't want to track anything\n        if (!this._breadcrumbs && !this._tracing) {\n            return;\n        }\n        const clientOptions = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n            setupOnceGetCurrentHub,\n            \"call\",\n            (_)=>_(),\n            \"access\",\n            (_2)=>_2.getClient,\n            \"call\",\n            (_3)=>_3(),\n            \"optionalAccess\",\n            (_4)=>_4.getOptions,\n            \"call\",\n            (_5)=>_5()\n        ]);\n        // Do not auto-instrument for other instrumenter\n        if (clientOptions && clientOptions.instrumenter !== \"sentry\") {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.log(\"HTTP Integration is skipped because of instrumenter configuration.\");\n            return;\n        }\n        const shouldCreateSpanForRequest = // eslint-disable-next-line deprecation/deprecation\n        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n            this,\n            \"access\",\n            (_6)=>_6._tracing,\n            \"optionalAccess\",\n            (_7)=>_7.shouldCreateSpanForRequest\n        ]) || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n            clientOptions,\n            \"optionalAccess\",\n            (_8)=>_8.shouldCreateSpanForRequest\n        ]);\n        // eslint-disable-next-line deprecation/deprecation\n        const tracePropagationTargets = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n            clientOptions,\n            \"optionalAccess\",\n            (_9)=>_9.tracePropagationTargets\n        ]) || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n            this,\n            \"access\",\n            (_10)=>_10._tracing,\n            \"optionalAccess\",\n            (_11)=>_11.tracePropagationTargets\n        ]);\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const httpModule = __webpack_require__(/*! http */ \"http\");\n        const wrappedHttpHandlerMaker = _createWrappedRequestMethodFactory(httpModule, this._breadcrumbs, shouldCreateSpanForRequest, tracePropagationTargets);\n        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.fill)(httpModule, \"get\", wrappedHttpHandlerMaker);\n        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.fill)(httpModule, \"request\", wrappedHttpHandlerMaker);\n        // NOTE: Prior to Node 9, `https` used internals of `http` module, thus we don't patch it.\n        // If we do, we'd get double breadcrumbs and double spans for `https` calls.\n        // It has been changed in Node 9, so for all versions equal and above, we patch `https` separately.\n        if (_nodeVersion_js__WEBPACK_IMPORTED_MODULE_4__.NODE_VERSION.major && _nodeVersion_js__WEBPACK_IMPORTED_MODULE_4__.NODE_VERSION.major > 8) {\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\n            const httpsModule = __webpack_require__(/*! https */ \"https\");\n            const wrappedHttpsHandlerMaker = _createWrappedRequestMethodFactory(httpsModule, this._breadcrumbs, shouldCreateSpanForRequest, tracePropagationTargets);\n            (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.fill)(httpsModule, \"get\", wrappedHttpsHandlerMaker);\n            (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.fill)(httpsModule, \"request\", wrappedHttpsHandlerMaker);\n        }\n    }\n}\nHttp.__initStatic();\n// for ease of reading below\n/**\n * Function which creates a function which creates wrapped versions of internal `request` and `get` calls within `http`\n * and `https` modules. (NB: Not a typo - this is a creator^2!)\n *\n * @param breadcrumbsEnabled Whether or not to record outgoing requests as breadcrumbs\n * @param tracingEnabled Whether or not to record outgoing requests as tracing spans\n *\n * @returns A function which accepts the exiting handler and returns a wrapped handler\n */ function _createWrappedRequestMethodFactory(httpModule, breadcrumbsEnabled, shouldCreateSpanForRequest, tracePropagationTargets) {\n    // We're caching results so we don't have to recompute regexp every time we create a request.\n    const createSpanUrlMap = new _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.LRUMap(100);\n    const headersUrlMap = new _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.LRUMap(100);\n    const shouldCreateSpan = (url)=>{\n        if (shouldCreateSpanForRequest === undefined) {\n            return true;\n        }\n        const cachedDecision = createSpanUrlMap.get(url);\n        if (cachedDecision !== undefined) {\n            return cachedDecision;\n        }\n        const decision = shouldCreateSpanForRequest(url);\n        createSpanUrlMap.set(url, decision);\n        return decision;\n    };\n    const shouldAttachTraceData = (url)=>{\n        if (tracePropagationTargets === undefined) {\n            return true;\n        }\n        const cachedDecision = headersUrlMap.get(url);\n        if (cachedDecision !== undefined) {\n            return cachedDecision;\n        }\n        const decision = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__.stringMatchesSomePattern)(url, tracePropagationTargets);\n        headersUrlMap.set(url, decision);\n        return decision;\n    };\n    /**\n   * Captures Breadcrumb based on provided request/response pair\n   */ function addRequestBreadcrumb(event, requestSpanData, req, res) {\n        if (!(0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.getCurrentHub)().getIntegration(Http)) {\n            return;\n        }\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.getCurrentHub)().addBreadcrumb({\n            category: \"http\",\n            data: {\n                status_code: res && res.statusCode,\n                ...requestSpanData\n            },\n            type: \"http\"\n        }, {\n            event,\n            request: req,\n            response: res\n        });\n    }\n    return function wrappedRequestMethodFactory(originalRequestMethod) {\n        return function wrappedMethod(...args) {\n            const requestArgs = (0,_utils_http_js__WEBPACK_IMPORTED_MODULE_8__.normalizeRequestArgs)(httpModule, args);\n            const requestOptions = requestArgs[0];\n            // eslint-disable-next-line deprecation/deprecation\n            const rawRequestUrl = (0,_utils_http_js__WEBPACK_IMPORTED_MODULE_8__.extractRawUrl)(requestOptions);\n            const requestUrl = (0,_utils_http_js__WEBPACK_IMPORTED_MODULE_8__.extractUrl)(requestOptions);\n            // we don't want to record requests to Sentry as either breadcrumbs or spans, so just use the original method\n            if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_9__.isSentryRequestUrl)(requestUrl, (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.getCurrentHub)())) {\n                return originalRequestMethod.apply(httpModule, requestArgs);\n            }\n            const hub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.getCurrentHub)();\n            const scope = hub.getScope();\n            const parentSpan = scope.getSpan();\n            const data = getRequestSpanData(requestUrl, requestOptions);\n            const requestSpan = shouldCreateSpan(rawRequestUrl) ? (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n                parentSpan,\n                \"optionalAccess\",\n                (_12)=>_12.startChild,\n                \"call\",\n                (_13)=>_13({\n                        op: \"http.client\",\n                        origin: \"auto.http.node.http\",\n                        description: `${data[\"http.method\"]} ${data.url}`,\n                        data\n                    })\n            ]) : undefined;\n            if (shouldAttachTraceData(rawRequestUrl)) {\n                if (requestSpan) {\n                    const sentryTraceHeader = requestSpan.toTraceparent();\n                    const dynamicSamplingContext = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n                        requestSpan,\n                        \"optionalAccess\",\n                        (_14)=>_14.transaction,\n                        \"optionalAccess\",\n                        (_15)=>_15.getDynamicSamplingContext,\n                        \"call\",\n                        (_16)=>_16()\n                    ]);\n                    addHeadersToRequestOptions(requestOptions, requestUrl, sentryTraceHeader, dynamicSamplingContext);\n                } else {\n                    const client = hub.getClient();\n                    const { traceId, sampled, dsc } = scope.getPropagationContext();\n                    const sentryTraceHeader = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_10__.generateSentryTraceHeader)(traceId, undefined, sampled);\n                    const dynamicSamplingContext = dsc || (client ? (0,_sentry_core__WEBPACK_IMPORTED_MODULE_11__.getDynamicSamplingContextFromClient)(traceId, client, scope) : undefined);\n                    addHeadersToRequestOptions(requestOptions, requestUrl, sentryTraceHeader, dynamicSamplingContext);\n                }\n            } else {\n                _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.log(`[Tracing] Not adding sentry-trace header to outgoing request (${requestUrl}) due to mismatching tracePropagationTargets option.`);\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            return originalRequestMethod.apply(httpModule, requestArgs).once(\"response\", function(res) {\n                // eslint-disable-next-line @typescript-eslint/no-this-alias\n                const req = this;\n                if (breadcrumbsEnabled) {\n                    addRequestBreadcrumb(\"response\", data, req, res);\n                }\n                if (requestSpan) {\n                    if (res.statusCode) {\n                        requestSpan.setHttpStatus(res.statusCode);\n                    }\n                    requestSpan.description = (0,_utils_http_js__WEBPACK_IMPORTED_MODULE_8__.cleanSpanDescription)(requestSpan.description, requestOptions, req);\n                    requestSpan.finish();\n                }\n            }).once(\"error\", function() {\n                // eslint-disable-next-line @typescript-eslint/no-this-alias\n                const req = this;\n                if (breadcrumbsEnabled) {\n                    addRequestBreadcrumb(\"error\", data, req);\n                }\n                if (requestSpan) {\n                    requestSpan.setHttpStatus(500);\n                    requestSpan.description = (0,_utils_http_js__WEBPACK_IMPORTED_MODULE_8__.cleanSpanDescription)(requestSpan.description, requestOptions, req);\n                    requestSpan.finish();\n                }\n            });\n        };\n    };\n}\nfunction addHeadersToRequestOptions(requestOptions, requestUrl, sentryTraceHeader, dynamicSamplingContext) {\n    // Don't overwrite sentry-trace and baggage header if it's already set.\n    const headers = requestOptions.headers || {};\n    if (headers[\"sentry-trace\"]) {\n        return;\n    }\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.log(`[Tracing] Adding sentry-trace header ${sentryTraceHeader} to outgoing request to \"${requestUrl}\": `);\n    const sentryBaggage = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_12__.dynamicSamplingContextToSentryBaggageHeader)(dynamicSamplingContext);\n    const sentryBaggageHeader = sentryBaggage && sentryBaggage.length > 0 ? normalizeBaggageHeader(requestOptions, sentryBaggage) : undefined;\n    requestOptions.headers = {\n        ...requestOptions.headers,\n        \"sentry-trace\": sentryTraceHeader,\n        // Setting a header to `undefined` will crash in node so we only set the baggage header when it's defined\n        ...sentryBaggageHeader && {\n            baggage: sentryBaggageHeader\n        }\n    };\n}\nfunction getRequestSpanData(requestUrl, requestOptions) {\n    const method = requestOptions.method || \"GET\";\n    const data = {\n        url: requestUrl,\n        \"http.method\": method\n    };\n    if (requestOptions.hash) {\n        // strip leading \"#\"\n        data[\"http.fragment\"] = requestOptions.hash.substring(1);\n    }\n    if (requestOptions.search) {\n        // strip leading \"?\"\n        data[\"http.query\"] = requestOptions.search.substring(1);\n    }\n    return data;\n}\nfunction normalizeBaggageHeader(requestOptions, sentryBaggageHeader) {\n    if (!requestOptions.headers || !requestOptions.headers.baggage) {\n        return sentryBaggageHeader;\n    } else if (!sentryBaggageHeader) {\n        return requestOptions.headers.baggage;\n    } else if (Array.isArray(requestOptions.headers.baggage)) {\n        return [\n            ...requestOptions.headers.baggage,\n            sentryBaggageHeader\n        ];\n    }\n    // Type-cast explanation:\n    // Technically this the following could be of type `(number | string)[]` but for the sake of simplicity\n    // we say this is undefined behaviour, since it would not be baggage spec conform if the user did this.\n    return [\n        requestOptions.headers.baggage,\n        sentryBaggageHeader\n    ];\n}\n //# sourceMappingURL=http.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/integrations/http.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/integrations/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/node/esm/integrations/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Console: () => (/* reexport safe */ _console_js__WEBPACK_IMPORTED_MODULE_0__.Console),\n/* harmony export */   Context: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_6__.Context),\n/* harmony export */   ContextLines: () => (/* reexport safe */ _contextlines_js__WEBPACK_IMPORTED_MODULE_5__.ContextLines),\n/* harmony export */   Http: () => (/* reexport safe */ _http_js__WEBPACK_IMPORTED_MODULE_1__.Http),\n/* harmony export */   LocalVariables: () => (/* reexport safe */ _localvariables_js__WEBPACK_IMPORTED_MODULE_8__.LocalVariables),\n/* harmony export */   Modules: () => (/* reexport safe */ _modules_js__WEBPACK_IMPORTED_MODULE_4__.Modules),\n/* harmony export */   OnUncaughtException: () => (/* reexport safe */ _onuncaughtexception_js__WEBPACK_IMPORTED_MODULE_2__.OnUncaughtException),\n/* harmony export */   OnUnhandledRejection: () => (/* reexport safe */ _onunhandledrejection_js__WEBPACK_IMPORTED_MODULE_3__.OnUnhandledRejection),\n/* harmony export */   RequestData: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_7__.RequestData),\n/* harmony export */   Spotlight: () => (/* reexport safe */ _spotlight_js__WEBPACK_IMPORTED_MODULE_10__.Spotlight),\n/* harmony export */   Undici: () => (/* reexport safe */ _undici_index_js__WEBPACK_IMPORTED_MODULE_9__.Undici)\n/* harmony export */ });\n/* harmony import */ var _console_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./console.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/console.js\");\n/* harmony import */ var _http_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./http.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/http.js\");\n/* harmony import */ var _onuncaughtexception_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./onuncaughtexception.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/onuncaughtexception.js\");\n/* harmony import */ var _onunhandledrejection_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./onunhandledrejection.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/onunhandledrejection.js\");\n/* harmony import */ var _modules_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/modules.js\");\n/* harmony import */ var _contextlines_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./contextlines.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/contextlines.js\");\n/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./context.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/context.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/integrations/requestdata.js\");\n/* harmony import */ var _localvariables_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./localvariables.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/localvariables.js\");\n/* harmony import */ var _undici_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./undici/index.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/undici/index.js\");\n/* harmony import */ var _spotlight_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./spotlight.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/spotlight.js\");\n\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9pbnRlZ3JhdGlvbnMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF1QztBQUNOO0FBQzhCO0FBQ0U7QUFDMUI7QUFDVTtBQUNWO0FBQ0k7QUFDVTtBQUNWO0FBQ0EsQ0FDM0MsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9lc20vaW50ZWdyYXRpb25zL2luZGV4LmpzPzM2NjEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgQ29uc29sZSB9IGZyb20gJy4vY29uc29sZS5qcyc7XG5leHBvcnQgeyBIdHRwIH0gZnJvbSAnLi9odHRwLmpzJztcbmV4cG9ydCB7IE9uVW5jYXVnaHRFeGNlcHRpb24gfSBmcm9tICcuL29udW5jYXVnaHRleGNlcHRpb24uanMnO1xuZXhwb3J0IHsgT25VbmhhbmRsZWRSZWplY3Rpb24gfSBmcm9tICcuL29udW5oYW5kbGVkcmVqZWN0aW9uLmpzJztcbmV4cG9ydCB7IE1vZHVsZXMgfSBmcm9tICcuL21vZHVsZXMuanMnO1xuZXhwb3J0IHsgQ29udGV4dExpbmVzIH0gZnJvbSAnLi9jb250ZXh0bGluZXMuanMnO1xuZXhwb3J0IHsgQ29udGV4dCB9IGZyb20gJy4vY29udGV4dC5qcyc7XG5leHBvcnQgeyBSZXF1ZXN0RGF0YSB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5leHBvcnQgeyBMb2NhbFZhcmlhYmxlcyB9IGZyb20gJy4vbG9jYWx2YXJpYWJsZXMuanMnO1xuZXhwb3J0IHsgVW5kaWNpIH0gZnJvbSAnLi91bmRpY2kvaW5kZXguanMnO1xuZXhwb3J0IHsgU3BvdGxpZ2h0IH0gZnJvbSAnLi9zcG90bGlnaHQuanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiQ29uc29sZSIsIkh0dHAiLCJPblVuY2F1Z2h0RXhjZXB0aW9uIiwiT25VbmhhbmRsZWRSZWplY3Rpb24iLCJNb2R1bGVzIiwiQ29udGV4dExpbmVzIiwiQ29udGV4dCIsIlJlcXVlc3REYXRhIiwiTG9jYWxWYXJpYWJsZXMiLCJVbmRpY2kiLCJTcG90bGlnaHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/integrations/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/integrations/localvariables.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/node/esm/integrations/localvariables.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LocalVariables: () => (/* binding */ LocalVariables),\n/* harmony export */   createCallbackList: () => (/* binding */ createCallbackList),\n/* harmony export */   createRateLimiter: () => (/* binding */ createRateLimiter)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/lru.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _nodeVersion_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../nodeVersion.js */ \"(ssr)/./node_modules/@sentry/node/esm/nodeVersion.js\");\n\n\n\n/**\n * Creates a rate limiter\n * @param maxPerSecond Maximum number of calls per second\n * @param enable Callback to enable capture\n * @param disable Callback to disable capture\n * @returns A function to call to increment the rate limiter count\n */ function createRateLimiter(maxPerSecond, enable, disable) {\n    let count = 0;\n    let retrySeconds = 5;\n    let disabledTimeout = 0;\n    setInterval(()=>{\n        if (disabledTimeout === 0) {\n            if (count > maxPerSecond) {\n                retrySeconds *= 2;\n                disable(retrySeconds);\n                // Cap at one day\n                if (retrySeconds > 86400) {\n                    retrySeconds = 86400;\n                }\n                disabledTimeout = retrySeconds;\n            }\n        } else {\n            disabledTimeout -= 1;\n            if (disabledTimeout === 0) {\n                enable();\n            }\n        }\n        count = 0;\n    }, 1000).unref();\n    return ()=>{\n        count += 1;\n    };\n}\n/** Creates a container for callbacks to be called sequentially */ function createCallbackList(complete) {\n    // A collection of callbacks to be executed last to first\n    let callbacks = [];\n    let completedCalled = false;\n    function checkedComplete(result) {\n        callbacks = [];\n        if (completedCalled) {\n            return;\n        }\n        completedCalled = true;\n        complete(result);\n    }\n    // complete should be called last\n    callbacks.push(checkedComplete);\n    function add(fn) {\n        callbacks.push(fn);\n    }\n    function next(result) {\n        const popped = callbacks.pop() || checkedComplete;\n        try {\n            popped(result);\n        } catch (_) {\n            // If there is an error, we still want to call the complete callback\n            checkedComplete(result);\n        }\n    }\n    return {\n        add,\n        next\n    };\n}\n/**\n * Promise API is available as `Experimental` and in Node 19 only.\n *\n * Callback-based API is `Stable` since v14 and `Experimental` since v8.\n * Because of that, we are creating our own `AsyncSession` class.\n *\n * https://nodejs.org/docs/latest-v19.x/api/inspector.html#promises-api\n * https://nodejs.org/docs/latest-v14.x/api/inspector.html\n */ class AsyncSession {\n    /** Throws if inspector API is not available */ constructor(){\n        /*\n    TODO: We really should get rid of this require statement below for a couple of reasons:\n    1. It makes the integration unusable in the SvelteKit SDK, as it's not possible to use `require`\n       in SvelteKit server code (at least not by default).\n    2. Throwing in a constructor is bad practice\n\n    More context for a future attempt to fix this:\n    We already tried replacing it with import but didn't get it to work because of async problems.\n    We still called import in the constructor but assigned to a promise which we \"awaited\" in\n    `configureAndConnect`. However, this broke the Node integration tests as no local variables\n    were reported any more. We probably missed a place where we need to await the promise, too.\n    */ // Node can be built without inspector support so this can throw\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const { Session } = __webpack_require__(/*! inspector */ \"inspector\");\n        this._session = new Session();\n    }\n    /** @inheritdoc */ configureAndConnect(onPause, captureAll) {\n        this._session.connect();\n        this._session.on(\"Debugger.paused\", (event)=>{\n            onPause(event, ()=>{\n                // After the pause work is complete, resume execution or the exception context memory is leaked\n                this._session.post(\"Debugger.resume\");\n            });\n        });\n        this._session.post(\"Debugger.enable\");\n        this._session.post(\"Debugger.setPauseOnExceptions\", {\n            state: captureAll ? \"all\" : \"uncaught\"\n        });\n    }\n    setPauseOnExceptions(captureAll) {\n        this._session.post(\"Debugger.setPauseOnExceptions\", {\n            state: captureAll ? \"all\" : \"uncaught\"\n        });\n    }\n    /** @inheritdoc */ getLocalVariables(objectId, complete) {\n        this._getProperties(objectId, (props)=>{\n            const { add, next } = createCallbackList(complete);\n            for (const prop of props){\n                if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n                    prop,\n                    \"optionalAccess\",\n                    (_2)=>_2.value,\n                    \"optionalAccess\",\n                    (_3)=>_3.objectId\n                ]) && (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n                    prop,\n                    \"optionalAccess\",\n                    (_4)=>_4.value,\n                    \"access\",\n                    (_5)=>_5.className\n                ]) === \"Array\") {\n                    const id = prop.value.objectId;\n                    add((vars)=>this._unrollArray(id, prop.name, vars, next));\n                } else if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n                    prop,\n                    \"optionalAccess\",\n                    (_6)=>_6.value,\n                    \"optionalAccess\",\n                    (_7)=>_7.objectId\n                ]) && (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n                    prop,\n                    \"optionalAccess\",\n                    (_8)=>_8.value,\n                    \"optionalAccess\",\n                    (_9)=>_9.className\n                ]) === \"Object\") {\n                    const id = prop.value.objectId;\n                    add((vars)=>this._unrollObject(id, prop.name, vars, next));\n                } else if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n                    prop,\n                    \"optionalAccess\",\n                    (_10)=>_10.value,\n                    \"optionalAccess\",\n                    (_11)=>_11.value\n                ]) || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n                    prop,\n                    \"optionalAccess\",\n                    (_12)=>_12.value,\n                    \"optionalAccess\",\n                    (_13)=>_13.description\n                ])) {\n                    add((vars)=>this._unrollOther(prop, vars, next));\n                }\n            }\n            next({});\n        });\n    }\n    /**\n   * Gets all the PropertyDescriptors of an object\n   */ _getProperties(objectId, next) {\n        this._session.post(\"Runtime.getProperties\", {\n            objectId,\n            ownProperties: true\n        }, (err, params)=>{\n            if (err) {\n                next([]);\n            } else {\n                next(params.result);\n            }\n        });\n    }\n    /**\n   * Unrolls an array property\n   */ _unrollArray(objectId, name, vars, next) {\n        this._getProperties(objectId, (props)=>{\n            vars[name] = props.filter((v)=>v.name !== \"length\" && !isNaN(parseInt(v.name, 10))).sort((a, b)=>parseInt(a.name, 10) - parseInt(b.name, 10)).map((v)=>(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n                    v,\n                    \"optionalAccess\",\n                    (_14)=>_14.value,\n                    \"optionalAccess\",\n                    (_15)=>_15.value\n                ]));\n            next(vars);\n        });\n    }\n    /**\n   * Unrolls an object property\n   */ _unrollObject(objectId, name, vars, next) {\n        this._getProperties(objectId, (props)=>{\n            vars[name] = props.map((v)=>[\n                    v.name,\n                    (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n                        v,\n                        \"optionalAccess\",\n                        (_16)=>_16.value,\n                        \"optionalAccess\",\n                        (_17)=>_17.value\n                    ])\n                ]).reduce((obj, [key, val])=>{\n                obj[key] = val;\n                return obj;\n            }, {});\n            next(vars);\n        });\n    }\n    /**\n   * Unrolls other properties\n   */ _unrollOther(prop, vars, next) {\n        if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n            prop,\n            \"optionalAccess\",\n            (_18)=>_18.value,\n            \"optionalAccess\",\n            (_19)=>_19.value\n        ])) {\n            vars[prop.name] = prop.value.value;\n        } else if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n            prop,\n            \"optionalAccess\",\n            (_20)=>_20.value,\n            \"optionalAccess\",\n            (_21)=>_21.description\n        ]) && (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n            prop,\n            \"optionalAccess\",\n            (_22)=>_22.value,\n            \"optionalAccess\",\n            (_23)=>_23.type\n        ]) !== \"function\") {\n            vars[prop.name] = `<${prop.value.description}>`;\n        }\n        next(vars);\n    }\n}\n/**\n * When using Vercel pkg, the inspector module is not available.\n * https://github.com/getsentry/sentry-javascript/issues/6769\n */ function tryNewAsyncSession() {\n    try {\n        return new AsyncSession();\n    } catch (e) {\n        return undefined;\n    }\n}\n// Add types for the exception event data\n/** Could this be an anonymous function? */ function isAnonymous(name) {\n    return name !== undefined && [\n        \"\",\n        \"?\",\n        \"<anonymous>\"\n    ].includes(name);\n}\n/** Do the function names appear to match? */ function functionNamesMatch(a, b) {\n    return a === b || isAnonymous(a) && isAnonymous(b);\n}\n/** Creates a unique hash from stack frames */ function hashFrames(frames) {\n    if (frames === undefined) {\n        return;\n    }\n    // Only hash the 10 most recent frames (ie. the last 10)\n    return frames.slice(-10).reduce((acc, frame)=>`${acc},${frame.function},${frame.lineno},${frame.colno}`, \"\");\n}\n/**\n * We use the stack parser to create a unique hash from the exception stack trace\n * This is used to lookup vars when the exception passes through the event processor\n */ function hashFromStack(stackParser, stack) {\n    if (stack === undefined) {\n        return undefined;\n    }\n    return hashFrames(stackParser(stack, 1));\n}\n/**\n * Adds local variables to exception frames\n *\n * Default: 50\n */ class LocalVariables {\n    static __initStatic() {\n        this.id = \"LocalVariables\";\n    }\n    __init() {\n        this.name = LocalVariables.id;\n    }\n    __init2() {\n        this._cachedFrames = new _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.LRUMap(20);\n    }\n    constructor(_options = {}, _session = tryNewAsyncSession()){\n        this._options = _options;\n        this._session = _session;\n        LocalVariables.prototype.__init.call(this);\n        LocalVariables.prototype.__init2.call(this);\n    }\n    /**\n   * @inheritDoc\n   */ setupOnce(addGlobalEventProcessor, getCurrentHub) {\n        this._setup(addGlobalEventProcessor, (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n            getCurrentHub,\n            \"call\",\n            (_24)=>_24(),\n            \"access\",\n            (_25)=>_25.getClient,\n            \"call\",\n            (_26)=>_26(),\n            \"optionalAccess\",\n            (_27)=>_27.getOptions,\n            \"call\",\n            (_28)=>_28()\n        ]));\n    }\n    /** Setup in a way that's easier to call from tests */ _setup(addGlobalEventProcessor, clientOptions) {\n        if (this._session && (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n            clientOptions,\n            \"optionalAccess\",\n            (_29)=>_29.includeLocalVariables\n        ])) {\n            // Only setup this integration if the Node version is >= v18\n            // https://github.com/getsentry/sentry-javascript/issues/7697\n            const unsupportedNodeVersion = (_nodeVersion_js__WEBPACK_IMPORTED_MODULE_2__.NODE_VERSION.major || 0) < 18;\n            if (unsupportedNodeVersion) {\n                _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.log(\"The `LocalVariables` integration is only supported on Node >= v18.\");\n                return;\n            }\n            const captureAll = this._options.captureAllExceptions !== false;\n            this._session.configureAndConnect((ev, complete)=>this._handlePaused(clientOptions.stackParser, ev, complete), captureAll);\n            if (captureAll) {\n                const max = this._options.maxExceptionsPerSecond || 50;\n                this._rateLimiter = createRateLimiter(max, ()=>{\n                    _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.log(\"Local variables rate-limit lifted.\");\n                    (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n                        this,\n                        \"access\",\n                        (_30)=>_30._session,\n                        \"optionalAccess\",\n                        (_31)=>_31.setPauseOnExceptions,\n                        \"call\",\n                        (_32)=>_32(true)\n                    ]);\n                }, (seconds)=>{\n                    _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.log(`Local variables rate-limit exceeded. Disabling capturing of caught exceptions for ${seconds} seconds.`);\n                    (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n                        this,\n                        \"access\",\n                        (_33)=>_33._session,\n                        \"optionalAccess\",\n                        (_34)=>_34.setPauseOnExceptions,\n                        \"call\",\n                        (_35)=>_35(false)\n                    ]);\n                });\n            }\n            addGlobalEventProcessor(async (event)=>this._addLocalVariables(event));\n        }\n    }\n    /**\n   * Handle the pause event\n   */ _handlePaused(stackParser, { params: { reason, data, callFrames } }, complete) {\n        if (reason !== \"exception\" && reason !== \"promiseRejection\") {\n            complete();\n            return;\n        }\n        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n            this,\n            \"access\",\n            (_36)=>_36._rateLimiter,\n            \"optionalCall\",\n            (_37)=>_37()\n        ]);\n        // data.description contains the original error.stack\n        const exceptionHash = hashFromStack(stackParser, (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n            data,\n            \"optionalAccess\",\n            (_38)=>_38.description\n        ]));\n        if (exceptionHash == undefined) {\n            complete();\n            return;\n        }\n        const { add, next } = createCallbackList((frames)=>{\n            this._cachedFrames.set(exceptionHash, frames);\n            complete();\n        });\n        // Because we're queuing up and making all these calls synchronously, we can potentially overflow the stack\n        // For this reason we only attempt to get local variables for the first 5 frames\n        for(let i = 0; i < Math.min(callFrames.length, 5); i++){\n            const { scopeChain, functionName, this: obj } = callFrames[i];\n            const localScope = scopeChain.find((scope)=>scope.type === \"local\");\n            // obj.className is undefined in ESM modules\n            const fn = obj.className === \"global\" || !obj.className ? functionName : `${obj.className}.${functionName}`;\n            if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n                localScope,\n                \"optionalAccess\",\n                (_39)=>_39.object,\n                \"access\",\n                (_40)=>_40.objectId\n            ]) === undefined) {\n                add((frames)=>{\n                    frames[i] = {\n                        function: fn\n                    };\n                    next(frames);\n                });\n            } else {\n                const id = localScope.object.objectId;\n                add((frames)=>(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n                        this,\n                        \"access\",\n                        (_41)=>_41._session,\n                        \"optionalAccess\",\n                        (_42)=>_42.getLocalVariables,\n                        \"call\",\n                        (_43)=>_43(id, (vars)=>{\n                                frames[i] = {\n                                    function: fn,\n                                    vars\n                                };\n                                next(frames);\n                            })\n                    ]));\n            }\n        }\n        next([]);\n    }\n    /**\n   * Adds local variables event stack frames.\n   */ _addLocalVariables(event) {\n        for (const exception of (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n            event,\n            \"optionalAccess\",\n            (_44)=>_44.exception,\n            \"optionalAccess\",\n            (_45)=>_45.values\n        ]) || []){\n            this._addLocalVariablesToException(exception);\n        }\n        return event;\n    }\n    /**\n   * Adds local variables to the exception stack frames.\n   */ _addLocalVariablesToException(exception) {\n        const hash = hashFrames((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n            exception,\n            \"optionalAccess\",\n            (_46)=>_46.stacktrace,\n            \"optionalAccess\",\n            (_47)=>_47.frames\n        ]));\n        if (hash === undefined) {\n            return;\n        }\n        // Check if we have local variables for an exception that matches the hash\n        // remove is identical to get but also removes the entry from the cache\n        const cachedFrames = this._cachedFrames.remove(hash);\n        if (cachedFrames === undefined) {\n            return;\n        }\n        const frameCount = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n            exception,\n            \"access\",\n            (_48)=>_48.stacktrace,\n            \"optionalAccess\",\n            (_49)=>_49.frames,\n            \"optionalAccess\",\n            (_50)=>_50.length\n        ]) || 0;\n        for(let i = 0; i < frameCount; i++){\n            // Sentry frames are in reverse order\n            const frameIndex = frameCount - i - 1;\n            // Drop out if we run out of frames to match up\n            if (!(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__._optionalChain)([\n                exception,\n                \"optionalAccess\",\n                (_51)=>_51.stacktrace,\n                \"optionalAccess\",\n                (_52)=>_52.frames,\n                \"optionalAccess\",\n                (_53)=>_53[frameIndex]\n            ]) || !cachedFrames[i]) {\n                break;\n            }\n            if (// We need to have vars to add\n            cachedFrames[i].vars === undefined || // We're not interested in frames that are not in_app because the vars are not relevant\n            exception.stacktrace.frames[frameIndex].in_app === false || // The function names need to match\n            !functionNamesMatch(exception.stacktrace.frames[frameIndex].function, cachedFrames[i].function)) {\n                continue;\n            }\n            exception.stacktrace.frames[frameIndex].vars = cachedFrames[i].vars;\n        }\n    }\n}\nLocalVariables.__initStatic();\n //# sourceMappingURL=localvariables.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/integrations/localvariables.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/integrations/modules.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/node/esm/integrations/modules.js ***!
  \***************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Modules: () => (/* binding */ Modules)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n\n\nlet moduleCache;\n/** Extract information about paths */ function getPaths() {\n    try {\n        return __webpack_require__.c ? Object.keys(__webpack_require__.c) : [];\n    } catch (e) {\n        return [];\n    }\n}\n/** Extract information about package.json modules */ function collectModules() {\n    const mainPaths = __webpack_require__.c[__webpack_require__.s] && __webpack_require__.c[__webpack_require__.s].paths || [];\n    const paths = getPaths();\n    const infos = {};\n    const seen = {};\n    paths.forEach((path)=>{\n        let dir = path;\n        /** Traverse directories upward in the search of package.json file */ const updir = ()=>{\n            const orig = dir;\n            dir = (0,path__WEBPACK_IMPORTED_MODULE_1__.dirname)(orig);\n            if (!dir || orig === dir || seen[orig]) {\n                return undefined;\n            }\n            if (mainPaths.indexOf(dir) < 0) {\n                return updir();\n            }\n            const pkgfile = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(orig, \"package.json\");\n            seen[orig] = true;\n            if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(pkgfile)) {\n                return updir();\n            }\n            try {\n                const info = JSON.parse((0,fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync)(pkgfile, \"utf8\"));\n                infos[info.name] = info.version;\n            } catch (_oO) {\n            // no-empty\n            }\n        };\n        updir();\n    });\n    return infos;\n}\n/** Add node modules / packages to the event */ class Modules {\n    constructor(){\n        Modules.prototype.__init.call(this);\n    }\n    /**\n   * @inheritDoc\n   */ static __initStatic() {\n        this.id = \"Modules\";\n    }\n    /**\n   * @inheritDoc\n   */ __init() {\n        this.name = Modules.id;\n    }\n    /**\n   * @inheritDoc\n   */ setupOnce(addGlobalEventProcessor, getCurrentHub) {\n        addGlobalEventProcessor((event)=>{\n            if (!getCurrentHub().getIntegration(Modules)) {\n                return event;\n            }\n            return {\n                ...event,\n                modules: {\n                    ...event.modules,\n                    ...this._getModules()\n                }\n            };\n        });\n    }\n    /** Fetches the list of modules and the versions loaded by the entry file for your node.js app. */ _getModules() {\n        if (!moduleCache) {\n            moduleCache = collectModules();\n        }\n        return moduleCache;\n    }\n}\nModules.__initStatic();\n //# sourceMappingURL=modules.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9pbnRlZ3JhdGlvbnMvbW9kdWxlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE4QztBQUNUO0FBRXJDLElBQUlJO0FBRUosb0NBQW9DLEdBQ3BDLFNBQVNDO0lBQ1AsSUFBSTtRQUNGLE9BQU9DLHFCQUFhLEdBQUdFLE9BQU9DLElBQUksQ0FBQ0gscUJBQWEsSUFBSyxFQUFFO0lBQ3pELEVBQUUsT0FBT0ksR0FBRztRQUNWLE9BQU8sRUFBRTtJQUNYO0FBQ0Y7QUFFQSxtREFBbUQsR0FDbkQsU0FBU0M7SUFHUCxNQUFNQyxZQUFZLDRDQUFhLElBQUlOLDRDQUFZLENBQUNRLEtBQUssSUFBSyxFQUFFO0lBQzVELE1BQU1BLFFBQVFUO0lBQ2QsTUFBTVUsUUFFTCxDQUFDO0lBQ0YsTUFBTUMsT0FFTCxDQUFDO0lBRUZGLE1BQU1HLE9BQU8sQ0FBQ0MsQ0FBQUE7UUFDWixJQUFJQyxNQUFNRDtRQUVWLG1FQUFtRSxHQUNuRSxNQUFNRSxRQUFRO1lBQ1osTUFBTUMsT0FBT0Y7WUFDYkEsTUFBTWpCLDZDQUFPQSxDQUFDbUI7WUFFZCxJQUFJLENBQUNGLE9BQU9FLFNBQVNGLE9BQU9ILElBQUksQ0FBQ0ssS0FBSyxFQUFFO2dCQUN0QyxPQUFPQztZQUNUO1lBQ0EsSUFBSVYsVUFBVVcsT0FBTyxDQUFDSixPQUFPLEdBQUc7Z0JBQzlCLE9BQU9DO1lBQ1Q7WUFFQSxNQUFNSSxVQUFVckIsMENBQUlBLENBQUNrQixNQUFNO1lBQzNCTCxJQUFJLENBQUNLLEtBQUssR0FBRztZQUViLElBQUksQ0FBQ3JCLDhDQUFVQSxDQUFDd0IsVUFBVTtnQkFDeEIsT0FBT0o7WUFDVDtZQUVBLElBQUk7Z0JBQ0YsTUFBTUssT0FBT0MsS0FBS0MsS0FBSyxDQUFDMUIsZ0RBQVlBLENBQUN1QixTQUFTO2dCQUc5Q1QsS0FBSyxDQUFDVSxLQUFLRyxJQUFJLENBQUMsR0FBR0gsS0FBS0ksT0FBTztZQUNqQyxFQUFFLE9BQU9DLEtBQUs7WUFDWixXQUFXO1lBQ2I7UUFDRjtRQUVBVjtJQUNGO0lBRUEsT0FBT0w7QUFDVDtBQUVBLDZDQUE2QyxHQUM3QyxNQUFNZ0I7SUFBVUMsYUFBYztRQUFFRCxRQUFRRSxTQUFTLENBQUNDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDLElBQUk7SUFBRztJQUNuRTs7R0FFQyxHQUNBLE9BQU9DLGVBQWU7UUFBQyxJQUFJLENBQUNDLEVBQUUsR0FBRztJQUFVO0lBRTVDOztHQUVDLEdBQ0FILFNBQVM7UUFBQyxJQUFJLENBQUNOLElBQUksR0FBR0csUUFBUU0sRUFBRTtJQUFDO0lBRWxDOztHQUVDLEdBQ0FDLFVBQVVDLHVCQUF1QixFQUFFQyxhQUFhLEVBQUU7UUFDakRELHdCQUF3QkUsQ0FBQUE7WUFDdEIsSUFBSSxDQUFDRCxnQkFBZ0JFLGNBQWMsQ0FBQ1gsVUFBVTtnQkFDNUMsT0FBT1U7WUFDVDtZQUNBLE9BQU87Z0JBQ0wsR0FBR0EsS0FBSztnQkFDUkUsU0FBUztvQkFDUCxHQUFHRixNQUFNRSxPQUFPO29CQUNoQixHQUFHLElBQUksQ0FBQ0MsV0FBVyxFQUFFO2dCQUN2QjtZQUNGO1FBQ0Y7SUFDRjtJQUVBLGdHQUFnRyxHQUMvRkEsY0FBYztRQUNiLElBQUksQ0FBQ3hDLGFBQWE7WUFDaEJBLGNBQWNPO1FBQ2hCO1FBQ0EsT0FBT1A7SUFDVDtBQUNGO0FBQUUyQixRQUFRSyxZQUFZO0FBRUgsQ0FDbkIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9lc20vaW50ZWdyYXRpb25zL21vZHVsZXMuanM/NWI2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGlzdHNTeW5jLCByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7XG5pbXBvcnQgeyBkaXJuYW1lLCBqb2luIH0gZnJvbSAncGF0aCc7XG5cbmxldCBtb2R1bGVDYWNoZTtcblxuLyoqIEV4dHJhY3QgaW5mb3JtYXRpb24gYWJvdXQgcGF0aHMgKi9cbmZ1bmN0aW9uIGdldFBhdGhzKCkge1xuICB0cnkge1xuICAgIHJldHVybiByZXF1aXJlLmNhY2hlID8gT2JqZWN0LmtleXMocmVxdWlyZS5jYWNoZSApIDogW107XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cblxuLyoqIEV4dHJhY3QgaW5mb3JtYXRpb24gYWJvdXQgcGFja2FnZS5qc29uIG1vZHVsZXMgKi9cbmZ1bmN0aW9uIGNvbGxlY3RNb2R1bGVzKClcblxuIHtcbiAgY29uc3QgbWFpblBhdGhzID0gKHJlcXVpcmUubWFpbiAmJiByZXF1aXJlLm1haW4ucGF0aHMpIHx8IFtdO1xuICBjb25zdCBwYXRocyA9IGdldFBhdGhzKCk7XG4gIGNvbnN0IGluZm9zXG5cbiA9IHt9O1xuICBjb25zdCBzZWVuXG5cbiA9IHt9O1xuXG4gIHBhdGhzLmZvckVhY2gocGF0aCA9PiB7XG4gICAgbGV0IGRpciA9IHBhdGg7XG5cbiAgICAvKiogVHJhdmVyc2UgZGlyZWN0b3JpZXMgdXB3YXJkIGluIHRoZSBzZWFyY2ggb2YgcGFja2FnZS5qc29uIGZpbGUgKi9cbiAgICBjb25zdCB1cGRpciA9ICgpID0+IHtcbiAgICAgIGNvbnN0IG9yaWcgPSBkaXI7XG4gICAgICBkaXIgPSBkaXJuYW1lKG9yaWcpO1xuXG4gICAgICBpZiAoIWRpciB8fCBvcmlnID09PSBkaXIgfHwgc2VlbltvcmlnXSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKG1haW5QYXRocy5pbmRleE9mKGRpcikgPCAwKSB7XG4gICAgICAgIHJldHVybiB1cGRpcigpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwa2dmaWxlID0gam9pbihvcmlnLCAncGFja2FnZS5qc29uJyk7XG4gICAgICBzZWVuW29yaWddID0gdHJ1ZTtcblxuICAgICAgaWYgKCFleGlzdHNTeW5jKHBrZ2ZpbGUpKSB7XG4gICAgICAgIHJldHVybiB1cGRpcigpO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBpbmZvID0gSlNPTi5wYXJzZShyZWFkRmlsZVN5bmMocGtnZmlsZSwgJ3V0ZjgnKSlcblxuO1xuICAgICAgICBpbmZvc1tpbmZvLm5hbWVdID0gaW5mby52ZXJzaW9uO1xuICAgICAgfSBjYXRjaCAoX29PKSB7XG4gICAgICAgIC8vIG5vLWVtcHR5XG4gICAgICB9XG4gICAgfTtcblxuICAgIHVwZGlyKCk7XG4gIH0pO1xuXG4gIHJldHVybiBpbmZvcztcbn1cblxuLyoqIEFkZCBub2RlIG1vZHVsZXMgLyBwYWNrYWdlcyB0byB0aGUgZXZlbnQgKi9cbmNsYXNzIE1vZHVsZXMgIHtjb25zdHJ1Y3RvcigpIHsgTW9kdWxlcy5wcm90b3R5cGUuX19pbml0LmNhbGwodGhpcyk7IH1cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAgc3RhdGljIF9faW5pdFN0YXRpYygpIHt0aGlzLmlkID0gJ01vZHVsZXMnO31cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBfX2luaXQoKSB7dGhpcy5uYW1lID0gTW9kdWxlcy5pZDt9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAgc2V0dXBPbmNlKGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yLCBnZXRDdXJyZW50SHViKSB7XG4gICAgYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IoZXZlbnQgPT4ge1xuICAgICAgaWYgKCFnZXRDdXJyZW50SHViKCkuZ2V0SW50ZWdyYXRpb24oTW9kdWxlcykpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uZXZlbnQsXG4gICAgICAgIG1vZHVsZXM6IHtcbiAgICAgICAgICAuLi5ldmVudC5tb2R1bGVzLFxuICAgICAgICAgIC4uLnRoaXMuX2dldE1vZHVsZXMoKSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICAvKiogRmV0Y2hlcyB0aGUgbGlzdCBvZiBtb2R1bGVzIGFuZCB0aGUgdmVyc2lvbnMgbG9hZGVkIGJ5IHRoZSBlbnRyeSBmaWxlIGZvciB5b3VyIG5vZGUuanMgYXBwLiAqL1xuICAgX2dldE1vZHVsZXMoKSB7XG4gICAgaWYgKCFtb2R1bGVDYWNoZSkge1xuICAgICAgbW9kdWxlQ2FjaGUgPSBjb2xsZWN0TW9kdWxlcygpO1xuICAgIH1cbiAgICByZXR1cm4gbW9kdWxlQ2FjaGU7XG4gIH1cbn0gTW9kdWxlcy5fX2luaXRTdGF0aWMoKTtcblxuZXhwb3J0IHsgTW9kdWxlcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlcy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJleGlzdHNTeW5jIiwicmVhZEZpbGVTeW5jIiwiZGlybmFtZSIsImpvaW4iLCJtb2R1bGVDYWNoZSIsImdldFBhdGhzIiwicmVxdWlyZSIsImNhY2hlIiwiT2JqZWN0Iiwia2V5cyIsImUiLCJjb2xsZWN0TW9kdWxlcyIsIm1haW5QYXRocyIsIm1haW4iLCJwYXRocyIsImluZm9zIiwic2VlbiIsImZvckVhY2giLCJwYXRoIiwiZGlyIiwidXBkaXIiLCJvcmlnIiwidW5kZWZpbmVkIiwiaW5kZXhPZiIsInBrZ2ZpbGUiLCJpbmZvIiwiSlNPTiIsInBhcnNlIiwibmFtZSIsInZlcnNpb24iLCJfb08iLCJNb2R1bGVzIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfX2luaXQiLCJjYWxsIiwiX19pbml0U3RhdGljIiwiaWQiLCJzZXR1cE9uY2UiLCJhZGRHbG9iYWxFdmVudFByb2Nlc3NvciIsImdldEN1cnJlbnRIdWIiLCJldmVudCIsImdldEludGVncmF0aW9uIiwibW9kdWxlcyIsIl9nZXRNb2R1bGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/integrations/modules.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/integrations/onuncaughtexception.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/node/esm/integrations/onuncaughtexception.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OnUncaughtException: () => (/* binding */ OnUncaughtException)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/exports.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/node/esm/debug-build.js\");\n/* harmony import */ var _utils_errorhandling_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/errorhandling.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/utils/errorhandling.js\");\n\n\n\n\n/** Global Exception handler */ class OnUncaughtException {\n    /**\n   * @inheritDoc\n   */ static __initStatic() {\n        this.id = \"OnUncaughtException\";\n    }\n    /**\n   * @inheritDoc\n   */ __init() {\n        this.name = OnUncaughtException.id;\n    }\n    /**\n   * @inheritDoc\n   */ __init2() {\n        this.handler = this._makeErrorHandler();\n    }\n    // CAREFUL: Please think twice before updating the way _options looks because the Next.js SDK depends on it in `index.server.ts`\n    /**\n   * @inheritDoc\n   */ constructor(options = {}){\n        OnUncaughtException.prototype.__init.call(this);\n        OnUncaughtException.prototype.__init2.call(this);\n        this._options = {\n            exitEvenIfOtherHandlersAreRegistered: true,\n            ...options\n        };\n    }\n    /**\n   * @inheritDoc\n   */ setupOnce() {\n        global.process.on(\"uncaughtException\", this.handler);\n    }\n    /**\n   * @hidden\n   */ _makeErrorHandler() {\n        const timeout = 2000;\n        let caughtFirstError = false;\n        let caughtSecondError = false;\n        let calledFatalError = false;\n        let firstError;\n        return (error)=>{\n            let onFatalError = _utils_errorhandling_js__WEBPACK_IMPORTED_MODULE_0__.logAndExitProcess;\n            const client = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.getClient)();\n            if (this._options.onFatalError) {\n                onFatalError = this._options.onFatalError;\n            } else if (client && client.getOptions().onFatalError) {\n                onFatalError = client.getOptions().onFatalError;\n            }\n            // Attaching a listener to `uncaughtException` will prevent the node process from exiting. We generally do not\n            // want to alter this behaviour so we check for other listeners that users may have attached themselves and adjust\n            // exit behaviour of the SDK accordingly:\n            // - If other listeners are attached, do not exit.\n            // - If the only listener attached is ours, exit.\n            const userProvidedListenersCount = global.process.listeners(\"uncaughtException\").reduce((acc, listener)=>{\n                if (// There are 3 listeners we ignore:\n                listener.name === \"domainUncaughtExceptionClear\" || // as soon as we're using domains this listener is attached by node itself\n                listener.tag && listener.tag === \"sentry_tracingErrorCallback\" || // the handler we register for tracing\n                listener === this.handler // the handler we register in this integration\n                ) {\n                    return acc;\n                } else {\n                    return acc + 1;\n                }\n            }, 0);\n            const processWouldExit = userProvidedListenersCount === 0;\n            const shouldApplyFatalHandlingLogic = this._options.exitEvenIfOtherHandlersAreRegistered || processWouldExit;\n            if (!caughtFirstError) {\n                const hub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.getCurrentHub)();\n                // this is the first uncaught error and the ultimate reason for shutting down\n                // we want to do absolutely everything possible to ensure it gets captured\n                // also we want to make sure we don't go recursion crazy if more errors happen after this one\n                firstError = error;\n                caughtFirstError = true;\n                if (hub.getIntegration(OnUncaughtException)) {\n                    hub.withScope((scope)=>{\n                        scope.setLevel(\"fatal\");\n                        hub.captureException(error, {\n                            originalException: error,\n                            data: {\n                                mechanism: {\n                                    handled: false,\n                                    type: \"onuncaughtexception\"\n                                }\n                            }\n                        });\n                        if (!calledFatalError && shouldApplyFatalHandlingLogic) {\n                            calledFatalError = true;\n                            onFatalError(error);\n                        }\n                    });\n                } else {\n                    if (!calledFatalError && shouldApplyFatalHandlingLogic) {\n                        calledFatalError = true;\n                        onFatalError(error);\n                    }\n                }\n            } else {\n                if (shouldApplyFatalHandlingLogic) {\n                    if (calledFatalError) {\n                        // we hit an error *after* calling onFatalError - pretty boned at this point, just shut it down\n                        _debug_build_js__WEBPACK_IMPORTED_MODULE_3__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.warn(\"uncaught exception after calling fatal error shutdown callback - this is bad! forcing shutdown\");\n                        (0,_utils_errorhandling_js__WEBPACK_IMPORTED_MODULE_0__.logAndExitProcess)(error);\n                    } else if (!caughtSecondError) {\n                        // two cases for how we can hit this branch:\n                        //   - capturing of first error blew up and we just caught the exception from that\n                        //     - quit trying to capture, proceed with shutdown\n                        //   - a second independent error happened while waiting for first error to capture\n                        //     - want to avoid causing premature shutdown before first error capture finishes\n                        // it's hard to immediately tell case 1 from case 2 without doing some fancy/questionable domain stuff\n                        // so let's instead just delay a bit before we proceed with our action here\n                        // in case 1, we just wait a bit unnecessarily but ultimately do the same thing\n                        // in case 2, the delay hopefully made us wait long enough for the capture to finish\n                        // two potential nonideal outcomes:\n                        //   nonideal case 1: capturing fails fast, we sit around for a few seconds unnecessarily before proceeding correctly by calling onFatalError\n                        //   nonideal case 2: case 2 happens, 1st error is captured but slowly, timeout completes before capture and we treat second error as the sendErr of (nonexistent) failure from trying to capture first error\n                        // note that after hitting this branch, we might catch more errors where (caughtSecondError && !calledFatalError)\n                        //   we ignore them - they don't matter to us, we're just waiting for the second error timeout to finish\n                        caughtSecondError = true;\n                        setTimeout(()=>{\n                            if (!calledFatalError) {\n                                // it was probably case 1, let's treat err as the sendErr and call onFatalError\n                                calledFatalError = true;\n                                onFatalError(firstError, error);\n                            }\n                        }, timeout); // capturing could take at least sendTimeout to fail, plus an arbitrary second for how long it takes to collect surrounding source etc\n                    }\n                }\n            }\n        };\n    }\n}\nOnUncaughtException.__initStatic();\n //# sourceMappingURL=onuncaughtexception.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/integrations/onuncaughtexception.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/integrations/onunhandledrejection.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/node/esm/integrations/onunhandledrejection.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OnUnhandledRejection: () => (/* binding */ OnUnhandledRejection)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _utils_errorhandling_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/errorhandling.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/utils/errorhandling.js\");\n\n\n\n/** Global Promise Rejection handler */ class OnUnhandledRejection {\n    /**\n   * @inheritDoc\n   */ static __initStatic() {\n        this.id = \"OnUnhandledRejection\";\n    }\n    /**\n   * @inheritDoc\n   */ __init() {\n        this.name = OnUnhandledRejection.id;\n    }\n    /**\n   * @inheritDoc\n   */ constructor(_options = {\n        mode: \"warn\"\n    }){\n        this._options = _options;\n        OnUnhandledRejection.prototype.__init.call(this);\n    }\n    /**\n   * @inheritDoc\n   */ setupOnce() {\n        global.process.on(\"unhandledRejection\", this.sendUnhandledPromise.bind(this));\n    }\n    /**\n   * Send an exception with reason\n   * @param reason string\n   * @param promise promise\n   */ sendUnhandledPromise(reason, promise) {\n        const hub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getCurrentHub)();\n        if (hub.getIntegration(OnUnhandledRejection)) {\n            hub.withScope((scope)=>{\n                scope.setExtra(\"unhandledPromiseRejection\", true);\n                hub.captureException(reason, {\n                    originalException: promise,\n                    data: {\n                        mechanism: {\n                            handled: false,\n                            type: \"onunhandledrejection\"\n                        }\n                    }\n                });\n            });\n        }\n        this._handleRejection(reason);\n    }\n    /**\n   * Handler for `mode` option\n   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _handleRejection(reason) {\n        // https://github.com/nodejs/node/blob/7cf6f9e964aa00772965391c23acda6d71972a9a/lib/internal/process/promises.js#L234-L240\n        const rejectionWarning = \"This error originated either by \" + \"throwing inside of an async function without a catch block, \" + \"or by rejecting a promise which was not handled with .catch().\" + \" The promise rejected with the reason:\";\n        /* eslint-disable no-console */ if (this._options.mode === \"warn\") {\n            (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.consoleSandbox)(()=>{\n                console.warn(rejectionWarning);\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                console.error(reason && reason.stack ? reason.stack : reason);\n            });\n        } else if (this._options.mode === \"strict\") {\n            (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.consoleSandbox)(()=>{\n                console.warn(rejectionWarning);\n            });\n            (0,_utils_errorhandling_js__WEBPACK_IMPORTED_MODULE_2__.logAndExitProcess)(reason);\n        }\n    /* eslint-enable no-console */ }\n}\nOnUnhandledRejection.__initStatic();\n //# sourceMappingURL=onunhandledrejection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9pbnRlZ3JhdGlvbnMvb251bmhhbmRsZWRyZWplY3Rpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE2QztBQUNFO0FBQ2M7QUFFN0QscUNBQXFDLEdBQ3JDLE1BQU1HO0lBQ0o7O0dBRUMsR0FDQSxPQUFPQyxlQUFlO1FBQUMsSUFBSSxDQUFDQyxFQUFFLEdBQUc7SUFBdUI7SUFFekQ7O0dBRUMsR0FDQUMsU0FBUztRQUFDLElBQUksQ0FBQ0MsSUFBSSxHQUFHSixxQkFBcUJFLEVBQUU7SUFBQztJQUUvQzs7R0FFQyxHQUNBRyxZQUNHQyxXQUVIO1FBQUVDLE1BQU07SUFBTyxDQUFDLENBQ2Y7UUFBQyxJQUFJLENBQUNELFFBQVEsR0FBR0E7UUFBU04scUJBQXFCUSxTQUFTLENBQUNMLE1BQU0sQ0FBQ00sSUFBSSxDQUFDLElBQUk7SUFBRTtJQUU3RTs7R0FFQyxHQUNBQyxZQUFZO1FBQ1hDLE9BQU9DLE9BQU8sQ0FBQ0MsRUFBRSxDQUFDLHNCQUFzQixJQUFJLENBQUNDLG9CQUFvQixDQUFDQyxJQUFJLENBQUMsSUFBSTtJQUM3RTtJQUVBOzs7O0dBSUMsR0FDQUQscUJBQXFCRSxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUNyQyxNQUFNQyxNQUFNckIsMkRBQWFBO1FBQ3pCLElBQUlxQixJQUFJQyxjQUFjLENBQUNuQix1QkFBdUI7WUFDNUNrQixJQUFJRSxTQUFTLENBQUMsQ0FBQ0M7Z0JBQ2JBLE1BQU1DLFFBQVEsQ0FBQyw2QkFBNkI7Z0JBQzVDSixJQUFJSyxnQkFBZ0IsQ0FBQ1AsUUFBUTtvQkFDM0JRLG1CQUFtQlA7b0JBQ25CUSxNQUFNO3dCQUFFQyxXQUFXOzRCQUFFQyxTQUFTOzRCQUFPQyxNQUFNO3dCQUF1QjtvQkFBRTtnQkFDdEU7WUFDRjtRQUNGO1FBQ0EsSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBQ2I7SUFDeEI7SUFFQTs7R0FFQyxHQUNELDhEQUE4RDtJQUM3RGEsaUJBQWlCYixNQUFNLEVBQUU7UUFDeEIsMEhBQTBIO1FBQzFILE1BQU1jLG1CQUNKLHFDQUNBLGlFQUNBLG1FQUNBO1FBRUYsNkJBQTZCLEdBQzdCLElBQUksSUFBSSxDQUFDeEIsUUFBUSxDQUFDQyxJQUFJLEtBQUssUUFBUTtZQUNqQ1QsNkRBQWNBLENBQUM7Z0JBQ2JpQyxRQUFRQyxJQUFJLENBQUNGO2dCQUNiLHNFQUFzRTtnQkFDdEVDLFFBQVFFLEtBQUssQ0FBQ2pCLFVBQVVBLE9BQU9rQixLQUFLLEdBQUdsQixPQUFPa0IsS0FBSyxHQUFHbEI7WUFDeEQ7UUFDRixPQUFPLElBQUksSUFBSSxDQUFDVixRQUFRLENBQUNDLElBQUksS0FBSyxVQUFVO1lBQzFDVCw2REFBY0EsQ0FBQztnQkFDYmlDLFFBQVFDLElBQUksQ0FBQ0Y7WUFDZjtZQUNBL0IsMEVBQWlCQSxDQUFDaUI7UUFDcEI7SUFDQSw0QkFBNEIsR0FDOUI7QUFDRjtBQUFFaEIscUJBQXFCQyxZQUFZO0FBRUgsQ0FDaEMsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9lc20vaW50ZWdyYXRpb25zL29udW5oYW5kbGVkcmVqZWN0aW9uLmpzP2QwZjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0Q3VycmVudEh1YiB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBjb25zb2xlU2FuZGJveCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgbG9nQW5kRXhpdFByb2Nlc3MgfSBmcm9tICcuL3V0aWxzL2Vycm9yaGFuZGxpbmcuanMnO1xuXG4vKiogR2xvYmFsIFByb21pc2UgUmVqZWN0aW9uIGhhbmRsZXIgKi9cbmNsYXNzIE9uVW5oYW5kbGVkUmVqZWN0aW9uICB7XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgIHN0YXRpYyBfX2luaXRTdGF0aWMoKSB7dGhpcy5pZCA9ICdPblVuaGFuZGxlZFJlamVjdGlvbic7fVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgIF9faW5pdCgpIHt0aGlzLm5hbWUgPSBPblVuaGFuZGxlZFJlamVjdGlvbi5pZDt9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAgY29uc3RydWN0b3IoXG4gICAgICBfb3B0aW9uc1xuXG4gPSB7IG1vZGU6ICd3YXJuJyB9LFxuICApIHt0aGlzLl9vcHRpb25zID0gX29wdGlvbnM7T25VbmhhbmRsZWRSZWplY3Rpb24ucHJvdG90eXBlLl9faW5pdC5jYWxsKHRoaXMpO31cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBzZXR1cE9uY2UoKSB7XG4gICAgZ2xvYmFsLnByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIHRoaXMuc2VuZFVuaGFuZGxlZFByb21pc2UuYmluZCh0aGlzKSk7XG4gIH1cblxuICAvKipcbiAgICogU2VuZCBhbiBleGNlcHRpb24gd2l0aCByZWFzb25cbiAgICogQHBhcmFtIHJlYXNvbiBzdHJpbmdcbiAgICogQHBhcmFtIHByb21pc2UgcHJvbWlzZVxuICAgKi9cbiAgIHNlbmRVbmhhbmRsZWRQcm9taXNlKHJlYXNvbiwgcHJvbWlzZSkge1xuICAgIGNvbnN0IGh1YiA9IGdldEN1cnJlbnRIdWIoKTtcbiAgICBpZiAoaHViLmdldEludGVncmF0aW9uKE9uVW5oYW5kbGVkUmVqZWN0aW9uKSkge1xuICAgICAgaHViLndpdGhTY29wZSgoc2NvcGUpID0+IHtcbiAgICAgICAgc2NvcGUuc2V0RXh0cmEoJ3VuaGFuZGxlZFByb21pc2VSZWplY3Rpb24nLCB0cnVlKTtcbiAgICAgICAgaHViLmNhcHR1cmVFeGNlcHRpb24ocmVhc29uLCB7XG4gICAgICAgICAgb3JpZ2luYWxFeGNlcHRpb246IHByb21pc2UsXG4gICAgICAgICAgZGF0YTogeyBtZWNoYW5pc206IHsgaGFuZGxlZDogZmFsc2UsIHR5cGU6ICdvbnVuaGFuZGxlZHJlamVjdGlvbicgfSB9LFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLl9oYW5kbGVSZWplY3Rpb24ocmVhc29uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVyIGZvciBgbW9kZWAgb3B0aW9uXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgX2hhbmRsZVJlamVjdGlvbihyZWFzb24pIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi83Y2Y2ZjllOTY0YWEwMDc3Mjk2NTM5MWMyM2FjZGE2ZDcxOTcyYTlhL2xpYi9pbnRlcm5hbC9wcm9jZXNzL3Byb21pc2VzLmpzI0wyMzQtTDI0MFxuICAgIGNvbnN0IHJlamVjdGlvbldhcm5pbmcgPVxuICAgICAgJ1RoaXMgZXJyb3Igb3JpZ2luYXRlZCBlaXRoZXIgYnkgJyArXG4gICAgICAndGhyb3dpbmcgaW5zaWRlIG9mIGFuIGFzeW5jIGZ1bmN0aW9uIHdpdGhvdXQgYSBjYXRjaCBibG9jaywgJyArXG4gICAgICAnb3IgYnkgcmVqZWN0aW5nIGEgcHJvbWlzZSB3aGljaCB3YXMgbm90IGhhbmRsZWQgd2l0aCAuY2F0Y2goKS4nICtcbiAgICAgICcgVGhlIHByb21pc2UgcmVqZWN0ZWQgd2l0aCB0aGUgcmVhc29uOic7XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gICAgaWYgKHRoaXMuX29wdGlvbnMubW9kZSA9PT0gJ3dhcm4nKSB7XG4gICAgICBjb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUud2FybihyZWplY3Rpb25XYXJuaW5nKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICBjb25zb2xlLmVycm9yKHJlYXNvbiAmJiByZWFzb24uc3RhY2sgPyByZWFzb24uc3RhY2sgOiByZWFzb24pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9vcHRpb25zLm1vZGUgPT09ICdzdHJpY3QnKSB7XG4gICAgICBjb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUud2FybihyZWplY3Rpb25XYXJuaW5nKTtcbiAgICAgIH0pO1xuICAgICAgbG9nQW5kRXhpdFByb2Nlc3MocmVhc29uKTtcbiAgICB9XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG4gIH1cbn0gT25VbmhhbmRsZWRSZWplY3Rpb24uX19pbml0U3RhdGljKCk7XG5cbmV4cG9ydCB7IE9uVW5oYW5kbGVkUmVqZWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbnVuaGFuZGxlZHJlamVjdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJnZXRDdXJyZW50SHViIiwiY29uc29sZVNhbmRib3giLCJsb2dBbmRFeGl0UHJvY2VzcyIsIk9uVW5oYW5kbGVkUmVqZWN0aW9uIiwiX19pbml0U3RhdGljIiwiaWQiLCJfX2luaXQiLCJuYW1lIiwiY29uc3RydWN0b3IiLCJfb3B0aW9ucyIsIm1vZGUiLCJwcm90b3R5cGUiLCJjYWxsIiwic2V0dXBPbmNlIiwiZ2xvYmFsIiwicHJvY2VzcyIsIm9uIiwic2VuZFVuaGFuZGxlZFByb21pc2UiLCJiaW5kIiwicmVhc29uIiwicHJvbWlzZSIsImh1YiIsImdldEludGVncmF0aW9uIiwid2l0aFNjb3BlIiwic2NvcGUiLCJzZXRFeHRyYSIsImNhcHR1cmVFeGNlcHRpb24iLCJvcmlnaW5hbEV4Y2VwdGlvbiIsImRhdGEiLCJtZWNoYW5pc20iLCJoYW5kbGVkIiwidHlwZSIsIl9oYW5kbGVSZWplY3Rpb24iLCJyZWplY3Rpb25XYXJuaW5nIiwiY29uc29sZSIsIndhcm4iLCJlcnJvciIsInN0YWNrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/integrations/onunhandledrejection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/integrations/spotlight.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/node/esm/integrations/spotlight.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Spotlight: () => (/* binding */ Spotlight)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(http__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(url__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/envelope.js\");\n\n\n\n\n/**\n * Use this integration to send errors and transactions to Spotlight.\n *\n * Learn more about spotlight at https://spotlightjs.com\n *\n * Important: This integration only works with Node 18 or newer\n */ class Spotlight {\n    static __initStatic() {\n        this.id = \"Spotlight\";\n    }\n    __init() {\n        this.name = Spotlight.id;\n    }\n    constructor(options){\n        Spotlight.prototype.__init.call(this);\n        this._options = {\n            sidecarUrl: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__._optionalChain)([\n                options,\n                \"optionalAccess\",\n                (_)=>_.sidecarUrl\n            ]) || \"http://localhost:8969/stream\"\n        };\n    }\n    /**\n   * JSDoc\n   */ setupOnce() {\n    // empty but otherwise TS complains\n    }\n    /**\n   * Sets up forwarding envelopes to the Spotlight Sidecar\n   */ setup(client) {\n        if (typeof process === \"object\" && process.env && \"development\" !== \"development\") {}\n        connectToSpotlight(client, this._options);\n    }\n}\nSpotlight.__initStatic();\nfunction connectToSpotlight(client, options) {\n    const spotlightUrl = parseSidecarUrl(options.sidecarUrl);\n    if (!spotlightUrl) {\n        return;\n    }\n    let failedRequests = 0;\n    if (typeof client.on !== \"function\") {\n        _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.warn(\"[Spotlight] Cannot connect to spotlight due to missing method on SDK client (`client.on`)\");\n        return;\n    }\n    client.on(\"beforeEnvelope\", (envelope)=>{\n        if (failedRequests > 3) {\n            _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.warn(\"[Spotlight] Disabled Sentry -> Spotlight integration due to too many failed requests\");\n            return;\n        }\n        const serializedEnvelope = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.serializeEnvelope)(envelope);\n        const req = http__WEBPACK_IMPORTED_MODULE_0__.request({\n            method: \"POST\",\n            path: spotlightUrl.pathname,\n            hostname: spotlightUrl.hostname,\n            port: spotlightUrl.port,\n            headers: {\n                \"Content-Type\": \"application/x-sentry-envelope\"\n            }\n        }, (res)=>{\n            res.on(\"data\", ()=>{\n            // Drain socket\n            });\n            res.on(\"end\", ()=>{\n            // Drain socket\n            });\n            res.setEncoding(\"utf8\");\n        });\n        req.on(\"error\", ()=>{\n            failedRequests++;\n            _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.warn(\"[Spotlight] Failed to send envelope to Spotlight Sidecar\");\n        });\n        req.write(serializedEnvelope);\n        req.end();\n    });\n}\nfunction parseSidecarUrl(url) {\n    try {\n        return new url__WEBPACK_IMPORTED_MODULE_1__.URL(`${url}`);\n    } catch (e) {\n        _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.warn(`[Spotlight] Invalid sidecar URL: ${url}`);\n        return undefined;\n    }\n}\n //# sourceMappingURL=spotlight.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9pbnRlZ3JhdGlvbnMvc3BvdGxpZ2h0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQStDO0FBQ2xCO0FBQ0g7QUFDZ0M7QUFFMUQ7Ozs7OztDQU1DLEdBQ0QsTUFBTUs7SUFDSCxPQUFPQyxlQUFlO1FBQUMsSUFBSSxDQUFDQyxFQUFFLEdBQUc7SUFBWTtJQUM3Q0MsU0FBUztRQUFDLElBQUksQ0FBQ0MsSUFBSSxHQUFHSixVQUFVRSxFQUFFO0lBQUM7SUFFbkNHLFlBQVlDLE9BQU8sQ0FBRTtRQUFDTixVQUFVTyxTQUFTLENBQUNKLE1BQU0sQ0FBQ0ssSUFBSSxDQUFDLElBQUk7UUFDekQsSUFBSSxDQUFDQyxRQUFRLEdBQUc7WUFDZEMsWUFBWWYsNkRBQWNBLENBQUM7Z0JBQUNXO2dCQUFTO2dCQUFrQkssQ0FBQUEsSUFBS0EsRUFBRUQsVUFBVTthQUFDLEtBQUs7UUFDaEY7SUFDRjtJQUVBOztHQUVDLEdBQ0FFLFlBQVk7SUFDWCxtQ0FBbUM7SUFDckM7SUFFQTs7R0FFQyxHQUNBQyxNQUFNQyxNQUFNLEVBQUU7UUFDYixJQUFJLE9BQU9DLFlBQVksWUFBWUEsUUFBUUMsR0FBRyxJQUFJRCxrQkFBeUIsZUFBZSxFQUV6RjtRQUNERyxtQkFBbUJKLFFBQVEsSUFBSSxDQUFDTCxRQUFRO0lBQzFDO0FBQ0Y7QUFBQ1QsVUFBVUMsWUFBWTtBQUV2QixTQUFTaUIsbUJBQW1CSixNQUFNLEVBQUVSLE9BQU87SUFDekMsTUFBTWEsZUFBZUMsZ0JBQWdCZCxRQUFRSSxVQUFVO0lBQ3ZELElBQUksQ0FBQ1MsY0FBYztRQUNqQjtJQUNGO0lBRUEsSUFBSUUsaUJBQWlCO0lBRXJCLElBQUksT0FBT1AsT0FBT1EsRUFBRSxLQUFLLFlBQVk7UUFDbkN4QixpREFBTUEsQ0FBQ21CLElBQUksQ0FBQztRQUNaO0lBQ0Y7SUFFQUgsT0FBT1EsRUFBRSxDQUFDLGtCQUFrQixDQUFDQztRQUMzQixJQUFJRixpQkFBaUIsR0FBRztZQUN0QnZCLGlEQUFNQSxDQUFDbUIsSUFBSSxDQUFDO1lBQ1o7UUFDRjtRQUVBLE1BQU1PLHFCQUFxQnpCLGdFQUFpQkEsQ0FBQ3dCO1FBRTdDLE1BQU1FLE1BQU03Qix5Q0FBWSxDQUN0QjtZQUNFK0IsUUFBUTtZQUNSQyxNQUFNVCxhQUFhVSxRQUFRO1lBQzNCQyxVQUFVWCxhQUFhVyxRQUFRO1lBQy9CQyxNQUFNWixhQUFhWSxJQUFJO1lBQ3ZCQyxTQUFTO2dCQUNQLGdCQUFnQjtZQUNsQjtRQUNGLEdBQ0FDLENBQUFBO1lBQ0VBLElBQUlYLEVBQUUsQ0FBQyxRQUFRO1lBQ2IsZUFBZTtZQUNqQjtZQUVBVyxJQUFJWCxFQUFFLENBQUMsT0FBTztZQUNaLGVBQWU7WUFDakI7WUFDQVcsSUFBSUMsV0FBVyxDQUFDO1FBQ2xCO1FBR0ZULElBQUlILEVBQUUsQ0FBQyxTQUFTO1lBQ2REO1lBQ0F2QixpREFBTUEsQ0FBQ21CLElBQUksQ0FBQztRQUNkO1FBQ0FRLElBQUlVLEtBQUssQ0FBQ1g7UUFDVkMsSUFBSVcsR0FBRztJQUNUO0FBQ0Y7QUFFQSxTQUFTaEIsZ0JBQWdCaUIsR0FBRztJQUMxQixJQUFJO1FBQ0YsT0FBTyxJQUFJeEMsb0NBQUdBLENBQUMsQ0FBQyxFQUFFd0MsSUFBSSxDQUFDO0lBQ3pCLEVBQUUsT0FBT0MsR0FBRztRQUNWeEMsaURBQU1BLENBQUNtQixJQUFJLENBQUMsQ0FBQyxpQ0FBaUMsRUFBRW9CLElBQUksQ0FBQztRQUNyRCxPQUFPRTtJQUNUO0FBQ0Y7QUFFcUIsQ0FDckIscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9lc20vaW50ZWdyYXRpb25zL3Nwb3RsaWdodC5qcz9lM2YzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9vcHRpb25hbENoYWluIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgKiBhcyBodHRwIGZyb20gJ2h0dHAnO1xuaW1wb3J0IHsgVVJMIH0gZnJvbSAndXJsJztcbmltcG9ydCB7IGxvZ2dlciwgc2VyaWFsaXplRW52ZWxvcGUgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuLyoqXG4gKiBVc2UgdGhpcyBpbnRlZ3JhdGlvbiB0byBzZW5kIGVycm9ycyBhbmQgdHJhbnNhY3Rpb25zIHRvIFNwb3RsaWdodC5cbiAqXG4gKiBMZWFybiBtb3JlIGFib3V0IHNwb3RsaWdodCBhdCBodHRwczovL3Nwb3RsaWdodGpzLmNvbVxuICpcbiAqIEltcG9ydGFudDogVGhpcyBpbnRlZ3JhdGlvbiBvbmx5IHdvcmtzIHdpdGggTm9kZSAxOCBvciBuZXdlclxuICovXG5jbGFzcyBTcG90bGlnaHQgIHtcbiAgIHN0YXRpYyBfX2luaXRTdGF0aWMoKSB7dGhpcy5pZCA9ICdTcG90bGlnaHQnO31cbiAgIF9faW5pdCgpIHt0aGlzLm5hbWUgPSBTcG90bGlnaHQuaWQ7fVxuXG4gICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7U3BvdGxpZ2h0LnByb3RvdHlwZS5fX2luaXQuY2FsbCh0aGlzKTtcbiAgICB0aGlzLl9vcHRpb25zID0ge1xuICAgICAgc2lkZWNhclVybDogX29wdGlvbmFsQ2hhaW4oW29wdGlvbnMsICdvcHRpb25hbEFjY2VzcycsIF8gPT4gXy5zaWRlY2FyVXJsXSkgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6ODk2OS9zdHJlYW0nLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogSlNEb2NcbiAgICovXG4gICBzZXR1cE9uY2UoKSB7XG4gICAgLy8gZW1wdHkgYnV0IG90aGVyd2lzZSBUUyBjb21wbGFpbnNcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHVwIGZvcndhcmRpbmcgZW52ZWxvcGVzIHRvIHRoZSBTcG90bGlnaHQgU2lkZWNhclxuICAgKi9cbiAgIHNldHVwKGNsaWVudCkge1xuICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ29iamVjdCcgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgIGxvZ2dlci53YXJuKFwiW1Nwb3RsaWdodF0gSXQgc2VlbXMgeW91J3JlIG5vdCBpbiBkZXYgbW9kZS4gRG8geW91IHJlYWxseSB3YW50IHRvIGhhdmUgU3BvdGxpZ2h0IGVuYWJsZWQ/XCIpO1xuICAgIH1cbiAgICBjb25uZWN0VG9TcG90bGlnaHQoY2xpZW50LCB0aGlzLl9vcHRpb25zKTtcbiAgfVxufVNwb3RsaWdodC5fX2luaXRTdGF0aWMoKTtcblxuZnVuY3Rpb24gY29ubmVjdFRvU3BvdGxpZ2h0KGNsaWVudCwgb3B0aW9ucykge1xuICBjb25zdCBzcG90bGlnaHRVcmwgPSBwYXJzZVNpZGVjYXJVcmwob3B0aW9ucy5zaWRlY2FyVXJsKTtcbiAgaWYgKCFzcG90bGlnaHRVcmwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgZmFpbGVkUmVxdWVzdHMgPSAwO1xuXG4gIGlmICh0eXBlb2YgY2xpZW50Lm9uICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgbG9nZ2VyLndhcm4oJ1tTcG90bGlnaHRdIENhbm5vdCBjb25uZWN0IHRvIHNwb3RsaWdodCBkdWUgdG8gbWlzc2luZyBtZXRob2Qgb24gU0RLIGNsaWVudCAoYGNsaWVudC5vbmApJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY2xpZW50Lm9uKCdiZWZvcmVFbnZlbG9wZScsIChlbnZlbG9wZSkgPT4ge1xuICAgIGlmIChmYWlsZWRSZXF1ZXN0cyA+IDMpIHtcbiAgICAgIGxvZ2dlci53YXJuKCdbU3BvdGxpZ2h0XSBEaXNhYmxlZCBTZW50cnkgLT4gU3BvdGxpZ2h0IGludGVncmF0aW9uIGR1ZSB0byB0b28gbWFueSBmYWlsZWQgcmVxdWVzdHMnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzZXJpYWxpemVkRW52ZWxvcGUgPSBzZXJpYWxpemVFbnZlbG9wZShlbnZlbG9wZSk7XG5cbiAgICBjb25zdCByZXEgPSBodHRwLnJlcXVlc3QoXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBwYXRoOiBzcG90bGlnaHRVcmwucGF0aG5hbWUsXG4gICAgICAgIGhvc3RuYW1lOiBzcG90bGlnaHRVcmwuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHNwb3RsaWdodFVybC5wb3J0LFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXNlbnRyeS1lbnZlbG9wZScsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgcmVzID0+IHtcbiAgICAgICAgcmVzLm9uKCdkYXRhJywgKCkgPT4ge1xuICAgICAgICAgIC8vIERyYWluIHNvY2tldFxuICAgICAgICB9KTtcblxuICAgICAgICByZXMub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAvLyBEcmFpbiBzb2NrZXRcbiAgICAgICAgfSk7XG4gICAgICAgIHJlcy5zZXRFbmNvZGluZygndXRmOCcpO1xuICAgICAgfSxcbiAgICApO1xuXG4gICAgcmVxLm9uKCdlcnJvcicsICgpID0+IHtcbiAgICAgIGZhaWxlZFJlcXVlc3RzKys7XG4gICAgICBsb2dnZXIud2FybignW1Nwb3RsaWdodF0gRmFpbGVkIHRvIHNlbmQgZW52ZWxvcGUgdG8gU3BvdGxpZ2h0IFNpZGVjYXInKTtcbiAgICB9KTtcbiAgICByZXEud3JpdGUoc2VyaWFsaXplZEVudmVsb3BlKTtcbiAgICByZXEuZW5kKCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwYXJzZVNpZGVjYXJVcmwodXJsKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG5ldyBVUkwoYCR7dXJsfWApO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nZ2VyLndhcm4oYFtTcG90bGlnaHRdIEludmFsaWQgc2lkZWNhciBVUkw6ICR7dXJsfWApO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZXhwb3J0IHsgU3BvdGxpZ2h0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zcG90bGlnaHQuanMubWFwXG4iXSwibmFtZXMiOlsiX29wdGlvbmFsQ2hhaW4iLCJodHRwIiwiVVJMIiwibG9nZ2VyIiwic2VyaWFsaXplRW52ZWxvcGUiLCJTcG90bGlnaHQiLCJfX2luaXRTdGF0aWMiLCJpZCIsIl9faW5pdCIsIm5hbWUiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJwcm90b3R5cGUiLCJjYWxsIiwiX29wdGlvbnMiLCJzaWRlY2FyVXJsIiwiXyIsInNldHVwT25jZSIsInNldHVwIiwiY2xpZW50IiwicHJvY2VzcyIsImVudiIsIndhcm4iLCJjb25uZWN0VG9TcG90bGlnaHQiLCJzcG90bGlnaHRVcmwiLCJwYXJzZVNpZGVjYXJVcmwiLCJmYWlsZWRSZXF1ZXN0cyIsIm9uIiwiZW52ZWxvcGUiLCJzZXJpYWxpemVkRW52ZWxvcGUiLCJyZXEiLCJyZXF1ZXN0IiwibWV0aG9kIiwicGF0aCIsInBhdGhuYW1lIiwiaG9zdG5hbWUiLCJwb3J0IiwiaGVhZGVycyIsInJlcyIsInNldEVuY29kaW5nIiwid3JpdGUiLCJlbmQiLCJ1cmwiLCJlIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/integrations/spotlight.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/integrations/undici/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/node/esm/integrations/undici/index.js ***!
  \********************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChannelName: () => (/* binding */ ChannelName),\n/* harmony export */   Undici: () => (/* binding */ Undici)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/utils/isSentryRequestUrl.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/tracing/dynamicSamplingContext.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/lru.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/node.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/string.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/baggage.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/tracing.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/url.js\");\n/* harmony import */ var _nodeVersion_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../nodeVersion.js */ \"(ssr)/./node_modules/@sentry/node/esm/nodeVersion.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n\n\n\nvar ChannelName;\n(function(ChannelName) {\n    // https://github.com/nodejs/undici/blob/e6fc80f809d1217814c044f52ed40ef13f21e43c/docs/api/DiagnosticsChannel.md#undicirequestcreate\n    const RequestCreate = \"undici:request:create\";\n    ChannelName[\"RequestCreate\"] = RequestCreate;\n    const RequestEnd = \"undici:request:headers\";\n    ChannelName[\"RequestEnd\"] = RequestEnd;\n    const RequestError = \"undici:request:error\";\n    ChannelName[\"RequestError\"] = RequestError;\n})(ChannelName || (ChannelName = {}));\n// Please note that you cannot use `console.log` to debug the callbacks registered to the `diagnostics_channel` API.\n// To debug, you can use `writeFileSync` to write to a file:\n// https://nodejs.org/api/async_hooks.html#printing-in-asynchook-callbacks\n//\n// import { writeFileSync } from 'fs';\n// import { format } from 'util';\n//\n// function debug(...args: any): void {\n//   // Use a function like this one when debugging inside an AsyncHook callback\n//   // @ts-expect-error any\n//   writeFileSync('log.out', `${format(...args)}\\n`, { flag: 'a' });\n// }\n/**\n * Instruments outgoing HTTP requests made with the `undici` package via\n * Node's `diagnostics_channel` API.\n *\n * Supports Undici 4.7.0 or higher.\n *\n * Requires Node 16.17.0 or higher.\n */ class Undici {\n    /**\n   * @inheritDoc\n   */ static __initStatic() {\n        this.id = \"Undici\";\n    }\n    /**\n   * @inheritDoc\n   */ __init() {\n        this.name = Undici.id;\n    }\n    __init2() {\n        this._createSpanUrlMap = new _sentry_utils__WEBPACK_IMPORTED_MODULE_0__.LRUMap(100);\n    }\n    __init3() {\n        this._headersUrlMap = new _sentry_utils__WEBPACK_IMPORTED_MODULE_0__.LRUMap(100);\n    }\n    constructor(_options = {}){\n        Undici.prototype.__init.call(this);\n        Undici.prototype.__init2.call(this);\n        Undici.prototype.__init3.call(this);\n        Undici.prototype.__init4.call(this);\n        Undici.prototype.__init5.call(this);\n        Undici.prototype.__init6.call(this);\n        this._options = {\n            breadcrumbs: _options.breadcrumbs === undefined ? true : _options.breadcrumbs,\n            shouldCreateSpanForRequest: _options.shouldCreateSpanForRequest\n        };\n    }\n    /**\n   * @inheritDoc\n   */ setupOnce(_addGlobalEventProcessor) {\n        // Requires Node 16+ to use the diagnostics_channel API.\n        if (_nodeVersion_js__WEBPACK_IMPORTED_MODULE_1__.NODE_VERSION.major && _nodeVersion_js__WEBPACK_IMPORTED_MODULE_1__.NODE_VERSION.major < 16) {\n            return;\n        }\n        let ds;\n        try {\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\n            ds = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.dynamicRequire)(module, \"diagnostics_channel\");\n        } catch (e) {\n        // no-op\n        }\n        if (!ds || !ds.subscribe) {\n            return;\n        }\n        // https://github.com/nodejs/undici/blob/e6fc80f809d1217814c044f52ed40ef13f21e43c/docs/api/DiagnosticsChannel.md\n        ds.subscribe(ChannelName.RequestCreate, this._onRequestCreate);\n        ds.subscribe(ChannelName.RequestEnd, this._onRequestEnd);\n        ds.subscribe(ChannelName.RequestError, this._onRequestError);\n    }\n    /** Helper that wraps shouldCreateSpanForRequest option */ _shouldCreateSpan(url) {\n        if (this._options.shouldCreateSpanForRequest === undefined) {\n            return true;\n        }\n        const cachedDecision = this._createSpanUrlMap.get(url);\n        if (cachedDecision !== undefined) {\n            return cachedDecision;\n        }\n        const decision = this._options.shouldCreateSpanForRequest(url);\n        this._createSpanUrlMap.set(url, decision);\n        return decision;\n    }\n    __init4() {\n        this._onRequestCreate = (message)=>{\n            const hub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.getCurrentHub)();\n            if (!hub.getIntegration(Undici)) {\n                return;\n            }\n            const { request } = message;\n            const stringUrl = request.origin ? request.origin.toString() + request.path : request.path;\n            if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.isSentryRequestUrl)(stringUrl, hub) || request.__sentry_span__ !== undefined) {\n                return;\n            }\n            const client = hub.getClient();\n            if (!client) {\n                return;\n            }\n            const clientOptions = client.getOptions();\n            const scope = hub.getScope();\n            const parentSpan = scope.getSpan();\n            const span = this._shouldCreateSpan(stringUrl) ? createRequestSpan(parentSpan, request, stringUrl) : undefined;\n            if (span) {\n                request.__sentry_span__ = span;\n            }\n            const shouldAttachTraceData = (url)=>{\n                if (clientOptions.tracePropagationTargets === undefined) {\n                    return true;\n                }\n                const cachedDecision = this._headersUrlMap.get(url);\n                if (cachedDecision !== undefined) {\n                    return cachedDecision;\n                }\n                const decision = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.stringMatchesSomePattern)(url, clientOptions.tracePropagationTargets);\n                this._headersUrlMap.set(url, decision);\n                return decision;\n            };\n            if (shouldAttachTraceData(stringUrl)) {\n                if (span) {\n                    const dynamicSamplingContext = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__._optionalChain)([\n                        span,\n                        \"optionalAccess\",\n                        (_4)=>_4.transaction,\n                        \"optionalAccess\",\n                        (_5)=>_5.getDynamicSamplingContext,\n                        \"call\",\n                        (_6)=>_6()\n                    ]);\n                    const sentryBaggageHeader = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_7__.dynamicSamplingContextToSentryBaggageHeader)(dynamicSamplingContext);\n                    setHeadersOnRequest(request, span.toTraceparent(), sentryBaggageHeader);\n                } else {\n                    const { traceId, sampled, dsc } = scope.getPropagationContext();\n                    const sentryTrace = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_8__.generateSentryTraceHeader)(traceId, undefined, sampled);\n                    const dynamicSamplingContext = dsc || (0,_sentry_core__WEBPACK_IMPORTED_MODULE_9__.getDynamicSamplingContextFromClient)(traceId, client, scope);\n                    const sentryBaggageHeader = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_7__.dynamicSamplingContextToSentryBaggageHeader)(dynamicSamplingContext);\n                    setHeadersOnRequest(request, sentryTrace, sentryBaggageHeader);\n                }\n            }\n        };\n    }\n    __init5() {\n        this._onRequestEnd = (message)=>{\n            const hub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.getCurrentHub)();\n            if (!hub.getIntegration(Undici)) {\n                return;\n            }\n            const { request, response } = message;\n            const stringUrl = request.origin ? request.origin.toString() + request.path : request.path;\n            if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.isSentryRequestUrl)(stringUrl, hub)) {\n                return;\n            }\n            const span = request.__sentry_span__;\n            if (span) {\n                span.setHttpStatus(response.statusCode);\n                span.finish();\n            }\n            if (this._options.breadcrumbs) {\n                hub.addBreadcrumb({\n                    category: \"http\",\n                    data: {\n                        method: request.method,\n                        status_code: response.statusCode,\n                        url: stringUrl\n                    },\n                    type: \"http\"\n                }, {\n                    event: \"response\",\n                    request,\n                    response\n                });\n            }\n        };\n    }\n    __init6() {\n        this._onRequestError = (message)=>{\n            const hub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.getCurrentHub)();\n            if (!hub.getIntegration(Undici)) {\n                return;\n            }\n            const { request } = message;\n            const stringUrl = request.origin ? request.origin.toString() + request.path : request.path;\n            if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.isSentryRequestUrl)(stringUrl, hub)) {\n                return;\n            }\n            const span = request.__sentry_span__;\n            if (span) {\n                span.setStatus(\"internal_error\");\n                span.finish();\n            }\n            if (this._options.breadcrumbs) {\n                hub.addBreadcrumb({\n                    category: \"http\",\n                    data: {\n                        method: request.method,\n                        url: stringUrl\n                    },\n                    level: \"error\",\n                    type: \"http\"\n                }, {\n                    event: \"error\",\n                    request\n                });\n            }\n        };\n    }\n}\nUndici.__initStatic();\nfunction setHeadersOnRequest(request, sentryTrace, sentryBaggageHeader) {\n    const headerLines = request.headers.split(\"\\r\\n\");\n    const hasSentryHeaders = headerLines.some((headerLine)=>headerLine.startsWith(\"sentry-trace:\"));\n    if (hasSentryHeaders) {\n        return;\n    }\n    request.addHeader(\"sentry-trace\", sentryTrace);\n    if (sentryBaggageHeader) {\n        request.addHeader(\"baggage\", sentryBaggageHeader);\n    }\n}\nfunction createRequestSpan(activeSpan, request, stringUrl) {\n    const url = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_10__.parseUrl)(stringUrl);\n    const method = request.method || \"GET\";\n    const data = {\n        \"http.method\": method\n    };\n    if (url.search) {\n        data[\"http.query\"] = url.search;\n    }\n    if (url.hash) {\n        data[\"http.fragment\"] = url.hash;\n    }\n    return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__._optionalChain)([\n        activeSpan,\n        \"optionalAccess\",\n        (_7)=>_7.startChild,\n        \"call\",\n        (_8)=>_8({\n                op: \"http.client\",\n                origin: \"auto.http.node.undici\",\n                description: `${method} ${(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_10__.getSanitizedUrlString)(url)}`,\n                data\n            })\n    ]);\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9pbnRlZ3JhdGlvbnMvdW5kaWNpL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStDO0FBQ3VEO0FBQ29GO0FBQ3RJO0FBRXBELElBQUlZO0FBQWEsVUFBVUEsV0FBVztJQUNwQyxvSUFBb0k7SUFDcEksTUFBTUMsZ0JBQWdCO0lBQXlCRCxXQUFXLENBQUMsZ0JBQWdCLEdBQUdDO0lBQzlFLE1BQU1DLGFBQWE7SUFBMEJGLFdBQVcsQ0FBQyxhQUFhLEdBQUdFO0lBQ3pFLE1BQU1DLGVBQWU7SUFBd0JILFdBQVcsQ0FBQyxlQUFlLEdBQUdHO0FBQzdFLEdBQUdILGVBQWdCQSxDQUFBQSxjQUFjLENBQUM7QUFFbEMsb0hBQW9IO0FBQ3BILDREQUE0RDtBQUM1RCwwRUFBMEU7QUFDMUUsRUFBRTtBQUNGLHNDQUFzQztBQUN0QyxpQ0FBaUM7QUFDakMsRUFBRTtBQUNGLHVDQUF1QztBQUN2QyxnRkFBZ0Y7QUFDaEYsNEJBQTRCO0FBQzVCLHFFQUFxRTtBQUNyRSxJQUFJO0FBRUo7Ozs7Ozs7Q0FPQyxHQUNELE1BQU1JO0lBQ0o7O0dBRUMsR0FDQSxPQUFPQyxlQUFlO1FBQUMsSUFBSSxDQUFDQyxFQUFFLEdBQUc7SUFBUztJQUUzQzs7R0FFQyxHQUNBQyxTQUFTO1FBQUMsSUFBSSxDQUFDQyxJQUFJLEdBQUdKLE9BQU9FLEVBQUU7SUFBQztJQUUvQkcsVUFBVTtRQUFDLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUcsSUFBSWxCLGlEQUFNQSxDQUFDO0lBQUs7SUFDcERtQixVQUFVO1FBQUMsSUFBSSxDQUFDQyxjQUFjLEdBQUcsSUFBSXBCLGlEQUFNQSxDQUFDO0lBQUs7SUFFbERxQixZQUFZQyxXQUFXLENBQUMsQ0FBQyxDQUFFO1FBQUNWLE9BQU9XLFNBQVMsQ0FBQ1IsTUFBTSxDQUFDUyxJQUFJLENBQUMsSUFBSTtRQUFFWixPQUFPVyxTQUFTLENBQUNOLE9BQU8sQ0FBQ08sSUFBSSxDQUFDLElBQUk7UUFBRVosT0FBT1csU0FBUyxDQUFDSixPQUFPLENBQUNLLElBQUksQ0FBQyxJQUFJO1FBQUVaLE9BQU9XLFNBQVMsQ0FBQ0UsT0FBTyxDQUFDRCxJQUFJLENBQUMsSUFBSTtRQUFFWixPQUFPVyxTQUFTLENBQUNHLE9BQU8sQ0FBQ0YsSUFBSSxDQUFDLElBQUk7UUFBRVosT0FBT1csU0FBUyxDQUFDSSxPQUFPLENBQUNILElBQUksQ0FBQyxJQUFJO1FBQ2hQLElBQUksQ0FBQ0YsUUFBUSxHQUFHO1lBQ2RNLGFBQWFOLFNBQVNNLFdBQVcsS0FBS0MsWUFBWSxPQUFPUCxTQUFTTSxXQUFXO1lBQzdFRSw0QkFBNEJSLFNBQVNRLDBCQUEwQjtRQUNqRTtJQUNGO0lBRUE7O0dBRUMsR0FDQUMsVUFBVUMsd0JBQXdCLEVBQUU7UUFDbkMsd0RBQXdEO1FBQ3hELElBQUl6Qix5REFBWUEsQ0FBQzBCLEtBQUssSUFBSTFCLHlEQUFZQSxDQUFDMEIsS0FBSyxHQUFHLElBQUk7WUFDakQ7UUFDRjtRQUVBLElBQUlDO1FBQ0osSUFBSTtZQUNGLDhEQUE4RDtZQUM5REEsS0FBS2pDLDZEQUFjQSxDQUFDa0MsUUFBUTtRQUM5QixFQUFFLE9BQU9DLEdBQUc7UUFDVixRQUFRO1FBQ1Y7UUFFQSxJQUFJLENBQUNGLE1BQU0sQ0FBQ0EsR0FBR0csU0FBUyxFQUFFO1lBQ3hCO1FBQ0Y7UUFFQSxnSEFBZ0g7UUFDaEhILEdBQUdHLFNBQVMsQ0FBQzdCLFlBQVlDLGFBQWEsRUFBRSxJQUFJLENBQUM2QixnQkFBZ0I7UUFDN0RKLEdBQUdHLFNBQVMsQ0FBQzdCLFlBQVlFLFVBQVUsRUFBRSxJQUFJLENBQUM2QixhQUFhO1FBQ3ZETCxHQUFHRyxTQUFTLENBQUM3QixZQUFZRyxZQUFZLEVBQUUsSUFBSSxDQUFDNkIsZUFBZTtJQUM3RDtJQUVBLHdEQUF3RCxHQUN2REMsa0JBQWtCQyxHQUFHLEVBQUU7UUFDdEIsSUFBSSxJQUFJLENBQUNwQixRQUFRLENBQUNRLDBCQUEwQixLQUFLRCxXQUFXO1lBQzFELE9BQU87UUFDVDtRQUVBLE1BQU1jLGlCQUFpQixJQUFJLENBQUN6QixpQkFBaUIsQ0FBQzBCLEdBQUcsQ0FBQ0Y7UUFDbEQsSUFBSUMsbUJBQW1CZCxXQUFXO1lBQ2hDLE9BQU9jO1FBQ1Q7UUFFQSxNQUFNRSxXQUFXLElBQUksQ0FBQ3ZCLFFBQVEsQ0FBQ1EsMEJBQTBCLENBQUNZO1FBQzFELElBQUksQ0FBQ3hCLGlCQUFpQixDQUFDNEIsR0FBRyxDQUFDSixLQUFLRztRQUNoQyxPQUFPQTtJQUNUO0lBRUNwQixVQUFVO1FBQUMsSUFBSSxDQUFDYSxnQkFBZ0IsR0FBRyxDQUFDUztZQUNuQyxNQUFNQyxNQUFNbkQsMkRBQWFBO1lBQ3pCLElBQUksQ0FBQ21ELElBQUlDLGNBQWMsQ0FBQ3JDLFNBQVM7Z0JBQy9CO1lBQ0Y7WUFFQSxNQUFNLEVBQUVzQyxPQUFPLEVBQUUsR0FBR0g7WUFFcEIsTUFBTUksWUFBWUQsUUFBUUUsTUFBTSxHQUFHRixRQUFRRSxNQUFNLENBQUNDLFFBQVEsS0FBS0gsUUFBUUksSUFBSSxHQUFHSixRQUFRSSxJQUFJO1lBRTFGLElBQUl4RCxnRUFBa0JBLENBQUNxRCxXQUFXSCxRQUFRRSxRQUFRSyxlQUFlLEtBQUsxQixXQUFXO2dCQUMvRTtZQUNGO1lBRUEsTUFBTTJCLFNBQVNSLElBQUlTLFNBQVM7WUFDNUIsSUFBSSxDQUFDRCxRQUFRO2dCQUNYO1lBQ0Y7WUFFQSxNQUFNRSxnQkFBZ0JGLE9BQU9HLFVBQVU7WUFDdkMsTUFBTUMsUUFBUVosSUFBSWEsUUFBUTtZQUUxQixNQUFNQyxhQUFhRixNQUFNRyxPQUFPO1lBRWhDLE1BQU1DLE9BQU8sSUFBSSxDQUFDdkIsaUJBQWlCLENBQUNVLGFBQWFjLGtCQUFrQkgsWUFBWVosU0FBU0MsYUFBYXRCO1lBQ3JHLElBQUltQyxNQUFNO2dCQUNSZCxRQUFRSyxlQUFlLEdBQUdTO1lBQzVCO1lBRUEsTUFBTUUsd0JBQXdCLENBQUN4QjtnQkFDN0IsSUFBSWdCLGNBQWNTLHVCQUF1QixLQUFLdEMsV0FBVztvQkFDdkQsT0FBTztnQkFDVDtnQkFFQSxNQUFNYyxpQkFBaUIsSUFBSSxDQUFDdkIsY0FBYyxDQUFDd0IsR0FBRyxDQUFDRjtnQkFDL0MsSUFBSUMsbUJBQW1CZCxXQUFXO29CQUNoQyxPQUFPYztnQkFDVDtnQkFFQSxNQUFNRSxXQUFXeEMsdUVBQXdCQSxDQUFDcUMsS0FBS2dCLGNBQWNTLHVCQUF1QjtnQkFDcEYsSUFBSSxDQUFDL0MsY0FBYyxDQUFDMEIsR0FBRyxDQUFDSixLQUFLRztnQkFDN0IsT0FBT0E7WUFDVDtZQUVBLElBQUlxQixzQkFBc0JmLFlBQVk7Z0JBQ3BDLElBQUlhLE1BQU07b0JBQ1IsTUFBTUkseUJBQXlCeEUsNkRBQWNBLENBQUM7d0JBQUNvRTt3QkFBTTt3QkFBa0JLLENBQUFBLEtBQU1BLEdBQUdDLFdBQVc7d0JBQUU7d0JBQWtCQyxDQUFBQSxLQUFNQSxHQUFHQyx5QkFBeUI7d0JBQUU7d0JBQVFDLENBQUFBLEtBQU1BO3FCQUFLO29CQUN0SyxNQUFNQyxzQkFBc0J4RSwwRkFBMkNBLENBQUNrRTtvQkFFeEVPLG9CQUFvQnpCLFNBQVNjLEtBQUtZLGFBQWEsSUFBSUY7Z0JBQ3JELE9BQU87b0JBQ0wsTUFBTSxFQUFFRyxPQUFPLEVBQUVDLE9BQU8sRUFBRUMsR0FBRyxFQUFFLEdBQUduQixNQUFNb0IscUJBQXFCO29CQUM3RCxNQUFNQyxjQUFjOUUsd0VBQXlCQSxDQUFDMEUsU0FBU2hELFdBQVdpRDtvQkFDbEUsTUFBTVYseUJBQXlCVyxPQUFPaEYsaUZBQW1DQSxDQUFDOEUsU0FBU3JCLFFBQVFJO29CQUMzRixNQUFNYyxzQkFBc0J4RSwwRkFBMkNBLENBQUNrRTtvQkFDeEVPLG9CQUFvQnpCLFNBQVMrQixhQUFhUDtnQkFDNUM7WUFDRjtRQUNGO0lBQUU7SUFFRGhELFVBQVU7UUFBQyxJQUFJLENBQUNhLGFBQWEsR0FBRyxDQUFDUTtZQUNoQyxNQUFNQyxNQUFNbkQsMkRBQWFBO1lBQ3pCLElBQUksQ0FBQ21ELElBQUlDLGNBQWMsQ0FBQ3JDLFNBQVM7Z0JBQy9CO1lBQ0Y7WUFFQSxNQUFNLEVBQUVzQyxPQUFPLEVBQUVnQyxRQUFRLEVBQUUsR0FBR25DO1lBRTlCLE1BQU1JLFlBQVlELFFBQVFFLE1BQU0sR0FBR0YsUUFBUUUsTUFBTSxDQUFDQyxRQUFRLEtBQUtILFFBQVFJLElBQUksR0FBR0osUUFBUUksSUFBSTtZQUUxRixJQUFJeEQsZ0VBQWtCQSxDQUFDcUQsV0FBV0gsTUFBTTtnQkFDdEM7WUFDRjtZQUVBLE1BQU1nQixPQUFPZCxRQUFRSyxlQUFlO1lBQ3BDLElBQUlTLE1BQU07Z0JBQ1JBLEtBQUttQixhQUFhLENBQUNELFNBQVNFLFVBQVU7Z0JBQ3RDcEIsS0FBS3FCLE1BQU07WUFDYjtZQUVBLElBQUksSUFBSSxDQUFDL0QsUUFBUSxDQUFDTSxXQUFXLEVBQUU7Z0JBQzdCb0IsSUFBSXNDLGFBQWEsQ0FDZjtvQkFDRUMsVUFBVTtvQkFDVkMsTUFBTTt3QkFDSkMsUUFBUXZDLFFBQVF1QyxNQUFNO3dCQUN0QkMsYUFBYVIsU0FBU0UsVUFBVTt3QkFDaEMxQyxLQUFLUztvQkFDUDtvQkFDQXdDLE1BQU07Z0JBQ1IsR0FDQTtvQkFDRUMsT0FBTztvQkFDUDFDO29CQUNBZ0M7Z0JBQ0Y7WUFFSjtRQUNGO0lBQUU7SUFFRHZELFVBQVU7UUFBQyxJQUFJLENBQUNhLGVBQWUsR0FBRyxDQUFDTztZQUNsQyxNQUFNQyxNQUFNbkQsMkRBQWFBO1lBQ3pCLElBQUksQ0FBQ21ELElBQUlDLGNBQWMsQ0FBQ3JDLFNBQVM7Z0JBQy9CO1lBQ0Y7WUFFQSxNQUFNLEVBQUVzQyxPQUFPLEVBQUUsR0FBR0g7WUFFcEIsTUFBTUksWUFBWUQsUUFBUUUsTUFBTSxHQUFHRixRQUFRRSxNQUFNLENBQUNDLFFBQVEsS0FBS0gsUUFBUUksSUFBSSxHQUFHSixRQUFRSSxJQUFJO1lBRTFGLElBQUl4RCxnRUFBa0JBLENBQUNxRCxXQUFXSCxNQUFNO2dCQUN0QztZQUNGO1lBRUEsTUFBTWdCLE9BQU9kLFFBQVFLLGVBQWU7WUFDcEMsSUFBSVMsTUFBTTtnQkFDUkEsS0FBSzZCLFNBQVMsQ0FBQztnQkFDZjdCLEtBQUtxQixNQUFNO1lBQ2I7WUFFQSxJQUFJLElBQUksQ0FBQy9ELFFBQVEsQ0FBQ00sV0FBVyxFQUFFO2dCQUM3Qm9CLElBQUlzQyxhQUFhLENBQ2Y7b0JBQ0VDLFVBQVU7b0JBQ1ZDLE1BQU07d0JBQ0pDLFFBQVF2QyxRQUFRdUMsTUFBTTt3QkFDdEIvQyxLQUFLUztvQkFDUDtvQkFDQTJDLE9BQU87b0JBQ1BILE1BQU07Z0JBQ1IsR0FDQTtvQkFDRUMsT0FBTztvQkFDUDFDO2dCQUNGO1lBRUo7UUFDRjtJQUFFO0FBQ0o7QUFBQ3RDLE9BQU9DLFlBQVk7QUFFcEIsU0FBUzhELG9CQUNQekIsT0FBTyxFQUNQK0IsV0FBVyxFQUNYUCxtQkFBbUI7SUFFbkIsTUFBTXFCLGNBQWM3QyxRQUFROEMsT0FBTyxDQUFDQyxLQUFLLENBQUM7SUFDMUMsTUFBTUMsbUJBQW1CSCxZQUFZSSxJQUFJLENBQUNDLENBQUFBLGFBQWNBLFdBQVdDLFVBQVUsQ0FBQztJQUU5RSxJQUFJSCxrQkFBa0I7UUFDcEI7SUFDRjtJQUVBaEQsUUFBUW9ELFNBQVMsQ0FBQyxnQkFBZ0JyQjtJQUNsQyxJQUFJUCxxQkFBcUI7UUFDdkJ4QixRQUFRb0QsU0FBUyxDQUFDLFdBQVc1QjtJQUMvQjtBQUNGO0FBRUEsU0FBU1Qsa0JBQ1BzQyxVQUFVLEVBQ1ZyRCxPQUFPLEVBQ1BDLFNBQVM7SUFFVCxNQUFNVCxNQUFNdEMsd0RBQVFBLENBQUMrQztJQUVyQixNQUFNc0MsU0FBU3ZDLFFBQVF1QyxNQUFNLElBQUk7SUFDakMsTUFBTUQsT0FBTztRQUNYLGVBQWVDO0lBQ2pCO0lBQ0EsSUFBSS9DLElBQUk4RCxNQUFNLEVBQUU7UUFDZGhCLElBQUksQ0FBQyxhQUFhLEdBQUc5QyxJQUFJOEQsTUFBTTtJQUNqQztJQUNBLElBQUk5RCxJQUFJK0QsSUFBSSxFQUFFO1FBQ1pqQixJQUFJLENBQUMsZ0JBQWdCLEdBQUc5QyxJQUFJK0QsSUFBSTtJQUNsQztJQUNBLE9BQU83Ryw2REFBY0EsQ0FBQztRQUFDMkc7UUFBWTtRQUFrQkcsQ0FBQUEsS0FBTUEsR0FBR0MsVUFBVTtRQUFFO1FBQVFDLENBQUFBLEtBQU1BLEdBQUc7Z0JBQ3pGQyxJQUFJO2dCQUNKekQsUUFBUTtnQkFDUjBELGFBQWEsQ0FBQyxFQUFFckIsT0FBTyxDQUFDLEVBQUVuRixxRUFBcUJBLENBQUNvQyxLQUFLLENBQUM7Z0JBQ3REOEM7WUFDRjtLQUFHO0FBQ0w7QUFFK0IsQ0FDL0IsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9lc20vaW50ZWdyYXRpb25zL3VuZGljaS9pbmRleC5qcz84YmFiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9vcHRpb25hbENoYWluIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgeyBnZXRDdXJyZW50SHViLCBpc1NlbnRyeVJlcXVlc3RVcmwsIGdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tQ2xpZW50IH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IExSVU1hcCwgZHluYW1pY1JlcXVpcmUsIGR5bmFtaWNTYW1wbGluZ0NvbnRleHRUb1NlbnRyeUJhZ2dhZ2VIZWFkZXIsIGdlbmVyYXRlU2VudHJ5VHJhY2VIZWFkZXIsIHBhcnNlVXJsLCBzdHJpbmdNYXRjaGVzU29tZVBhdHRlcm4sIGdldFNhbml0aXplZFVybFN0cmluZyB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgTk9ERV9WRVJTSU9OIH0gZnJvbSAnLi4vLi4vbm9kZVZlcnNpb24uanMnO1xuXG52YXIgQ2hhbm5lbE5hbWU7KGZ1bmN0aW9uIChDaGFubmVsTmFtZSkge1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL3VuZGljaS9ibG9iL2U2ZmM4MGY4MDlkMTIxNzgxNGMwNDRmNTJlZDQwZWYxM2YyMWU0M2MvZG9jcy9hcGkvRGlhZ25vc3RpY3NDaGFubmVsLm1kI3VuZGljaXJlcXVlc3RjcmVhdGVcbiAgY29uc3QgUmVxdWVzdENyZWF0ZSA9ICd1bmRpY2k6cmVxdWVzdDpjcmVhdGUnOyBDaGFubmVsTmFtZVtcIlJlcXVlc3RDcmVhdGVcIl0gPSBSZXF1ZXN0Q3JlYXRlO1xuICBjb25zdCBSZXF1ZXN0RW5kID0gJ3VuZGljaTpyZXF1ZXN0OmhlYWRlcnMnOyBDaGFubmVsTmFtZVtcIlJlcXVlc3RFbmRcIl0gPSBSZXF1ZXN0RW5kO1xuICBjb25zdCBSZXF1ZXN0RXJyb3IgPSAndW5kaWNpOnJlcXVlc3Q6ZXJyb3InOyBDaGFubmVsTmFtZVtcIlJlcXVlc3RFcnJvclwiXSA9IFJlcXVlc3RFcnJvcjtcbn0pKENoYW5uZWxOYW1lIHx8IChDaGFubmVsTmFtZSA9IHt9KSk7XG5cbi8vIFBsZWFzZSBub3RlIHRoYXQgeW91IGNhbm5vdCB1c2UgYGNvbnNvbGUubG9nYCB0byBkZWJ1ZyB0aGUgY2FsbGJhY2tzIHJlZ2lzdGVyZWQgdG8gdGhlIGBkaWFnbm9zdGljc19jaGFubmVsYCBBUEkuXG4vLyBUbyBkZWJ1ZywgeW91IGNhbiB1c2UgYHdyaXRlRmlsZVN5bmNgIHRvIHdyaXRlIHRvIGEgZmlsZTpcbi8vIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvYXN5bmNfaG9va3MuaHRtbCNwcmludGluZy1pbi1hc3luY2hvb2stY2FsbGJhY2tzXG4vL1xuLy8gaW1wb3J0IHsgd3JpdGVGaWxlU3luYyB9IGZyb20gJ2ZzJztcbi8vIGltcG9ydCB7IGZvcm1hdCB9IGZyb20gJ3V0aWwnO1xuLy9cbi8vIGZ1bmN0aW9uIGRlYnVnKC4uLmFyZ3M6IGFueSk6IHZvaWQge1xuLy8gICAvLyBVc2UgYSBmdW5jdGlvbiBsaWtlIHRoaXMgb25lIHdoZW4gZGVidWdnaW5nIGluc2lkZSBhbiBBc3luY0hvb2sgY2FsbGJhY2tcbi8vICAgLy8gQHRzLWV4cGVjdC1lcnJvciBhbnlcbi8vICAgd3JpdGVGaWxlU3luYygnbG9nLm91dCcsIGAke2Zvcm1hdCguLi5hcmdzKX1cXG5gLCB7IGZsYWc6ICdhJyB9KTtcbi8vIH1cblxuLyoqXG4gKiBJbnN0cnVtZW50cyBvdXRnb2luZyBIVFRQIHJlcXVlc3RzIG1hZGUgd2l0aCB0aGUgYHVuZGljaWAgcGFja2FnZSB2aWFcbiAqIE5vZGUncyBgZGlhZ25vc3RpY3NfY2hhbm5lbGAgQVBJLlxuICpcbiAqIFN1cHBvcnRzIFVuZGljaSA0LjcuMCBvciBoaWdoZXIuXG4gKlxuICogUmVxdWlyZXMgTm9kZSAxNi4xNy4wIG9yIGhpZ2hlci5cbiAqL1xuY2xhc3MgVW5kaWNpICB7XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgIHN0YXRpYyBfX2luaXRTdGF0aWMoKSB7dGhpcy5pZCA9ICdVbmRpY2knO31cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBfX2luaXQoKSB7dGhpcy5uYW1lID0gVW5kaWNpLmlkO31cblxuICAgIF9faW5pdDIoKSB7dGhpcy5fY3JlYXRlU3BhblVybE1hcCA9IG5ldyBMUlVNYXAoMTAwKTt9XG4gICAgX19pbml0MygpIHt0aGlzLl9oZWFkZXJzVXJsTWFwID0gbmV3IExSVU1hcCgxMDApO31cblxuICAgY29uc3RydWN0b3IoX29wdGlvbnMgPSB7fSkge1VuZGljaS5wcm90b3R5cGUuX19pbml0LmNhbGwodGhpcyk7VW5kaWNpLnByb3RvdHlwZS5fX2luaXQyLmNhbGwodGhpcyk7VW5kaWNpLnByb3RvdHlwZS5fX2luaXQzLmNhbGwodGhpcyk7VW5kaWNpLnByb3RvdHlwZS5fX2luaXQ0LmNhbGwodGhpcyk7VW5kaWNpLnByb3RvdHlwZS5fX2luaXQ1LmNhbGwodGhpcyk7VW5kaWNpLnByb3RvdHlwZS5fX2luaXQ2LmNhbGwodGhpcyk7XG4gICAgdGhpcy5fb3B0aW9ucyA9IHtcbiAgICAgIGJyZWFkY3J1bWJzOiBfb3B0aW9ucy5icmVhZGNydW1icyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9vcHRpb25zLmJyZWFkY3J1bWJzLFxuICAgICAgc2hvdWxkQ3JlYXRlU3BhbkZvclJlcXVlc3Q6IF9vcHRpb25zLnNob3VsZENyZWF0ZVNwYW5Gb3JSZXF1ZXN0LFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gICBzZXR1cE9uY2UoX2FkZEdsb2JhbEV2ZW50UHJvY2Vzc29yKSB7XG4gICAgLy8gUmVxdWlyZXMgTm9kZSAxNisgdG8gdXNlIHRoZSBkaWFnbm9zdGljc19jaGFubmVsIEFQSS5cbiAgICBpZiAoTk9ERV9WRVJTSU9OLm1ham9yICYmIE5PREVfVkVSU0lPTi5tYWpvciA8IDE2KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGRzO1xuICAgIHRyeSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlc1xuICAgICAgZHMgPSBkeW5hbWljUmVxdWlyZShtb2R1bGUsICdkaWFnbm9zdGljc19jaGFubmVsJykgO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIG5vLW9wXG4gICAgfVxuXG4gICAgaWYgKCFkcyB8fCAhZHMuc3Vic2NyaWJlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy91bmRpY2kvYmxvYi9lNmZjODBmODA5ZDEyMTc4MTRjMDQ0ZjUyZWQ0MGVmMTNmMjFlNDNjL2RvY3MvYXBpL0RpYWdub3N0aWNzQ2hhbm5lbC5tZFxuICAgIGRzLnN1YnNjcmliZShDaGFubmVsTmFtZS5SZXF1ZXN0Q3JlYXRlLCB0aGlzLl9vblJlcXVlc3RDcmVhdGUpO1xuICAgIGRzLnN1YnNjcmliZShDaGFubmVsTmFtZS5SZXF1ZXN0RW5kLCB0aGlzLl9vblJlcXVlc3RFbmQpO1xuICAgIGRzLnN1YnNjcmliZShDaGFubmVsTmFtZS5SZXF1ZXN0RXJyb3IsIHRoaXMuX29uUmVxdWVzdEVycm9yKTtcbiAgfVxuXG4gIC8qKiBIZWxwZXIgdGhhdCB3cmFwcyBzaG91bGRDcmVhdGVTcGFuRm9yUmVxdWVzdCBvcHRpb24gKi9cbiAgIF9zaG91bGRDcmVhdGVTcGFuKHVybCkge1xuICAgIGlmICh0aGlzLl9vcHRpb25zLnNob3VsZENyZWF0ZVNwYW5Gb3JSZXF1ZXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGNhY2hlZERlY2lzaW9uID0gdGhpcy5fY3JlYXRlU3BhblVybE1hcC5nZXQodXJsKTtcbiAgICBpZiAoY2FjaGVkRGVjaXNpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGNhY2hlZERlY2lzaW9uO1xuICAgIH1cblxuICAgIGNvbnN0IGRlY2lzaW9uID0gdGhpcy5fb3B0aW9ucy5zaG91bGRDcmVhdGVTcGFuRm9yUmVxdWVzdCh1cmwpO1xuICAgIHRoaXMuX2NyZWF0ZVNwYW5VcmxNYXAuc2V0KHVybCwgZGVjaXNpb24pO1xuICAgIHJldHVybiBkZWNpc2lvbjtcbiAgfVxuXG4gICBfX2luaXQ0KCkge3RoaXMuX29uUmVxdWVzdENyZWF0ZSA9IChtZXNzYWdlKSA9PiB7XG4gICAgY29uc3QgaHViID0gZ2V0Q3VycmVudEh1YigpO1xuICAgIGlmICghaHViLmdldEludGVncmF0aW9uKFVuZGljaSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7IHJlcXVlc3QgfSA9IG1lc3NhZ2UgO1xuXG4gICAgY29uc3Qgc3RyaW5nVXJsID0gcmVxdWVzdC5vcmlnaW4gPyByZXF1ZXN0Lm9yaWdpbi50b1N0cmluZygpICsgcmVxdWVzdC5wYXRoIDogcmVxdWVzdC5wYXRoO1xuXG4gICAgaWYgKGlzU2VudHJ5UmVxdWVzdFVybChzdHJpbmdVcmwsIGh1YikgfHwgcmVxdWVzdC5fX3NlbnRyeV9zcGFuX18gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNsaWVudCA9IGh1Yi5nZXRDbGllbnQoKTtcbiAgICBpZiAoIWNsaWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNsaWVudE9wdGlvbnMgPSBjbGllbnQuZ2V0T3B0aW9ucygpO1xuICAgIGNvbnN0IHNjb3BlID0gaHViLmdldFNjb3BlKCk7XG5cbiAgICBjb25zdCBwYXJlbnRTcGFuID0gc2NvcGUuZ2V0U3BhbigpO1xuXG4gICAgY29uc3Qgc3BhbiA9IHRoaXMuX3Nob3VsZENyZWF0ZVNwYW4oc3RyaW5nVXJsKSA/IGNyZWF0ZVJlcXVlc3RTcGFuKHBhcmVudFNwYW4sIHJlcXVlc3QsIHN0cmluZ1VybCkgOiB1bmRlZmluZWQ7XG4gICAgaWYgKHNwYW4pIHtcbiAgICAgIHJlcXVlc3QuX19zZW50cnlfc3Bhbl9fID0gc3BhbjtcbiAgICB9XG5cbiAgICBjb25zdCBzaG91bGRBdHRhY2hUcmFjZURhdGEgPSAodXJsKSA9PiB7XG4gICAgICBpZiAoY2xpZW50T3B0aW9ucy50cmFjZVByb3BhZ2F0aW9uVGFyZ2V0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjYWNoZWREZWNpc2lvbiA9IHRoaXMuX2hlYWRlcnNVcmxNYXAuZ2V0KHVybCk7XG4gICAgICBpZiAoY2FjaGVkRGVjaXNpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gY2FjaGVkRGVjaXNpb247XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRlY2lzaW9uID0gc3RyaW5nTWF0Y2hlc1NvbWVQYXR0ZXJuKHVybCwgY2xpZW50T3B0aW9ucy50cmFjZVByb3BhZ2F0aW9uVGFyZ2V0cyk7XG4gICAgICB0aGlzLl9oZWFkZXJzVXJsTWFwLnNldCh1cmwsIGRlY2lzaW9uKTtcbiAgICAgIHJldHVybiBkZWNpc2lvbjtcbiAgICB9O1xuXG4gICAgaWYgKHNob3VsZEF0dGFjaFRyYWNlRGF0YShzdHJpbmdVcmwpKSB7XG4gICAgICBpZiAoc3Bhbikge1xuICAgICAgICBjb25zdCBkeW5hbWljU2FtcGxpbmdDb250ZXh0ID0gX29wdGlvbmFsQ2hhaW4oW3NwYW4sICdvcHRpb25hbEFjY2VzcycsIF80ID0+IF80LnRyYW5zYWN0aW9uLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNSA9PiBfNS5nZXREeW5hbWljU2FtcGxpbmdDb250ZXh0LCAnY2FsbCcsIF82ID0+IF82KCldKTtcbiAgICAgICAgY29uc3Qgc2VudHJ5QmFnZ2FnZUhlYWRlciA9IGR5bmFtaWNTYW1wbGluZ0NvbnRleHRUb1NlbnRyeUJhZ2dhZ2VIZWFkZXIoZHluYW1pY1NhbXBsaW5nQ29udGV4dCk7XG5cbiAgICAgICAgc2V0SGVhZGVyc09uUmVxdWVzdChyZXF1ZXN0LCBzcGFuLnRvVHJhY2VwYXJlbnQoKSwgc2VudHJ5QmFnZ2FnZUhlYWRlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB7IHRyYWNlSWQsIHNhbXBsZWQsIGRzYyB9ID0gc2NvcGUuZ2V0UHJvcGFnYXRpb25Db250ZXh0KCk7XG4gICAgICAgIGNvbnN0IHNlbnRyeVRyYWNlID0gZ2VuZXJhdGVTZW50cnlUcmFjZUhlYWRlcih0cmFjZUlkLCB1bmRlZmluZWQsIHNhbXBsZWQpO1xuICAgICAgICBjb25zdCBkeW5hbWljU2FtcGxpbmdDb250ZXh0ID0gZHNjIHx8IGdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tQ2xpZW50KHRyYWNlSWQsIGNsaWVudCwgc2NvcGUpO1xuICAgICAgICBjb25zdCBzZW50cnlCYWdnYWdlSGVhZGVyID0gZHluYW1pY1NhbXBsaW5nQ29udGV4dFRvU2VudHJ5QmFnZ2FnZUhlYWRlcihkeW5hbWljU2FtcGxpbmdDb250ZXh0KTtcbiAgICAgICAgc2V0SGVhZGVyc09uUmVxdWVzdChyZXF1ZXN0LCBzZW50cnlUcmFjZSwgc2VudHJ5QmFnZ2FnZUhlYWRlcik7XG4gICAgICB9XG4gICAgfVxuICB9O31cblxuICAgX19pbml0NSgpIHt0aGlzLl9vblJlcXVlc3RFbmQgPSAobWVzc2FnZSkgPT4ge1xuICAgIGNvbnN0IGh1YiA9IGdldEN1cnJlbnRIdWIoKTtcbiAgICBpZiAoIWh1Yi5nZXRJbnRlZ3JhdGlvbihVbmRpY2kpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyByZXF1ZXN0LCByZXNwb25zZSB9ID0gbWVzc2FnZSA7XG5cbiAgICBjb25zdCBzdHJpbmdVcmwgPSByZXF1ZXN0Lm9yaWdpbiA/IHJlcXVlc3Qub3JpZ2luLnRvU3RyaW5nKCkgKyByZXF1ZXN0LnBhdGggOiByZXF1ZXN0LnBhdGg7XG5cbiAgICBpZiAoaXNTZW50cnlSZXF1ZXN0VXJsKHN0cmluZ1VybCwgaHViKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHNwYW4gPSByZXF1ZXN0Ll9fc2VudHJ5X3NwYW5fXztcbiAgICBpZiAoc3Bhbikge1xuICAgICAgc3Bhbi5zZXRIdHRwU3RhdHVzKHJlc3BvbnNlLnN0YXR1c0NvZGUpO1xuICAgICAgc3Bhbi5maW5pc2goKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fb3B0aW9ucy5icmVhZGNydW1icykge1xuICAgICAgaHViLmFkZEJyZWFkY3J1bWIoXG4gICAgICAgIHtcbiAgICAgICAgICBjYXRlZ29yeTogJ2h0dHAnLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgICBzdGF0dXNfY29kZTogcmVzcG9uc2Uuc3RhdHVzQ29kZSxcbiAgICAgICAgICAgIHVybDogc3RyaW5nVXJsLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdHlwZTogJ2h0dHAnLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZXZlbnQ6ICdyZXNwb25zZScsXG4gICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfVxuICB9O31cblxuICAgX19pbml0NigpIHt0aGlzLl9vblJlcXVlc3RFcnJvciA9IChtZXNzYWdlKSA9PiB7XG4gICAgY29uc3QgaHViID0gZ2V0Q3VycmVudEh1YigpO1xuICAgIGlmICghaHViLmdldEludGVncmF0aW9uKFVuZGljaSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7IHJlcXVlc3QgfSA9IG1lc3NhZ2UgO1xuXG4gICAgY29uc3Qgc3RyaW5nVXJsID0gcmVxdWVzdC5vcmlnaW4gPyByZXF1ZXN0Lm9yaWdpbi50b1N0cmluZygpICsgcmVxdWVzdC5wYXRoIDogcmVxdWVzdC5wYXRoO1xuXG4gICAgaWYgKGlzU2VudHJ5UmVxdWVzdFVybChzdHJpbmdVcmwsIGh1YikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzcGFuID0gcmVxdWVzdC5fX3NlbnRyeV9zcGFuX187XG4gICAgaWYgKHNwYW4pIHtcbiAgICAgIHNwYW4uc2V0U3RhdHVzKCdpbnRlcm5hbF9lcnJvcicpO1xuICAgICAgc3Bhbi5maW5pc2goKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fb3B0aW9ucy5icmVhZGNydW1icykge1xuICAgICAgaHViLmFkZEJyZWFkY3J1bWIoXG4gICAgICAgIHtcbiAgICAgICAgICBjYXRlZ29yeTogJ2h0dHAnLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgICB1cmw6IHN0cmluZ1VybCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGxldmVsOiAnZXJyb3InLFxuICAgICAgICAgIHR5cGU6ICdodHRwJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGV2ZW50OiAnZXJyb3InLFxuICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH1cbiAgfTt9XG59VW5kaWNpLl9faW5pdFN0YXRpYygpO1xuXG5mdW5jdGlvbiBzZXRIZWFkZXJzT25SZXF1ZXN0KFxuICByZXF1ZXN0LFxuICBzZW50cnlUcmFjZSxcbiAgc2VudHJ5QmFnZ2FnZUhlYWRlcixcbikge1xuICBjb25zdCBoZWFkZXJMaW5lcyA9IHJlcXVlc3QuaGVhZGVycy5zcGxpdCgnXFxyXFxuJyk7XG4gIGNvbnN0IGhhc1NlbnRyeUhlYWRlcnMgPSBoZWFkZXJMaW5lcy5zb21lKGhlYWRlckxpbmUgPT4gaGVhZGVyTGluZS5zdGFydHNXaXRoKCdzZW50cnktdHJhY2U6JykpO1xuXG4gIGlmIChoYXNTZW50cnlIZWFkZXJzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmVxdWVzdC5hZGRIZWFkZXIoJ3NlbnRyeS10cmFjZScsIHNlbnRyeVRyYWNlKTtcbiAgaWYgKHNlbnRyeUJhZ2dhZ2VIZWFkZXIpIHtcbiAgICByZXF1ZXN0LmFkZEhlYWRlcignYmFnZ2FnZScsIHNlbnRyeUJhZ2dhZ2VIZWFkZXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlcXVlc3RTcGFuKFxuICBhY3RpdmVTcGFuLFxuICByZXF1ZXN0LFxuICBzdHJpbmdVcmwsXG4pIHtcbiAgY29uc3QgdXJsID0gcGFyc2VVcmwoc3RyaW5nVXJsKTtcblxuICBjb25zdCBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZCB8fCAnR0VUJztcbiAgY29uc3QgZGF0YSA9IHtcbiAgICAnaHR0cC5tZXRob2QnOiBtZXRob2QsXG4gIH07XG4gIGlmICh1cmwuc2VhcmNoKSB7XG4gICAgZGF0YVsnaHR0cC5xdWVyeSddID0gdXJsLnNlYXJjaDtcbiAgfVxuICBpZiAodXJsLmhhc2gpIHtcbiAgICBkYXRhWydodHRwLmZyYWdtZW50J10gPSB1cmwuaGFzaDtcbiAgfVxuICByZXR1cm4gX29wdGlvbmFsQ2hhaW4oW2FjdGl2ZVNwYW4sICdvcHRpb25hbEFjY2VzcycsIF83ID0+IF83LnN0YXJ0Q2hpbGQsICdjYWxsJywgXzggPT4gXzgoe1xuICAgIG9wOiAnaHR0cC5jbGllbnQnLFxuICAgIG9yaWdpbjogJ2F1dG8uaHR0cC5ub2RlLnVuZGljaScsXG4gICAgZGVzY3JpcHRpb246IGAke21ldGhvZH0gJHtnZXRTYW5pdGl6ZWRVcmxTdHJpbmcodXJsKX1gLFxuICAgIGRhdGEsXG4gIH0pXSk7XG59XG5cbmV4cG9ydCB7IENoYW5uZWxOYW1lLCBVbmRpY2kgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIl9vcHRpb25hbENoYWluIiwiZ2V0Q3VycmVudEh1YiIsImlzU2VudHJ5UmVxdWVzdFVybCIsImdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tQ2xpZW50IiwiTFJVTWFwIiwiZHluYW1pY1JlcXVpcmUiLCJkeW5hbWljU2FtcGxpbmdDb250ZXh0VG9TZW50cnlCYWdnYWdlSGVhZGVyIiwiZ2VuZXJhdGVTZW50cnlUcmFjZUhlYWRlciIsInBhcnNlVXJsIiwic3RyaW5nTWF0Y2hlc1NvbWVQYXR0ZXJuIiwiZ2V0U2FuaXRpemVkVXJsU3RyaW5nIiwiTk9ERV9WRVJTSU9OIiwiQ2hhbm5lbE5hbWUiLCJSZXF1ZXN0Q3JlYXRlIiwiUmVxdWVzdEVuZCIsIlJlcXVlc3RFcnJvciIsIlVuZGljaSIsIl9faW5pdFN0YXRpYyIsImlkIiwiX19pbml0IiwibmFtZSIsIl9faW5pdDIiLCJfY3JlYXRlU3BhblVybE1hcCIsIl9faW5pdDMiLCJfaGVhZGVyc1VybE1hcCIsImNvbnN0cnVjdG9yIiwiX29wdGlvbnMiLCJwcm90b3R5cGUiLCJjYWxsIiwiX19pbml0NCIsIl9faW5pdDUiLCJfX2luaXQ2IiwiYnJlYWRjcnVtYnMiLCJ1bmRlZmluZWQiLCJzaG91bGRDcmVhdGVTcGFuRm9yUmVxdWVzdCIsInNldHVwT25jZSIsIl9hZGRHbG9iYWxFdmVudFByb2Nlc3NvciIsIm1ham9yIiwiZHMiLCJtb2R1bGUiLCJlIiwic3Vic2NyaWJlIiwiX29uUmVxdWVzdENyZWF0ZSIsIl9vblJlcXVlc3RFbmQiLCJfb25SZXF1ZXN0RXJyb3IiLCJfc2hvdWxkQ3JlYXRlU3BhbiIsInVybCIsImNhY2hlZERlY2lzaW9uIiwiZ2V0IiwiZGVjaXNpb24iLCJzZXQiLCJtZXNzYWdlIiwiaHViIiwiZ2V0SW50ZWdyYXRpb24iLCJyZXF1ZXN0Iiwic3RyaW5nVXJsIiwib3JpZ2luIiwidG9TdHJpbmciLCJwYXRoIiwiX19zZW50cnlfc3Bhbl9fIiwiY2xpZW50IiwiZ2V0Q2xpZW50IiwiY2xpZW50T3B0aW9ucyIsImdldE9wdGlvbnMiLCJzY29wZSIsImdldFNjb3BlIiwicGFyZW50U3BhbiIsImdldFNwYW4iLCJzcGFuIiwiY3JlYXRlUmVxdWVzdFNwYW4iLCJzaG91bGRBdHRhY2hUcmFjZURhdGEiLCJ0cmFjZVByb3BhZ2F0aW9uVGFyZ2V0cyIsImR5bmFtaWNTYW1wbGluZ0NvbnRleHQiLCJfNCIsInRyYW5zYWN0aW9uIiwiXzUiLCJnZXREeW5hbWljU2FtcGxpbmdDb250ZXh0IiwiXzYiLCJzZW50cnlCYWdnYWdlSGVhZGVyIiwic2V0SGVhZGVyc09uUmVxdWVzdCIsInRvVHJhY2VwYXJlbnQiLCJ0cmFjZUlkIiwic2FtcGxlZCIsImRzYyIsImdldFByb3BhZ2F0aW9uQ29udGV4dCIsInNlbnRyeVRyYWNlIiwicmVzcG9uc2UiLCJzZXRIdHRwU3RhdHVzIiwic3RhdHVzQ29kZSIsImZpbmlzaCIsImFkZEJyZWFkY3J1bWIiLCJjYXRlZ29yeSIsImRhdGEiLCJtZXRob2QiLCJzdGF0dXNfY29kZSIsInR5cGUiLCJldmVudCIsInNldFN0YXR1cyIsImxldmVsIiwiaGVhZGVyTGluZXMiLCJoZWFkZXJzIiwic3BsaXQiLCJoYXNTZW50cnlIZWFkZXJzIiwic29tZSIsImhlYWRlckxpbmUiLCJzdGFydHNXaXRoIiwiYWRkSGVhZGVyIiwiYWN0aXZlU3BhbiIsInNlYXJjaCIsImhhc2giLCJfNyIsInN0YXJ0Q2hpbGQiLCJfOCIsIm9wIiwiZGVzY3JpcHRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/integrations/undici/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/integrations/utils/errorhandling.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/node/esm/integrations/utils/errorhandling.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logAndExitProcess: () => (/* binding */ logAndExitProcess)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/exports.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../debug-build.js */ \"(ssr)/./node_modules/@sentry/node/esm/debug-build.js\");\n\n\n\nconst DEFAULT_SHUTDOWN_TIMEOUT = 2000;\n/**\n * @hidden\n */ function logAndExitProcess(error) {\n    (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.consoleSandbox)(()=>{\n        // eslint-disable-next-line no-console\n        console.error(error);\n    });\n    const client = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.getClient)();\n    if (client === undefined) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"No NodeClient was defined, we are exiting the process now.\");\n        global.process.exit(1);\n    }\n    const options = client.getOptions();\n    const timeout = options && options.shutdownTimeout && options.shutdownTimeout > 0 && options.shutdownTimeout || DEFAULT_SHUTDOWN_TIMEOUT;\n    client.close(timeout).then((result)=>{\n        if (!result) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"We reached the timeout for emptying the request buffer, still exiting now!\");\n        }\n        global.process.exit(1);\n    }, (error)=>{\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_utils__WEBPACK_IMPORTED_MODULE_0__.logger.error(error);\n    });\n}\n //# sourceMappingURL=errorhandling.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9pbnRlZ3JhdGlvbnMvdXRpbHMvZXJyb3JoYW5kbGluZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXlDO0FBQ2M7QUFDSjtBQUVuRCxNQUFNSSwyQkFBMkI7QUFFakM7O0NBRUMsR0FDRCxTQUFTQyxrQkFBa0JDLEtBQUs7SUFDOUJMLDZEQUFjQSxDQUFDO1FBQ2Isc0NBQXNDO1FBQ3RDTSxRQUFRRCxLQUFLLENBQUNBO0lBQ2hCO0lBRUEsTUFBTUUsU0FBU1IsdURBQVNBO0lBRXhCLElBQUlRLFdBQVdDLFdBQVc7UUFDeEJOLHdEQUFXQSxJQUFJRCxpREFBTUEsQ0FBQ1EsSUFBSSxDQUFDO1FBQzNCQyxPQUFPQyxPQUFPLENBQUNDLElBQUksQ0FBQztJQUN0QjtJQUVBLE1BQU1DLFVBQVVOLE9BQU9PLFVBQVU7SUFDakMsTUFBTUMsVUFDSixXQUFZRixRQUFRRyxlQUFlLElBQUlILFFBQVFHLGVBQWUsR0FBRyxLQUFLSCxRQUFRRyxlQUFlLElBQzdGYjtJQUNGSSxPQUFPVSxLQUFLLENBQUNGLFNBQVNHLElBQUksQ0FDeEIsQ0FBQ0M7UUFDQyxJQUFJLENBQUNBLFFBQVE7WUFDWGpCLHdEQUFXQSxJQUFJRCxpREFBTUEsQ0FBQ1EsSUFBSSxDQUFDO1FBQzdCO1FBQ0FDLE9BQU9DLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDO0lBQ3RCLEdBQ0FQLENBQUFBO1FBQ0VILHdEQUFXQSxJQUFJRCxpREFBTUEsQ0FBQ0ksS0FBSyxDQUFDQTtJQUM5QjtBQUVKO0FBRTZCLENBQzdCLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvZXNtL2ludGVncmF0aW9ucy91dGlscy9lcnJvcmhhbmRsaW5nLmpzPzM0Y2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0Q2xpZW50IH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IGNvbnNvbGVTYW5kYm94LCBsb2dnZXIgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IERFQlVHX0JVSUxEIH0gZnJvbSAnLi4vLi4vZGVidWctYnVpbGQuanMnO1xuXG5jb25zdCBERUZBVUxUX1NIVVRET1dOX1RJTUVPVVQgPSAyMDAwO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24gbG9nQW5kRXhpdFByb2Nlc3MoZXJyb3IpIHtcbiAgY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gIH0pO1xuXG4gIGNvbnN0IGNsaWVudCA9IGdldENsaWVudCgpO1xuXG4gIGlmIChjbGllbnQgPT09IHVuZGVmaW5lZCkge1xuICAgIERFQlVHX0JVSUxEICYmIGxvZ2dlci53YXJuKCdObyBOb2RlQ2xpZW50IHdhcyBkZWZpbmVkLCB3ZSBhcmUgZXhpdGluZyB0aGUgcHJvY2VzcyBub3cuJyk7XG4gICAgZ2xvYmFsLnByb2Nlc3MuZXhpdCgxKTtcbiAgfVxuXG4gIGNvbnN0IG9wdGlvbnMgPSBjbGllbnQuZ2V0T3B0aW9ucygpO1xuICBjb25zdCB0aW1lb3V0ID1cbiAgICAob3B0aW9ucyAmJiBvcHRpb25zLnNodXRkb3duVGltZW91dCAmJiBvcHRpb25zLnNodXRkb3duVGltZW91dCA+IDAgJiYgb3B0aW9ucy5zaHV0ZG93blRpbWVvdXQpIHx8XG4gICAgREVGQVVMVF9TSFVURE9XTl9USU1FT1VUO1xuICBjbGllbnQuY2xvc2UodGltZW91dCkudGhlbihcbiAgICAocmVzdWx0KSA9PiB7XG4gICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICBERUJVR19CVUlMRCAmJiBsb2dnZXIud2FybignV2UgcmVhY2hlZCB0aGUgdGltZW91dCBmb3IgZW1wdHlpbmcgdGhlIHJlcXVlc3QgYnVmZmVyLCBzdGlsbCBleGl0aW5nIG5vdyEnKTtcbiAgICAgIH1cbiAgICAgIGdsb2JhbC5wcm9jZXNzLmV4aXQoMSk7XG4gICAgfSxcbiAgICBlcnJvciA9PiB7XG4gICAgICBERUJVR19CVUlMRCAmJiBsb2dnZXIuZXJyb3IoZXJyb3IpO1xuICAgIH0sXG4gICk7XG59XG5cbmV4cG9ydCB7IGxvZ0FuZEV4aXRQcm9jZXNzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcmhhbmRsaW5nLmpzLm1hcFxuIl0sIm5hbWVzIjpbImdldENsaWVudCIsImNvbnNvbGVTYW5kYm94IiwibG9nZ2VyIiwiREVCVUdfQlVJTEQiLCJERUZBVUxUX1NIVVRET1dOX1RJTUVPVVQiLCJsb2dBbmRFeGl0UHJvY2VzcyIsImVycm9yIiwiY29uc29sZSIsImNsaWVudCIsInVuZGVmaW5lZCIsIndhcm4iLCJnbG9iYWwiLCJwcm9jZXNzIiwiZXhpdCIsIm9wdGlvbnMiLCJnZXRPcHRpb25zIiwidGltZW91dCIsInNodXRkb3duVGltZW91dCIsImNsb3NlIiwidGhlbiIsInJlc3VsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/integrations/utils/errorhandling.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/integrations/utils/http.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/node/esm/integrations/utils/http.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cleanSpanDescription: () => (/* binding */ cleanSpanDescription),\n/* harmony export */   extractRawUrl: () => (/* binding */ extractRawUrl),\n/* harmony export */   extractUrl: () => (/* binding */ extractUrl),\n/* harmony export */   normalizeRequestArgs: () => (/* binding */ normalizeRequestArgs),\n/* harmony export */   urlToOptions: () => (/* binding */ urlToOptions)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(url__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _nodeVersion_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../nodeVersion.js */ \"(ssr)/./node_modules/@sentry/node/esm/nodeVersion.js\");\n\n\n\n/**\n * Assembles a URL that's passed to the users to filter on.\n * It can include raw (potentially PII containing) data, which we'll allow users to access to filter\n * but won't include in spans or breadcrumbs.\n *\n * @param requestOptions RequestOptions object containing the component parts for a URL\n * @returns Fully-formed URL\n */ // TODO (v8): This function should include auth, query and fragment (it's breaking, so we need to wait for v8)\nfunction extractRawUrl(requestOptions) {\n    const { protocol, hostname, port } = parseRequestOptions(requestOptions);\n    const path = requestOptions.path ? requestOptions.path : \"/\";\n    return `${protocol}//${hostname}${port}${path}`;\n}\n/**\n * Assemble a URL to be used for breadcrumbs and spans.\n *\n * @param requestOptions RequestOptions object containing the component parts for a URL\n * @returns Fully-formed URL\n */ function extractUrl(requestOptions) {\n    const { protocol, hostname, port } = parseRequestOptions(requestOptions);\n    const path = requestOptions.pathname || \"/\";\n    // always filter authority, see https://develop.sentry.dev/sdk/data-handling/#structuring-data\n    const authority = requestOptions.auth ? redactAuthority(requestOptions.auth) : \"\";\n    return `${protocol}//${authority}${hostname}${port}${path}`;\n}\nfunction redactAuthority(auth) {\n    const [user, password] = auth.split(\":\");\n    return `${user ? \"[Filtered]\" : \"\"}:${password ? \"[Filtered]\" : \"\"}@`;\n}\n/**\n * Handle various edge cases in the span description (for spans representing http(s) requests).\n *\n * @param description current `description` property of the span representing the request\n * @param requestOptions Configuration data for the request\n * @param Request Request object\n *\n * @returns The cleaned description\n */ function cleanSpanDescription(description, requestOptions, request) {\n    // nothing to clean\n    if (!description) {\n        return description;\n    }\n    // eslint-disable-next-line prefer-const\n    let [method, requestUrl] = description.split(\" \");\n    // superagent sticks the protocol in a weird place (we check for host because if both host *and* protocol are missing,\n    // we're likely dealing with an internal route and this doesn't apply)\n    if (requestOptions.host && !requestOptions.protocol) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n        requestOptions.protocol = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__._optionalChain)([\n            request,\n            \"optionalAccess\",\n            (_)=>_.agent,\n            \"optionalAccess\",\n            (_2)=>_2.protocol\n        ]); // worst comes to worst, this is undefined and nothing changes\n        // This URL contains the filtered authority ([filtered]:[filtered]@example.com) but no fragment or query params\n        requestUrl = extractUrl(requestOptions);\n    }\n    // internal routes can end up starting with a triple slash rather than a single one\n    if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__._optionalChain)([\n        requestUrl,\n        \"optionalAccess\",\n        (_3)=>_3.startsWith,\n        \"call\",\n        (_4)=>_4(\"///\")\n    ])) {\n        requestUrl = requestUrl.slice(2);\n    }\n    return `${method} ${requestUrl}`;\n}\n// the node types are missing a few properties which node's `urlToOptions` function spits out\n/**\n * Convert a URL object into a RequestOptions object.\n *\n * Copied from Node's internals (where it's used in http(s).request() and http(s).get()), modified only to use the\n * RequestOptions type above.\n *\n * See https://github.com/nodejs/node/blob/master/lib/internal/url.js.\n */ function urlToOptions(url) {\n    const options = {\n        protocol: url.protocol,\n        hostname: typeof url.hostname === \"string\" && url.hostname.startsWith(\"[\") ? url.hostname.slice(1, -1) : url.hostname,\n        hash: url.hash,\n        search: url.search,\n        pathname: url.pathname,\n        path: `${url.pathname || \"\"}${url.search || \"\"}`,\n        href: url.href\n    };\n    if (url.port !== \"\") {\n        options.port = Number(url.port);\n    }\n    if (url.username || url.password) {\n        options.auth = `${url.username}:${url.password}`;\n    }\n    return options;\n}\n/**\n * Normalize inputs to `http(s).request()` and `http(s).get()`.\n *\n * Legal inputs to `http(s).request()` and `http(s).get()` can take one of ten forms:\n *     [ RequestOptions | string | URL ],\n *     [ RequestOptions | string | URL, RequestCallback ],\n *     [ string | URL, RequestOptions ], and\n *     [ string | URL, RequestOptions, RequestCallback ].\n *\n * This standardizes to one of two forms: [ RequestOptions ] and [ RequestOptions, RequestCallback ]. A similar thing is\n * done as the first step of `http(s).request()` and `http(s).get()`; this just does it early so that we can interact\n * with the args in a standard way.\n *\n * @param requestArgs The inputs to `http(s).request()` or `http(s).get()`, as an array.\n *\n * @returns Equivalent args of the form [ RequestOptions ] or [ RequestOptions, RequestCallback ].\n */ function normalizeRequestArgs(httpModule, requestArgs) {\n    let callback, requestOptions;\n    // pop off the callback, if there is one\n    if (typeof requestArgs[requestArgs.length - 1] === \"function\") {\n        callback = requestArgs.pop();\n    }\n    // create a RequestOptions object of whatever's at index 0\n    if (typeof requestArgs[0] === \"string\") {\n        requestOptions = urlToOptions(new url__WEBPACK_IMPORTED_MODULE_0__.URL(requestArgs[0]));\n    } else if (requestArgs[0] instanceof url__WEBPACK_IMPORTED_MODULE_0__.URL) {\n        requestOptions = urlToOptions(requestArgs[0]);\n    } else {\n        requestOptions = requestArgs[0];\n        try {\n            const parsed = new url__WEBPACK_IMPORTED_MODULE_0__.URL(requestOptions.path || \"\", `${requestOptions.protocol || \"http:\"}//${requestOptions.hostname}`);\n            requestOptions = {\n                pathname: parsed.pathname,\n                search: parsed.search,\n                hash: parsed.hash,\n                ...requestOptions\n            };\n        } catch (e) {\n        // ignore\n        }\n    }\n    // if the options were given separately from the URL, fold them in\n    if (requestArgs.length === 2) {\n        requestOptions = {\n            ...requestOptions,\n            ...requestArgs[1]\n        };\n    }\n    // Figure out the protocol if it's currently missing\n    if (requestOptions.protocol === undefined) {\n        // Worst case we end up populating protocol with undefined, which it already is\n        /* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any */ // NOTE: Prior to Node 9, `https` used internals of `http` module, thus we don't patch it.\n        // Because of that, we cannot rely on `httpModule` to provide us with valid protocol,\n        // as it will always return `http`, even when using `https` module.\n        //\n        // See test/integrations/http.test.ts for more details on Node <=v8 protocol issue.\n        if (_nodeVersion_js__WEBPACK_IMPORTED_MODULE_2__.NODE_VERSION.major && _nodeVersion_js__WEBPACK_IMPORTED_MODULE_2__.NODE_VERSION.major > 8) {\n            requestOptions.protocol = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__._optionalChain)([\n                (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__._optionalChain)([\n                    httpModule,\n                    \"optionalAccess\",\n                    (_5)=>_5.globalAgent\n                ]),\n                \"optionalAccess\",\n                (_6)=>_6.protocol\n            ]) || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__._optionalChain)([\n                requestOptions.agent,\n                \"optionalAccess\",\n                (_7)=>_7.protocol\n            ]) || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__._optionalChain)([\n                requestOptions._defaultAgent,\n                \"optionalAccess\",\n                (_8)=>_8.protocol\n            ]);\n        } else {\n            requestOptions.protocol = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__._optionalChain)([\n                requestOptions.agent,\n                \"optionalAccess\",\n                (_9)=>_9.protocol\n            ]) || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__._optionalChain)([\n                requestOptions._defaultAgent,\n                \"optionalAccess\",\n                (_10)=>_10.protocol\n            ]) || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__._optionalChain)([\n                (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__._optionalChain)([\n                    httpModule,\n                    \"optionalAccess\",\n                    (_11)=>_11.globalAgent\n                ]),\n                \"optionalAccess\",\n                (_12)=>_12.protocol\n            ]);\n        }\n    /* eslint-enable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any */ }\n    // return args in standardized form\n    if (callback) {\n        return [\n            requestOptions,\n            callback\n        ];\n    } else {\n        return [\n            requestOptions\n        ];\n    }\n}\nfunction parseRequestOptions(requestOptions) {\n    const protocol = requestOptions.protocol || \"\";\n    const hostname = requestOptions.hostname || requestOptions.host || \"\";\n    // Don't log standard :80 (http) and :443 (https) ports to reduce the noise\n    // Also don't add port if the hostname already includes a port\n    const port = !requestOptions.port || requestOptions.port === 80 || requestOptions.port === 443 || /^(.*):(\\d+)$/.test(hostname) ? \"\" : `:${requestOptions.port}`;\n    return {\n        protocol,\n        hostname,\n        port\n    };\n}\n //# sourceMappingURL=http.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/integrations/utils/http.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/module.js":
/*!*************************************************!*\
  !*** ./node_modules/@sentry/node/esm/module.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getModuleFromFilename: () => (/* binding */ getModuleFromFilename)\n/* harmony export */ });\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_0__);\n\nconst isWindowsPlatform = path__WEBPACK_IMPORTED_MODULE_0__.sep === \"\\\\\";\n/** normalizes Windows paths */ function normalizeWindowsPath(path) {\n    return path.replace(/^[A-Z]:/, \"\") // remove Windows-style prefix\n    .replace(/\\\\/g, \"/\"); // replace all `\\` instances with `/`\n}\n/** Gets the module from a filename */ function getModuleFromFilename(filename, normalizeWindowsPathSeparator = isWindowsPlatform) {\n    if (!filename) {\n        return;\n    }\n    const normalizedFilename = normalizeWindowsPathSeparator ? normalizeWindowsPath(filename) : filename;\n    // eslint-disable-next-line prefer-const\n    let { root, dir, base: basename, ext } = path__WEBPACK_IMPORTED_MODULE_0__.posix.parse(normalizedFilename);\n    const base =  true && __webpack_require__.c[__webpack_require__.s] && __webpack_require__.c[__webpack_require__.s].filename && dir || global.process.cwd();\n    const normalizedBase = `${base}/`;\n    // It's specifically a module\n    let file = basename;\n    if (ext === \".js\" || ext === \".mjs\" || ext === \".cjs\") {\n        file = file.slice(0, ext.length * -1);\n    }\n    if (!root && !dir) {\n        // No dirname whatsoever\n        dir = \".\";\n    }\n    let n = dir.lastIndexOf(\"/node_modules/\");\n    if (n > -1) {\n        // /node_modules/ is 14 chars\n        return `${dir.slice(n + 14).replace(/\\//g, \".\")}:${file}`;\n    }\n    // Let's see if it's a part of the main module\n    // To be a part of main module, it has to share the same base\n    n = `${dir}/`.lastIndexOf(normalizedBase, 0);\n    if (n === 0) {\n        let moduleName = dir.slice(normalizedBase.length).replace(/\\//g, \".\");\n        if (moduleName) {\n            moduleName += \":\";\n        }\n        moduleName += file;\n        return moduleName;\n    }\n    return file;\n}\n //# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9tb2R1bGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtDO0FBRWxDLE1BQU1FLG9CQUFvQkQscUNBQUdBLEtBQUs7QUFFbEMsNkJBQTZCLEdBQzdCLFNBQVNFLHFCQUFxQkMsSUFBSTtJQUNoQyxPQUFPQSxLQUNKQyxPQUFPLENBQUMsV0FBVyxJQUFJLDhCQUE4QjtLQUNyREEsT0FBTyxDQUFDLE9BQU8sTUFBTSxxQ0FBcUM7QUFDL0Q7QUFFQSxvQ0FBb0MsR0FDcEMsU0FBU0Msc0JBQ1BDLFFBQVEsRUFDUkMsZ0NBQWdDTixpQkFBaUI7SUFFakQsSUFBSSxDQUFDSyxVQUFVO1FBQ2I7SUFDRjtJQUVBLE1BQU1FLHFCQUFxQkQsZ0NBQWdDTCxxQkFBcUJJLFlBQVlBO0lBRTVGLHdDQUF3QztJQUN4QyxJQUFJLEVBQUVHLElBQUksRUFBRUMsR0FBRyxFQUFFQyxNQUFNQyxRQUFRLEVBQUVDLEdBQUcsRUFBRSxHQUFHZCx1Q0FBS0EsQ0FBQ2UsS0FBSyxDQUFDTjtJQUVyRCxNQUFNRyxPQUFPLFNBQVlJLDRDQUFZLElBQUlBLDRDQUFZLENBQUNULFFBQVEsSUFBSUksT0FBUU8sT0FBT0MsT0FBTyxDQUFDQyxHQUFHO0lBRTVGLE1BQU1DLGlCQUFpQixDQUFDLEVBQUVULEtBQUssQ0FBQyxDQUFDO0lBRWpDLDZCQUE2QjtJQUM3QixJQUFJVSxPQUFPVDtJQUVYLElBQUlDLFFBQVEsU0FBU0EsUUFBUSxVQUFVQSxRQUFRLFFBQVE7UUFDckRRLE9BQU9BLEtBQUtDLEtBQUssQ0FBQyxHQUFHVCxJQUFJVSxNQUFNLEdBQUcsQ0FBQztJQUNyQztJQUVBLElBQUksQ0FBQ2QsUUFBUSxDQUFDQyxLQUFLO1FBQ2pCLHdCQUF3QjtRQUN4QkEsTUFBTTtJQUNSO0lBRUEsSUFBSWMsSUFBSWQsSUFBSWUsV0FBVyxDQUFDO0lBQ3hCLElBQUlELElBQUksQ0FBQyxHQUFHO1FBQ1YsNkJBQTZCO1FBQzdCLE9BQU8sQ0FBQyxFQUFFZCxJQUFJWSxLQUFLLENBQUNFLElBQUksSUFBSXBCLE9BQU8sQ0FBQyxPQUFPLEtBQUssQ0FBQyxFQUFFaUIsS0FBSyxDQUFDO0lBQzNEO0lBQ0EsOENBQThDO0lBQzlDLDZEQUE2RDtJQUM3REcsSUFBSSxDQUFDLEVBQUVkLElBQUksQ0FBQyxDQUFDLENBQUNlLFdBQVcsQ0FBQ0wsZ0JBQWdCO0lBRTFDLElBQUlJLE1BQU0sR0FBRztRQUNYLElBQUlFLGFBQWFoQixJQUFJWSxLQUFLLENBQUNGLGVBQWVHLE1BQU0sRUFBRW5CLE9BQU8sQ0FBQyxPQUFPO1FBQ2pFLElBQUlzQixZQUFZO1lBQ2RBLGNBQWM7UUFDaEI7UUFDQUEsY0FBY0w7UUFDZCxPQUFPSztJQUNUO0lBQ0EsT0FBT0w7QUFDVDtBQUVpQyxDQUNqQyxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9tb2R1bGUuanM/YWFiZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwb3NpeCwgc2VwIH0gZnJvbSAncGF0aCc7XG5cbmNvbnN0IGlzV2luZG93c1BsYXRmb3JtID0gc2VwID09PSAnXFxcXCc7XG5cbi8qKiBub3JtYWxpemVzIFdpbmRvd3MgcGF0aHMgKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVdpbmRvd3NQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGhcbiAgICAucmVwbGFjZSgvXltBLVpdOi8sICcnKSAvLyByZW1vdmUgV2luZG93cy1zdHlsZSBwcmVmaXhcbiAgICAucmVwbGFjZSgvXFxcXC9nLCAnLycpOyAvLyByZXBsYWNlIGFsbCBgXFxgIGluc3RhbmNlcyB3aXRoIGAvYFxufVxuXG4vKiogR2V0cyB0aGUgbW9kdWxlIGZyb20gYSBmaWxlbmFtZSAqL1xuZnVuY3Rpb24gZ2V0TW9kdWxlRnJvbUZpbGVuYW1lKFxuICBmaWxlbmFtZSxcbiAgbm9ybWFsaXplV2luZG93c1BhdGhTZXBhcmF0b3IgPSBpc1dpbmRvd3NQbGF0Zm9ybSxcbikge1xuICBpZiAoIWZpbGVuYW1lKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgbm9ybWFsaXplZEZpbGVuYW1lID0gbm9ybWFsaXplV2luZG93c1BhdGhTZXBhcmF0b3IgPyBub3JtYWxpemVXaW5kb3dzUGF0aChmaWxlbmFtZSkgOiBmaWxlbmFtZTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWNvbnN0XG4gIGxldCB7IHJvb3QsIGRpciwgYmFzZTogYmFzZW5hbWUsIGV4dCB9ID0gcG9zaXgucGFyc2Uobm9ybWFsaXplZEZpbGVuYW1lKTtcblxuICBjb25zdCBiYXNlID0gKHJlcXVpcmUgJiYgcmVxdWlyZS5tYWluICYmIHJlcXVpcmUubWFpbi5maWxlbmFtZSAmJiBkaXIpIHx8IGdsb2JhbC5wcm9jZXNzLmN3ZCgpO1xuXG4gIGNvbnN0IG5vcm1hbGl6ZWRCYXNlID0gYCR7YmFzZX0vYDtcblxuICAvLyBJdCdzIHNwZWNpZmljYWxseSBhIG1vZHVsZVxuICBsZXQgZmlsZSA9IGJhc2VuYW1lO1xuXG4gIGlmIChleHQgPT09ICcuanMnIHx8IGV4dCA9PT0gJy5tanMnIHx8IGV4dCA9PT0gJy5janMnKSB7XG4gICAgZmlsZSA9IGZpbGUuc2xpY2UoMCwgZXh0Lmxlbmd0aCAqIC0xKTtcbiAgfVxuXG4gIGlmICghcm9vdCAmJiAhZGlyKSB7XG4gICAgLy8gTm8gZGlybmFtZSB3aGF0c29ldmVyXG4gICAgZGlyID0gJy4nO1xuICB9XG5cbiAgbGV0IG4gPSBkaXIubGFzdEluZGV4T2YoJy9ub2RlX21vZHVsZXMvJyk7XG4gIGlmIChuID4gLTEpIHtcbiAgICAvLyAvbm9kZV9tb2R1bGVzLyBpcyAxNCBjaGFyc1xuICAgIHJldHVybiBgJHtkaXIuc2xpY2UobiArIDE0KS5yZXBsYWNlKC9cXC8vZywgJy4nKX06JHtmaWxlfWA7XG4gIH1cbiAgLy8gTGV0J3Mgc2VlIGlmIGl0J3MgYSBwYXJ0IG9mIHRoZSBtYWluIG1vZHVsZVxuICAvLyBUbyBiZSBhIHBhcnQgb2YgbWFpbiBtb2R1bGUsIGl0IGhhcyB0byBzaGFyZSB0aGUgc2FtZSBiYXNlXG4gIG4gPSBgJHtkaXJ9L2AubGFzdEluZGV4T2Yobm9ybWFsaXplZEJhc2UsIDApO1xuXG4gIGlmIChuID09PSAwKSB7XG4gICAgbGV0IG1vZHVsZU5hbWUgPSBkaXIuc2xpY2Uobm9ybWFsaXplZEJhc2UubGVuZ3RoKS5yZXBsYWNlKC9cXC8vZywgJy4nKTtcbiAgICBpZiAobW9kdWxlTmFtZSkge1xuICAgICAgbW9kdWxlTmFtZSArPSAnOic7XG4gICAgfVxuICAgIG1vZHVsZU5hbWUgKz0gZmlsZTtcbiAgICByZXR1cm4gbW9kdWxlTmFtZTtcbiAgfVxuICByZXR1cm4gZmlsZTtcbn1cblxuZXhwb3J0IHsgZ2V0TW9kdWxlRnJvbUZpbGVuYW1lIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2R1bGUuanMubWFwXG4iXSwibmFtZXMiOlsicG9zaXgiLCJzZXAiLCJpc1dpbmRvd3NQbGF0Zm9ybSIsIm5vcm1hbGl6ZVdpbmRvd3NQYXRoIiwicGF0aCIsInJlcGxhY2UiLCJnZXRNb2R1bGVGcm9tRmlsZW5hbWUiLCJmaWxlbmFtZSIsIm5vcm1hbGl6ZVdpbmRvd3NQYXRoU2VwYXJhdG9yIiwibm9ybWFsaXplZEZpbGVuYW1lIiwicm9vdCIsImRpciIsImJhc2UiLCJiYXNlbmFtZSIsImV4dCIsInBhcnNlIiwicmVxdWlyZSIsIm1haW4iLCJnbG9iYWwiLCJwcm9jZXNzIiwiY3dkIiwibm9ybWFsaXplZEJhc2UiLCJmaWxlIiwic2xpY2UiLCJsZW5ndGgiLCJuIiwibGFzdEluZGV4T2YiLCJtb2R1bGVOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/nodeVersion.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/node/esm/nodeVersion.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NODE_VERSION: () => (/* binding */ NODE_VERSION)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/misc.js\");\n\nconst NODE_VERSION = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.parseSemver)(process.versions.node);\n //# sourceMappingURL=nodeVersion.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9ub2RlVmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE0QztBQUU1QyxNQUFNQyxlQUFlRCwwREFBV0EsQ0FBQ0UsUUFBUUMsUUFBUSxDQUFDQyxJQUFJO0FBRTlCLENBQ3hCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvZXNtL25vZGVWZXJzaW9uLmpzPzU1MWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VTZW12ZXIgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuY29uc3QgTk9ERV9WRVJTSU9OID0gcGFyc2VTZW12ZXIocHJvY2Vzcy52ZXJzaW9ucy5ub2RlKTtcblxuZXhwb3J0IHsgTk9ERV9WRVJTSU9OIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlVmVyc2lvbi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJwYXJzZVNlbXZlciIsIk5PREVfVkVSU0lPTiIsInByb2Nlc3MiLCJ2ZXJzaW9ucyIsIm5vZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/nodeVersion.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/requestDataDeprecated.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/node/esm/requestDataDeprecated.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractRequestData: () => (/* binding */ extractRequestData),\n/* harmony export */   parseRequest: () => (/* binding */ parseRequest)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/requestdata.js\");\n\n/**\n * @deprecated `Handlers.ExpressRequest` is deprecated and will be removed in v8. Use `PolymorphicRequest` instead.\n */ /**\n * Normalizes data from the request object, accounting for framework differences.\n *\n * @deprecated `Handlers.extractRequestData` is deprecated and will be removed in v8. Use `extractRequestData` instead.\n *\n * @param req The request object from which to extract data\n * @param keys An optional array of keys to include in the normalized data.\n * @returns An object containing normalized request data\n */ function extractRequestData(req, keys) {\n    return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.extractRequestData)(req, {\n        include: keys\n    });\n}\n/**\n * Options deciding what parts of the request to use when enhancing an event\n *\n * @deprecated `Handlers.ParseRequestOptions` is deprecated and will be removed in v8. Use\n * `AddRequestDataToEventOptions` in `@sentry/utils` instead.\n */ /**\n * Enriches passed event with request data.\n *\n * @deprecated `Handlers.parseRequest` is deprecated and will be removed in v8. Use `addRequestDataToEvent` instead.\n *\n * @param event Will be mutated and enriched with req data\n * @param req Request object\n * @param options object containing flags to enable functionality\n * @hidden\n */ function parseRequest(event, req, options = {}) {\n    return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_0__.addRequestDataToEvent)(event, req, {\n        include: options\n    });\n}\n //# sourceMappingURL=requestDataDeprecated.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9yZXF1ZXN0RGF0YURlcHJlY2F0ZWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtHO0FBRWxHOztDQUVDLEdBRUQ7Ozs7Ozs7O0NBUUMsR0FDRCxTQUFTQSxtQkFBbUJHLEdBQUcsRUFBRUMsSUFBSTtJQUNuQyxPQUFPSCxpRUFBb0JBLENBQUNFLEtBQUs7UUFBRUUsU0FBU0Q7SUFBSztBQUNuRDtBQUVBOzs7OztDQUtDLEdBRUQ7Ozs7Ozs7OztDQVNDLEdBQ0QsU0FBU0UsYUFBYUMsS0FBSyxFQUFFSixHQUFHLEVBQUVLLFVBQVUsQ0FBQyxDQUFDO0lBQzVDLE9BQU9OLG9FQUFxQkEsQ0FBQ0ssT0FBT0osS0FBSztRQUFFRSxTQUFTRztJQUFRO0FBQzlEO0FBRTRDLENBQzVDLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvZXNtL3JlcXVlc3REYXRhRGVwcmVjYXRlZC5qcz82MTk0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4dHJhY3RSZXF1ZXN0RGF0YSBhcyBleHRyYWN0UmVxdWVzdERhdGEkMSwgYWRkUmVxdWVzdERhdGFUb0V2ZW50IH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgYEhhbmRsZXJzLkV4cHJlc3NSZXF1ZXN0YCBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjguIFVzZSBgUG9seW1vcnBoaWNSZXF1ZXN0YCBpbnN0ZWFkLlxuICovXG5cbi8qKlxuICogTm9ybWFsaXplcyBkYXRhIGZyb20gdGhlIHJlcXVlc3Qgb2JqZWN0LCBhY2NvdW50aW5nIGZvciBmcmFtZXdvcmsgZGlmZmVyZW5jZXMuXG4gKlxuICogQGRlcHJlY2F0ZWQgYEhhbmRsZXJzLmV4dHJhY3RSZXF1ZXN0RGF0YWAgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHY4LiBVc2UgYGV4dHJhY3RSZXF1ZXN0RGF0YWAgaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0gcmVxIFRoZSByZXF1ZXN0IG9iamVjdCBmcm9tIHdoaWNoIHRvIGV4dHJhY3QgZGF0YVxuICogQHBhcmFtIGtleXMgQW4gb3B0aW9uYWwgYXJyYXkgb2Yga2V5cyB0byBpbmNsdWRlIGluIHRoZSBub3JtYWxpemVkIGRhdGEuXG4gKiBAcmV0dXJucyBBbiBvYmplY3QgY29udGFpbmluZyBub3JtYWxpemVkIHJlcXVlc3QgZGF0YVxuICovXG5mdW5jdGlvbiBleHRyYWN0UmVxdWVzdERhdGEocmVxLCBrZXlzKSB7XG4gIHJldHVybiBleHRyYWN0UmVxdWVzdERhdGEkMShyZXEsIHsgaW5jbHVkZToga2V5cyB9KTtcbn1cblxuLyoqXG4gKiBPcHRpb25zIGRlY2lkaW5nIHdoYXQgcGFydHMgb2YgdGhlIHJlcXVlc3QgdG8gdXNlIHdoZW4gZW5oYW5jaW5nIGFuIGV2ZW50XG4gKlxuICogQGRlcHJlY2F0ZWQgYEhhbmRsZXJzLlBhcnNlUmVxdWVzdE9wdGlvbnNgIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2OC4gVXNlXG4gKiBgQWRkUmVxdWVzdERhdGFUb0V2ZW50T3B0aW9uc2AgaW4gYEBzZW50cnkvdXRpbHNgIGluc3RlYWQuXG4gKi9cblxuLyoqXG4gKiBFbnJpY2hlcyBwYXNzZWQgZXZlbnQgd2l0aCByZXF1ZXN0IGRhdGEuXG4gKlxuICogQGRlcHJlY2F0ZWQgYEhhbmRsZXJzLnBhcnNlUmVxdWVzdGAgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHY4LiBVc2UgYGFkZFJlcXVlc3REYXRhVG9FdmVudGAgaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0gZXZlbnQgV2lsbCBiZSBtdXRhdGVkIGFuZCBlbnJpY2hlZCB3aXRoIHJlcSBkYXRhXG4gKiBAcGFyYW0gcmVxIFJlcXVlc3Qgb2JqZWN0XG4gKiBAcGFyYW0gb3B0aW9ucyBvYmplY3QgY29udGFpbmluZyBmbGFncyB0byBlbmFibGUgZnVuY3Rpb25hbGl0eVxuICogQGhpZGRlblxuICovXG5mdW5jdGlvbiBwYXJzZVJlcXVlc3QoZXZlbnQsIHJlcSwgb3B0aW9ucyA9IHt9KSB7XG4gIHJldHVybiBhZGRSZXF1ZXN0RGF0YVRvRXZlbnQoZXZlbnQsIHJlcSwgeyBpbmNsdWRlOiBvcHRpb25zIH0pO1xufVxuXG5leHBvcnQgeyBleHRyYWN0UmVxdWVzdERhdGEsIHBhcnNlUmVxdWVzdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVxdWVzdERhdGFEZXByZWNhdGVkLmpzLm1hcFxuIl0sIm5hbWVzIjpbImV4dHJhY3RSZXF1ZXN0RGF0YSIsImV4dHJhY3RSZXF1ZXN0RGF0YSQxIiwiYWRkUmVxdWVzdERhdGFUb0V2ZW50IiwicmVxIiwia2V5cyIsImluY2x1ZGUiLCJwYXJzZVJlcXVlc3QiLCJldmVudCIsIm9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/requestDataDeprecated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/sdk.js":
/*!**********************************************!*\
  !*** ./node_modules/@sentry/node/esm/sdk.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultIntegrations: () => (/* binding */ defaultIntegrations),\n/* harmony export */   defaultStackParser: () => (/* binding */ defaultStackParser),\n/* harmony export */   getSentryRelease: () => (/* binding */ getSentryRelease),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   isAutoSessionTrackingEnabled: () => (/* binding */ isAutoSessionTrackingEnabled)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/integrations/inboundfilters.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/integrations/functiontostring.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/integrations/linkederrors.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/integrations/requestdata.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/hub.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/integration.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/sdk.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/stacktrace.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/worldwide.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/tracing.js\");\n/* harmony import */ var _anr_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./anr/index.js */ \"(ssr)/./node_modules/@sentry/node/esm/anr/index.js\");\n/* harmony import */ var _async_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./async/index.js */ \"(ssr)/./node_modules/@sentry/node/esm/async/index.js\");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./client.js */ \"(ssr)/./node_modules/@sentry/node/esm/client.js\");\n/* harmony import */ var _integrations_console_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./integrations/console.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/console.js\");\n/* harmony import */ var _integrations_http_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./integrations/http.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/http.js\");\n/* harmony import */ var _integrations_onuncaughtexception_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./integrations/onuncaughtexception.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/onuncaughtexception.js\");\n/* harmony import */ var _integrations_onunhandledrejection_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./integrations/onunhandledrejection.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/onunhandledrejection.js\");\n/* harmony import */ var _integrations_modules_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./integrations/modules.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/modules.js\");\n/* harmony import */ var _integrations_contextlines_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./integrations/contextlines.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/contextlines.js\");\n/* harmony import */ var _integrations_context_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./integrations/context.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/context.js\");\n/* harmony import */ var _integrations_localvariables_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./integrations/localvariables.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/localvariables.js\");\n/* harmony import */ var _integrations_undici_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./integrations/undici/index.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/undici/index.js\");\n/* harmony import */ var _integrations_spotlight_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./integrations/spotlight.js */ \"(ssr)/./node_modules/@sentry/node/esm/integrations/spotlight.js\");\n/* harmony import */ var _module_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./module.js */ \"(ssr)/./node_modules/@sentry/node/esm/module.js\");\n/* harmony import */ var _transports_http_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./transports/http.js */ \"(ssr)/./node_modules/@sentry/node/esm/transports/http.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* eslint-disable max-lines */ const defaultIntegrations = [\n    // Common\n    new _sentry_core__WEBPACK_IMPORTED_MODULE_0__.InboundFilters(),\n    new _sentry_core__WEBPACK_IMPORTED_MODULE_1__.FunctionToString(),\n    new _sentry_core__WEBPACK_IMPORTED_MODULE_2__.LinkedErrors(),\n    // Native Wrappers\n    new _integrations_console_js__WEBPACK_IMPORTED_MODULE_3__.Console(),\n    new _integrations_http_js__WEBPACK_IMPORTED_MODULE_4__.Http(),\n    new _integrations_undici_index_js__WEBPACK_IMPORTED_MODULE_5__.Undici(),\n    // Global Handlers\n    new _integrations_onuncaughtexception_js__WEBPACK_IMPORTED_MODULE_6__.OnUncaughtException(),\n    new _integrations_onunhandledrejection_js__WEBPACK_IMPORTED_MODULE_7__.OnUnhandledRejection(),\n    // Event Info\n    new _integrations_contextlines_js__WEBPACK_IMPORTED_MODULE_8__.ContextLines(),\n    new _integrations_localvariables_js__WEBPACK_IMPORTED_MODULE_9__.LocalVariables(),\n    new _integrations_context_js__WEBPACK_IMPORTED_MODULE_10__.Context(),\n    new _integrations_modules_js__WEBPACK_IMPORTED_MODULE_11__.Modules(),\n    new _sentry_core__WEBPACK_IMPORTED_MODULE_12__.RequestData()\n];\n/**\n * The Sentry Node SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible in the\n * main entry module. To set context information or send manual events, use the\n * provided methods.\n *\n * @example\n * ```\n *\n * const { init } = require('@sentry/node');\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * const { configureScope } = require('@sentry/node');\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * const { addBreadcrumb } = require('@sentry/node');\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * const Sentry = require('@sentry/node');\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link NodeOptions} for documentation on configuration options.\n */ // eslint-disable-next-line complexity\nfunction init(options = {}) {\n    if ((0,_anr_index_js__WEBPACK_IMPORTED_MODULE_13__.isAnrChildProcess)()) {\n        options.autoSessionTracking = false;\n        options.tracesSampleRate = 0;\n    }\n    const carrier = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_14__.getMainCarrier)();\n    (0,_async_index_js__WEBPACK_IMPORTED_MODULE_15__.setNodeAsyncContextStrategy)();\n    const autoloadedIntegrations = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_16__._optionalChain)([\n        carrier,\n        \"access\",\n        (_)=>_.__SENTRY__,\n        \"optionalAccess\",\n        (_2)=>_2.integrations\n    ]) || [];\n    options.defaultIntegrations = options.defaultIntegrations === false ? [] : [\n        ...Array.isArray(options.defaultIntegrations) ? options.defaultIntegrations : defaultIntegrations,\n        ...autoloadedIntegrations\n    ];\n    if (options.dsn === undefined && process.env.SENTRY_DSN) {\n        options.dsn = process.env.SENTRY_DSN;\n    }\n    const sentryTracesSampleRate = process.env.SENTRY_TRACES_SAMPLE_RATE;\n    if (options.tracesSampleRate === undefined && sentryTracesSampleRate) {\n        const tracesSampleRate = parseFloat(sentryTracesSampleRate);\n        if (isFinite(tracesSampleRate)) {\n            options.tracesSampleRate = tracesSampleRate;\n        }\n    }\n    if (options.release === undefined) {\n        const detectedRelease = getSentryRelease();\n        if (detectedRelease !== undefined) {\n            options.release = detectedRelease;\n        } else {\n            // If release is not provided, then we should disable autoSessionTracking\n            options.autoSessionTracking = false;\n        }\n    }\n    if (options.environment === undefined && process.env.SENTRY_ENVIRONMENT) {\n        options.environment = process.env.SENTRY_ENVIRONMENT;\n    }\n    if (options.autoSessionTracking === undefined && options.dsn !== undefined) {\n        options.autoSessionTracking = true;\n    }\n    if (options.instrumenter === undefined) {\n        options.instrumenter = \"sentry\";\n    }\n    // TODO(v7): Refactor this to reduce the logic above\n    const clientOptions = {\n        ...options,\n        stackParser: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_17__.stackParserFromStackParserOptions)(options.stackParser || defaultStackParser),\n        integrations: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_18__.getIntegrationsToSetup)(options),\n        transport: options.transport || _transports_http_js__WEBPACK_IMPORTED_MODULE_19__.makeNodeTransport\n    };\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_20__.initAndBind)(options.clientClass || _client_js__WEBPACK_IMPORTED_MODULE_21__.NodeClient, clientOptions);\n    if (options.autoSessionTracking) {\n        startSessionTracking();\n    }\n    updateScopeFromEnvVariables();\n    if (options.spotlight) {\n        const client = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_14__.getCurrentHub)().getClient();\n        if (client && client.addIntegration) {\n            // force integrations to be setup even if no DSN was set\n            client.setupIntegrations(true);\n            client.addIntegration(new _integrations_spotlight_js__WEBPACK_IMPORTED_MODULE_22__.Spotlight({\n                sidecarUrl: typeof options.spotlight === \"string\" ? options.spotlight : undefined\n            }));\n        }\n    }\n}\n/**\n * Function that takes an instance of NodeClient and checks if autoSessionTracking option is enabled for that client\n */ function isAutoSessionTrackingEnabled(client) {\n    if (client === undefined) {\n        return false;\n    }\n    const clientOptions = client && client.getOptions();\n    if (clientOptions && clientOptions.autoSessionTracking !== undefined) {\n        return clientOptions.autoSessionTracking;\n    }\n    return false;\n}\n/**\n * Returns a release dynamically from environment variables.\n */ function getSentryRelease(fallback) {\n    // Always read first as Sentry takes this as precedence\n    if (process.env.SENTRY_RELEASE) {\n        return process.env.SENTRY_RELEASE;\n    }\n    // This supports the variable that sentry-webpack-plugin injects\n    if (_sentry_utils__WEBPACK_IMPORTED_MODULE_23__.GLOBAL_OBJ.SENTRY_RELEASE && _sentry_utils__WEBPACK_IMPORTED_MODULE_23__.GLOBAL_OBJ.SENTRY_RELEASE.id) {\n        return _sentry_utils__WEBPACK_IMPORTED_MODULE_23__.GLOBAL_OBJ.SENTRY_RELEASE.id;\n    }\n    return(// GitHub Actions - https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables\n    process.env.GITHUB_SHA || // Netlify - https://docs.netlify.com/configure-builds/environment-variables/#build-metadata\n    process.env.COMMIT_REF || // Vercel - https://vercel.com/docs/v2/build-step#system-environment-variables\n    process.env.VERCEL_GIT_COMMIT_SHA || process.env.VERCEL_GITHUB_COMMIT_SHA || process.env.VERCEL_GITLAB_COMMIT_SHA || process.env.VERCEL_BITBUCKET_COMMIT_SHA || // Zeit (now known as Vercel)\n    process.env.ZEIT_GITHUB_COMMIT_SHA || process.env.ZEIT_GITLAB_COMMIT_SHA || process.env.ZEIT_BITBUCKET_COMMIT_SHA || // Cloudflare Pages - https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables\n    process.env.CF_PAGES_COMMIT_SHA || fallback);\n}\n/** Node.js stack parser */ const defaultStackParser = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_17__.createStackParser)((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_17__.nodeStackLineParser)(_module_js__WEBPACK_IMPORTED_MODULE_24__.getModuleFromFilename));\n/**\n * Enable automatic Session Tracking for the node process.\n */ function startSessionTracking() {\n    const hub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_14__.getCurrentHub)();\n    hub.startSession();\n    // Emitted in the case of healthy sessions, error of `mechanism.handled: true` and unhandledrejections because\n    // The 'beforeExit' event is not emitted for conditions causing explicit termination,\n    // such as calling process.exit() or uncaught exceptions.\n    // Ref: https://nodejs.org/api/process.html#process_event_beforeexit\n    process.on(\"beforeExit\", ()=>{\n        const session = hub.getScope().getSession();\n        const terminalStates = [\n            \"exited\",\n            \"crashed\"\n        ];\n        // Only call endSession, if the Session exists on Scope and SessionStatus is not a\n        // Terminal Status i.e. Exited or Crashed because\n        // \"When a session is moved away from ok it must not be updated anymore.\"\n        // Ref: https://develop.sentry.dev/sdk/sessions/\n        if (session && !terminalStates.includes(session.status)) hub.endSession();\n    });\n}\n/**\n * Update scope and propagation context based on environmental variables.\n *\n * See https://github.com/getsentry/rfcs/blob/main/text/0071-continue-trace-over-process-boundaries.md\n * for more details.\n */ function updateScopeFromEnvVariables() {\n    const sentryUseEnvironment = (process.env.SENTRY_USE_ENVIRONMENT || \"\").toLowerCase();\n    if (![\n        \"false\",\n        \"n\",\n        \"no\",\n        \"off\",\n        \"0\"\n    ].includes(sentryUseEnvironment)) {\n        const sentryTraceEnv = process.env.SENTRY_TRACE;\n        const baggageEnv = process.env.SENTRY_BAGGAGE;\n        const { propagationContext } = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_25__.tracingContextFromHeaders)(sentryTraceEnv, baggageEnv);\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_14__.getCurrentHub)().getScope().setPropagationContext(propagationContext);\n    }\n}\n //# sourceMappingURL=sdk.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/sdk.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/tracing/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/node/esm/tracing/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   autoDiscoverNodePerformanceMonitoringIntegrations: () => (/* binding */ autoDiscoverNodePerformanceMonitoringIntegrations)\n/* harmony export */ });\n/* harmony import */ var _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry-internal/tracing */ \"(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/lazy.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/logger.js\");\n\n\n/**\n * Automatically detects and returns integrations that will work with your dependencies.\n */ function autoDiscoverNodePerformanceMonitoringIntegrations() {\n    const loadedIntegrations = _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__.lazyLoadedNodePerformanceMonitoringIntegrations.map((tryLoad)=>{\n        try {\n            return tryLoad();\n        } catch (_) {\n            return undefined;\n        }\n    }).filter((integration)=>!!integration);\n    if (loadedIntegrations.length === 0) {\n        _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.logger.warn(\"Performance monitoring integrations could not be automatically loaded.\");\n    }\n    // Only return integrations where their dependencies loaded successfully.\n    return loadedIntegrations.filter((integration)=>!!integration.loadDependency());\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS90cmFjaW5nL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyRjtBQUNwRDtBQUV2Qzs7Q0FFQyxHQUNELFNBQVNFO0lBQ1AsTUFBTUMscUJBQXFCSCxxR0FBK0NBLENBQ3ZFSSxHQUFHLENBQUNDLENBQUFBO1FBQ0gsSUFBSTtZQUNGLE9BQU9BO1FBQ1QsRUFBRSxPQUFPQyxHQUFHO1lBQ1YsT0FBT0M7UUFDVDtJQUNGLEdBQ0NDLE1BQU0sQ0FBQ0MsQ0FBQUEsY0FBZSxDQUFDLENBQUNBO0lBRTNCLElBQUlOLG1CQUFtQk8sTUFBTSxLQUFLLEdBQUc7UUFDbkNULGlEQUFNQSxDQUFDVSxJQUFJLENBQUM7SUFDZDtJQUVBLHlFQUF5RTtJQUN6RSxPQUFPUixtQkFBbUJLLE1BQU0sQ0FBQ0MsQ0FBQUEsY0FBZSxDQUFDLENBQUNBLFlBQVlHLGNBQWM7QUFDOUU7QUFFNkQsQ0FDN0QsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9lc20vdHJhY2luZy9pbmRleC5qcz9hOWFlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxhenlMb2FkZWROb2RlUGVyZm9ybWFuY2VNb25pdG9yaW5nSW50ZWdyYXRpb25zIH0gZnJvbSAnQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuXG4vKipcbiAqIEF1dG9tYXRpY2FsbHkgZGV0ZWN0cyBhbmQgcmV0dXJucyBpbnRlZ3JhdGlvbnMgdGhhdCB3aWxsIHdvcmsgd2l0aCB5b3VyIGRlcGVuZGVuY2llcy5cbiAqL1xuZnVuY3Rpb24gYXV0b0Rpc2NvdmVyTm9kZVBlcmZvcm1hbmNlTW9uaXRvcmluZ0ludGVncmF0aW9ucygpIHtcbiAgY29uc3QgbG9hZGVkSW50ZWdyYXRpb25zID0gbGF6eUxvYWRlZE5vZGVQZXJmb3JtYW5jZU1vbml0b3JpbmdJbnRlZ3JhdGlvbnNcbiAgICAubWFwKHRyeUxvYWQgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHRyeUxvYWQoKTtcbiAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9KVxuICAgIC5maWx0ZXIoaW50ZWdyYXRpb24gPT4gISFpbnRlZ3JhdGlvbikgO1xuXG4gIGlmIChsb2FkZWRJbnRlZ3JhdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgbG9nZ2VyLndhcm4oJ1BlcmZvcm1hbmNlIG1vbml0b3JpbmcgaW50ZWdyYXRpb25zIGNvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGxvYWRlZC4nKTtcbiAgfVxuXG4gIC8vIE9ubHkgcmV0dXJuIGludGVncmF0aW9ucyB3aGVyZSB0aGVpciBkZXBlbmRlbmNpZXMgbG9hZGVkIHN1Y2Nlc3NmdWxseS5cbiAgcmV0dXJuIGxvYWRlZEludGVncmF0aW9ucy5maWx0ZXIoaW50ZWdyYXRpb24gPT4gISFpbnRlZ3JhdGlvbi5sb2FkRGVwZW5kZW5jeSgpKTtcbn1cblxuZXhwb3J0IHsgYXV0b0Rpc2NvdmVyTm9kZVBlcmZvcm1hbmNlTW9uaXRvcmluZ0ludGVncmF0aW9ucyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsibGF6eUxvYWRlZE5vZGVQZXJmb3JtYW5jZU1vbml0b3JpbmdJbnRlZ3JhdGlvbnMiLCJsb2dnZXIiLCJhdXRvRGlzY292ZXJOb2RlUGVyZm9ybWFuY2VNb25pdG9yaW5nSW50ZWdyYXRpb25zIiwibG9hZGVkSW50ZWdyYXRpb25zIiwibWFwIiwidHJ5TG9hZCIsIl8iLCJ1bmRlZmluZWQiLCJmaWx0ZXIiLCJpbnRlZ3JhdGlvbiIsImxlbmd0aCIsIndhcm4iLCJsb2FkRGVwZW5kZW5jeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/tracing/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/tracing/integrations.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/node/esm/tracing/integrations.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Apollo: () => (/* reexport safe */ _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__.Apollo),\n/* harmony export */   Express: () => (/* reexport safe */ _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_1__.Express),\n/* harmony export */   GraphQL: () => (/* reexport safe */ _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_2__.GraphQL),\n/* harmony export */   Mongo: () => (/* reexport safe */ _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_3__.Mongo),\n/* harmony export */   Mysql: () => (/* reexport safe */ _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_4__.Mysql),\n/* harmony export */   Postgres: () => (/* reexport safe */ _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_5__.Postgres),\n/* harmony export */   Prisma: () => (/* reexport safe */ _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_6__.Prisma)\n/* harmony export */ });\n/* harmony import */ var _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry-internal/tracing */ \"(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/apollo.js\");\n/* harmony import */ var _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry-internal/tracing */ \"(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/express.js\");\n/* harmony import */ var _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry-internal/tracing */ \"(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/graphql.js\");\n/* harmony import */ var _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry-internal/tracing */ \"(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/mongo.js\");\n/* harmony import */ var _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry-internal/tracing */ \"(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/mysql.js\");\n/* harmony import */ var _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry-internal/tracing */ \"(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/postgres.js\");\n/* harmony import */ var _sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry-internal/tracing */ \"(ssr)/./node_modules/@sentry-internal/tracing/esm/node/integrations/prisma.js\");\n //# sourceMappingURL=integrations.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS90cmFjaW5nL2ludGVncmF0aW9ucy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFvRyxDQUNwRyx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS90cmFjaW5nL2ludGVncmF0aW9ucy5qcz9lYjgyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IEFwb2xsbywgRXhwcmVzcywgR3JhcGhRTCwgTW9uZ28sIE15c3FsLCBQb3N0Z3JlcywgUHJpc21hIH0gZnJvbSAnQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVncmF0aW9ucy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJBcG9sbG8iLCJFeHByZXNzIiwiR3JhcGhRTCIsIk1vbmdvIiwiTXlzcWwiLCJQb3N0Z3JlcyIsIlByaXNtYSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/tracing/integrations.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/transports/http.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/node/esm/transports/http.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeNodeTransport: () => (/* binding */ makeNodeTransport)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(http__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(https__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(stream__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(url__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zlib */ \"zlib\");\n/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(zlib__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/esm/transports/base.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var https_proxy_agent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! https-proxy-agent */ \"(ssr)/./node_modules/https-proxy-agent/dist/index.js\");\n/* harmony import */ var https_proxy_agent__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(https_proxy_agent__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n\n\n\n// Estimated maximum size for reasonable standalone event\nconst GZIP_THRESHOLD = 1024 * 32;\n/**\n * Gets a stream from a Uint8Array or string\n * Readable.from is ideal but was added in node.js v12.3.0 and v10.17.0\n */ function streamFromBody(body) {\n    return new stream__WEBPACK_IMPORTED_MODULE_2__.Readable({\n        read () {\n            this.push(body);\n            this.push(null);\n        }\n    });\n}\n/**\n * Creates a Transport that uses native the native 'http' and 'https' modules to send events to Sentry.\n */ function makeNodeTransport(options) {\n    let urlSegments;\n    try {\n        urlSegments = new url__WEBPACK_IMPORTED_MODULE_3__.URL(options.url);\n    } catch (e) {\n        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_6__.consoleSandbox)(()=>{\n            // eslint-disable-next-line no-console\n            console.warn(\"[@sentry/node]: Invalid dsn or tunnel option, will not send any events. The tunnel option must be a full URL when used.\");\n        });\n        return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.createTransport)(options, ()=>Promise.resolve({}));\n    }\n    const isHttps = urlSegments.protocol === \"https:\";\n    // Proxy prioritization: http => `options.proxy` | `process.env.http_proxy`\n    // Proxy prioritization: https => `options.proxy` | `process.env.https_proxy` | `process.env.http_proxy`\n    const proxy = applyNoProxyOption(urlSegments, options.proxy || (isHttps ? process.env.https_proxy : undefined) || process.env.http_proxy);\n    const nativeHttpModule = isHttps ? https__WEBPACK_IMPORTED_MODULE_1__ : http__WEBPACK_IMPORTED_MODULE_0__;\n    const keepAlive = options.keepAlive === undefined ? false : options.keepAlive;\n    // TODO(v7): Evaluate if we can set keepAlive to true. This would involve testing for memory leaks in older node\n    // versions(>= 8) as they had memory leaks when using it: #2555\n    const agent = proxy ? new https_proxy_agent__WEBPACK_IMPORTED_MODULE_5__.HttpsProxyAgent(proxy) : new nativeHttpModule.Agent({\n        keepAlive,\n        maxSockets: 30,\n        timeout: 2000\n    });\n    const requestExecutor = createRequestExecutor(options, (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_8__._nullishCoalesce)(options.httpModule, ()=>nativeHttpModule), agent);\n    return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.createTransport)(options, requestExecutor);\n}\n/**\n * Honors the `no_proxy` env variable with the highest priority to allow for hosts exclusion.\n *\n * @param transportUrl The URL the transport intends to send events to.\n * @param proxy The client configured proxy.\n * @returns A proxy the transport should use.\n */ function applyNoProxyOption(transportUrlSegments, proxy) {\n    const { no_proxy } = process.env;\n    const urlIsExemptFromProxy = no_proxy && no_proxy.split(\",\").some((exemption)=>transportUrlSegments.host.endsWith(exemption) || transportUrlSegments.hostname.endsWith(exemption));\n    if (urlIsExemptFromProxy) {\n        return undefined;\n    } else {\n        return proxy;\n    }\n}\n/**\n * Creates a RequestExecutor to be used with `createTransport`.\n */ function createRequestExecutor(options, httpModule, agent) {\n    const { hostname, pathname, port, protocol, search } = new url__WEBPACK_IMPORTED_MODULE_3__.URL(options.url);\n    return function makeRequest(request) {\n        return new Promise((resolve, reject)=>{\n            let body = streamFromBody(request.body);\n            const headers = {\n                ...options.headers\n            };\n            if (request.body.length > GZIP_THRESHOLD) {\n                headers[\"content-encoding\"] = \"gzip\";\n                body = body.pipe((0,zlib__WEBPACK_IMPORTED_MODULE_4__.createGzip)());\n            }\n            const req = httpModule.request({\n                method: \"POST\",\n                agent,\n                headers,\n                hostname,\n                path: `${pathname}${search}`,\n                port,\n                protocol,\n                ca: options.caCerts\n            }, (res)=>{\n                res.on(\"data\", ()=>{\n                // Drain socket\n                });\n                res.on(\"end\", ()=>{\n                // Drain socket\n                });\n                res.setEncoding(\"utf8\");\n                // \"Key-value pairs of header names and values. Header names are lower-cased.\"\n                // https://nodejs.org/api/http.html#http_message_headers\n                const retryAfterHeader = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_8__._nullishCoalesce)(res.headers[\"retry-after\"], ()=>null);\n                const rateLimitsHeader = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_8__._nullishCoalesce)(res.headers[\"x-sentry-rate-limits\"], ()=>null);\n                resolve({\n                    statusCode: res.statusCode,\n                    headers: {\n                        \"retry-after\": retryAfterHeader,\n                        \"x-sentry-rate-limits\": Array.isArray(rateLimitsHeader) ? rateLimitsHeader[0] : rateLimitsHeader\n                    }\n                });\n            });\n            req.on(\"error\", reject);\n            body.pipe(req);\n        });\n    };\n}\n //# sourceMappingURL=http.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/transports/http.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/esm/utils.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/node/esm/utils.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deepReadDirSync: () => (/* binding */ deepReadDirSync)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n\n\n/**\n * Recursively read the contents of a directory.\n *\n * @param targetDir Absolute or relative path of the directory to scan. All returned paths will be relative to this\n * directory.\n * @returns Array holding all relative paths\n */ function deepReadDirSync(targetDir) {\n    const targetDirAbsPath = path__WEBPACK_IMPORTED_MODULE_1__.resolve(targetDir);\n    if (!fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(targetDirAbsPath)) {\n        throw new Error(`Cannot read contents of ${targetDirAbsPath}. Directory does not exist.`);\n    }\n    if (!fs__WEBPACK_IMPORTED_MODULE_0__.statSync(targetDirAbsPath).isDirectory()) {\n        throw new Error(`Cannot read contents of ${targetDirAbsPath}, because it is not a directory.`);\n    }\n    // This does the same thing as its containing function, `deepReadDirSync` (except that - purely for convenience - it\n    // deals in absolute paths rather than relative ones). We need this to be separate from the outer function to preserve\n    // the difference between `targetDirAbsPath` and `currentDirAbsPath`.\n    const deepReadCurrentDir = (currentDirAbsPath)=>{\n        return fs__WEBPACK_IMPORTED_MODULE_0__.readdirSync(currentDirAbsPath).reduce((absPaths, itemName)=>{\n            const itemAbsPath = path__WEBPACK_IMPORTED_MODULE_1__.join(currentDirAbsPath, itemName);\n            if (fs__WEBPACK_IMPORTED_MODULE_0__.statSync(itemAbsPath).isDirectory()) {\n                return absPaths.concat(deepReadCurrentDir(itemAbsPath));\n            }\n            absPaths.push(itemAbsPath);\n            return absPaths;\n        }, []);\n    };\n    return deepReadCurrentDir(targetDirAbsPath).map((absPath)=>path__WEBPACK_IMPORTED_MODULE_1__.relative(targetDirAbsPath, absPath));\n}\n //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUF5QjtBQUNJO0FBRTdCOzs7Ozs7Q0FNQyxHQUNELFNBQVNFLGdCQUFnQkMsU0FBUztJQUNoQyxNQUFNQyxtQkFBbUJILHlDQUFZLENBQUNFO0lBRXRDLElBQUksQ0FBQ0gsMENBQWEsQ0FBQ0ksbUJBQW1CO1FBQ3BDLE1BQU0sSUFBSUcsTUFBTSxDQUFDLHdCQUF3QixFQUFFSCxpQkFBaUIsMkJBQTJCLENBQUM7SUFDMUY7SUFFQSxJQUFJLENBQUNKLHdDQUFXLENBQUNJLGtCQUFrQkssV0FBVyxJQUFJO1FBQ2hELE1BQU0sSUFBSUYsTUFBTSxDQUFDLHdCQUF3QixFQUFFSCxpQkFBaUIsZ0NBQWdDLENBQUM7SUFDL0Y7SUFFQSxvSEFBb0g7SUFDcEgsc0hBQXNIO0lBQ3RILHFFQUFxRTtJQUNyRSxNQUFNTSxxQkFBcUIsQ0FBQ0M7UUFDMUIsT0FBT1gsMkNBQWMsQ0FBQ1csbUJBQW1CRSxNQUFNLENBQUMsQ0FBQ0MsVUFBVUM7WUFDekQsTUFBTUMsY0FBY2Ysc0NBQVMsQ0FBQ1UsbUJBQW1CSTtZQUVqRCxJQUFJZix3Q0FBVyxDQUFDZ0IsYUFBYVAsV0FBVyxJQUFJO2dCQUMxQyxPQUFPSyxTQUFTSSxNQUFNLENBQUNSLG1CQUFtQk07WUFDNUM7WUFFQUYsU0FBU0ssSUFBSSxDQUFDSDtZQUNkLE9BQU9GO1FBQ1QsR0FBRyxFQUFFO0lBQ1A7SUFFQSxPQUFPSixtQkFBbUJOLGtCQUFrQmdCLEdBQUcsQ0FBQ0MsQ0FBQUEsVUFBV3BCLDBDQUFhLENBQUNHLGtCQUFrQmlCO0FBQzdGO0FBRTJCLENBQzNCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvZXNtL3V0aWxzLmpzP2JkN2YiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcblxuLyoqXG4gKiBSZWN1cnNpdmVseSByZWFkIHRoZSBjb250ZW50cyBvZiBhIGRpcmVjdG9yeS5cbiAqXG4gKiBAcGFyYW0gdGFyZ2V0RGlyIEFic29sdXRlIG9yIHJlbGF0aXZlIHBhdGggb2YgdGhlIGRpcmVjdG9yeSB0byBzY2FuLiBBbGwgcmV0dXJuZWQgcGF0aHMgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzXG4gKiBkaXJlY3RvcnkuXG4gKiBAcmV0dXJucyBBcnJheSBob2xkaW5nIGFsbCByZWxhdGl2ZSBwYXRoc1xuICovXG5mdW5jdGlvbiBkZWVwUmVhZERpclN5bmModGFyZ2V0RGlyKSB7XG4gIGNvbnN0IHRhcmdldERpckFic1BhdGggPSBwYXRoLnJlc29sdmUodGFyZ2V0RGlyKTtcblxuICBpZiAoIWZzLmV4aXN0c1N5bmModGFyZ2V0RGlyQWJzUGF0aCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCByZWFkIGNvbnRlbnRzIG9mICR7dGFyZ2V0RGlyQWJzUGF0aH0uIERpcmVjdG9yeSBkb2VzIG5vdCBleGlzdC5gKTtcbiAgfVxuXG4gIGlmICghZnMuc3RhdFN5bmModGFyZ2V0RGlyQWJzUGF0aCkuaXNEaXJlY3RvcnkoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHJlYWQgY29udGVudHMgb2YgJHt0YXJnZXREaXJBYnNQYXRofSwgYmVjYXVzZSBpdCBpcyBub3QgYSBkaXJlY3RvcnkuYCk7XG4gIH1cblxuICAvLyBUaGlzIGRvZXMgdGhlIHNhbWUgdGhpbmcgYXMgaXRzIGNvbnRhaW5pbmcgZnVuY3Rpb24sIGBkZWVwUmVhZERpclN5bmNgIChleGNlcHQgdGhhdCAtIHB1cmVseSBmb3IgY29udmVuaWVuY2UgLSBpdFxuICAvLyBkZWFscyBpbiBhYnNvbHV0ZSBwYXRocyByYXRoZXIgdGhhbiByZWxhdGl2ZSBvbmVzKS4gV2UgbmVlZCB0aGlzIHRvIGJlIHNlcGFyYXRlIGZyb20gdGhlIG91dGVyIGZ1bmN0aW9uIHRvIHByZXNlcnZlXG4gIC8vIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gYHRhcmdldERpckFic1BhdGhgIGFuZCBgY3VycmVudERpckFic1BhdGhgLlxuICBjb25zdCBkZWVwUmVhZEN1cnJlbnREaXIgPSAoY3VycmVudERpckFic1BhdGgpID0+IHtcbiAgICByZXR1cm4gZnMucmVhZGRpclN5bmMoY3VycmVudERpckFic1BhdGgpLnJlZHVjZSgoYWJzUGF0aHMsIGl0ZW1OYW1lKSA9PiB7XG4gICAgICBjb25zdCBpdGVtQWJzUGF0aCA9IHBhdGguam9pbihjdXJyZW50RGlyQWJzUGF0aCwgaXRlbU5hbWUpO1xuXG4gICAgICBpZiAoZnMuc3RhdFN5bmMoaXRlbUFic1BhdGgpLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgcmV0dXJuIGFic1BhdGhzLmNvbmNhdChkZWVwUmVhZEN1cnJlbnREaXIoaXRlbUFic1BhdGgpKTtcbiAgICAgIH1cblxuICAgICAgYWJzUGF0aHMucHVzaChpdGVtQWJzUGF0aCk7XG4gICAgICByZXR1cm4gYWJzUGF0aHM7XG4gICAgfSwgW10pO1xuICB9O1xuXG4gIHJldHVybiBkZWVwUmVhZEN1cnJlbnREaXIodGFyZ2V0RGlyQWJzUGF0aCkubWFwKGFic1BhdGggPT4gcGF0aC5yZWxhdGl2ZSh0YXJnZXREaXJBYnNQYXRoLCBhYnNQYXRoKSk7XG59XG5cbmV4cG9ydCB7IGRlZXBSZWFkRGlyU3luYyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwXG4iXSwibmFtZXMiOlsiZnMiLCJwYXRoIiwiZGVlcFJlYWREaXJTeW5jIiwidGFyZ2V0RGlyIiwidGFyZ2V0RGlyQWJzUGF0aCIsInJlc29sdmUiLCJleGlzdHNTeW5jIiwiRXJyb3IiLCJzdGF0U3luYyIsImlzRGlyZWN0b3J5IiwiZGVlcFJlYWRDdXJyZW50RGlyIiwiY3VycmVudERpckFic1BhdGgiLCJyZWFkZGlyU3luYyIsInJlZHVjZSIsImFic1BhdGhzIiwiaXRlbU5hbWUiLCJpdGVtQWJzUGF0aCIsImpvaW4iLCJjb25jYXQiLCJwdXNoIiwibWFwIiwiYWJzUGF0aCIsInJlbGF0aXZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/esm/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/anr.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/anr.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDebugPauseMessageHandler: () => (/* binding */ createDebugPauseMessageHandler),\n/* harmony export */   watchdogTimer: () => (/* binding */ watchdogTimer)\n/* harmony export */ });\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./object.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _stacktrace_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stacktrace.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/stacktrace.js\");\n/* harmony import */ var _node_stack_trace_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node-stack-trace.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/node-stack-trace.js\");\n\n\n\n/**\n * A node.js watchdog timer\n * @param pollInterval The interval that we expect to get polled at\n * @param anrThreshold The threshold for when we consider ANR\n * @param callback The callback to call for ANR\n * @returns An object with `poll` and `enabled` functions {@link WatchdogReturn}\n */ function watchdogTimer(createTimer, pollInterval, anrThreshold, callback) {\n    const timer = createTimer();\n    let triggered = false;\n    let enabled = true;\n    setInterval(()=>{\n        const diffMs = timer.getTimeMs();\n        if (triggered === false && diffMs > pollInterval + anrThreshold) {\n            triggered = true;\n            if (enabled) {\n                callback();\n            }\n        }\n        if (diffMs < pollInterval + anrThreshold) {\n            triggered = false;\n        }\n    }, 20);\n    return {\n        poll: ()=>{\n            timer.reset();\n        },\n        enabled: (state)=>{\n            enabled = state;\n        }\n    };\n}\n// types copied from inspector.d.ts\n/**\n * Converts Debugger.CallFrame to Sentry StackFrame\n */ function callFrameToStackFrame(frame, url, getModuleFromFilename) {\n    const filename = url ? url.replace(/^file:\\/\\//, \"\") : undefined;\n    // CallFrame row/col are 0 based, whereas StackFrame are 1 based\n    const colno = frame.location.columnNumber ? frame.location.columnNumber + 1 : undefined;\n    const lineno = frame.location.lineNumber ? frame.location.lineNumber + 1 : undefined;\n    return (0,_object_js__WEBPACK_IMPORTED_MODULE_0__.dropUndefinedKeys)({\n        filename,\n        module: getModuleFromFilename(filename),\n        function: frame.functionName || \"?\",\n        colno,\n        lineno,\n        in_app: filename ? (0,_node_stack_trace_js__WEBPACK_IMPORTED_MODULE_1__.filenameIsInApp)(filename) : undefined\n    });\n}\n// The only messages we care about\n/**\n * Creates a message handler from the v8 debugger protocol and passed stack frames to the callback when paused.\n */ function createDebugPauseMessageHandler(sendCommand, getModuleFromFilename, pausedStackFrames) {\n    // Collect scriptId -> url map so we can look up the filenames later\n    const scripts = new Map();\n    return (message)=>{\n        if (message.method === \"Debugger.scriptParsed\") {\n            scripts.set(message.params.scriptId, message.params.url);\n        } else if (message.method === \"Debugger.paused\") {\n            // copy the frames\n            const callFrames = [\n                ...message.params.callFrames\n            ];\n            // and resume immediately\n            sendCommand(\"Debugger.resume\");\n            sendCommand(\"Debugger.disable\");\n            const stackFrames = (0,_stacktrace_js__WEBPACK_IMPORTED_MODULE_2__.stripSentryFramesAndReverse)(callFrames.map((frame)=>callFrameToStackFrame(frame, scripts.get(frame.location.scriptId), getModuleFromFilename)));\n            pausedStackFrames(stackFrames);\n        }\n    };\n}\n //# sourceMappingURL=anr.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9hbnIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBZ0Q7QUFDYztBQUNOO0FBRXhEOzs7Ozs7Q0FNQyxHQUNELFNBQVNHLGNBQ1BDLFdBQVcsRUFDWEMsWUFBWSxFQUNaQyxZQUFZLEVBQ1pDLFFBQVE7SUFFUixNQUFNQyxRQUFRSjtJQUNkLElBQUlLLFlBQVk7SUFDaEIsSUFBSUMsVUFBVTtJQUVkQyxZQUFZO1FBQ1YsTUFBTUMsU0FBU0osTUFBTUssU0FBUztRQUU5QixJQUFJSixjQUFjLFNBQVNHLFNBQVNQLGVBQWVDLGNBQWM7WUFDL0RHLFlBQVk7WUFDWixJQUFJQyxTQUFTO2dCQUNYSDtZQUNGO1FBQ0Y7UUFFQSxJQUFJSyxTQUFTUCxlQUFlQyxjQUFjO1lBQ3hDRyxZQUFZO1FBQ2Q7SUFDRixHQUFHO0lBRUgsT0FBTztRQUNMSyxNQUFNO1lBQ0pOLE1BQU1PLEtBQUs7UUFDYjtRQUNBTCxTQUFTLENBQUNNO1lBQ1JOLFVBQVVNO1FBQ1o7SUFDRjtBQUNGO0FBRUEsbUNBQW1DO0FBRW5DOztDQUVDLEdBQ0QsU0FBU0Msc0JBQ1BDLEtBQUssRUFDTEMsR0FBRyxFQUNIQyxxQkFBcUI7SUFFckIsTUFBTUMsV0FBV0YsTUFBTUEsSUFBSUcsT0FBTyxDQUFDLGNBQWMsTUFBTUM7SUFFdkQsZ0VBQWdFO0lBQ2hFLE1BQU1DLFFBQVFOLE1BQU1PLFFBQVEsQ0FBQ0MsWUFBWSxHQUFHUixNQUFNTyxRQUFRLENBQUNDLFlBQVksR0FBRyxJQUFJSDtJQUM5RSxNQUFNSSxTQUFTVCxNQUFNTyxRQUFRLENBQUNHLFVBQVUsR0FBR1YsTUFBTU8sUUFBUSxDQUFDRyxVQUFVLEdBQUcsSUFBSUw7SUFFM0UsT0FBT3ZCLDZEQUFpQkEsQ0FBQztRQUN2QnFCO1FBQ0FRLFFBQVFULHNCQUFzQkM7UUFDOUJTLFVBQVVaLE1BQU1hLFlBQVksSUFBSTtRQUNoQ1A7UUFDQUc7UUFDQUssUUFBUVgsV0FBV25CLHFFQUFlQSxDQUFDbUIsWUFBWUU7SUFDakQ7QUFDRjtBQUVBLGtDQUFrQztBQUVsQzs7Q0FFQyxHQUNELFNBQVNVLCtCQUNQQyxXQUFXLEVBQ1hkLHFCQUFxQixFQUNyQmUsaUJBQWlCO0lBRWpCLG9FQUFvRTtJQUNwRSxNQUFNQyxVQUFVLElBQUlDO0lBRXBCLE9BQU9DLENBQUFBO1FBQ0wsSUFBSUEsUUFBUUMsTUFBTSxLQUFLLHlCQUF5QjtZQUM5Q0gsUUFBUUksR0FBRyxDQUFDRixRQUFRRyxNQUFNLENBQUNDLFFBQVEsRUFBRUosUUFBUUcsTUFBTSxDQUFDdEIsR0FBRztRQUN6RCxPQUFPLElBQUltQixRQUFRQyxNQUFNLEtBQUssbUJBQW1CO1lBQy9DLGtCQUFrQjtZQUNsQixNQUFNSSxhQUFhO21CQUFJTCxRQUFRRyxNQUFNLENBQUNFLFVBQVU7YUFBQztZQUNqRCx5QkFBeUI7WUFDekJULFlBQVk7WUFDWkEsWUFBWTtZQUVaLE1BQU1VLGNBQWMzQywyRUFBMkJBLENBQzdDMEMsV0FBV0UsR0FBRyxDQUFDM0IsQ0FBQUEsUUFDYkQsc0JBQXNCQyxPQUFPa0IsUUFBUVUsR0FBRyxDQUFDNUIsTUFBTU8sUUFBUSxDQUFDaUIsUUFBUSxHQUFHdEI7WUFJdkVlLGtCQUFrQlM7UUFDcEI7SUFDRjtBQUNGO0FBRXlELENBQ3pELCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2Fuci5qcz8yZjdhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRyb3BVbmRlZmluZWRLZXlzIH0gZnJvbSAnLi9vYmplY3QuanMnO1xuaW1wb3J0IHsgc3RyaXBTZW50cnlGcmFtZXNBbmRSZXZlcnNlIH0gZnJvbSAnLi9zdGFja3RyYWNlLmpzJztcbmltcG9ydCB7IGZpbGVuYW1lSXNJbkFwcCB9IGZyb20gJy4vbm9kZS1zdGFjay10cmFjZS5qcyc7XG5cbi8qKlxuICogQSBub2RlLmpzIHdhdGNoZG9nIHRpbWVyXG4gKiBAcGFyYW0gcG9sbEludGVydmFsIFRoZSBpbnRlcnZhbCB0aGF0IHdlIGV4cGVjdCB0byBnZXQgcG9sbGVkIGF0XG4gKiBAcGFyYW0gYW5yVGhyZXNob2xkIFRoZSB0aHJlc2hvbGQgZm9yIHdoZW4gd2UgY29uc2lkZXIgQU5SXG4gKiBAcGFyYW0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRvIGNhbGwgZm9yIEFOUlxuICogQHJldHVybnMgQW4gb2JqZWN0IHdpdGggYHBvbGxgIGFuZCBgZW5hYmxlZGAgZnVuY3Rpb25zIHtAbGluayBXYXRjaGRvZ1JldHVybn1cbiAqL1xuZnVuY3Rpb24gd2F0Y2hkb2dUaW1lcihcbiAgY3JlYXRlVGltZXIsXG4gIHBvbGxJbnRlcnZhbCxcbiAgYW5yVGhyZXNob2xkLFxuICBjYWxsYmFjayxcbikge1xuICBjb25zdCB0aW1lciA9IGNyZWF0ZVRpbWVyKCk7XG4gIGxldCB0cmlnZ2VyZWQgPSBmYWxzZTtcbiAgbGV0IGVuYWJsZWQgPSB0cnVlO1xuXG4gIHNldEludGVydmFsKCgpID0+IHtcbiAgICBjb25zdCBkaWZmTXMgPSB0aW1lci5nZXRUaW1lTXMoKTtcblxuICAgIGlmICh0cmlnZ2VyZWQgPT09IGZhbHNlICYmIGRpZmZNcyA+IHBvbGxJbnRlcnZhbCArIGFuclRocmVzaG9sZCkge1xuICAgICAgdHJpZ2dlcmVkID0gdHJ1ZTtcbiAgICAgIGlmIChlbmFibGVkKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRpZmZNcyA8IHBvbGxJbnRlcnZhbCArIGFuclRocmVzaG9sZCkge1xuICAgICAgdHJpZ2dlcmVkID0gZmFsc2U7XG4gICAgfVxuICB9LCAyMCk7XG5cbiAgcmV0dXJuIHtcbiAgICBwb2xsOiAoKSA9PiB7XG4gICAgICB0aW1lci5yZXNldCgpO1xuICAgIH0sXG4gICAgZW5hYmxlZDogKHN0YXRlKSA9PiB7XG4gICAgICBlbmFibGVkID0gc3RhdGU7XG4gICAgfSxcbiAgfTtcbn1cblxuLy8gdHlwZXMgY29waWVkIGZyb20gaW5zcGVjdG9yLmQudHNcblxuLyoqXG4gKiBDb252ZXJ0cyBEZWJ1Z2dlci5DYWxsRnJhbWUgdG8gU2VudHJ5IFN0YWNrRnJhbWVcbiAqL1xuZnVuY3Rpb24gY2FsbEZyYW1lVG9TdGFja0ZyYW1lKFxuICBmcmFtZSxcbiAgdXJsLFxuICBnZXRNb2R1bGVGcm9tRmlsZW5hbWUsXG4pIHtcbiAgY29uc3QgZmlsZW5hbWUgPSB1cmwgPyB1cmwucmVwbGFjZSgvXmZpbGU6XFwvXFwvLywgJycpIDogdW5kZWZpbmVkO1xuXG4gIC8vIENhbGxGcmFtZSByb3cvY29sIGFyZSAwIGJhc2VkLCB3aGVyZWFzIFN0YWNrRnJhbWUgYXJlIDEgYmFzZWRcbiAgY29uc3QgY29sbm8gPSBmcmFtZS5sb2NhdGlvbi5jb2x1bW5OdW1iZXIgPyBmcmFtZS5sb2NhdGlvbi5jb2x1bW5OdW1iZXIgKyAxIDogdW5kZWZpbmVkO1xuICBjb25zdCBsaW5lbm8gPSBmcmFtZS5sb2NhdGlvbi5saW5lTnVtYmVyID8gZnJhbWUubG9jYXRpb24ubGluZU51bWJlciArIDEgOiB1bmRlZmluZWQ7XG5cbiAgcmV0dXJuIGRyb3BVbmRlZmluZWRLZXlzKHtcbiAgICBmaWxlbmFtZSxcbiAgICBtb2R1bGU6IGdldE1vZHVsZUZyb21GaWxlbmFtZShmaWxlbmFtZSksXG4gICAgZnVuY3Rpb246IGZyYW1lLmZ1bmN0aW9uTmFtZSB8fCAnPycsXG4gICAgY29sbm8sXG4gICAgbGluZW5vLFxuICAgIGluX2FwcDogZmlsZW5hbWUgPyBmaWxlbmFtZUlzSW5BcHAoZmlsZW5hbWUpIDogdW5kZWZpbmVkLFxuICB9KTtcbn1cblxuLy8gVGhlIG9ubHkgbWVzc2FnZXMgd2UgY2FyZSBhYm91dFxuXG4vKipcbiAqIENyZWF0ZXMgYSBtZXNzYWdlIGhhbmRsZXIgZnJvbSB0aGUgdjggZGVidWdnZXIgcHJvdG9jb2wgYW5kIHBhc3NlZCBzdGFjayBmcmFtZXMgdG8gdGhlIGNhbGxiYWNrIHdoZW4gcGF1c2VkLlxuICovXG5mdW5jdGlvbiBjcmVhdGVEZWJ1Z1BhdXNlTWVzc2FnZUhhbmRsZXIoXG4gIHNlbmRDb21tYW5kLFxuICBnZXRNb2R1bGVGcm9tRmlsZW5hbWUsXG4gIHBhdXNlZFN0YWNrRnJhbWVzLFxuKSB7XG4gIC8vIENvbGxlY3Qgc2NyaXB0SWQgLT4gdXJsIG1hcCBzbyB3ZSBjYW4gbG9vayB1cCB0aGUgZmlsZW5hbWVzIGxhdGVyXG4gIGNvbnN0IHNjcmlwdHMgPSBuZXcgTWFwKCk7XG5cbiAgcmV0dXJuIG1lc3NhZ2UgPT4ge1xuICAgIGlmIChtZXNzYWdlLm1ldGhvZCA9PT0gJ0RlYnVnZ2VyLnNjcmlwdFBhcnNlZCcpIHtcbiAgICAgIHNjcmlwdHMuc2V0KG1lc3NhZ2UucGFyYW1zLnNjcmlwdElkLCBtZXNzYWdlLnBhcmFtcy51cmwpO1xuICAgIH0gZWxzZSBpZiAobWVzc2FnZS5tZXRob2QgPT09ICdEZWJ1Z2dlci5wYXVzZWQnKSB7XG4gICAgICAvLyBjb3B5IHRoZSBmcmFtZXNcbiAgICAgIGNvbnN0IGNhbGxGcmFtZXMgPSBbLi4ubWVzc2FnZS5wYXJhbXMuY2FsbEZyYW1lc107XG4gICAgICAvLyBhbmQgcmVzdW1lIGltbWVkaWF0ZWx5XG4gICAgICBzZW5kQ29tbWFuZCgnRGVidWdnZXIucmVzdW1lJyk7XG4gICAgICBzZW5kQ29tbWFuZCgnRGVidWdnZXIuZGlzYWJsZScpO1xuXG4gICAgICBjb25zdCBzdGFja0ZyYW1lcyA9IHN0cmlwU2VudHJ5RnJhbWVzQW5kUmV2ZXJzZShcbiAgICAgICAgY2FsbEZyYW1lcy5tYXAoZnJhbWUgPT5cbiAgICAgICAgICBjYWxsRnJhbWVUb1N0YWNrRnJhbWUoZnJhbWUsIHNjcmlwdHMuZ2V0KGZyYW1lLmxvY2F0aW9uLnNjcmlwdElkKSwgZ2V0TW9kdWxlRnJvbUZpbGVuYW1lKSxcbiAgICAgICAgKSxcbiAgICAgICk7XG5cbiAgICAgIHBhdXNlZFN0YWNrRnJhbWVzKHN0YWNrRnJhbWVzKTtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCB7IGNyZWF0ZURlYnVnUGF1c2VNZXNzYWdlSGFuZGxlciwgd2F0Y2hkb2dUaW1lciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5yLmpzLm1hcFxuIl0sIm5hbWVzIjpbImRyb3BVbmRlZmluZWRLZXlzIiwic3RyaXBTZW50cnlGcmFtZXNBbmRSZXZlcnNlIiwiZmlsZW5hbWVJc0luQXBwIiwid2F0Y2hkb2dUaW1lciIsImNyZWF0ZVRpbWVyIiwicG9sbEludGVydmFsIiwiYW5yVGhyZXNob2xkIiwiY2FsbGJhY2siLCJ0aW1lciIsInRyaWdnZXJlZCIsImVuYWJsZWQiLCJzZXRJbnRlcnZhbCIsImRpZmZNcyIsImdldFRpbWVNcyIsInBvbGwiLCJyZXNldCIsInN0YXRlIiwiY2FsbEZyYW1lVG9TdGFja0ZyYW1lIiwiZnJhbWUiLCJ1cmwiLCJnZXRNb2R1bGVGcm9tRmlsZW5hbWUiLCJmaWxlbmFtZSIsInJlcGxhY2UiLCJ1bmRlZmluZWQiLCJjb2xubyIsImxvY2F0aW9uIiwiY29sdW1uTnVtYmVyIiwibGluZW5vIiwibGluZU51bWJlciIsIm1vZHVsZSIsImZ1bmN0aW9uIiwiZnVuY3Rpb25OYW1lIiwiaW5fYXBwIiwiY3JlYXRlRGVidWdQYXVzZU1lc3NhZ2VIYW5kbGVyIiwic2VuZENvbW1hbmQiLCJwYXVzZWRTdGFja0ZyYW1lcyIsInNjcmlwdHMiLCJNYXAiLCJtZXNzYWdlIiwibWV0aG9kIiwic2V0IiwicGFyYW1zIiwic2NyaXB0SWQiLCJjYWxsRnJhbWVzIiwic3RhY2tGcmFtZXMiLCJtYXAiLCJnZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/anr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/baggage.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/baggage.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BAGGAGE_HEADER_NAME: () => (/* binding */ BAGGAGE_HEADER_NAME),\n/* harmony export */   MAX_BAGGAGE_STRING_LENGTH: () => (/* binding */ MAX_BAGGAGE_STRING_LENGTH),\n/* harmony export */   SENTRY_BAGGAGE_KEY_PREFIX: () => (/* binding */ SENTRY_BAGGAGE_KEY_PREFIX),\n/* harmony export */   SENTRY_BAGGAGE_KEY_PREFIX_REGEX: () => (/* binding */ SENTRY_BAGGAGE_KEY_PREFIX_REGEX),\n/* harmony export */   baggageHeaderToDynamicSamplingContext: () => (/* binding */ baggageHeaderToDynamicSamplingContext),\n/* harmony export */   dynamicSamplingContextToSentryBaggageHeader: () => (/* binding */ dynamicSamplingContextToSentryBaggageHeader)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/debug-build.js\");\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./logger.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/logger.js\");\n\n\n\nconst BAGGAGE_HEADER_NAME = \"baggage\";\nconst SENTRY_BAGGAGE_KEY_PREFIX = \"sentry-\";\nconst SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */ const MAX_BAGGAGE_STRING_LENGTH = 8192;\n/**\n * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the \"sentry-\" prefixed values\n * from it.\n *\n * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.\n * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.\n */ function baggageHeaderToDynamicSamplingContext(// Very liberal definition of what any incoming header might look like\nbaggageHeader) {\n    if (!(0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isString)(baggageHeader) && !Array.isArray(baggageHeader)) {\n        return undefined;\n    }\n    // Intermediary object to store baggage key value pairs of incoming baggage headers on.\n    // It is later used to read Sentry-DSC-values from.\n    let baggageObject = {};\n    if (Array.isArray(baggageHeader)) {\n        // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it\n        baggageObject = baggageHeader.reduce((acc, curr)=>{\n            const currBaggageObject = baggageHeaderToObject(curr);\n            return {\n                ...acc,\n                ...currBaggageObject\n            };\n        }, {});\n    } else {\n        // Return undefined if baggage header is an empty string (technically an empty baggage header is not spec conform but\n        // this is how we choose to handle it)\n        if (!baggageHeader) {\n            return undefined;\n        }\n        baggageObject = baggageHeaderToObject(baggageHeader);\n    }\n    // Read all \"sentry-\" prefixed values out of the baggage object and put it onto a dynamic sampling context object.\n    const dynamicSamplingContext = Object.entries(baggageObject).reduce((acc, [key, value])=>{\n        if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {\n            const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);\n            acc[nonPrefixedKey] = value;\n        }\n        return acc;\n    }, {});\n    // Only return a dynamic sampling context object if there are keys in it.\n    // A keyless object means there were no sentry values on the header, which means that there is no DSC.\n    if (Object.keys(dynamicSamplingContext).length > 0) {\n        return dynamicSamplingContext;\n    } else {\n        return undefined;\n    }\n}\n/**\n * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with \"sentry-\".\n *\n * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility\n * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is\n * `undefined` the function will return `undefined`.\n * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`\n * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.\n */ function dynamicSamplingContextToSentryBaggageHeader(// this also takes undefined for convenience and bundle size in other places\ndynamicSamplingContext) {\n    if (!dynamicSamplingContext) {\n        return undefined;\n    }\n    // Prefix all DSC keys with \"sentry-\" and put them into a new object\n    const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce((acc, [dscKey, dscValue])=>{\n        if (dscValue) {\n            acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;\n        }\n        return acc;\n    }, {});\n    return objectToBaggageHeader(sentryPrefixedDSC);\n}\n/**\n * Will parse a baggage header, which is a simple key-value map, into a flat object.\n *\n * @param baggageHeader The baggage header to parse.\n * @returns a flat object containing all the key-value pairs from `baggageHeader`.\n */ function baggageHeaderToObject(baggageHeader) {\n    return baggageHeader.split(\",\").map((baggageEntry)=>baggageEntry.split(\"=\").map((keyOrValue)=>decodeURIComponent(keyOrValue.trim()))).reduce((acc, [key, value])=>{\n        acc[key] = value;\n        return acc;\n    }, {});\n}\n/**\n * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.\n *\n * @param object The object to turn into a baggage header.\n * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header\n * is not spec compliant.\n */ function objectToBaggageHeader(object) {\n    if (Object.keys(object).length === 0) {\n        // An empty baggage header is not spec compliant: We return undefined.\n        return undefined;\n    }\n    return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex)=>{\n        const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;\n        const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;\n        if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(`Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`);\n            return baggageHeader;\n        } else {\n            return newBaggageHeader;\n        }\n    }, \"\");\n}\n //# sourceMappingURL=baggage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/baggage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/browser.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/browser.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDomElement: () => (/* binding */ getDomElement),\n/* harmony export */   getLocationHref: () => (/* binding */ getLocationHref),\n/* harmony export */   htmlTreeAsString: () => (/* binding */ htmlTreeAsString)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/worldwide.js\");\n\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = (0,_worldwide_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalObject)();\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */ function htmlTreeAsString(elem, options = {}) {\n    if (!elem) {\n        return \"<unknown>\";\n    }\n    // try/catch both:\n    // - accessing event.target (see getsentry/raven-js#838, #768)\n    // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n    // - can throw an exception in some circumstances.\n    try {\n        let currentElem = elem;\n        const MAX_TRAVERSE_HEIGHT = 5;\n        const out = [];\n        let height = 0;\n        let len = 0;\n        const separator = \" > \";\n        const sepLength = separator.length;\n        let nextStr;\n        const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n        const maxStringLength = !Array.isArray(options) && options.maxStringLength || DEFAULT_MAX_STRING_LENGTH;\n        while(currentElem && height++ < MAX_TRAVERSE_HEIGHT){\n            nextStr = _htmlElementAsString(currentElem, keyAttrs);\n            // bail out if\n            // - nextStr is the 'html' element\n            // - the length of the string that would be created exceeds maxStringLength\n            //   (ignore this limit if we are on the first iteration)\n            if (nextStr === \"html\" || height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength) {\n                break;\n            }\n            out.push(nextStr);\n            len += nextStr.length;\n            currentElem = currentElem.parentNode;\n        }\n        return out.reverse().join(separator);\n    } catch (_oO) {\n        return \"<unknown>\";\n    }\n}\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */ function _htmlElementAsString(el, keyAttrs) {\n    const elem = el;\n    const out = [];\n    let className;\n    let classes;\n    let key;\n    let attr;\n    let i;\n    if (!elem || !elem.tagName) {\n        return \"\";\n    }\n    out.push(elem.tagName.toLowerCase());\n    // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n    const keyAttrPairs = keyAttrs && keyAttrs.length ? keyAttrs.filter((keyAttr)=>elem.getAttribute(keyAttr)).map((keyAttr)=>[\n            keyAttr,\n            elem.getAttribute(keyAttr)\n        ]) : null;\n    if (keyAttrPairs && keyAttrPairs.length) {\n        keyAttrPairs.forEach((keyAttrPair)=>{\n            out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n        });\n    } else {\n        if (elem.id) {\n            out.push(`#${elem.id}`);\n        }\n        // eslint-disable-next-line prefer-const\n        className = elem.className;\n        if (className && (0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isString)(className)) {\n            classes = className.split(/\\s+/);\n            for(i = 0; i < classes.length; i++){\n                out.push(`.${classes[i]}`);\n            }\n        }\n    }\n    const allowedAttrs = [\n        \"aria-label\",\n        \"type\",\n        \"name\",\n        \"title\",\n        \"alt\"\n    ];\n    for(i = 0; i < allowedAttrs.length; i++){\n        key = allowedAttrs[i];\n        attr = elem.getAttribute(key);\n        if (attr) {\n            out.push(`[${key}=\"${attr}\"]`);\n        }\n    }\n    return out.join(\"\");\n}\n/**\n * A safe form of location.href\n */ function getLocationHref() {\n    try {\n        return WINDOW.document.location.href;\n    } catch (oO) {\n        return \"\";\n    }\n}\n/**\n * Gets a DOM element by using document.querySelector.\n *\n * This wrapper will first check for the existance of the function before\n * actually calling it so that we don't have to take care of this check,\n * every time we want to access the DOM.\n *\n * Reason: DOM/querySelector is not available in all environments.\n *\n * We have to cast to any because utils can be consumed by a variety of environments,\n * and we don't want to break TS users. If you know what element will be selected by\n * `document.querySelector`, specify it as part of the generic call. For example,\n * `const element = getDomElement<Element>('selector');`\n *\n * @param selector the selector string passed on to document.querySelector\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getDomElement(selector) {\n    if (WINDOW.document && WINDOW.document.querySelector) {\n        return WINDOW.document.querySelector(selector);\n    }\n    return null;\n}\n //# sourceMappingURL=browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/browser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _nullishCoalesce: () => (/* binding */ _nullishCoalesce)\n/* harmony export */ });\n// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2012-2018 various contributors (see AUTHORS)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n/**\n * Polyfill for the nullish coalescing operator (`??`).\n *\n * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the\n * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n *\n * @param lhs The value of the expression to the left of the `??`\n * @param rhsFn A function returning the value of the expression to the right of the `??`\n * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value\n */ function _nullishCoalesce(lhs, rhsFn) {\n    // by checking for loose equality to `null`, we catch both `null` and `undefined`\n    return lhs != null ? lhs : rhsFn();\n}\n// Sucrase version:\n// function _nullishCoalesce(lhs, rhsFn) {\n//   if (lhs != null) {\n//     return lhs;\n//   } else {\n//     return rhsFn();\n//   }\n// }\n //# sourceMappingURL=_nullishCoalesce.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9idWlsZFBvbHlmaWxscy9fbnVsbGlzaENvYWxlc2NlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSx1RkFBdUY7QUFDdkYsRUFBRTtBQUNGLHdCQUF3QjtBQUN4QixFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrRUFBK0U7QUFDL0UsZ0ZBQWdGO0FBQ2hGLCtFQUErRTtBQUMvRSw0RUFBNEU7QUFDNUUsd0VBQXdFO0FBQ3hFLDJEQUEyRDtBQUMzRCxFQUFFO0FBQ0YsaUZBQWlGO0FBQ2pGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0YsNkVBQTZFO0FBQzdFLDJFQUEyRTtBQUMzRSw4RUFBOEU7QUFDOUUseUVBQXlFO0FBQ3pFLGdGQUFnRjtBQUNoRixnRkFBZ0Y7QUFDaEYsWUFBWTtBQUVaOzs7Ozs7Ozs7OztDQVdDLEdBQ0QsU0FBU0EsaUJBQWlCQyxHQUFHLEVBQUVDLEtBQUs7SUFDbEMsaUZBQWlGO0lBQ2pGLE9BQU9ELE9BQU8sT0FBT0EsTUFBTUM7QUFDN0I7QUFFQSxtQkFBbUI7QUFDbkIsMENBQTBDO0FBQzFDLHVCQUF1QjtBQUN2QixrQkFBa0I7QUFDbEIsYUFBYTtBQUNiLHNCQUFzQjtBQUN0QixNQUFNO0FBQ04sSUFBSTtBQUV3QixDQUM1Qiw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9idWlsZFBvbHlmaWxscy9fbnVsbGlzaENvYWxlc2NlLmpzPzkyYTAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UvdHJlZS8yNjU4ODc4Njg5NjY5MTdmM2I5MjRjZTM4ZGZhZDAxZmJhYjEzMjlmXG4vL1xuLy8gVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4vL1xuLy8gQ29weXJpZ2h0IChjKSAyMDEyLTIwMTggdmFyaW91cyBjb250cmlidXRvcnMgKHNlZSBBVVRIT1JTKVxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbi8vIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuLy8gU09GVFdBUkUuXG5cbi8qKlxuICogUG9seWZpbGwgZm9yIHRoZSBudWxsaXNoIGNvYWxlc2Npbmcgb3BlcmF0b3IgKGA/P2ApLlxuICpcbiAqIE5vdGUgdGhhdCB0aGUgUkhTIGlzIHdyYXBwZWQgaW4gYSBmdW5jdGlvbiBzbyB0aGF0IGlmIGl0J3MgYSBjb21wdXRlZCB2YWx1ZSwgdGhhdCBldmFsdWF0aW9uIHdvbid0IGhhcHBlbiB1bmxlc3MgdGhlXG4gKiBMSFMgZXZhbHVhdGVzIHRvIGEgbnVsbGlzaCB2YWx1ZSwgdG8gbWltaWMgdGhlIG9wZXJhdG9yJ3Mgc2hvcnQtY2lyY3VpdGluZyBiZWhhdmlvci5cbiAqXG4gKiBBZGFwdGVkIGZyb20gU3VjcmFzZSAoaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UpXG4gKlxuICogQHBhcmFtIGxocyBUaGUgdmFsdWUgb2YgdGhlIGV4cHJlc3Npb24gdG8gdGhlIGxlZnQgb2YgdGhlIGA/P2BcbiAqIEBwYXJhbSByaHNGbiBBIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgdmFsdWUgb2YgdGhlIGV4cHJlc3Npb24gdG8gdGhlIHJpZ2h0IG9mIHRoZSBgPz9gXG4gKiBAcmV0dXJucyBUaGUgTEhTIHZhbHVlLCB1bmxlc3MgaXQncyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAsIGluIHdoaWNoIGNhc2UsIHRoZSBSSFMgdmFsdWVcbiAqL1xuZnVuY3Rpb24gX251bGxpc2hDb2FsZXNjZShsaHMsIHJoc0ZuKSB7XG4gIC8vIGJ5IGNoZWNraW5nIGZvciBsb29zZSBlcXVhbGl0eSB0byBgbnVsbGAsIHdlIGNhdGNoIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICByZXR1cm4gbGhzICE9IG51bGwgPyBsaHMgOiByaHNGbigpO1xufVxuXG4vLyBTdWNyYXNlIHZlcnNpb246XG4vLyBmdW5jdGlvbiBfbnVsbGlzaENvYWxlc2NlKGxocywgcmhzRm4pIHtcbi8vICAgaWYgKGxocyAhPSBudWxsKSB7XG4vLyAgICAgcmV0dXJuIGxocztcbi8vICAgfSBlbHNlIHtcbi8vICAgICByZXR1cm4gcmhzRm4oKTtcbi8vICAgfVxuLy8gfVxuXG5leHBvcnQgeyBfbnVsbGlzaENvYWxlc2NlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fbnVsbGlzaENvYWxlc2NlLmpzLm1hcFxuIl0sIm5hbWVzIjpbIl9udWxsaXNoQ29hbGVzY2UiLCJsaHMiLCJyaHNGbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/buildPolyfills/_nullishCoalesce.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _optionalChain: () => (/* binding */ _optionalChain)\n/* harmony export */ });\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n * See https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The value of the expression\n */ function _optionalChain(ops) {\n    let lastAccessLHS = undefined;\n    let value = ops[0];\n    let i = 1;\n    while(i < ops.length){\n        const op = ops[i];\n        const fn = ops[i + 1];\n        i += 2;\n        // by checking for loose equality to `null`, we catch both `null` and `undefined`\n        if ((op === \"optionalAccess\" || op === \"optionalCall\") && value == null) {\n            // really we're meaning to return `undefined` as an actual value here, but it saves bytes not to write it\n            return;\n        }\n        if (op === \"access\" || op === \"optionalAccess\") {\n            lastAccessLHS = value;\n            value = fn(value);\n        } else if (op === \"call\" || op === \"optionalCall\") {\n            value = fn((...args)=>value.call(lastAccessLHS, ...args));\n            lastAccessLHS = undefined;\n        }\n    }\n    return value;\n}\n// Sucrase version\n// function _optionalChain(ops) {\n//   let lastAccessLHS = undefined;\n//   let value = ops[0];\n//   let i = 1;\n//   while (i < ops.length) {\n//     const op = ops[i];\n//     const fn = ops[i + 1];\n//     i += 2;\n//     if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n//       return undefined;\n//     }\n//     if (op === 'access' || op === 'optionalAccess') {\n//       lastAccessLHS = value;\n//       value = fn(value);\n//     } else if (op === 'call' || op === 'optionalCall') {\n//       value = fn((...args) => value.call(lastAccessLHS, ...args));\n//       lastAccessLHS = undefined;\n//     }\n//   }\n//   return value;\n// }\n //# sourceMappingURL=_optionalChain.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9idWlsZFBvbHlmaWxscy9fb3B0aW9uYWxDaGFpbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7OztDQVNDLEdBQ0QsU0FBU0EsZUFBZUMsR0FBRztJQUN6QixJQUFJQyxnQkFBZ0JDO0lBQ3BCLElBQUlDLFFBQVFILEdBQUcsQ0FBQyxFQUFFO0lBQ2xCLElBQUlJLElBQUk7SUFDUixNQUFPQSxJQUFJSixJQUFJSyxNQUFNLENBQUU7UUFDckIsTUFBTUMsS0FBS04sR0FBRyxDQUFDSSxFQUFFO1FBQ2pCLE1BQU1HLEtBQUtQLEdBQUcsQ0FBQ0ksSUFBSSxFQUFFO1FBQ3JCQSxLQUFLO1FBQ0wsaUZBQWlGO1FBQ2pGLElBQUksQ0FBQ0UsT0FBTyxvQkFBb0JBLE9BQU8sY0FBYSxLQUFNSCxTQUFTLE1BQU07WUFDdkUseUdBQXlHO1lBQ3pHO1FBQ0Y7UUFDQSxJQUFJRyxPQUFPLFlBQVlBLE9BQU8sa0JBQWtCO1lBQzlDTCxnQkFBZ0JFO1lBQ2hCQSxRQUFRSSxHQUFHSjtRQUNiLE9BQU8sSUFBSUcsT0FBTyxVQUFVQSxPQUFPLGdCQUFnQjtZQUNqREgsUUFBUUksR0FBRyxDQUFDLEdBQUdDLE9BQVMsTUFBU0MsSUFBSSxDQUFDUixrQkFBa0JPO1lBQ3hEUCxnQkFBZ0JDO1FBQ2xCO0lBQ0Y7SUFDQSxPQUFPQztBQUNUO0FBRUEsa0JBQWtCO0FBQ2xCLGlDQUFpQztBQUNqQyxtQ0FBbUM7QUFDbkMsd0JBQXdCO0FBQ3hCLGVBQWU7QUFDZiw2QkFBNkI7QUFDN0IseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3QixjQUFjO0FBQ2QsaUZBQWlGO0FBQ2pGLDBCQUEwQjtBQUMxQixRQUFRO0FBQ1Isd0RBQXdEO0FBQ3hELCtCQUErQjtBQUMvQiwyQkFBMkI7QUFDM0IsMkRBQTJEO0FBQzNELHFFQUFxRTtBQUNyRSxtQ0FBbUM7QUFDbkMsUUFBUTtBQUNSLE1BQU07QUFDTixrQkFBa0I7QUFDbEIsSUFBSTtBQUVzQixDQUMxQiwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9idWlsZFBvbHlmaWxscy9fb3B0aW9uYWxDaGFpbi5qcz9lY2RmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUG9seWZpbGwgZm9yIHRoZSBvcHRpb25hbCBjaGFpbiBvcGVyYXRvciwgYD8uYCwgZ2l2ZW4gcHJldmlvdXMgY29udmVyc2lvbiBvZiB0aGUgZXhwcmVzc2lvbiBpbnRvIGFuIGFycmF5IG9mIHZhbHVlcyxcbiAqIGRlc2NyaXB0b3JzLCBhbmQgZnVuY3Rpb25zLlxuICpcbiAqIEFkYXB0ZWQgZnJvbSBTdWNyYXNlIChodHRwczovL2dpdGh1Yi5jb20vYWxhbmdwaWVyY2Uvc3VjcmFzZSlcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYWxhbmdwaWVyY2Uvc3VjcmFzZS9ibG9iLzI2NTg4Nzg2ODk2NjkxN2YzYjkyNGNlMzhkZmFkMDFmYmFiMTMyOWYvc3JjL3RyYW5zZm9ybWVycy9PcHRpb25hbENoYWluaW5nTnVsbGlzaFRyYW5zZm9ybWVyLnRzI0wxNVxuICpcbiAqIEBwYXJhbSBvcHMgQXJyYXkgcmVzdWx0IG9mIGV4cHJlc3Npb24gY29udmVyc2lvblxuICogQHJldHVybnMgVGhlIHZhbHVlIG9mIHRoZSBleHByZXNzaW9uXG4gKi9cbmZ1bmN0aW9uIF9vcHRpb25hbENoYWluKG9wcykge1xuICBsZXQgbGFzdEFjY2Vzc0xIUyA9IHVuZGVmaW5lZDtcbiAgbGV0IHZhbHVlID0gb3BzWzBdO1xuICBsZXQgaSA9IDE7XG4gIHdoaWxlIChpIDwgb3BzLmxlbmd0aCkge1xuICAgIGNvbnN0IG9wID0gb3BzW2ldIDtcbiAgICBjb25zdCBmbiA9IG9wc1tpICsgMV0gO1xuICAgIGkgKz0gMjtcbiAgICAvLyBieSBjaGVja2luZyBmb3IgbG9vc2UgZXF1YWxpdHkgdG8gYG51bGxgLCB3ZSBjYXRjaCBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICBpZiAoKG9wID09PSAnb3B0aW9uYWxBY2Nlc3MnIHx8IG9wID09PSAnb3B0aW9uYWxDYWxsJykgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgLy8gcmVhbGx5IHdlJ3JlIG1lYW5pbmcgdG8gcmV0dXJuIGB1bmRlZmluZWRgIGFzIGFuIGFjdHVhbCB2YWx1ZSBoZXJlLCBidXQgaXQgc2F2ZXMgYnl0ZXMgbm90IHRvIHdyaXRlIGl0XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvcCA9PT0gJ2FjY2VzcycgfHwgb3AgPT09ICdvcHRpb25hbEFjY2VzcycpIHtcbiAgICAgIGxhc3RBY2Nlc3NMSFMgPSB2YWx1ZTtcbiAgICAgIHZhbHVlID0gZm4odmFsdWUpO1xuICAgIH0gZWxzZSBpZiAob3AgPT09ICdjYWxsJyB8fCBvcCA9PT0gJ29wdGlvbmFsQ2FsbCcpIHtcbiAgICAgIHZhbHVlID0gZm4oKC4uLmFyZ3MpID0+ICh2YWx1ZSApLmNhbGwobGFzdEFjY2Vzc0xIUywgLi4uYXJncykpO1xuICAgICAgbGFzdEFjY2Vzc0xIUyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG4vLyBTdWNyYXNlIHZlcnNpb25cbi8vIGZ1bmN0aW9uIF9vcHRpb25hbENoYWluKG9wcykge1xuLy8gICBsZXQgbGFzdEFjY2Vzc0xIUyA9IHVuZGVmaW5lZDtcbi8vICAgbGV0IHZhbHVlID0gb3BzWzBdO1xuLy8gICBsZXQgaSA9IDE7XG4vLyAgIHdoaWxlIChpIDwgb3BzLmxlbmd0aCkge1xuLy8gICAgIGNvbnN0IG9wID0gb3BzW2ldO1xuLy8gICAgIGNvbnN0IGZuID0gb3BzW2kgKyAxXTtcbi8vICAgICBpICs9IDI7XG4vLyAgICAgaWYgKChvcCA9PT0gJ29wdGlvbmFsQWNjZXNzJyB8fCBvcCA9PT0gJ29wdGlvbmFsQ2FsbCcpICYmIHZhbHVlID09IG51bGwpIHtcbi8vICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4vLyAgICAgfVxuLy8gICAgIGlmIChvcCA9PT0gJ2FjY2VzcycgfHwgb3AgPT09ICdvcHRpb25hbEFjY2VzcycpIHtcbi8vICAgICAgIGxhc3RBY2Nlc3NMSFMgPSB2YWx1ZTtcbi8vICAgICAgIHZhbHVlID0gZm4odmFsdWUpO1xuLy8gICAgIH0gZWxzZSBpZiAob3AgPT09ICdjYWxsJyB8fCBvcCA9PT0gJ29wdGlvbmFsQ2FsbCcpIHtcbi8vICAgICAgIHZhbHVlID0gZm4oKC4uLmFyZ3MpID0+IHZhbHVlLmNhbGwobGFzdEFjY2Vzc0xIUywgLi4uYXJncykpO1xuLy8gICAgICAgbGFzdEFjY2Vzc0xIUyA9IHVuZGVmaW5lZDtcbi8vICAgICB9XG4vLyAgIH1cbi8vICAgcmV0dXJuIHZhbHVlO1xuLy8gfVxuXG5leHBvcnQgeyBfb3B0aW9uYWxDaGFpbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X29wdGlvbmFsQ2hhaW4uanMubWFwXG4iXSwibmFtZXMiOlsiX29wdGlvbmFsQ2hhaW4iLCJvcHMiLCJsYXN0QWNjZXNzTEhTIiwidW5kZWZpbmVkIiwidmFsdWUiLCJpIiwibGVuZ3RoIiwib3AiLCJmbiIsImFyZ3MiLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/cookie.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/cookie.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseCookie: () => (/* binding */ parseCookie)\n/* harmony export */ });\n/**\n * This code was originally copied from the 'cookie` module at v0.5.0 and was simplified for our use case.\n * https://github.com/jshttp/cookie/blob/a0c84147aab6266bdb3996cf4062e93907c0b0fc/index.js\n * It had the following license:\n *\n * (The MIT License)\n *\n * Copyright (c) 2012-2014 Roman Shtylman <shtylman@gmail.com>\n * Copyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */ /**\n * Parses a cookie string\n */ function parseCookie(str) {\n    const obj = {};\n    let index = 0;\n    while(index < str.length){\n        const eqIdx = str.indexOf(\"=\", index);\n        // no more cookie pairs\n        if (eqIdx === -1) {\n            break;\n        }\n        let endIdx = str.indexOf(\";\", index);\n        if (endIdx === -1) {\n            endIdx = str.length;\n        } else if (endIdx < eqIdx) {\n            // backtrack on prior semicolon\n            index = str.lastIndexOf(\";\", eqIdx - 1) + 1;\n            continue;\n        }\n        const key = str.slice(index, eqIdx).trim();\n        // only assign once\n        if (undefined === obj[key]) {\n            let val = str.slice(eqIdx + 1, endIdx).trim();\n            // quoted values\n            if (val.charCodeAt(0) === 0x22) {\n                val = val.slice(1, -1);\n            }\n            try {\n                obj[key] = val.indexOf(\"%\") !== -1 ? decodeURIComponent(val) : val;\n            } catch (e) {\n                obj[key] = val;\n            }\n        }\n        index = endIdx + 1;\n    }\n    return obj;\n}\n //# sourceMappingURL=cookie.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9jb29raWUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBNEJDLEdBRUQ7O0NBRUMsR0FDRCxTQUFTQSxZQUFZQyxHQUFHO0lBQ3RCLE1BQU1DLE1BQU0sQ0FBQztJQUNiLElBQUlDLFFBQVE7SUFFWixNQUFPQSxRQUFRRixJQUFJRyxNQUFNLENBQUU7UUFDekIsTUFBTUMsUUFBUUosSUFBSUssT0FBTyxDQUFDLEtBQUtIO1FBRS9CLHVCQUF1QjtRQUN2QixJQUFJRSxVQUFVLENBQUMsR0FBRztZQUNoQjtRQUNGO1FBRUEsSUFBSUUsU0FBU04sSUFBSUssT0FBTyxDQUFDLEtBQUtIO1FBRTlCLElBQUlJLFdBQVcsQ0FBQyxHQUFHO1lBQ2pCQSxTQUFTTixJQUFJRyxNQUFNO1FBQ3JCLE9BQU8sSUFBSUcsU0FBU0YsT0FBTztZQUN6QiwrQkFBK0I7WUFDL0JGLFFBQVFGLElBQUlPLFdBQVcsQ0FBQyxLQUFLSCxRQUFRLEtBQUs7WUFDMUM7UUFDRjtRQUVBLE1BQU1JLE1BQU1SLElBQUlTLEtBQUssQ0FBQ1AsT0FBT0UsT0FBT00sSUFBSTtRQUV4QyxtQkFBbUI7UUFDbkIsSUFBSUMsY0FBY1YsR0FBRyxDQUFDTyxJQUFJLEVBQUU7WUFDMUIsSUFBSUksTUFBTVosSUFBSVMsS0FBSyxDQUFDTCxRQUFRLEdBQUdFLFFBQVFJLElBQUk7WUFFM0MsZ0JBQWdCO1lBQ2hCLElBQUlFLElBQUlDLFVBQVUsQ0FBQyxPQUFPLE1BQU07Z0JBQzlCRCxNQUFNQSxJQUFJSCxLQUFLLENBQUMsR0FBRyxDQUFDO1lBQ3RCO1lBRUEsSUFBSTtnQkFDRlIsR0FBRyxDQUFDTyxJQUFJLEdBQUdJLElBQUlQLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSVMsbUJBQW1CRixPQUFPQTtZQUNqRSxFQUFFLE9BQU9HLEdBQUc7Z0JBQ1ZkLEdBQUcsQ0FBQ08sSUFBSSxHQUFHSTtZQUNiO1FBQ0Y7UUFFQVYsUUFBUUksU0FBUztJQUNuQjtJQUVBLE9BQU9MO0FBQ1Q7QUFFdUIsQ0FDdkIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vY29va2llLmpzP2M4MDciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIGNvZGUgd2FzIG9yaWdpbmFsbHkgY29waWVkIGZyb20gdGhlICdjb29raWVgIG1vZHVsZSBhdCB2MC41LjAgYW5kIHdhcyBzaW1wbGlmaWVkIGZvciBvdXIgdXNlIGNhc2UuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vanNodHRwL2Nvb2tpZS9ibG9iL2EwYzg0MTQ3YWFiNjI2NmJkYjM5OTZjZjQwNjJlOTM5MDdjMGIwZmMvaW5kZXguanNcbiAqIEl0IGhhZCB0aGUgZm9sbG93aW5nIGxpY2Vuc2U6XG4gKlxuICogKFRoZSBNSVQgTGljZW5zZSlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNCBSb21hbiBTaHR5bG1hbiA8c2h0eWxtYW5AZ21haWwuY29tPlxuICogQ29weXJpZ2h0IChjKSAyMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uIDxkb3VnQHNvbWV0aGluZ2RvdWcuY29tPlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xuICogYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4gKiAnU29mdHdhcmUnKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4gKiB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4gKiBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbiAqIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0b1xuICogdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgJ0FTIElTJywgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuICogTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULlxuICogSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTllcbiAqIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsXG4gKiBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuICogU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuLyoqXG4gKiBQYXJzZXMgYSBjb29raWUgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIHBhcnNlQ29va2llKHN0cikge1xuICBjb25zdCBvYmogPSB7fTtcbiAgbGV0IGluZGV4ID0gMDtcblxuICB3aGlsZSAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgY29uc3QgZXFJZHggPSBzdHIuaW5kZXhPZignPScsIGluZGV4KTtcblxuICAgIC8vIG5vIG1vcmUgY29va2llIHBhaXJzXG4gICAgaWYgKGVxSWR4ID09PSAtMSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbGV0IGVuZElkeCA9IHN0ci5pbmRleE9mKCc7JywgaW5kZXgpO1xuXG4gICAgaWYgKGVuZElkeCA9PT0gLTEpIHtcbiAgICAgIGVuZElkeCA9IHN0ci5sZW5ndGg7XG4gICAgfSBlbHNlIGlmIChlbmRJZHggPCBlcUlkeCkge1xuICAgICAgLy8gYmFja3RyYWNrIG9uIHByaW9yIHNlbWljb2xvblxuICAgICAgaW5kZXggPSBzdHIubGFzdEluZGV4T2YoJzsnLCBlcUlkeCAtIDEpICsgMTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGtleSA9IHN0ci5zbGljZShpbmRleCwgZXFJZHgpLnRyaW0oKTtcblxuICAgIC8vIG9ubHkgYXNzaWduIG9uY2VcbiAgICBpZiAodW5kZWZpbmVkID09PSBvYmpba2V5XSkge1xuICAgICAgbGV0IHZhbCA9IHN0ci5zbGljZShlcUlkeCArIDEsIGVuZElkeCkudHJpbSgpO1xuXG4gICAgICAvLyBxdW90ZWQgdmFsdWVzXG4gICAgICBpZiAodmFsLmNoYXJDb2RlQXQoMCkgPT09IDB4MjIpIHtcbiAgICAgICAgdmFsID0gdmFsLnNsaWNlKDEsIC0xKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgb2JqW2tleV0gPSB2YWwuaW5kZXhPZignJScpICE9PSAtMSA/IGRlY29kZVVSSUNvbXBvbmVudCh2YWwpIDogdmFsO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBvYmpba2V5XSA9IHZhbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbmRleCA9IGVuZElkeCArIDE7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5leHBvcnQgeyBwYXJzZUNvb2tpZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29va2llLmpzLm1hcFxuIl0sIm5hbWVzIjpbInBhcnNlQ29va2llIiwic3RyIiwib2JqIiwiaW5kZXgiLCJsZW5ndGgiLCJlcUlkeCIsImluZGV4T2YiLCJlbmRJZHgiLCJsYXN0SW5kZXhPZiIsImtleSIsInNsaWNlIiwidHJpbSIsInVuZGVmaW5lZCIsInZhbCIsImNoYXJDb2RlQXQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/cookie.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/debug-build.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/debug-build.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEBUG_BUILD: () => (/* binding */ DEBUG_BUILD)\n/* harmony export */ });\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */ const DEBUG_BUILD =  false || false;\n //# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9kZWJ1Zy1idWlsZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Q0FJQyxHQUNELE1BQU1BLGNBQWUsTUFBNEIsSUFBZUMsS0FBZ0JBO0FBRXpELENBQ3ZCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2RlYnVnLWJ1aWxkLmpzPzM4ODYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIHNlcnZlcyBhcyBhIGJ1aWxkIHRpbWUgZmxhZyB0aGF0IHdpbGwgYmUgdHJ1ZSBieSBkZWZhdWx0LCBidXQgZmFsc2UgaW4gbm9uLWRlYnVnIGJ1aWxkcyBvciBpZiB1c2VycyByZXBsYWNlIGBfX1NFTlRSWV9ERUJVR19fYCBpbiB0aGVpciBnZW5lcmF0ZWQgY29kZS5cbiAqXG4gKiBBVFRFTlRJT046IFRoaXMgY29uc3RhbnQgbXVzdCBuZXZlciBjcm9zcyBwYWNrYWdlIGJvdW5kYXJpZXMgKGkuZS4gYmUgZXhwb3J0ZWQpIHRvIGd1YXJhbnRlZSB0aGF0IGl0IGNhbiBiZSB1c2VkIGZvciB0cmVlIHNoYWtpbmcuXG4gKi9cbmNvbnN0IERFQlVHX0JVSUxEID0gKHR5cGVvZiBfX1NFTlRSWV9ERUJVR19fID09PSAndW5kZWZpbmVkJyB8fCBfX1NFTlRSWV9ERUJVR19fKTtcblxuZXhwb3J0IHsgREVCVUdfQlVJTEQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLWJ1aWxkLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkRFQlVHX0JVSUxEIiwiX19TRU5UUllfREVCVUdfXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/debug-build.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/dsn.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/dsn.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dsnFromString: () => (/* binding */ dsnFromString),\n/* harmony export */   dsnToString: () => (/* binding */ dsnToString),\n/* harmony export */   makeDsn: () => (/* binding */ makeDsn)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/debug-build.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/logger.js\");\n\n\n/** Regular expression used to parse a Dsn. */ const DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\nfunction isValidProtocol(protocol) {\n    return protocol === \"http\" || protocol === \"https\";\n}\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */ function dsnToString(dsn, withPassword = false) {\n    const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n    return `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : \"\"}` + `@${host}${port ? `:${port}` : \"\"}/${path ? `${path}/` : path}${projectId}`;\n}\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string\n */ function dsnFromString(str) {\n    const match = DSN_REGEX.exec(str);\n    if (!match) {\n        // This should be logged to the console\n        (0,_logger_js__WEBPACK_IMPORTED_MODULE_0__.consoleSandbox)(()=>{\n            // eslint-disable-next-line no-console\n            console.error(`Invalid Sentry Dsn: ${str}`);\n        });\n        return undefined;\n    }\n    const [protocol, publicKey, pass = \"\", host, port = \"\", lastPath] = match.slice(1);\n    let path = \"\";\n    let projectId = lastPath;\n    const split = projectId.split(\"/\");\n    if (split.length > 1) {\n        path = split.slice(0, -1).join(\"/\");\n        projectId = split.pop();\n    }\n    if (projectId) {\n        const projectMatch = projectId.match(/^\\d+/);\n        if (projectMatch) {\n            projectId = projectMatch[0];\n        }\n    }\n    return dsnFromComponents({\n        host,\n        pass,\n        path,\n        projectId,\n        port,\n        protocol: protocol,\n        publicKey\n    });\n}\nfunction dsnFromComponents(components) {\n    return {\n        protocol: components.protocol,\n        publicKey: components.publicKey || \"\",\n        pass: components.pass || \"\",\n        host: components.host,\n        port: components.port || \"\",\n        path: components.path || \"\",\n        projectId: components.projectId\n    };\n}\nfunction validateDsn(dsn) {\n    if (!_debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD) {\n        return true;\n    }\n    const { port, projectId, protocol } = dsn;\n    const requiredComponents = [\n        \"protocol\",\n        \"publicKey\",\n        \"host\",\n        \"projectId\"\n    ];\n    const hasMissingRequiredComponent = requiredComponents.find((component)=>{\n        if (!dsn[component]) {\n            _logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.error(`Invalid Sentry Dsn: ${component} missing`);\n            return true;\n        }\n        return false;\n    });\n    if (hasMissingRequiredComponent) {\n        return false;\n    }\n    if (!projectId.match(/^\\d+$/)) {\n        _logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n        return false;\n    }\n    if (!isValidProtocol(protocol)) {\n        _logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n        return false;\n    }\n    if (port && isNaN(parseInt(port, 10))) {\n        _logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.error(`Invalid Sentry Dsn: Invalid port ${port}`);\n        return false;\n    }\n    return true;\n}\n/**\n * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.\n * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source\n */ function makeDsn(from) {\n    const components = typeof from === \"string\" ? dsnFromString(from) : dsnFromComponents(from);\n    if (!components || !validateDsn(components)) {\n        return undefined;\n    }\n    return components;\n}\n //# sourceMappingURL=dsn.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/dsn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/env.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/env.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSDKSource: () => (/* binding */ getSDKSource),\n/* harmony export */   isBrowserBundle: () => (/* binding */ isBrowserBundle)\n/* harmony export */ });\n/*\n * This module exists for optimizations in the build process through rollup and terser.  We define some global\n * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these\n * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will\n * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to\n * `logger` and preventing node-related code from appearing in browser bundles.\n *\n * Attention:\n * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by\n * users. These flags should live in their respective packages, as we identified user tooling (specifically webpack)\n * having issues tree-shaking these constants across package boundaries.\n * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want\n * users to be able to shake away expressions that it guards.\n */ /**\n * Figures out if we're building a browser bundle.\n *\n * @returns true if this is a browser bundle build.\n */ function isBrowserBundle() {\n    return typeof __SENTRY_BROWSER_BUNDLE__ !== \"undefined\" && !!__SENTRY_BROWSER_BUNDLE__;\n}\n/**\n * Get source of SDK.\n */ function getSDKSource() {\n    // @ts-expect-error \"npm\" is injected by rollup during build process\n    return \"npm\";\n}\n //# sourceMappingURL=env.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9lbnYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7OztDQWFDLEdBRUQ7Ozs7Q0FJQyxHQUNELFNBQVNBO0lBQ1AsT0FBTyxPQUFPQyw4QkFBOEIsZUFBZSxDQUFDLENBQUNBO0FBQy9EO0FBRUE7O0NBRUMsR0FDRCxTQUFTQztJQUNQLG9FQUFvRTtJQUNwRSxPQUFPO0FBQ1Q7QUFFeUMsQ0FDekMsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vZW52LmpzPzU3MDgiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFRoaXMgbW9kdWxlIGV4aXN0cyBmb3Igb3B0aW1pemF0aW9ucyBpbiB0aGUgYnVpbGQgcHJvY2VzcyB0aHJvdWdoIHJvbGx1cCBhbmQgdGVyc2VyLiAgV2UgZGVmaW5lIHNvbWUgZ2xvYmFsXG4gKiBjb25zdGFudHMsIHdoaWNoIGNhbiBiZSBvdmVycmlkZGVuIGR1cmluZyBidWlsZC4gQnkgZ3VhcmRpbmcgY2VydGFpbiBwaWVjZXMgb2YgY29kZSB3aXRoIGZ1bmN0aW9ucyB0aGF0IHJldHVybiB0aGVzZVxuICogY29uc3RhbnRzLCB3ZSBjYW4gY29udHJvbCB3aGV0aGVyIG9yIG5vdCB0aGV5IGFwcGVhciBpbiB0aGUgZmluYWwgYnVuZGxlLiAoQW55IGNvZGUgZ3VhcmRlZCBieSBhIGZhbHNlIGNvbmRpdGlvbiB3aWxsXG4gKiBuZXZlciBydW4sIGFuZCB3aWxsIGhlbmNlIGJlIGRyb3BwZWQgZHVyaW5nIHRyZWVzaGFraW5nLikgVGhlIHR3byBwcmltYXJ5IHVzZXMgZm9yIHRoaXMgYXJlIHN0cmlwcGluZyBvdXQgY2FsbHMgdG9cbiAqIGBsb2dnZXJgIGFuZCBwcmV2ZW50aW5nIG5vZGUtcmVsYXRlZCBjb2RlIGZyb20gYXBwZWFyaW5nIGluIGJyb3dzZXIgYnVuZGxlcy5cbiAqXG4gKiBBdHRlbnRpb246XG4gKiBUaGlzIGZpbGUgc2hvdWxkIG5vdCBiZSB1c2VkIHRvIGRlZmluZSBjb25zdGFudHMvZmxhZ3MgdGhhdCBhcmUgaW50ZW5kZWQgdG8gYmUgdXNlZCBmb3IgdHJlZS1zaGFraW5nIGNvbmR1Y3RlZCBieVxuICogdXNlcnMuIFRoZXNlIGZsYWdzIHNob3VsZCBsaXZlIGluIHRoZWlyIHJlc3BlY3RpdmUgcGFja2FnZXMsIGFzIHdlIGlkZW50aWZpZWQgdXNlciB0b29saW5nIChzcGVjaWZpY2FsbHkgd2VicGFjaylcbiAqIGhhdmluZyBpc3N1ZXMgdHJlZS1zaGFraW5nIHRoZXNlIGNvbnN0YW50cyBhY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzLlxuICogQW4gZXhhbXBsZSBmb3IgdGhpcyBpcyB0aGUgX19TRU5UUllfREVCVUdfXyBjb25zdGFudC4gSXQgaXMgZGVjbGFyZWQgaW4gZWFjaCBwYWNrYWdlIGluZGl2aWR1YWxseSBiZWNhdXNlIHdlIHdhbnRcbiAqIHVzZXJzIHRvIGJlIGFibGUgdG8gc2hha2UgYXdheSBleHByZXNzaW9ucyB0aGF0IGl0IGd1YXJkcy5cbiAqL1xuXG4vKipcbiAqIEZpZ3VyZXMgb3V0IGlmIHdlJ3JlIGJ1aWxkaW5nIGEgYnJvd3NlciBidW5kbGUuXG4gKlxuICogQHJldHVybnMgdHJ1ZSBpZiB0aGlzIGlzIGEgYnJvd3NlciBidW5kbGUgYnVpbGQuXG4gKi9cbmZ1bmN0aW9uIGlzQnJvd3NlckJ1bmRsZSgpIHtcbiAgcmV0dXJuIHR5cGVvZiBfX1NFTlRSWV9CUk9XU0VSX0JVTkRMRV9fICE9PSAndW5kZWZpbmVkJyAmJiAhIV9fU0VOVFJZX0JST1dTRVJfQlVORExFX187XG59XG5cbi8qKlxuICogR2V0IHNvdXJjZSBvZiBTREsuXG4gKi9cbmZ1bmN0aW9uIGdldFNES1NvdXJjZSgpIHtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBcIm5wbVwiIGlzIGluamVjdGVkIGJ5IHJvbGx1cCBkdXJpbmcgYnVpbGQgcHJvY2Vzc1xuICByZXR1cm4gXCJucG1cIjtcbn1cblxuZXhwb3J0IHsgZ2V0U0RLU291cmNlLCBpc0Jyb3dzZXJCdW5kbGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJpc0Jyb3dzZXJCdW5kbGUiLCJfX1NFTlRSWV9CUk9XU0VSX0JVTkRMRV9fIiwiZ2V0U0RLU291cmNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/env.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/envelope.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/envelope.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addItemToEnvelope: () => (/* binding */ addItemToEnvelope),\n/* harmony export */   createAttachmentEnvelopeItem: () => (/* binding */ createAttachmentEnvelopeItem),\n/* harmony export */   createEnvelope: () => (/* binding */ createEnvelope),\n/* harmony export */   createEventEnvelopeHeaders: () => (/* binding */ createEventEnvelopeHeaders),\n/* harmony export */   envelopeContainsItemType: () => (/* binding */ envelopeContainsItemType),\n/* harmony export */   envelopeItemTypeToDataCategory: () => (/* binding */ envelopeItemTypeToDataCategory),\n/* harmony export */   forEachEnvelopeItem: () => (/* binding */ forEachEnvelopeItem),\n/* harmony export */   getSdkMetadataForEnvelopeHeader: () => (/* binding */ getSdkMetadataForEnvelopeHeader),\n/* harmony export */   parseEnvelope: () => (/* binding */ parseEnvelope),\n/* harmony export */   serializeEnvelope: () => (/* binding */ serializeEnvelope)\n/* harmony export */ });\n/* harmony import */ var _dsn_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dsn.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/dsn.js\");\n/* harmony import */ var _normalize_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./normalize.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/normalize.js\");\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./object.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/object.js\");\n\n\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */ function createEnvelope(headers, items = []) {\n    return [\n        headers,\n        items\n    ];\n}\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */ function addItemToEnvelope(envelope, newItem) {\n    const [headers, items] = envelope;\n    return [\n        headers,\n        [\n            ...items,\n            newItem\n        ]\n    ];\n}\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */ function forEachEnvelopeItem(envelope, callback) {\n    const envelopeItems = envelope[1];\n    for (const envelopeItem of envelopeItems){\n        const envelopeItemType = envelopeItem[0].type;\n        const result = callback(envelopeItem, envelopeItemType);\n        if (result) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */ function envelopeContainsItemType(envelope, types) {\n    return forEachEnvelopeItem(envelope, (_, type)=>types.includes(type));\n}\n/**\n * Encode a string to UTF8.\n */ function encodeUTF8(input, textEncoder) {\n    const utf8 = textEncoder || new TextEncoder();\n    return utf8.encode(input);\n}\n/**\n * Serializes an envelope.\n */ function serializeEnvelope(envelope, textEncoder) {\n    const [envHeaders, items] = envelope;\n    // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n    let parts = JSON.stringify(envHeaders);\n    function append(next) {\n        if (typeof parts === \"string\") {\n            parts = typeof next === \"string\" ? parts + next : [\n                encodeUTF8(parts, textEncoder),\n                next\n            ];\n        } else {\n            parts.push(typeof next === \"string\" ? encodeUTF8(next, textEncoder) : next);\n        }\n    }\n    for (const item of items){\n        const [itemHeaders, payload] = item;\n        append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n        if (typeof payload === \"string\" || payload instanceof Uint8Array) {\n            append(payload);\n        } else {\n            let stringifiedPayload;\n            try {\n                stringifiedPayload = JSON.stringify(payload);\n            } catch (e) {\n                // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.strinify()` still\n                // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n                // performance impact but in this case a performance hit is better than throwing.\n                stringifiedPayload = JSON.stringify((0,_normalize_js__WEBPACK_IMPORTED_MODULE_0__.normalize)(payload));\n            }\n            append(stringifiedPayload);\n        }\n    }\n    return typeof parts === \"string\" ? parts : concatBuffers(parts);\n}\nfunction concatBuffers(buffers) {\n    const totalLength = buffers.reduce((acc, buf)=>acc + buf.length, 0);\n    const merged = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const buffer of buffers){\n        merged.set(buffer, offset);\n        offset += buffer.length;\n    }\n    return merged;\n}\n/**\n * Parses an envelope\n */ function parseEnvelope(env, textEncoder, textDecoder) {\n    let buffer = typeof env === \"string\" ? textEncoder.encode(env) : env;\n    function readBinary(length) {\n        const bin = buffer.subarray(0, length);\n        // Replace the buffer with the remaining data excluding trailing newline\n        buffer = buffer.subarray(length + 1);\n        return bin;\n    }\n    function readJson() {\n        let i = buffer.indexOf(0xa);\n        // If we couldn't find a newline, we must have found the end of the buffer\n        if (i < 0) {\n            i = buffer.length;\n        }\n        return JSON.parse(textDecoder.decode(readBinary(i)));\n    }\n    const envelopeHeader = readJson();\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const items = [];\n    while(buffer.length){\n        const itemHeader = readJson();\n        const binaryLength = typeof itemHeader.length === \"number\" ? itemHeader.length : undefined;\n        items.push([\n            itemHeader,\n            binaryLength ? readBinary(binaryLength) : readJson()\n        ]);\n    }\n    return [\n        envelopeHeader,\n        items\n    ];\n}\n/**\n * Creates attachment envelope items\n */ function createAttachmentEnvelopeItem(attachment, textEncoder) {\n    const buffer = typeof attachment.data === \"string\" ? encodeUTF8(attachment.data, textEncoder) : attachment.data;\n    return [\n        (0,_object_js__WEBPACK_IMPORTED_MODULE_1__.dropUndefinedKeys)({\n            type: \"attachment\",\n            length: buffer.length,\n            filename: attachment.filename,\n            content_type: attachment.contentType,\n            attachment_type: attachment.attachmentType\n        }),\n        buffer\n    ];\n}\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP = {\n    session: \"session\",\n    sessions: \"session\",\n    attachment: \"attachment\",\n    transaction: \"transaction\",\n    event: \"error\",\n    client_report: \"internal\",\n    user_report: \"default\",\n    profile: \"profile\",\n    replay_event: \"replay\",\n    replay_recording: \"replay\",\n    check_in: \"monitor\",\n    feedback: \"feedback\",\n    // TODO: This is a temporary workaround until we have a proper data category for metrics\n    statsd: \"unknown\"\n};\n/**\n * Maps the type of an envelope item to a data category.\n */ function envelopeItemTypeToDataCategory(type) {\n    return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n/** Extracts the minimal SDK info from from the metadata or an events */ function getSdkMetadataForEnvelopeHeader(metadataOrEvent) {\n    if (!metadataOrEvent || !metadataOrEvent.sdk) {\n        return;\n    }\n    const { name, version } = metadataOrEvent.sdk;\n    return {\n        name,\n        version\n    };\n}\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */ function createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn) {\n    const dynamicSamplingContext = event.sdkProcessingMetadata && event.sdkProcessingMetadata.dynamicSamplingContext;\n    return {\n        event_id: event.event_id,\n        sent_at: new Date().toISOString(),\n        ...sdkInfo && {\n            sdk: sdkInfo\n        },\n        ...!!tunnel && dsn && {\n            dsn: (0,_dsn_js__WEBPACK_IMPORTED_MODULE_2__.dsnToString)(dsn)\n        },\n        ...dynamicSamplingContext && {\n            trace: (0,_object_js__WEBPACK_IMPORTED_MODULE_1__.dropUndefinedKeys)({\n                ...dynamicSamplingContext\n            })\n        }\n    };\n}\n //# sourceMappingURL=envelope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9lbnZlbG9wZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQXVDO0FBQ0k7QUFDSztBQUVoRDs7OztDQUlDLEdBQ0QsU0FBU0csZUFBZUMsT0FBTyxFQUFFQyxRQUFRLEVBQUU7SUFDekMsT0FBTztRQUFDRDtRQUFTQztLQUFNO0FBQ3pCO0FBRUE7Ozs7Q0FJQyxHQUNELFNBQVNDLGtCQUFrQkMsUUFBUSxFQUFFQyxPQUFPO0lBQzFDLE1BQU0sQ0FBQ0osU0FBU0MsTUFBTSxHQUFHRTtJQUN6QixPQUFPO1FBQUNIO1FBQVM7ZUFBSUM7WUFBT0c7U0FBUTtLQUFDO0FBQ3ZDO0FBRUE7Ozs7O0NBS0MsR0FDRCxTQUFTQyxvQkFDUEYsUUFBUSxFQUNSRyxRQUFRO0lBRVIsTUFBTUMsZ0JBQWdCSixRQUFRLENBQUMsRUFBRTtJQUVqQyxLQUFLLE1BQU1LLGdCQUFnQkQsY0FBZTtRQUN4QyxNQUFNRSxtQkFBbUJELFlBQVksQ0FBQyxFQUFFLENBQUNFLElBQUk7UUFDN0MsTUFBTUMsU0FBU0wsU0FBU0UsY0FBY0M7UUFFdEMsSUFBSUUsUUFBUTtZQUNWLE9BQU87UUFDVDtJQUNGO0lBRUEsT0FBTztBQUNUO0FBRUE7O0NBRUMsR0FDRCxTQUFTQyx5QkFBeUJULFFBQVEsRUFBRVUsS0FBSztJQUMvQyxPQUFPUixvQkFBb0JGLFVBQVUsQ0FBQ1csR0FBR0osT0FBU0csTUFBTUUsUUFBUSxDQUFDTDtBQUNuRTtBQUVBOztDQUVDLEdBQ0QsU0FBU00sV0FBV0MsS0FBSyxFQUFFQyxXQUFXO0lBQ3BDLE1BQU1DLE9BQU9ELGVBQWUsSUFBSUU7SUFDaEMsT0FBT0QsS0FBS0UsTUFBTSxDQUFDSjtBQUNyQjtBQUVBOztDQUVDLEdBQ0QsU0FBU0ssa0JBQWtCbkIsUUFBUSxFQUFFZSxXQUFXO0lBQzlDLE1BQU0sQ0FBQ0ssWUFBWXRCLE1BQU0sR0FBR0U7SUFFNUIsZ0hBQWdIO0lBQ2hILElBQUlxQixRQUFRQyxLQUFLQyxTQUFTLENBQUNIO0lBRTNCLFNBQVNJLE9BQU9DLElBQUk7UUFDbEIsSUFBSSxPQUFPSixVQUFVLFVBQVU7WUFDN0JBLFFBQVEsT0FBT0ksU0FBUyxXQUFXSixRQUFRSSxPQUFPO2dCQUFDWixXQUFXUSxPQUFPTjtnQkFBY1U7YUFBSztRQUMxRixPQUFPO1lBQ0xKLE1BQU1LLElBQUksQ0FBQyxPQUFPRCxTQUFTLFdBQVdaLFdBQVdZLE1BQU1WLGVBQWVVO1FBQ3hFO0lBQ0Y7SUFFQSxLQUFLLE1BQU1FLFFBQVE3QixNQUFPO1FBQ3hCLE1BQU0sQ0FBQzhCLGFBQWFDLFFBQVEsR0FBR0Y7UUFFL0JILE9BQU8sQ0FBQyxFQUFFLEVBQUVGLEtBQUtDLFNBQVMsQ0FBQ0ssYUFBYSxFQUFFLENBQUM7UUFFM0MsSUFBSSxPQUFPQyxZQUFZLFlBQVlBLG1CQUFtQkMsWUFBWTtZQUNoRU4sT0FBT0s7UUFDVCxPQUFPO1lBQ0wsSUFBSUU7WUFDSixJQUFJO2dCQUNGQSxxQkFBcUJULEtBQUtDLFNBQVMsQ0FBQ007WUFDdEMsRUFBRSxPQUFPRyxHQUFHO2dCQUNWLHVHQUF1RztnQkFDdkcseUdBQXlHO2dCQUN6RyxpRkFBaUY7Z0JBQ2pGRCxxQkFBcUJULEtBQUtDLFNBQVMsQ0FBQzdCLHdEQUFTQSxDQUFDbUM7WUFDaEQ7WUFDQUwsT0FBT087UUFDVDtJQUNGO0lBRUEsT0FBTyxPQUFPVixVQUFVLFdBQVdBLFFBQVFZLGNBQWNaO0FBQzNEO0FBRUEsU0FBU1ksY0FBY0MsT0FBTztJQUM1QixNQUFNQyxjQUFjRCxRQUFRRSxNQUFNLENBQUMsQ0FBQ0MsS0FBS0MsTUFBUUQsTUFBTUMsSUFBSUMsTUFBTSxFQUFFO0lBRW5FLE1BQU1DLFNBQVMsSUFBSVYsV0FBV0s7SUFDOUIsSUFBSU0sU0FBUztJQUNiLEtBQUssTUFBTUMsVUFBVVIsUUFBUztRQUM1Qk0sT0FBT0csR0FBRyxDQUFDRCxRQUFRRDtRQUNuQkEsVUFBVUMsT0FBT0gsTUFBTTtJQUN6QjtJQUVBLE9BQU9DO0FBQ1Q7QUFFQTs7Q0FFQyxHQUNELFNBQVNJLGNBQ1BDLEdBQUcsRUFDSDlCLFdBQVcsRUFDWCtCLFdBQVc7SUFFWCxJQUFJSixTQUFTLE9BQU9HLFFBQVEsV0FBVzlCLFlBQVlHLE1BQU0sQ0FBQzJCLE9BQU9BO0lBRWpFLFNBQVNFLFdBQVdSLE1BQU07UUFDeEIsTUFBTVMsTUFBTU4sT0FBT08sUUFBUSxDQUFDLEdBQUdWO1FBQy9CLHdFQUF3RTtRQUN4RUcsU0FBU0EsT0FBT08sUUFBUSxDQUFDVixTQUFTO1FBQ2xDLE9BQU9TO0lBQ1Q7SUFFQSxTQUFTRTtRQUNQLElBQUlDLElBQUlULE9BQU9VLE9BQU8sQ0FBQztRQUN2QiwwRUFBMEU7UUFDMUUsSUFBSUQsSUFBSSxHQUFHO1lBQ1RBLElBQUlULE9BQU9ILE1BQU07UUFDbkI7UUFFQSxPQUFPakIsS0FBSytCLEtBQUssQ0FBQ1AsWUFBWVEsTUFBTSxDQUFDUCxXQUFXSTtJQUNsRDtJQUVBLE1BQU1JLGlCQUFpQkw7SUFDdkIsOERBQThEO0lBQzlELE1BQU1wRCxRQUFRLEVBQUU7SUFFaEIsTUFBTzRDLE9BQU9ILE1BQU0sQ0FBRTtRQUNwQixNQUFNaUIsYUFBYU47UUFDbkIsTUFBTU8sZUFBZSxPQUFPRCxXQUFXakIsTUFBTSxLQUFLLFdBQVdpQixXQUFXakIsTUFBTSxHQUFHbUI7UUFFakY1RCxNQUFNNEIsSUFBSSxDQUFDO1lBQUM4QjtZQUFZQyxlQUFlVixXQUFXVSxnQkFBZ0JQO1NBQVc7SUFDL0U7SUFFQSxPQUFPO1FBQUNLO1FBQWdCekQ7S0FBTTtBQUNoQztBQUVBOztDQUVDLEdBQ0QsU0FBUzZELDZCQUNQQyxVQUFVLEVBQ1Y3QyxXQUFXO0lBRVgsTUFBTTJCLFNBQVMsT0FBT2tCLFdBQVdDLElBQUksS0FBSyxXQUFXaEQsV0FBVytDLFdBQVdDLElBQUksRUFBRTlDLGVBQWU2QyxXQUFXQyxJQUFJO0lBRS9HLE9BQU87UUFDTGxFLDZEQUFpQkEsQ0FBQztZQUNoQlksTUFBTTtZQUNOZ0MsUUFBUUcsT0FBT0gsTUFBTTtZQUNyQnVCLFVBQVVGLFdBQVdFLFFBQVE7WUFDN0JDLGNBQWNILFdBQVdJLFdBQVc7WUFDcENDLGlCQUFpQkwsV0FBV00sY0FBYztRQUM1QztRQUNBeEI7S0FDRDtBQUNIO0FBRUEsTUFBTXlCLGlDQUFpQztJQUNyQ0MsU0FBUztJQUNUQyxVQUFVO0lBQ1ZULFlBQVk7SUFDWlUsYUFBYTtJQUNiQyxPQUFPO0lBQ1BDLGVBQWU7SUFDZkMsYUFBYTtJQUNiQyxTQUFTO0lBQ1RDLGNBQWM7SUFDZEMsa0JBQWtCO0lBQ2xCQyxVQUFVO0lBQ1ZDLFVBQVU7SUFDVix3RkFBd0Y7SUFDeEZDLFFBQVE7QUFDVjtBQUVBOztDQUVDLEdBQ0QsU0FBU0MsK0JBQStCekUsSUFBSTtJQUMxQyxPQUFPNEQsOEJBQThCLENBQUM1RCxLQUFLO0FBQzdDO0FBRUEsc0VBQXNFLEdBQ3RFLFNBQVMwRSxnQ0FBZ0NDLGVBQWU7SUFDdEQsSUFBSSxDQUFDQSxtQkFBbUIsQ0FBQ0EsZ0JBQWdCQyxHQUFHLEVBQUU7UUFDNUM7SUFDRjtJQUNBLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxPQUFPLEVBQUUsR0FBR0gsZ0JBQWdCQyxHQUFHO0lBQzdDLE9BQU87UUFBRUM7UUFBTUM7SUFBUTtBQUN6QjtBQUVBOzs7Q0FHQyxHQUNELFNBQVNDLDJCQUNQZixLQUFLLEVBQ0xnQixPQUFPLEVBQ1BDLE1BQU0sRUFDTkMsR0FBRztJQUVILE1BQU1DLHlCQUF5Qm5CLE1BQU1vQixxQkFBcUIsSUFBSXBCLE1BQU1vQixxQkFBcUIsQ0FBQ0Qsc0JBQXNCO0lBQ2hILE9BQU87UUFDTEUsVUFBVXJCLE1BQU1xQixRQUFRO1FBQ3hCQyxTQUFTLElBQUlDLE9BQU9DLFdBQVc7UUFDL0IsR0FBSVIsV0FBVztZQUFFSixLQUFLSTtRQUFRLENBQUM7UUFDL0IsR0FBSSxDQUFDLENBQUNDLFVBQVVDLE9BQU87WUFBRUEsS0FBS2hHLG9EQUFXQSxDQUFDZ0c7UUFBSyxDQUFDO1FBQ2hELEdBQUlDLDBCQUEwQjtZQUM1Qk0sT0FBT3JHLDZEQUFpQkEsQ0FBQztnQkFBRSxHQUFHK0Ysc0JBQXNCO1lBQUM7UUFDdkQsQ0FBQztJQUNIO0FBQ0Y7QUFFeVAsQ0FDelAsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vZW52ZWxvcGUuanM/Y2Y0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkc25Ub1N0cmluZyB9IGZyb20gJy4vZHNuLmpzJztcbmltcG9ydCB7IG5vcm1hbGl6ZSB9IGZyb20gJy4vbm9ybWFsaXplLmpzJztcbmltcG9ydCB7IGRyb3BVbmRlZmluZWRLZXlzIH0gZnJvbSAnLi9vYmplY3QuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gZW52ZWxvcGUuXG4gKiBNYWtlIHN1cmUgdG8gYWx3YXlzIGV4cGxpY2l0bHkgcHJvdmlkZSB0aGUgZ2VuZXJpYyB0byB0aGlzIGZ1bmN0aW9uXG4gKiBzbyB0aGF0IHRoZSBlbnZlbG9wZSB0eXBlcyByZXNvbHZlIGNvcnJlY3RseS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRW52ZWxvcGUoaGVhZGVycywgaXRlbXMgPSBbXSkge1xuICByZXR1cm4gW2hlYWRlcnMsIGl0ZW1zXSA7XG59XG5cbi8qKlxuICogQWRkIGFuIGl0ZW0gdG8gYW4gZW52ZWxvcGUuXG4gKiBNYWtlIHN1cmUgdG8gYWx3YXlzIGV4cGxpY2l0bHkgcHJvdmlkZSB0aGUgZ2VuZXJpYyB0byB0aGlzIGZ1bmN0aW9uXG4gKiBzbyB0aGF0IHRoZSBlbnZlbG9wZSB0eXBlcyByZXNvbHZlIGNvcnJlY3RseS5cbiAqL1xuZnVuY3Rpb24gYWRkSXRlbVRvRW52ZWxvcGUoZW52ZWxvcGUsIG5ld0l0ZW0pIHtcbiAgY29uc3QgW2hlYWRlcnMsIGl0ZW1zXSA9IGVudmVsb3BlO1xuICByZXR1cm4gW2hlYWRlcnMsIFsuLi5pdGVtcywgbmV3SXRlbV1dIDtcbn1cblxuLyoqXG4gKiBDb252ZW5pZW5jZSBmdW5jdGlvbiB0byBsb29wIHRocm91Z2ggdGhlIGl0ZW1zIGFuZCBpdGVtIHR5cGVzIG9mIGFuIGVudmVsb3BlLlxuICogKFRoaXMgZnVuY3Rpb24gd2FzIG1vc3RseSBjcmVhdGVkIGJlY2F1c2Ugd29ya2luZyB3aXRoIGVudmVsb3BlIHR5cGVzIGlzIHBhaW5mdWwgYXQgdGhlIG1vbWVudClcbiAqXG4gKiBJZiB0aGUgY2FsbGJhY2sgcmV0dXJucyB0cnVlLCB0aGUgcmVzdCBvZiB0aGUgaXRlbXMgd2lsbCBiZSBza2lwcGVkLlxuICovXG5mdW5jdGlvbiBmb3JFYWNoRW52ZWxvcGVJdGVtKFxuICBlbnZlbG9wZSxcbiAgY2FsbGJhY2ssXG4pIHtcbiAgY29uc3QgZW52ZWxvcGVJdGVtcyA9IGVudmVsb3BlWzFdO1xuXG4gIGZvciAoY29uc3QgZW52ZWxvcGVJdGVtIG9mIGVudmVsb3BlSXRlbXMpIHtcbiAgICBjb25zdCBlbnZlbG9wZUl0ZW1UeXBlID0gZW52ZWxvcGVJdGVtWzBdLnR5cGU7XG4gICAgY29uc3QgcmVzdWx0ID0gY2FsbGJhY2soZW52ZWxvcGVJdGVtLCBlbnZlbG9wZUl0ZW1UeXBlKTtcblxuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGVudmVsb3BlIGNvbnRhaW5zIGFueSBvZiB0aGUgZ2l2ZW4gZW52ZWxvcGUgaXRlbSB0eXBlc1xuICovXG5mdW5jdGlvbiBlbnZlbG9wZUNvbnRhaW5zSXRlbVR5cGUoZW52ZWxvcGUsIHR5cGVzKSB7XG4gIHJldHVybiBmb3JFYWNoRW52ZWxvcGVJdGVtKGVudmVsb3BlLCAoXywgdHlwZSkgPT4gdHlwZXMuaW5jbHVkZXModHlwZSkpO1xufVxuXG4vKipcbiAqIEVuY29kZSBhIHN0cmluZyB0byBVVEY4LlxuICovXG5mdW5jdGlvbiBlbmNvZGVVVEY4KGlucHV0LCB0ZXh0RW5jb2Rlcikge1xuICBjb25zdCB1dGY4ID0gdGV4dEVuY29kZXIgfHwgbmV3IFRleHRFbmNvZGVyKCk7XG4gIHJldHVybiB1dGY4LmVuY29kZShpbnB1dCk7XG59XG5cbi8qKlxuICogU2VyaWFsaXplcyBhbiBlbnZlbG9wZS5cbiAqL1xuZnVuY3Rpb24gc2VyaWFsaXplRW52ZWxvcGUoZW52ZWxvcGUsIHRleHRFbmNvZGVyKSB7XG4gIGNvbnN0IFtlbnZIZWFkZXJzLCBpdGVtc10gPSBlbnZlbG9wZTtcblxuICAvLyBJbml0aWFsbHkgd2UgY29uc3RydWN0IG91ciBlbnZlbG9wZSBhcyBhIHN0cmluZyBhbmQgb25seSBjb252ZXJ0IHRvIGJpbmFyeSBjaHVua3MgaWYgd2UgZW5jb3VudGVyIGJpbmFyeSBkYXRhXG4gIGxldCBwYXJ0cyA9IEpTT04uc3RyaW5naWZ5KGVudkhlYWRlcnMpO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZChuZXh0KSB7XG4gICAgaWYgKHR5cGVvZiBwYXJ0cyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHBhcnRzID0gdHlwZW9mIG5leHQgPT09ICdzdHJpbmcnID8gcGFydHMgKyBuZXh0IDogW2VuY29kZVVURjgocGFydHMsIHRleHRFbmNvZGVyKSwgbmV4dF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnRzLnB1c2godHlwZW9mIG5leHQgPT09ICdzdHJpbmcnID8gZW5jb2RlVVRGOChuZXh0LCB0ZXh0RW5jb2RlcikgOiBuZXh0KTtcbiAgICB9XG4gIH1cblxuICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICBjb25zdCBbaXRlbUhlYWRlcnMsIHBheWxvYWRdID0gaXRlbTtcblxuICAgIGFwcGVuZChgXFxuJHtKU09OLnN0cmluZ2lmeShpdGVtSGVhZGVycyl9XFxuYCk7XG5cbiAgICBpZiAodHlwZW9mIHBheWxvYWQgPT09ICdzdHJpbmcnIHx8IHBheWxvYWQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICBhcHBlbmQocGF5bG9hZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBzdHJpbmdpZmllZFBheWxvYWQ7XG4gICAgICB0cnkge1xuICAgICAgICBzdHJpbmdpZmllZFBheWxvYWQgPSBKU09OLnN0cmluZ2lmeShwYXlsb2FkKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gSW4gY2FzZSwgZGVzcGl0ZSBhbGwgb3VyIGVmZm9ydHMgdG8ga2VlcCBgcGF5bG9hZGAgY2lyY3VsYXItZGVwZW5kZW5jeS1mcmVlLCBgSlNPTi5zdHJpbmlmeSgpYCBzdGlsbFxuICAgICAgICAvLyBmYWlscywgd2UgdHJ5IGFnYWluIGFmdGVyIG5vcm1hbGl6aW5nIGl0IGFnYWluIHdpdGggaW5maW5pdGUgbm9ybWFsaXphdGlvbiBkZXB0aC4gVGhpcyBvZiBjb3Vyc2UgaGFzIGFcbiAgICAgICAgLy8gcGVyZm9ybWFuY2UgaW1wYWN0IGJ1dCBpbiB0aGlzIGNhc2UgYSBwZXJmb3JtYW5jZSBoaXQgaXMgYmV0dGVyIHRoYW4gdGhyb3dpbmcuXG4gICAgICAgIHN0cmluZ2lmaWVkUGF5bG9hZCA9IEpTT04uc3RyaW5naWZ5KG5vcm1hbGl6ZShwYXlsb2FkKSk7XG4gICAgICB9XG4gICAgICBhcHBlbmQoc3RyaW5naWZpZWRQYXlsb2FkKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHlwZW9mIHBhcnRzID09PSAnc3RyaW5nJyA/IHBhcnRzIDogY29uY2F0QnVmZmVycyhwYXJ0cyk7XG59XG5cbmZ1bmN0aW9uIGNvbmNhdEJ1ZmZlcnMoYnVmZmVycykge1xuICBjb25zdCB0b3RhbExlbmd0aCA9IGJ1ZmZlcnMucmVkdWNlKChhY2MsIGJ1ZikgPT4gYWNjICsgYnVmLmxlbmd0aCwgMCk7XG5cbiAgY29uc3QgbWVyZ2VkID0gbmV3IFVpbnQ4QXJyYXkodG90YWxMZW5ndGgpO1xuICBsZXQgb2Zmc2V0ID0gMDtcbiAgZm9yIChjb25zdCBidWZmZXIgb2YgYnVmZmVycykge1xuICAgIG1lcmdlZC5zZXQoYnVmZmVyLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSBidWZmZXIubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIG1lcmdlZDtcbn1cblxuLyoqXG4gKiBQYXJzZXMgYW4gZW52ZWxvcGVcbiAqL1xuZnVuY3Rpb24gcGFyc2VFbnZlbG9wZShcbiAgZW52LFxuICB0ZXh0RW5jb2RlcixcbiAgdGV4dERlY29kZXIsXG4pIHtcbiAgbGV0IGJ1ZmZlciA9IHR5cGVvZiBlbnYgPT09ICdzdHJpbmcnID8gdGV4dEVuY29kZXIuZW5jb2RlKGVudikgOiBlbnY7XG5cbiAgZnVuY3Rpb24gcmVhZEJpbmFyeShsZW5ndGgpIHtcbiAgICBjb25zdCBiaW4gPSBidWZmZXIuc3ViYXJyYXkoMCwgbGVuZ3RoKTtcbiAgICAvLyBSZXBsYWNlIHRoZSBidWZmZXIgd2l0aCB0aGUgcmVtYWluaW5nIGRhdGEgZXhjbHVkaW5nIHRyYWlsaW5nIG5ld2xpbmVcbiAgICBidWZmZXIgPSBidWZmZXIuc3ViYXJyYXkobGVuZ3RoICsgMSk7XG4gICAgcmV0dXJuIGJpbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRKc29uKCkge1xuICAgIGxldCBpID0gYnVmZmVyLmluZGV4T2YoMHhhKTtcbiAgICAvLyBJZiB3ZSBjb3VsZG4ndCBmaW5kIGEgbmV3bGluZSwgd2UgbXVzdCBoYXZlIGZvdW5kIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICAgIGlmIChpIDwgMCkge1xuICAgICAgaSA9IGJ1ZmZlci5sZW5ndGg7XG4gICAgfVxuXG4gICAgcmV0dXJuIEpTT04ucGFyc2UodGV4dERlY29kZXIuZGVjb2RlKHJlYWRCaW5hcnkoaSkpKSA7XG4gIH1cblxuICBjb25zdCBlbnZlbG9wZUhlYWRlciA9IHJlYWRKc29uKCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIGNvbnN0IGl0ZW1zID0gW107XG5cbiAgd2hpbGUgKGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBjb25zdCBpdGVtSGVhZGVyID0gcmVhZEpzb24oKTtcbiAgICBjb25zdCBiaW5hcnlMZW5ndGggPSB0eXBlb2YgaXRlbUhlYWRlci5sZW5ndGggPT09ICdudW1iZXInID8gaXRlbUhlYWRlci5sZW5ndGggOiB1bmRlZmluZWQ7XG5cbiAgICBpdGVtcy5wdXNoKFtpdGVtSGVhZGVyLCBiaW5hcnlMZW5ndGggPyByZWFkQmluYXJ5KGJpbmFyeUxlbmd0aCkgOiByZWFkSnNvbigpXSk7XG4gIH1cblxuICByZXR1cm4gW2VudmVsb3BlSGVhZGVyLCBpdGVtc107XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhdHRhY2htZW50IGVudmVsb3BlIGl0ZW1zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUF0dGFjaG1lbnRFbnZlbG9wZUl0ZW0oXG4gIGF0dGFjaG1lbnQsXG4gIHRleHRFbmNvZGVyLFxuKSB7XG4gIGNvbnN0IGJ1ZmZlciA9IHR5cGVvZiBhdHRhY2htZW50LmRhdGEgPT09ICdzdHJpbmcnID8gZW5jb2RlVVRGOChhdHRhY2htZW50LmRhdGEsIHRleHRFbmNvZGVyKSA6IGF0dGFjaG1lbnQuZGF0YTtcblxuICByZXR1cm4gW1xuICAgIGRyb3BVbmRlZmluZWRLZXlzKHtcbiAgICAgIHR5cGU6ICdhdHRhY2htZW50JyxcbiAgICAgIGxlbmd0aDogYnVmZmVyLmxlbmd0aCxcbiAgICAgIGZpbGVuYW1lOiBhdHRhY2htZW50LmZpbGVuYW1lLFxuICAgICAgY29udGVudF90eXBlOiBhdHRhY2htZW50LmNvbnRlbnRUeXBlLFxuICAgICAgYXR0YWNobWVudF90eXBlOiBhdHRhY2htZW50LmF0dGFjaG1lbnRUeXBlLFxuICAgIH0pLFxuICAgIGJ1ZmZlcixcbiAgXTtcbn1cblxuY29uc3QgSVRFTV9UWVBFX1RPX0RBVEFfQ0FURUdPUllfTUFQID0ge1xuICBzZXNzaW9uOiAnc2Vzc2lvbicsXG4gIHNlc3Npb25zOiAnc2Vzc2lvbicsXG4gIGF0dGFjaG1lbnQ6ICdhdHRhY2htZW50JyxcbiAgdHJhbnNhY3Rpb246ICd0cmFuc2FjdGlvbicsXG4gIGV2ZW50OiAnZXJyb3InLFxuICBjbGllbnRfcmVwb3J0OiAnaW50ZXJuYWwnLFxuICB1c2VyX3JlcG9ydDogJ2RlZmF1bHQnLFxuICBwcm9maWxlOiAncHJvZmlsZScsXG4gIHJlcGxheV9ldmVudDogJ3JlcGxheScsXG4gIHJlcGxheV9yZWNvcmRpbmc6ICdyZXBsYXknLFxuICBjaGVja19pbjogJ21vbml0b3InLFxuICBmZWVkYmFjazogJ2ZlZWRiYWNrJyxcbiAgLy8gVE9ETzogVGhpcyBpcyBhIHRlbXBvcmFyeSB3b3JrYXJvdW5kIHVudGlsIHdlIGhhdmUgYSBwcm9wZXIgZGF0YSBjYXRlZ29yeSBmb3IgbWV0cmljc1xuICBzdGF0c2Q6ICd1bmtub3duJyxcbn07XG5cbi8qKlxuICogTWFwcyB0aGUgdHlwZSBvZiBhbiBlbnZlbG9wZSBpdGVtIHRvIGEgZGF0YSBjYXRlZ29yeS5cbiAqL1xuZnVuY3Rpb24gZW52ZWxvcGVJdGVtVHlwZVRvRGF0YUNhdGVnb3J5KHR5cGUpIHtcbiAgcmV0dXJuIElURU1fVFlQRV9UT19EQVRBX0NBVEVHT1JZX01BUFt0eXBlXTtcbn1cblxuLyoqIEV4dHJhY3RzIHRoZSBtaW5pbWFsIFNESyBpbmZvIGZyb20gZnJvbSB0aGUgbWV0YWRhdGEgb3IgYW4gZXZlbnRzICovXG5mdW5jdGlvbiBnZXRTZGtNZXRhZGF0YUZvckVudmVsb3BlSGVhZGVyKG1ldGFkYXRhT3JFdmVudCkge1xuICBpZiAoIW1ldGFkYXRhT3JFdmVudCB8fCAhbWV0YWRhdGFPckV2ZW50LnNkaykge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB7IG5hbWUsIHZlcnNpb24gfSA9IG1ldGFkYXRhT3JFdmVudC5zZGs7XG4gIHJldHVybiB7IG5hbWUsIHZlcnNpb24gfTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGV2ZW50IGVudmVsb3BlIGhlYWRlcnMsIGJhc2VkIG9uIGV2ZW50LCBzZGsgaW5mbyBhbmQgdHVubmVsXG4gKiBOb3RlOiBUaGlzIGZ1bmN0aW9uIHdhcyBleHRyYWN0ZWQgZnJvbSB0aGUgY29yZSBwYWNrYWdlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIGluIFJlcGxheVxuICovXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVudmVsb3BlSGVhZGVycyhcbiAgZXZlbnQsXG4gIHNka0luZm8sXG4gIHR1bm5lbCxcbiAgZHNuLFxuKSB7XG4gIGNvbnN0IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgPSBldmVudC5zZGtQcm9jZXNzaW5nTWV0YWRhdGEgJiYgZXZlbnQuc2RrUHJvY2Vzc2luZ01ldGFkYXRhLmR5bmFtaWNTYW1wbGluZ0NvbnRleHQ7XG4gIHJldHVybiB7XG4gICAgZXZlbnRfaWQ6IGV2ZW50LmV2ZW50X2lkICxcbiAgICBzZW50X2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgLi4uKHNka0luZm8gJiYgeyBzZGs6IHNka0luZm8gfSksXG4gICAgLi4uKCEhdHVubmVsICYmIGRzbiAmJiB7IGRzbjogZHNuVG9TdHJpbmcoZHNuKSB9KSxcbiAgICAuLi4oZHluYW1pY1NhbXBsaW5nQ29udGV4dCAmJiB7XG4gICAgICB0cmFjZTogZHJvcFVuZGVmaW5lZEtleXMoeyAuLi5keW5hbWljU2FtcGxpbmdDb250ZXh0IH0pLFxuICAgIH0pLFxuICB9O1xufVxuXG5leHBvcnQgeyBhZGRJdGVtVG9FbnZlbG9wZSwgY3JlYXRlQXR0YWNobWVudEVudmVsb3BlSXRlbSwgY3JlYXRlRW52ZWxvcGUsIGNyZWF0ZUV2ZW50RW52ZWxvcGVIZWFkZXJzLCBlbnZlbG9wZUNvbnRhaW5zSXRlbVR5cGUsIGVudmVsb3BlSXRlbVR5cGVUb0RhdGFDYXRlZ29yeSwgZm9yRWFjaEVudmVsb3BlSXRlbSwgZ2V0U2RrTWV0YWRhdGFGb3JFbnZlbG9wZUhlYWRlciwgcGFyc2VFbnZlbG9wZSwgc2VyaWFsaXplRW52ZWxvcGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudmVsb3BlLmpzLm1hcFxuIl0sIm5hbWVzIjpbImRzblRvU3RyaW5nIiwibm9ybWFsaXplIiwiZHJvcFVuZGVmaW5lZEtleXMiLCJjcmVhdGVFbnZlbG9wZSIsImhlYWRlcnMiLCJpdGVtcyIsImFkZEl0ZW1Ub0VudmVsb3BlIiwiZW52ZWxvcGUiLCJuZXdJdGVtIiwiZm9yRWFjaEVudmVsb3BlSXRlbSIsImNhbGxiYWNrIiwiZW52ZWxvcGVJdGVtcyIsImVudmVsb3BlSXRlbSIsImVudmVsb3BlSXRlbVR5cGUiLCJ0eXBlIiwicmVzdWx0IiwiZW52ZWxvcGVDb250YWluc0l0ZW1UeXBlIiwidHlwZXMiLCJfIiwiaW5jbHVkZXMiLCJlbmNvZGVVVEY4IiwiaW5wdXQiLCJ0ZXh0RW5jb2RlciIsInV0ZjgiLCJUZXh0RW5jb2RlciIsImVuY29kZSIsInNlcmlhbGl6ZUVudmVsb3BlIiwiZW52SGVhZGVycyIsInBhcnRzIiwiSlNPTiIsInN0cmluZ2lmeSIsImFwcGVuZCIsIm5leHQiLCJwdXNoIiwiaXRlbSIsIml0ZW1IZWFkZXJzIiwicGF5bG9hZCIsIlVpbnQ4QXJyYXkiLCJzdHJpbmdpZmllZFBheWxvYWQiLCJlIiwiY29uY2F0QnVmZmVycyIsImJ1ZmZlcnMiLCJ0b3RhbExlbmd0aCIsInJlZHVjZSIsImFjYyIsImJ1ZiIsImxlbmd0aCIsIm1lcmdlZCIsIm9mZnNldCIsImJ1ZmZlciIsInNldCIsInBhcnNlRW52ZWxvcGUiLCJlbnYiLCJ0ZXh0RGVjb2RlciIsInJlYWRCaW5hcnkiLCJiaW4iLCJzdWJhcnJheSIsInJlYWRKc29uIiwiaSIsImluZGV4T2YiLCJwYXJzZSIsImRlY29kZSIsImVudmVsb3BlSGVhZGVyIiwiaXRlbUhlYWRlciIsImJpbmFyeUxlbmd0aCIsInVuZGVmaW5lZCIsImNyZWF0ZUF0dGFjaG1lbnRFbnZlbG9wZUl0ZW0iLCJhdHRhY2htZW50IiwiZGF0YSIsImZpbGVuYW1lIiwiY29udGVudF90eXBlIiwiY29udGVudFR5cGUiLCJhdHRhY2htZW50X3R5cGUiLCJhdHRhY2htZW50VHlwZSIsIklURU1fVFlQRV9UT19EQVRBX0NBVEVHT1JZX01BUCIsInNlc3Npb24iLCJzZXNzaW9ucyIsInRyYW5zYWN0aW9uIiwiZXZlbnQiLCJjbGllbnRfcmVwb3J0IiwidXNlcl9yZXBvcnQiLCJwcm9maWxlIiwicmVwbGF5X2V2ZW50IiwicmVwbGF5X3JlY29yZGluZyIsImNoZWNrX2luIiwiZmVlZGJhY2siLCJzdGF0c2QiLCJlbnZlbG9wZUl0ZW1UeXBlVG9EYXRhQ2F0ZWdvcnkiLCJnZXRTZGtNZXRhZGF0YUZvckVudmVsb3BlSGVhZGVyIiwibWV0YWRhdGFPckV2ZW50Iiwic2RrIiwibmFtZSIsInZlcnNpb24iLCJjcmVhdGVFdmVudEVudmVsb3BlSGVhZGVycyIsInNka0luZm8iLCJ0dW5uZWwiLCJkc24iLCJkeW5hbWljU2FtcGxpbmdDb250ZXh0Iiwic2RrUHJvY2Vzc2luZ01ldGFkYXRhIiwiZXZlbnRfaWQiLCJzZW50X2F0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwidHJhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/envelope.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/instrument/_handlers.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/instrument/_handlers.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addHandler: () => (/* binding */ addHandler),\n/* harmony export */   maybeInstrument: () => (/* binding */ maybeInstrument),\n/* harmony export */   resetInstrumentationHandlers: () => (/* binding */ resetInstrumentationHandlers),\n/* harmony export */   triggerHandlers: () => (/* binding */ triggerHandlers)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/debug-build.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../logger.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _stacktrace_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../stacktrace.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/stacktrace.js\");\n\n\n\n// We keep the handlers globally\nconst handlers = {};\nconst instrumented = {};\n/** Add a handler function. */ function addHandler(type, handler) {\n    handlers[type] = handlers[type] || [];\n    handlers[type].push(handler);\n}\n/**\n * Reset all instrumentation handlers.\n * This can be used by tests to ensure we have a clean slate of instrumentation handlers.\n */ function resetInstrumentationHandlers() {\n    Object.keys(handlers).forEach((key)=>{\n        handlers[key] = undefined;\n    });\n}\n/** Maybe run an instrumentation function, unless it was already called. */ function maybeInstrument(type, instrumentFn) {\n    if (!instrumented[type]) {\n        instrumentFn();\n        instrumented[type] = true;\n    }\n}\n/** Trigger handlers for a given instrumentation type. */ function triggerHandlers(type, data) {\n    const typeHandlers = type && handlers[type];\n    if (!typeHandlers) {\n        return;\n    }\n    for (const handler of typeHandlers){\n        try {\n            handler(data);\n        } catch (e) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.error(`Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${(0,_stacktrace_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(handler)}\\nError:`, e);\n        }\n    }\n}\n //# sourceMappingURL=_handlers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9pbnN0cnVtZW50L19oYW5kbGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQWdEO0FBQ1Y7QUFDYTtBQUVuRCxnQ0FBZ0M7QUFDaEMsTUFBTUcsV0FBVyxDQUFDO0FBQ2xCLE1BQU1DLGVBQWUsQ0FBQztBQUV0Qiw0QkFBNEIsR0FDNUIsU0FBU0MsV0FBV0MsSUFBSSxFQUFFQyxPQUFPO0lBQy9CSixRQUFRLENBQUNHLEtBQUssR0FBR0gsUUFBUSxDQUFDRyxLQUFLLElBQUksRUFBRTtJQUNwQ0gsUUFBUSxDQUFDRyxLQUFLLENBQUdFLElBQUksQ0FBQ0Q7QUFDekI7QUFFQTs7O0NBR0MsR0FDRCxTQUFTRTtJQUNQQyxPQUFPQyxJQUFJLENBQUNSLFVBQVVTLE9BQU8sQ0FBQ0MsQ0FBQUE7UUFDNUJWLFFBQVEsQ0FBQ1UsSUFBSyxHQUFHQztJQUNuQjtBQUNGO0FBRUEseUVBQXlFLEdBQ3pFLFNBQVNDLGdCQUFnQlQsSUFBSSxFQUFFVSxZQUFZO0lBQ3pDLElBQUksQ0FBQ1osWUFBWSxDQUFDRSxLQUFLLEVBQUU7UUFDdkJVO1FBQ0FaLFlBQVksQ0FBQ0UsS0FBSyxHQUFHO0lBQ3ZCO0FBQ0Y7QUFFQSx1REFBdUQsR0FDdkQsU0FBU1csZ0JBQWdCWCxJQUFJLEVBQUVZLElBQUk7SUFDakMsTUFBTUMsZUFBZWIsUUFBUUgsUUFBUSxDQUFDRyxLQUFLO0lBQzNDLElBQUksQ0FBQ2EsY0FBYztRQUNqQjtJQUNGO0lBRUEsS0FBSyxNQUFNWixXQUFXWSxhQUFjO1FBQ2xDLElBQUk7WUFDRlosUUFBUVc7UUFDVixFQUFFLE9BQU9FLEdBQUc7WUFDVnBCLHdEQUFXQSxJQUNUQyw4Q0FBTUEsQ0FBQ29CLEtBQUssQ0FDVixDQUFDLHVEQUF1RCxFQUFFZixLQUFLLFFBQVEsRUFBRUosK0RBQWVBLENBQUNLLFNBQVMsUUFBUSxDQUFDLEVBQzNHYTtRQUVOO0lBQ0Y7QUFDRjtBQUVzRixDQUN0RixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9pbnN0cnVtZW50L19oYW5kbGVycy5qcz8wMzE1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERFQlVHX0JVSUxEIH0gZnJvbSAnLi4vZGVidWctYnVpbGQuanMnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi4vbG9nZ2VyLmpzJztcbmltcG9ydCB7IGdldEZ1bmN0aW9uTmFtZSB9IGZyb20gJy4uL3N0YWNrdHJhY2UuanMnO1xuXG4vLyBXZSBrZWVwIHRoZSBoYW5kbGVycyBnbG9iYWxseVxuY29uc3QgaGFuZGxlcnMgPSB7fTtcbmNvbnN0IGluc3RydW1lbnRlZCA9IHt9O1xuXG4vKiogQWRkIGEgaGFuZGxlciBmdW5jdGlvbi4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZXIodHlwZSwgaGFuZGxlcikge1xuICBoYW5kbGVyc1t0eXBlXSA9IGhhbmRsZXJzW3R5cGVdIHx8IFtdO1xuICAoaGFuZGxlcnNbdHlwZV0gKS5wdXNoKGhhbmRsZXIpO1xufVxuXG4vKipcbiAqIFJlc2V0IGFsbCBpbnN0cnVtZW50YXRpb24gaGFuZGxlcnMuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIGJ5IHRlc3RzIHRvIGVuc3VyZSB3ZSBoYXZlIGEgY2xlYW4gc2xhdGUgb2YgaW5zdHJ1bWVudGF0aW9uIGhhbmRsZXJzLlxuICovXG5mdW5jdGlvbiByZXNldEluc3RydW1lbnRhdGlvbkhhbmRsZXJzKCkge1xuICBPYmplY3Qua2V5cyhoYW5kbGVycykuZm9yRWFjaChrZXkgPT4ge1xuICAgIGhhbmRsZXJzW2tleSBdID0gdW5kZWZpbmVkO1xuICB9KTtcbn1cblxuLyoqIE1heWJlIHJ1biBhbiBpbnN0cnVtZW50YXRpb24gZnVuY3Rpb24sIHVubGVzcyBpdCB3YXMgYWxyZWFkeSBjYWxsZWQuICovXG5mdW5jdGlvbiBtYXliZUluc3RydW1lbnQodHlwZSwgaW5zdHJ1bWVudEZuKSB7XG4gIGlmICghaW5zdHJ1bWVudGVkW3R5cGVdKSB7XG4gICAgaW5zdHJ1bWVudEZuKCk7XG4gICAgaW5zdHJ1bWVudGVkW3R5cGVdID0gdHJ1ZTtcbiAgfVxufVxuXG4vKiogVHJpZ2dlciBoYW5kbGVycyBmb3IgYSBnaXZlbiBpbnN0cnVtZW50YXRpb24gdHlwZS4gKi9cbmZ1bmN0aW9uIHRyaWdnZXJIYW5kbGVycyh0eXBlLCBkYXRhKSB7XG4gIGNvbnN0IHR5cGVIYW5kbGVycyA9IHR5cGUgJiYgaGFuZGxlcnNbdHlwZV07XG4gIGlmICghdHlwZUhhbmRsZXJzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZm9yIChjb25zdCBoYW5kbGVyIG9mIHR5cGVIYW5kbGVycykge1xuICAgIHRyeSB7XG4gICAgICBoYW5kbGVyKGRhdGEpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIERFQlVHX0JVSUxEICYmXG4gICAgICAgIGxvZ2dlci5lcnJvcihcbiAgICAgICAgICBgRXJyb3Igd2hpbGUgdHJpZ2dlcmluZyBpbnN0cnVtZW50YXRpb24gaGFuZGxlci5cXG5UeXBlOiAke3R5cGV9XFxuTmFtZTogJHtnZXRGdW5jdGlvbk5hbWUoaGFuZGxlcil9XFxuRXJyb3I6YCxcbiAgICAgICAgICBlLFxuICAgICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBhZGRIYW5kbGVyLCBtYXliZUluc3RydW1lbnQsIHJlc2V0SW5zdHJ1bWVudGF0aW9uSGFuZGxlcnMsIHRyaWdnZXJIYW5kbGVycyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X2hhbmRsZXJzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkRFQlVHX0JVSUxEIiwibG9nZ2VyIiwiZ2V0RnVuY3Rpb25OYW1lIiwiaGFuZGxlcnMiLCJpbnN0cnVtZW50ZWQiLCJhZGRIYW5kbGVyIiwidHlwZSIsImhhbmRsZXIiLCJwdXNoIiwicmVzZXRJbnN0cnVtZW50YXRpb25IYW5kbGVycyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwidW5kZWZpbmVkIiwibWF5YmVJbnN0cnVtZW50IiwiaW5zdHJ1bWVudEZuIiwidHJpZ2dlckhhbmRsZXJzIiwiZGF0YSIsInR5cGVIYW5kbGVycyIsImUiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/instrument/_handlers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/instrument/console.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/instrument/console.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addConsoleInstrumentationHandler: () => (/* binding */ addConsoleInstrumentationHandler)\n/* harmony export */ });\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../logger.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../object.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../worldwide.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/worldwide.js\");\n/* harmony import */ var _handlers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_handlers.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/instrument/_handlers.js\");\n\n\n\n\n/**\n * Add an instrumentation handler for when a console.xxx method is called.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */ function addConsoleInstrumentationHandler(handler) {\n    const type = \"console\";\n    (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.addHandler)(type, handler);\n    (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.maybeInstrument)(type, instrumentConsole);\n}\nfunction instrumentConsole() {\n    if (!(\"console\" in _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ)) {\n        return;\n    }\n    _logger_js__WEBPACK_IMPORTED_MODULE_2__.CONSOLE_LEVELS.forEach(function(level) {\n        if (!(level in _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.console)) {\n            return;\n        }\n        (0,_object_js__WEBPACK_IMPORTED_MODULE_3__.fill)(_worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.console, level, function(originalConsoleMethod) {\n            _logger_js__WEBPACK_IMPORTED_MODULE_2__.originalConsoleMethods[level] = originalConsoleMethod;\n            return function(...args) {\n                const handlerData = {\n                    args,\n                    level\n                };\n                (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)(\"console\", handlerData);\n                const log = _logger_js__WEBPACK_IMPORTED_MODULE_2__.originalConsoleMethods[level];\n                log && log.apply(_worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.console, args);\n            };\n        });\n    });\n}\n //# sourceMappingURL=console.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9pbnN0cnVtZW50L2NvbnNvbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBc0U7QUFDbEM7QUFDUztBQUNpQztBQUU5RTs7Ozs7Q0FLQyxHQUNELFNBQVNPLGlDQUFpQ0MsT0FBTztJQUMvQyxNQUFNQyxPQUFPO0lBQ2JMLHdEQUFVQSxDQUFDSyxNQUFNRDtJQUNqQkgsNkRBQWVBLENBQUNJLE1BQU1DO0FBQ3hCO0FBRUEsU0FBU0E7SUFDUCxJQUFJLENBQUUsbUVBQXNCLEdBQUk7UUFDOUI7SUFDRjtJQUVBVixzREFBY0EsQ0FBQ1csT0FBTyxDQUFDLFNBQVVDLEtBQUs7UUFDcEMsSUFBSSxDQUFFQSxDQUFBQSxTQUFTVCxxREFBVUEsQ0FBQ1UsT0FBTyxHQUFHO1lBQ2xDO1FBQ0Y7UUFFQVgsZ0RBQUlBLENBQUNDLHFEQUFVQSxDQUFDVSxPQUFPLEVBQUVELE9BQU8sU0FBVUUscUJBQXFCO1lBQzdEYiw4REFBc0IsQ0FBQ1csTUFBTSxHQUFHRTtZQUVoQyxPQUFPLFNBQVUsR0FBR0MsSUFBSTtnQkFDdEIsTUFBTUMsY0FBYztvQkFBRUQ7b0JBQU1IO2dCQUFNO2dCQUNsQ04sNkRBQWVBLENBQUMsV0FBV1U7Z0JBRTNCLE1BQU1DLE1BQU1oQiw4REFBc0IsQ0FBQ1csTUFBTTtnQkFDekNLLE9BQU9BLElBQUlDLEtBQUssQ0FBQ2YscURBQVVBLENBQUNVLE9BQU8sRUFBRUU7WUFDdkM7UUFDRjtJQUNGO0FBQ0Y7QUFFNEMsQ0FDNUMsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vaW5zdHJ1bWVudC9jb25zb2xlLmpzPzY0YmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ09OU09MRV9MRVZFTFMsIG9yaWdpbmFsQ29uc29sZU1ldGhvZHMgfSBmcm9tICcuLi9sb2dnZXIuanMnO1xuaW1wb3J0IHsgZmlsbCB9IGZyb20gJy4uL29iamVjdC5qcyc7XG5pbXBvcnQgeyBHTE9CQUxfT0JKIH0gZnJvbSAnLi4vd29ybGR3aWRlLmpzJztcbmltcG9ydCB7IGFkZEhhbmRsZXIsIG1heWJlSW5zdHJ1bWVudCwgdHJpZ2dlckhhbmRsZXJzIH0gZnJvbSAnLi9faGFuZGxlcnMuanMnO1xuXG4vKipcbiAqIEFkZCBhbiBpbnN0cnVtZW50YXRpb24gaGFuZGxlciBmb3Igd2hlbiBhIGNvbnNvbGUueHh4IG1ldGhvZCBpcyBjYWxsZWQuXG4gKlxuICogVXNlIGF0IHlvdXIgb3duIHJpc2ssIHRoaXMgbWlnaHQgYnJlYWsgd2l0aG91dCBjaGFuZ2Vsb2cgbm90aWNlLCBvbmx5IHVzZWQgaW50ZXJuYWxseS5cbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24gYWRkQ29uc29sZUluc3RydW1lbnRhdGlvbkhhbmRsZXIoaGFuZGxlcikge1xuICBjb25zdCB0eXBlID0gJ2NvbnNvbGUnO1xuICBhZGRIYW5kbGVyKHR5cGUsIGhhbmRsZXIpO1xuICBtYXliZUluc3RydW1lbnQodHlwZSwgaW5zdHJ1bWVudENvbnNvbGUpO1xufVxuXG5mdW5jdGlvbiBpbnN0cnVtZW50Q29uc29sZSgpIHtcbiAgaWYgKCEoJ2NvbnNvbGUnIGluIEdMT0JBTF9PQkopKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgQ09OU09MRV9MRVZFTFMuZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICBpZiAoIShsZXZlbCBpbiBHTE9CQUxfT0JKLmNvbnNvbGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZmlsbChHTE9CQUxfT0JKLmNvbnNvbGUsIGxldmVsLCBmdW5jdGlvbiAob3JpZ2luYWxDb25zb2xlTWV0aG9kKSB7XG4gICAgICBvcmlnaW5hbENvbnNvbGVNZXRob2RzW2xldmVsXSA9IG9yaWdpbmFsQ29uc29sZU1ldGhvZDtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXJEYXRhID0geyBhcmdzLCBsZXZlbCB9O1xuICAgICAgICB0cmlnZ2VySGFuZGxlcnMoJ2NvbnNvbGUnLCBoYW5kbGVyRGF0YSk7XG5cbiAgICAgICAgY29uc3QgbG9nID0gb3JpZ2luYWxDb25zb2xlTWV0aG9kc1tsZXZlbF07XG4gICAgICAgIGxvZyAmJiBsb2cuYXBwbHkoR0xPQkFMX09CSi5jb25zb2xlLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgeyBhZGRDb25zb2xlSW5zdHJ1bWVudGF0aW9uSGFuZGxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc29sZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJDT05TT0xFX0xFVkVMUyIsIm9yaWdpbmFsQ29uc29sZU1ldGhvZHMiLCJmaWxsIiwiR0xPQkFMX09CSiIsImFkZEhhbmRsZXIiLCJtYXliZUluc3RydW1lbnQiLCJ0cmlnZ2VySGFuZGxlcnMiLCJhZGRDb25zb2xlSW5zdHJ1bWVudGF0aW9uSGFuZGxlciIsImhhbmRsZXIiLCJ0eXBlIiwiaW5zdHJ1bWVudENvbnNvbGUiLCJmb3JFYWNoIiwibGV2ZWwiLCJjb25zb2xlIiwib3JpZ2luYWxDb25zb2xlTWV0aG9kIiwiYXJncyIsImhhbmRsZXJEYXRhIiwibG9nIiwiYXBwbHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/instrument/console.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/is.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/is.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDOMError: () => (/* binding */ isDOMError),\n/* harmony export */   isDOMException: () => (/* binding */ isDOMException),\n/* harmony export */   isElement: () => (/* binding */ isElement),\n/* harmony export */   isError: () => (/* binding */ isError),\n/* harmony export */   isErrorEvent: () => (/* binding */ isErrorEvent),\n/* harmony export */   isEvent: () => (/* binding */ isEvent),\n/* harmony export */   isInstanceOf: () => (/* binding */ isInstanceOf),\n/* harmony export */   isNaN: () => (/* binding */ isNaN),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isPrimitive: () => (/* binding */ isPrimitive),\n/* harmony export */   isRegExp: () => (/* binding */ isRegExp),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isSyntheticEvent: () => (/* binding */ isSyntheticEvent),\n/* harmony export */   isThenable: () => (/* binding */ isThenable),\n/* harmony export */   isVueViewModel: () => (/* binding */ isVueViewModel)\n/* harmony export */ });\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isError(wat) {\n    switch(objectToString.call(wat)){\n        case \"[object Error]\":\n        case \"[object Exception]\":\n        case \"[object DOMException]\":\n            return true;\n        default:\n            return isInstanceOf(wat, Error);\n    }\n}\n/**\n * Checks whether given value is an instance of the given built-in class.\n *\n * @param wat The value to be checked\n * @param className\n * @returns A boolean representing the result.\n */ function isBuiltin(wat, className) {\n    return objectToString.call(wat) === `[object ${className}]`;\n}\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isErrorEvent(wat) {\n    return isBuiltin(wat, \"ErrorEvent\");\n}\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isDOMError(wat) {\n    return isBuiltin(wat, \"DOMError\");\n}\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isDOMException(wat) {\n    return isBuiltin(wat, \"DOMException\");\n}\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isString(wat) {\n    return isBuiltin(wat, \"String\");\n}\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isPrimitive(wat) {\n    return wat === null || typeof wat !== \"object\" && typeof wat !== \"function\";\n}\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isPlainObject(wat) {\n    return isBuiltin(wat, \"Object\");\n}\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isEvent(wat) {\n    return typeof Event !== \"undefined\" && isInstanceOf(wat, Event);\n}\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isElement(wat) {\n    return typeof Element !== \"undefined\" && isInstanceOf(wat, Element);\n}\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isRegExp(wat) {\n    return isBuiltin(wat, \"RegExp\");\n}\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */ function isThenable(wat) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return Boolean(wat && wat.then && typeof wat.then === \"function\");\n}\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isSyntheticEvent(wat) {\n    return isPlainObject(wat) && \"nativeEvent\" in wat && \"preventDefault\" in wat && \"stopPropagation\" in wat;\n}\n/**\n * Checks whether given value is NaN\n * {@link isNaN}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isNaN(wat) {\n    return typeof wat === \"number\" && wat !== wat;\n}\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */ function isInstanceOf(wat, base) {\n    try {\n        return wat instanceof base;\n    } catch (_e) {\n        return false;\n    }\n}\n/**\n * Checks whether given value's type is a Vue ViewModel.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */ function isVueViewModel(wat) {\n    // Not using Object.prototype.toString because in Vue 3 it would read the instance's Symbol(Symbol.toStringTag) property.\n    return !!(typeof wat === \"object\" && wat !== null && (wat.__isVue || wat._isVue));\n}\n //# sourceMappingURL=is.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/is.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/logger.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/logger.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONSOLE_LEVELS: () => (/* binding */ CONSOLE_LEVELS),\n/* harmony export */   consoleSandbox: () => (/* binding */ consoleSandbox),\n/* harmony export */   logger: () => (/* binding */ logger),\n/* harmony export */   originalConsoleMethods: () => (/* binding */ originalConsoleMethods)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/debug-build.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/worldwide.js\");\n\n\n/** Prefix for logging strings */ const PREFIX = \"Sentry Logger \";\nconst CONSOLE_LEVELS = [\n    \"debug\",\n    \"info\",\n    \"warn\",\n    \"error\",\n    \"log\",\n    \"assert\",\n    \"trace\"\n];\n/** This may be mutated by the console instrumentation. */ const originalConsoleMethods = {};\n/** JSDoc */ /**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */ function consoleSandbox(callback) {\n    if (!(\"console\" in _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ)) {\n        return callback();\n    }\n    const console = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ.console;\n    const wrappedFuncs = {};\n    const wrappedLevels = Object.keys(originalConsoleMethods);\n    // Restore all wrapped console methods\n    wrappedLevels.forEach((level)=>{\n        const originalConsoleMethod = originalConsoleMethods[level];\n        wrappedFuncs[level] = console[level];\n        console[level] = originalConsoleMethod;\n    });\n    try {\n        return callback();\n    } finally{\n        // Revert restoration to wrapped state\n        wrappedLevels.forEach((level)=>{\n            console[level] = wrappedFuncs[level];\n        });\n    }\n}\nfunction makeLogger() {\n    let enabled = false;\n    const logger = {\n        enable: ()=>{\n            enabled = true;\n        },\n        disable: ()=>{\n            enabled = false;\n        },\n        isEnabled: ()=>enabled\n    };\n    if (_debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD) {\n        CONSOLE_LEVELS.forEach((name)=>{\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            logger[name] = (...args)=>{\n                if (enabled) {\n                    consoleSandbox(()=>{\n                        _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n                    });\n                }\n            };\n        });\n    } else {\n        CONSOLE_LEVELS.forEach((name)=>{\n            logger[name] = ()=>undefined;\n        });\n    }\n    return logger;\n}\nconst logger = makeLogger();\n //# sourceMappingURL=logger.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9sb2dnZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQStDO0FBQ0g7QUFFNUMsK0JBQStCLEdBQy9CLE1BQU1FLFNBQVM7QUFFZixNQUFNQyxpQkFBaUI7SUFDckI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRDtBQUVELHdEQUF3RCxHQUN4RCxNQUFNQyx5QkFFSCxDQUFDO0FBRUosVUFBVSxHQUVWOzs7OztDQUtDLEdBQ0QsU0FBU0MsZUFBZUMsUUFBUTtJQUM5QixJQUFJLENBQUUsbUVBQXNCLEdBQUk7UUFDOUIsT0FBT0E7SUFDVDtJQUVBLE1BQU1DLFVBQVVOLHFEQUFVQSxDQUFDTSxPQUFPO0lBQ2xDLE1BQU1DLGVBQWUsQ0FBQztJQUV0QixNQUFNQyxnQkFBZ0JDLE9BQU9DLElBQUksQ0FBQ1A7SUFFbEMsc0NBQXNDO0lBQ3RDSyxjQUFjRyxPQUFPLENBQUNDLENBQUFBO1FBQ3BCLE1BQU1DLHdCQUF3QlYsc0JBQXNCLENBQUNTLE1BQU07UUFDM0RMLFlBQVksQ0FBQ0ssTUFBTSxHQUFHTixPQUFPLENBQUNNLE1BQU07UUFDcENOLE9BQU8sQ0FBQ00sTUFBTSxHQUFHQztJQUNuQjtJQUVBLElBQUk7UUFDRixPQUFPUjtJQUNULFNBQVU7UUFDUixzQ0FBc0M7UUFDdENHLGNBQWNHLE9BQU8sQ0FBQ0MsQ0FBQUE7WUFDcEJOLE9BQU8sQ0FBQ00sTUFBTSxHQUFHTCxZQUFZLENBQUNLLE1BQU07UUFDdEM7SUFDRjtBQUNGO0FBRUEsU0FBU0U7SUFDUCxJQUFJQyxVQUFVO0lBQ2QsTUFBTUMsU0FBUztRQUNiQyxRQUFRO1lBQ05GLFVBQVU7UUFDWjtRQUNBRyxTQUFTO1lBQ1BILFVBQVU7UUFDWjtRQUNBSSxXQUFXLElBQU1KO0lBQ25CO0lBRUEsSUFBSWhCLHdEQUFXQSxFQUFFO1FBQ2ZHLGVBQWVTLE9BQU8sQ0FBQ1MsQ0FBQUE7WUFDckIsOERBQThEO1lBQzlESixNQUFNLENBQUNJLEtBQUssR0FBRyxDQUFDLEdBQUdDO2dCQUNqQixJQUFJTixTQUFTO29CQUNYWCxlQUFlO3dCQUNiSixxREFBVUEsQ0FBQ00sT0FBTyxDQUFDYyxLQUFLLENBQUMsQ0FBQyxFQUFFbkIsT0FBTyxDQUFDLEVBQUVtQixLQUFLLEVBQUUsQ0FBQyxLQUFLQztvQkFDckQ7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0YsT0FBTztRQUNMbkIsZUFBZVMsT0FBTyxDQUFDUyxDQUFBQTtZQUNyQkosTUFBTSxDQUFDSSxLQUFLLEdBQUcsSUFBTUU7UUFDdkI7SUFDRjtJQUVBLE9BQU9OO0FBQ1Q7QUFFQSxNQUFNQSxTQUFTRjtBQUUyRCxDQUMxRSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9sb2dnZXIuanM/Mjc3MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBERUJVR19CVUlMRCB9IGZyb20gJy4vZGVidWctYnVpbGQuanMnO1xuaW1wb3J0IHsgR0xPQkFMX09CSiB9IGZyb20gJy4vd29ybGR3aWRlLmpzJztcblxuLyoqIFByZWZpeCBmb3IgbG9nZ2luZyBzdHJpbmdzICovXG5jb25zdCBQUkVGSVggPSAnU2VudHJ5IExvZ2dlciAnO1xuXG5jb25zdCBDT05TT0xFX0xFVkVMUyA9IFtcbiAgJ2RlYnVnJyxcbiAgJ2luZm8nLFxuICAnd2FybicsXG4gICdlcnJvcicsXG4gICdsb2cnLFxuICAnYXNzZXJ0JyxcbiAgJ3RyYWNlJyxcbl0gO1xuXG4vKiogVGhpcyBtYXkgYmUgbXV0YXRlZCBieSB0aGUgY29uc29sZSBpbnN0cnVtZW50YXRpb24uICovXG5jb25zdCBvcmlnaW5hbENvbnNvbGVNZXRob2RzXG5cbiA9IHt9O1xuXG4vKiogSlNEb2MgKi9cblxuLyoqXG4gKiBUZW1wb3JhcmlseSBkaXNhYmxlIHNlbnRyeSBjb25zb2xlIGluc3RydW1lbnRhdGlvbnMuXG4gKlxuICogQHBhcmFtIGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBydW4gYWdhaW5zdCB0aGUgb3JpZ2luYWwgYGNvbnNvbGVgIG1lc3NhZ2VzXG4gKiBAcmV0dXJucyBUaGUgcmVzdWx0cyBvZiB0aGUgY2FsbGJhY2tcbiAqL1xuZnVuY3Rpb24gY29uc29sZVNhbmRib3goY2FsbGJhY2spIHtcbiAgaWYgKCEoJ2NvbnNvbGUnIGluIEdMT0JBTF9PQkopKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gIH1cblxuICBjb25zdCBjb25zb2xlID0gR0xPQkFMX09CSi5jb25zb2xlIDtcbiAgY29uc3Qgd3JhcHBlZEZ1bmNzID0ge307XG5cbiAgY29uc3Qgd3JhcHBlZExldmVscyA9IE9iamVjdC5rZXlzKG9yaWdpbmFsQ29uc29sZU1ldGhvZHMpIDtcblxuICAvLyBSZXN0b3JlIGFsbCB3cmFwcGVkIGNvbnNvbGUgbWV0aG9kc1xuICB3cmFwcGVkTGV2ZWxzLmZvckVhY2gobGV2ZWwgPT4ge1xuICAgIGNvbnN0IG9yaWdpbmFsQ29uc29sZU1ldGhvZCA9IG9yaWdpbmFsQ29uc29sZU1ldGhvZHNbbGV2ZWxdIDtcbiAgICB3cmFwcGVkRnVuY3NbbGV2ZWxdID0gY29uc29sZVtsZXZlbF0gO1xuICAgIGNvbnNvbGVbbGV2ZWxdID0gb3JpZ2luYWxDb25zb2xlTWV0aG9kO1xuICB9KTtcblxuICB0cnkge1xuICAgIHJldHVybiBjYWxsYmFjaygpO1xuICB9IGZpbmFsbHkge1xuICAgIC8vIFJldmVydCByZXN0b3JhdGlvbiB0byB3cmFwcGVkIHN0YXRlXG4gICAgd3JhcHBlZExldmVscy5mb3JFYWNoKGxldmVsID0+IHtcbiAgICAgIGNvbnNvbGVbbGV2ZWxdID0gd3JhcHBlZEZ1bmNzW2xldmVsXSA7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZUxvZ2dlcigpIHtcbiAgbGV0IGVuYWJsZWQgPSBmYWxzZTtcbiAgY29uc3QgbG9nZ2VyID0ge1xuICAgIGVuYWJsZTogKCkgPT4ge1xuICAgICAgZW5hYmxlZCA9IHRydWU7XG4gICAgfSxcbiAgICBkaXNhYmxlOiAoKSA9PiB7XG4gICAgICBlbmFibGVkID0gZmFsc2U7XG4gICAgfSxcbiAgICBpc0VuYWJsZWQ6ICgpID0+IGVuYWJsZWQsXG4gIH07XG5cbiAgaWYgKERFQlVHX0JVSUxEKSB7XG4gICAgQ09OU09MRV9MRVZFTFMuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICBsb2dnZXJbbmFtZV0gPSAoLi4uYXJncykgPT4ge1xuICAgICAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgICAgIGNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgICAgICAgIEdMT0JBTF9PQkouY29uc29sZVtuYW1lXShgJHtQUkVGSVh9WyR7bmFtZX1dOmAsIC4uLmFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIENPTlNPTEVfTEVWRUxTLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICBsb2dnZXJbbmFtZV0gPSAoKSA9PiB1bmRlZmluZWQ7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbG9nZ2VyIDtcbn1cblxuY29uc3QgbG9nZ2VyID0gbWFrZUxvZ2dlcigpO1xuXG5leHBvcnQgeyBDT05TT0xFX0xFVkVMUywgY29uc29sZVNhbmRib3gsIGxvZ2dlciwgb3JpZ2luYWxDb25zb2xlTWV0aG9kcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2VyLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkRFQlVHX0JVSUxEIiwiR0xPQkFMX09CSiIsIlBSRUZJWCIsIkNPTlNPTEVfTEVWRUxTIiwib3JpZ2luYWxDb25zb2xlTWV0aG9kcyIsImNvbnNvbGVTYW5kYm94IiwiY2FsbGJhY2siLCJjb25zb2xlIiwid3JhcHBlZEZ1bmNzIiwid3JhcHBlZExldmVscyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwibGV2ZWwiLCJvcmlnaW5hbENvbnNvbGVNZXRob2QiLCJtYWtlTG9nZ2VyIiwiZW5hYmxlZCIsImxvZ2dlciIsImVuYWJsZSIsImRpc2FibGUiLCJpc0VuYWJsZWQiLCJuYW1lIiwiYXJncyIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/logger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/lru.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/lru.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LRUMap: () => (/* binding */ LRUMap)\n/* harmony export */ });\n/** A simple Least Recently Used map */ class LRUMap {\n    constructor(_maxSize){\n        this._maxSize = _maxSize;\n        this._cache = new Map();\n    }\n    /** Get the current size of the cache */ get size() {\n        return this._cache.size;\n    }\n    /** Get an entry or undefined if it was not in the cache. Re-inserts to update the recently used order */ get(key) {\n        const value = this._cache.get(key);\n        if (value === undefined) {\n            return undefined;\n        }\n        // Remove and re-insert to update the order\n        this._cache.delete(key);\n        this._cache.set(key, value);\n        return value;\n    }\n    /** Insert an entry and evict an older entry if we've reached maxSize */ set(key, value) {\n        if (this._cache.size >= this._maxSize) {\n            // keys() returns an iterator in insertion order so keys().next() gives us the oldest key\n            this._cache.delete(this._cache.keys().next().value);\n        }\n        this._cache.set(key, value);\n    }\n    /** Remove an entry and return the entry if it was in the cache */ remove(key) {\n        const value = this._cache.get(key);\n        if (value) {\n            this._cache.delete(key);\n        }\n        return value;\n    }\n    /** Clear all entries */ clear() {\n        this._cache.clear();\n    }\n    /** Get all the keys */ keys() {\n        return Array.from(this._cache.keys());\n    }\n    /** Get all the values */ values() {\n        const values = [];\n        this._cache.forEach((value)=>values.push(value));\n        return values;\n    }\n}\n //# sourceMappingURL=lru.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9scnUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHFDQUFxQyxHQUNyQyxNQUFNQTtJQUVIQyxZQUFjQyxRQUFRLENBQUU7UUFBQyxJQUFJLENBQUNBLFFBQVEsR0FBR0E7UUFDeEMsSUFBSSxDQUFDQyxNQUFNLEdBQUcsSUFBSUM7SUFDcEI7SUFFQSxzQ0FBc0MsR0FDckMsSUFBSUMsT0FBTztRQUNWLE9BQU8sSUFBSSxDQUFDRixNQUFNLENBQUNFLElBQUk7SUFDekI7SUFFQSx1R0FBdUcsR0FDdEdDLElBQUlDLEdBQUcsRUFBRTtRQUNSLE1BQU1DLFFBQVEsSUFBSSxDQUFDTCxNQUFNLENBQUNHLEdBQUcsQ0FBQ0M7UUFDOUIsSUFBSUMsVUFBVUMsV0FBVztZQUN2QixPQUFPQTtRQUNUO1FBQ0EsMkNBQTJDO1FBQzNDLElBQUksQ0FBQ04sTUFBTSxDQUFDTyxNQUFNLENBQUNIO1FBQ25CLElBQUksQ0FBQ0osTUFBTSxDQUFDUSxHQUFHLENBQUNKLEtBQUtDO1FBQ3JCLE9BQU9BO0lBQ1Q7SUFFQSxzRUFBc0UsR0FDckVHLElBQUlKLEdBQUcsRUFBRUMsS0FBSyxFQUFFO1FBQ2YsSUFBSSxJQUFJLENBQUNMLE1BQU0sQ0FBQ0UsSUFBSSxJQUFJLElBQUksQ0FBQ0gsUUFBUSxFQUFFO1lBQ3JDLHlGQUF5RjtZQUN6RixJQUFJLENBQUNDLE1BQU0sQ0FBQ08sTUFBTSxDQUFDLElBQUksQ0FBQ1AsTUFBTSxDQUFDUyxJQUFJLEdBQUdDLElBQUksR0FBR0wsS0FBSztRQUNwRDtRQUNBLElBQUksQ0FBQ0wsTUFBTSxDQUFDUSxHQUFHLENBQUNKLEtBQUtDO0lBQ3ZCO0lBRUEsZ0VBQWdFLEdBQy9ETSxPQUFPUCxHQUFHLEVBQUU7UUFDWCxNQUFNQyxRQUFRLElBQUksQ0FBQ0wsTUFBTSxDQUFDRyxHQUFHLENBQUNDO1FBQzlCLElBQUlDLE9BQU87WUFDVCxJQUFJLENBQUNMLE1BQU0sQ0FBQ08sTUFBTSxDQUFDSDtRQUNyQjtRQUNBLE9BQU9DO0lBQ1Q7SUFFQSxzQkFBc0IsR0FDckJPLFFBQVE7UUFDUCxJQUFJLENBQUNaLE1BQU0sQ0FBQ1ksS0FBSztJQUNuQjtJQUVBLHFCQUFxQixHQUNwQkgsT0FBTztRQUNOLE9BQU9JLE1BQU1DLElBQUksQ0FBQyxJQUFJLENBQUNkLE1BQU0sQ0FBQ1MsSUFBSTtJQUNwQztJQUVBLHVCQUF1QixHQUN0Qk0sU0FBUztRQUNSLE1BQU1BLFNBQVMsRUFBRTtRQUNqQixJQUFJLENBQUNmLE1BQU0sQ0FBQ2dCLE9BQU8sQ0FBQ1gsQ0FBQUEsUUFBU1UsT0FBT0UsSUFBSSxDQUFDWjtRQUN6QyxPQUFPVTtJQUNUO0FBQ0Y7QUFFa0IsQ0FDbEIsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vbHJ1LmpzPzUxNGQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIEEgc2ltcGxlIExlYXN0IFJlY2VudGx5IFVzZWQgbWFwICovXG5jbGFzcyBMUlVNYXAge1xuXG4gICBjb25zdHJ1Y3RvciggIF9tYXhTaXplKSB7dGhpcy5fbWF4U2l6ZSA9IF9tYXhTaXplO1xuICAgIHRoaXMuX2NhY2hlID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgLyoqIEdldCB0aGUgY3VycmVudCBzaXplIG9mIHRoZSBjYWNoZSAqL1xuICAgZ2V0IHNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhY2hlLnNpemU7XG4gIH1cblxuICAvKiogR2V0IGFuIGVudHJ5IG9yIHVuZGVmaW5lZCBpZiBpdCB3YXMgbm90IGluIHRoZSBjYWNoZS4gUmUtaW5zZXJ0cyB0byB1cGRhdGUgdGhlIHJlY2VudGx5IHVzZWQgb3JkZXIgKi9cbiAgIGdldChrZXkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX2NhY2hlLmdldChrZXkpO1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBSZW1vdmUgYW5kIHJlLWluc2VydCB0byB1cGRhdGUgdGhlIG9yZGVyXG4gICAgdGhpcy5fY2FjaGUuZGVsZXRlKGtleSk7XG4gICAgdGhpcy5fY2FjaGUuc2V0KGtleSwgdmFsdWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKiBJbnNlcnQgYW4gZW50cnkgYW5kIGV2aWN0IGFuIG9sZGVyIGVudHJ5IGlmIHdlJ3ZlIHJlYWNoZWQgbWF4U2l6ZSAqL1xuICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICBpZiAodGhpcy5fY2FjaGUuc2l6ZSA+PSB0aGlzLl9tYXhTaXplKSB7XG4gICAgICAvLyBrZXlzKCkgcmV0dXJucyBhbiBpdGVyYXRvciBpbiBpbnNlcnRpb24gb3JkZXIgc28ga2V5cygpLm5leHQoKSBnaXZlcyB1cyB0aGUgb2xkZXN0IGtleVxuICAgICAgdGhpcy5fY2FjaGUuZGVsZXRlKHRoaXMuX2NhY2hlLmtleXMoKS5uZXh0KCkudmFsdWUpO1xuICAgIH1cbiAgICB0aGlzLl9jYWNoZS5zZXQoa2V5LCB2YWx1ZSk7XG4gIH1cblxuICAvKiogUmVtb3ZlIGFuIGVudHJ5IGFuZCByZXR1cm4gdGhlIGVudHJ5IGlmIGl0IHdhcyBpbiB0aGUgY2FjaGUgKi9cbiAgIHJlbW92ZShrZXkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX2NhY2hlLmdldChrZXkpO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5fY2FjaGUuZGVsZXRlKGtleSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKiBDbGVhciBhbGwgZW50cmllcyAqL1xuICAgY2xlYXIoKSB7XG4gICAgdGhpcy5fY2FjaGUuY2xlYXIoKTtcbiAgfVxuXG4gIC8qKiBHZXQgYWxsIHRoZSBrZXlzICovXG4gICBrZXlzKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuX2NhY2hlLmtleXMoKSk7XG4gIH1cblxuICAvKiogR2V0IGFsbCB0aGUgdmFsdWVzICovXG4gICB2YWx1ZXMoKSB7XG4gICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgdGhpcy5fY2FjaGUuZm9yRWFjaCh2YWx1ZSA9PiB2YWx1ZXMucHVzaCh2YWx1ZSkpO1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cbn1cblxuZXhwb3J0IHsgTFJVTWFwIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1scnUuanMubWFwXG4iXSwibmFtZXMiOlsiTFJVTWFwIiwiY29uc3RydWN0b3IiLCJfbWF4U2l6ZSIsIl9jYWNoZSIsIk1hcCIsInNpemUiLCJnZXQiLCJrZXkiLCJ2YWx1ZSIsInVuZGVmaW5lZCIsImRlbGV0ZSIsInNldCIsImtleXMiLCJuZXh0IiwicmVtb3ZlIiwiY2xlYXIiLCJBcnJheSIsImZyb20iLCJ2YWx1ZXMiLCJmb3JFYWNoIiwicHVzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/lru.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/memo.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/memo.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   memoBuilder: () => (/* binding */ memoBuilder)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */ /* eslint-disable @typescript-eslint/no-explicit-any */ /**\n * Helper to decycle json objects\n */ function memoBuilder() {\n    const hasWeakSet = typeof WeakSet === \"function\";\n    const inner = hasWeakSet ? new WeakSet() : [];\n    function memoize(obj) {\n        if (hasWeakSet) {\n            if (inner.has(obj)) {\n                return true;\n            }\n            inner.add(obj);\n            return false;\n        }\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for(let i = 0; i < inner.length; i++){\n            const value = inner[i];\n            if (value === obj) {\n                return true;\n            }\n        }\n        inner.push(obj);\n        return false;\n    }\n    function unmemoize(obj) {\n        if (hasWeakSet) {\n            inner.delete(obj);\n        } else {\n            for(let i = 0; i < inner.length; i++){\n                if (inner[i] === obj) {\n                    inner.splice(i, 1);\n                    break;\n                }\n            }\n        }\n    }\n    return [\n        memoize,\n        unmemoize\n    ];\n}\n //# sourceMappingURL=memo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9tZW1vLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSw2REFBNkQsR0FDN0QscURBQXFELEdBRXJEOztDQUVDLEdBQ0QsU0FBU0E7SUFDUCxNQUFNQyxhQUFhLE9BQU9DLFlBQVk7SUFDdEMsTUFBTUMsUUFBUUYsYUFBYSxJQUFJQyxZQUFZLEVBQUU7SUFDN0MsU0FBU0UsUUFBUUMsR0FBRztRQUNsQixJQUFJSixZQUFZO1lBQ2QsSUFBSUUsTUFBTUcsR0FBRyxDQUFDRCxNQUFNO2dCQUNsQixPQUFPO1lBQ1Q7WUFDQUYsTUFBTUksR0FBRyxDQUFDRjtZQUNWLE9BQU87UUFDVDtRQUNBLDREQUE0RDtRQUM1RCxJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSUwsTUFBTU0sTUFBTSxFQUFFRCxJQUFLO1lBQ3JDLE1BQU1FLFFBQVFQLEtBQUssQ0FBQ0ssRUFBRTtZQUN0QixJQUFJRSxVQUFVTCxLQUFLO2dCQUNqQixPQUFPO1lBQ1Q7UUFDRjtRQUNBRixNQUFNUSxJQUFJLENBQUNOO1FBQ1gsT0FBTztJQUNUO0lBRUEsU0FBU08sVUFBVVAsR0FBRztRQUNwQixJQUFJSixZQUFZO1lBQ2RFLE1BQU1VLE1BQU0sQ0FBQ1I7UUFDZixPQUFPO1lBQ0wsSUFBSyxJQUFJRyxJQUFJLEdBQUdBLElBQUlMLE1BQU1NLE1BQU0sRUFBRUQsSUFBSztnQkFDckMsSUFBSUwsS0FBSyxDQUFDSyxFQUFFLEtBQUtILEtBQUs7b0JBQ3BCRixNQUFNVyxNQUFNLENBQUNOLEdBQUc7b0JBQ2hCO2dCQUNGO1lBQ0Y7UUFDRjtJQUNGO0lBQ0EsT0FBTztRQUFDSjtRQUFTUTtLQUFVO0FBQzdCO0FBRXVCLENBQ3ZCLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL21lbW8uanM/MmNjYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cblxuLyoqXG4gKiBIZWxwZXIgdG8gZGVjeWNsZSBqc29uIG9iamVjdHNcbiAqL1xuZnVuY3Rpb24gbWVtb0J1aWxkZXIoKSB7XG4gIGNvbnN0IGhhc1dlYWtTZXQgPSB0eXBlb2YgV2Vha1NldCA9PT0gJ2Z1bmN0aW9uJztcbiAgY29uc3QgaW5uZXIgPSBoYXNXZWFrU2V0ID8gbmV3IFdlYWtTZXQoKSA6IFtdO1xuICBmdW5jdGlvbiBtZW1vaXplKG9iaikge1xuICAgIGlmIChoYXNXZWFrU2V0KSB7XG4gICAgICBpZiAoaW5uZXIuaGFzKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpbm5lci5hZGQob2JqKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9wcmVmZXItZm9yLW9mXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbm5lci5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgdmFsdWUgPSBpbm5lcltpXTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gb2JqKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpbm5lci5wdXNoKG9iaik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gdW5tZW1vaXplKG9iaikge1xuICAgIGlmIChoYXNXZWFrU2V0KSB7XG4gICAgICBpbm5lci5kZWxldGUob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbm5lci5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaW5uZXJbaV0gPT09IG9iaikge1xuICAgICAgICAgIGlubmVyLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gW21lbW9pemUsIHVubWVtb2l6ZV07XG59XG5cbmV4cG9ydCB7IG1lbW9CdWlsZGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZW1vLmpzLm1hcFxuIl0sIm5hbWVzIjpbIm1lbW9CdWlsZGVyIiwiaGFzV2Vha1NldCIsIldlYWtTZXQiLCJpbm5lciIsIm1lbW9pemUiLCJvYmoiLCJoYXMiLCJhZGQiLCJpIiwibGVuZ3RoIiwidmFsdWUiLCJwdXNoIiwidW5tZW1vaXplIiwiZGVsZXRlIiwic3BsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/memo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/misc.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/misc.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addContextToFrame: () => (/* binding */ addContextToFrame),\n/* harmony export */   addExceptionMechanism: () => (/* binding */ addExceptionMechanism),\n/* harmony export */   addExceptionTypeValue: () => (/* binding */ addExceptionTypeValue),\n/* harmony export */   arrayify: () => (/* binding */ arrayify),\n/* harmony export */   checkOrSetAlreadyCaught: () => (/* binding */ checkOrSetAlreadyCaught),\n/* harmony export */   getEventDescription: () => (/* binding */ getEventDescription),\n/* harmony export */   parseSemver: () => (/* binding */ parseSemver),\n/* harmony export */   uuid4: () => (/* binding */ uuid4)\n/* harmony export */ });\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./string.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/string.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/worldwide.js\");\n\n\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */ function uuid4() {\n    const gbl = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ;\n    const crypto = gbl.crypto || gbl.msCrypto;\n    let getRandomByte = ()=>Math.random() * 16;\n    try {\n        if (crypto && crypto.randomUUID) {\n            return crypto.randomUUID().replace(/-/g, \"\");\n        }\n        if (crypto && crypto.getRandomValues) {\n            getRandomByte = ()=>crypto.getRandomValues(new Uint8Array(1))[0];\n        }\n    } catch (_) {\n    // some runtimes can crash invoking crypto\n    // https://github.com/getsentry/sentry-javascript/issues/8935\n    }\n    // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n    // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n    return ([\n        1e7\n    ] + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, (c)=>// eslint-disable-next-line no-bitwise\n        (c ^ (getRandomByte() & 15) >> c / 4).toString(16));\n}\nfunction getFirstException(event) {\n    return event.exception && event.exception.values ? event.exception.values[0] : undefined;\n}\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */ function getEventDescription(event) {\n    const { message, event_id: eventId } = event;\n    if (message) {\n        return message;\n    }\n    const firstException = getFirstException(event);\n    if (firstException) {\n        if (firstException.type && firstException.value) {\n            return `${firstException.type}: ${firstException.value}`;\n        }\n        return firstException.type || firstException.value || eventId || \"<unknown>\";\n    }\n    return eventId || \"<unknown>\";\n}\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */ function addExceptionTypeValue(event, value, type) {\n    const exception = event.exception = event.exception || {};\n    const values = exception.values = exception.values || [];\n    const firstException = values[0] = values[0] || {};\n    if (!firstException.value) {\n        firstException.value = value || \"\";\n    }\n    if (!firstException.type) {\n        firstException.type = type || \"Error\";\n    }\n}\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */ function addExceptionMechanism(event, newMechanism) {\n    const firstException = getFirstException(event);\n    if (!firstException) {\n        return;\n    }\n    const defaultMechanism = {\n        type: \"generic\",\n        handled: true\n    };\n    const currentMechanism = firstException.mechanism;\n    firstException.mechanism = {\n        ...defaultMechanism,\n        ...currentMechanism,\n        ...newMechanism\n    };\n    if (newMechanism && \"data\" in newMechanism) {\n        const mergedData = {\n            ...currentMechanism && currentMechanism.data,\n            ...newMechanism.data\n        };\n        firstException.mechanism.data = mergedData;\n    }\n}\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n/**\n * Represents Semantic Versioning object\n */ /**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */ function parseSemver(input) {\n    const match = input.match(SEMVER_REGEXP) || [];\n    const major = parseInt(match[1], 10);\n    const minor = parseInt(match[2], 10);\n    const patch = parseInt(match[3], 10);\n    return {\n        buildmetadata: match[5],\n        major: isNaN(major) ? undefined : major,\n        minor: isNaN(minor) ? undefined : minor,\n        patch: isNaN(patch) ? undefined : patch,\n        prerelease: match[4]\n    };\n}\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */ function addContextToFrame(lines, frame, linesOfContext = 5) {\n    // When there is no line number in the frame, attaching context is nonsensical and will even break grouping\n    if (frame.lineno === undefined) {\n        return;\n    }\n    const maxLines = lines.length;\n    const sourceLine = Math.max(Math.min(maxLines - 1, frame.lineno - 1), 0);\n    frame.pre_context = lines.slice(Math.max(0, sourceLine - linesOfContext), sourceLine).map((line)=>(0,_string_js__WEBPACK_IMPORTED_MODULE_1__.snipLine)(line, 0));\n    frame.context_line = (0,_string_js__WEBPACK_IMPORTED_MODULE_1__.snipLine)(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n    frame.post_context = lines.slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext).map((line)=>(0,_string_js__WEBPACK_IMPORTED_MODULE_1__.snipLine)(line, 0));\n}\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */ function checkOrSetAlreadyCaught(exception) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (exception && exception.__sentry_captured__) {\n        return true;\n    }\n    try {\n        // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n        // `ExtraErrorData` integration\n        (0,_object_js__WEBPACK_IMPORTED_MODULE_2__.addNonEnumerableProperty)(exception, \"__sentry_captured__\", true);\n    } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n    }\n    return false;\n}\n/**\n * Checks whether the given input is already an array, and if it isn't, wraps it in one.\n *\n * @param maybeArray Input to turn into an array, if necessary\n * @returns The input, if already an array, or an array with the input as the only element, if not\n */ function arrayify(maybeArray) {\n    return Array.isArray(maybeArray) ? maybeArray : [\n        maybeArray\n    ];\n}\n //# sourceMappingURL=misc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/misc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/node-stack-trace.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/node-stack-trace.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filenameIsInApp: () => (/* binding */ filenameIsInApp),\n/* harmony export */   node: () => (/* binding */ node)\n/* harmony export */ });\n/**\n * Does this filename look like it's part of the app code?\n */ function filenameIsInApp(filename, isNative = false) {\n    const isInternal = isNative || filename && // It's not internal if it's an absolute linux path\n    !filename.startsWith(\"/\") && // It's not internal if it's an absolute windows path\n    !filename.includes(\":\\\\\") && // It's not internal if the path is starting with a dot\n    !filename.startsWith(\".\") && // It's not internal if the frame has a protocol. In node, this is usually the case if the file got pre-processed with a bundler like webpack\n    !filename.match(/^[a-zA-Z]([a-zA-Z0-9.\\-+])*:\\/\\//); // Schema from: https://stackoverflow.com/a/3641782\n    // in_app is all that's not an internal Node function or a module within node_modules\n    // note that isNative appears to return true even for node core libraries\n    // see https://github.com/getsentry/raven-node/issues/176\n    return !isInternal && filename !== undefined && !filename.includes(\"node_modules/\");\n}\n/** Node Stack line parser */ // eslint-disable-next-line complexity\nfunction node(getModule) {\n    const FILENAME_MATCH = /^\\s*[-]{4,}$/;\n    const FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+):(\\d+):(\\d+)?|([^)]+))\\)?/;\n    // eslint-disable-next-line complexity\n    return (line)=>{\n        const lineMatch = line.match(FULL_MATCH);\n        if (lineMatch) {\n            let object;\n            let method;\n            let functionName;\n            let typeName;\n            let methodName;\n            if (lineMatch[1]) {\n                functionName = lineMatch[1];\n                let methodStart = functionName.lastIndexOf(\".\");\n                if (functionName[methodStart - 1] === \".\") {\n                    methodStart--;\n                }\n                if (methodStart > 0) {\n                    object = functionName.slice(0, methodStart);\n                    method = functionName.slice(methodStart + 1);\n                    const objectEnd = object.indexOf(\".Module\");\n                    if (objectEnd > 0) {\n                        functionName = functionName.slice(objectEnd + 1);\n                        object = object.slice(0, objectEnd);\n                    }\n                }\n                typeName = undefined;\n            }\n            if (method) {\n                typeName = object;\n                methodName = method;\n            }\n            if (method === \"<anonymous>\") {\n                methodName = undefined;\n                functionName = undefined;\n            }\n            if (functionName === undefined) {\n                methodName = methodName || \"<anonymous>\";\n                functionName = typeName ? `${typeName}.${methodName}` : methodName;\n            }\n            let filename = lineMatch[2] && lineMatch[2].startsWith(\"file://\") ? lineMatch[2].slice(7) : lineMatch[2];\n            const isNative = lineMatch[5] === \"native\";\n            if (!filename && lineMatch[5] && !isNative) {\n                filename = lineMatch[5];\n            }\n            return {\n                filename,\n                module: getModule ? getModule(filename) : undefined,\n                function: functionName,\n                lineno: parseInt(lineMatch[3], 10) || undefined,\n                colno: parseInt(lineMatch[4], 10) || undefined,\n                in_app: filenameIsInApp(filename, isNative)\n            };\n        }\n        if (line.match(FILENAME_MATCH)) {\n            return {\n                filename: line\n            };\n        }\n        return undefined;\n    };\n}\n //# sourceMappingURL=node-stack-trace.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9ub2RlLXN0YWNrLXRyYWNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7O0NBRUMsR0FDRCxTQUFTQSxnQkFBZ0JDLFFBQVEsRUFBRUMsV0FBVyxLQUFLO0lBQ2pELE1BQU1DLGFBQ0pELFlBQ0NELFlBQ0MsbURBQW1EO0lBQ25ELENBQUNBLFNBQVNHLFVBQVUsQ0FBQyxRQUNyQixxREFBcUQ7SUFDckQsQ0FBQ0gsU0FBU0ksUUFBUSxDQUFDLFVBQ25CLHVEQUF1RDtJQUN2RCxDQUFDSixTQUFTRyxVQUFVLENBQUMsUUFDckIsNklBQTZJO0lBQzdJLENBQUNILFNBQVNLLEtBQUssQ0FBQyxxQ0FBc0MsbURBQW1EO0lBRTdHLHFGQUFxRjtJQUNyRix5RUFBeUU7SUFDekUseURBQXlEO0lBRXpELE9BQU8sQ0FBQ0gsY0FBY0YsYUFBYU0sYUFBYSxDQUFDTixTQUFTSSxRQUFRLENBQUM7QUFDckU7QUFFQSwyQkFBMkIsR0FDM0Isc0NBQXNDO0FBQ3RDLFNBQVNHLEtBQUtDLFNBQVM7SUFDckIsTUFBTUMsaUJBQWlCO0lBQ3ZCLE1BQU1DLGFBQWE7SUFFbkIsc0NBQXNDO0lBQ3RDLE9BQU8sQ0FBQ0M7UUFDTixNQUFNQyxZQUFZRCxLQUFLTixLQUFLLENBQUNLO1FBRTdCLElBQUlFLFdBQVc7WUFDYixJQUFJQztZQUNKLElBQUlDO1lBQ0osSUFBSUM7WUFDSixJQUFJQztZQUNKLElBQUlDO1lBRUosSUFBSUwsU0FBUyxDQUFDLEVBQUUsRUFBRTtnQkFDaEJHLGVBQWVILFNBQVMsQ0FBQyxFQUFFO2dCQUUzQixJQUFJTSxjQUFjSCxhQUFhSSxXQUFXLENBQUM7Z0JBQzNDLElBQUlKLFlBQVksQ0FBQ0csY0FBYyxFQUFFLEtBQUssS0FBSztvQkFDekNBO2dCQUNGO2dCQUVBLElBQUlBLGNBQWMsR0FBRztvQkFDbkJMLFNBQVNFLGFBQWFLLEtBQUssQ0FBQyxHQUFHRjtvQkFDL0JKLFNBQVNDLGFBQWFLLEtBQUssQ0FBQ0YsY0FBYztvQkFDMUMsTUFBTUcsWUFBWVIsT0FBT1MsT0FBTyxDQUFDO29CQUNqQyxJQUFJRCxZQUFZLEdBQUc7d0JBQ2pCTixlQUFlQSxhQUFhSyxLQUFLLENBQUNDLFlBQVk7d0JBQzlDUixTQUFTQSxPQUFPTyxLQUFLLENBQUMsR0FBR0M7b0JBQzNCO2dCQUNGO2dCQUNBTCxXQUFXVjtZQUNiO1lBRUEsSUFBSVEsUUFBUTtnQkFDVkUsV0FBV0g7Z0JBQ1hJLGFBQWFIO1lBQ2Y7WUFFQSxJQUFJQSxXQUFXLGVBQWU7Z0JBQzVCRyxhQUFhWDtnQkFDYlMsZUFBZVQ7WUFDakI7WUFFQSxJQUFJUyxpQkFBaUJULFdBQVc7Z0JBQzlCVyxhQUFhQSxjQUFjO2dCQUMzQkYsZUFBZUMsV0FBVyxDQUFDLEVBQUVBLFNBQVMsQ0FBQyxFQUFFQyxXQUFXLENBQUMsR0FBR0E7WUFDMUQ7WUFFQSxJQUFJakIsV0FBV1ksU0FBUyxDQUFDLEVBQUUsSUFBSUEsU0FBUyxDQUFDLEVBQUUsQ0FBQ1QsVUFBVSxDQUFDLGFBQWFTLFNBQVMsQ0FBQyxFQUFFLENBQUNRLEtBQUssQ0FBQyxLQUFLUixTQUFTLENBQUMsRUFBRTtZQUN4RyxNQUFNWCxXQUFXVyxTQUFTLENBQUMsRUFBRSxLQUFLO1lBRWxDLElBQUksQ0FBQ1osWUFBWVksU0FBUyxDQUFDLEVBQUUsSUFBSSxDQUFDWCxVQUFVO2dCQUMxQ0QsV0FBV1ksU0FBUyxDQUFDLEVBQUU7WUFDekI7WUFFQSxPQUFPO2dCQUNMWjtnQkFDQXVCLFFBQVFmLFlBQVlBLFVBQVVSLFlBQVlNO2dCQUMxQ2tCLFVBQVVUO2dCQUNWVSxRQUFRQyxTQUFTZCxTQUFTLENBQUMsRUFBRSxFQUFFLE9BQU9OO2dCQUN0Q3FCLE9BQU9ELFNBQVNkLFNBQVMsQ0FBQyxFQUFFLEVBQUUsT0FBT047Z0JBQ3JDc0IsUUFBUTdCLGdCQUFnQkMsVUFBVUM7WUFDcEM7UUFDRjtRQUVBLElBQUlVLEtBQUtOLEtBQUssQ0FBQ0ksaUJBQWlCO1lBQzlCLE9BQU87Z0JBQ0xULFVBQVVXO1lBQ1o7UUFDRjtRQUVBLE9BQU9MO0lBQ1Q7QUFDRjtBQUVpQyxDQUNqQyw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXJhbS1sbXMtZmUvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9ub2RlLXN0YWNrLXRyYWNlLmpzP2Q4ZTEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEb2VzIHRoaXMgZmlsZW5hbWUgbG9vayBsaWtlIGl0J3MgcGFydCBvZiB0aGUgYXBwIGNvZGU/XG4gKi9cbmZ1bmN0aW9uIGZpbGVuYW1lSXNJbkFwcChmaWxlbmFtZSwgaXNOYXRpdmUgPSBmYWxzZSkge1xuICBjb25zdCBpc0ludGVybmFsID1cbiAgICBpc05hdGl2ZSB8fFxuICAgIChmaWxlbmFtZSAmJlxuICAgICAgLy8gSXQncyBub3QgaW50ZXJuYWwgaWYgaXQncyBhbiBhYnNvbHV0ZSBsaW51eCBwYXRoXG4gICAgICAhZmlsZW5hbWUuc3RhcnRzV2l0aCgnLycpICYmXG4gICAgICAvLyBJdCdzIG5vdCBpbnRlcm5hbCBpZiBpdCdzIGFuIGFic29sdXRlIHdpbmRvd3MgcGF0aFxuICAgICAgIWZpbGVuYW1lLmluY2x1ZGVzKCc6XFxcXCcpICYmXG4gICAgICAvLyBJdCdzIG5vdCBpbnRlcm5hbCBpZiB0aGUgcGF0aCBpcyBzdGFydGluZyB3aXRoIGEgZG90XG4gICAgICAhZmlsZW5hbWUuc3RhcnRzV2l0aCgnLicpICYmXG4gICAgICAvLyBJdCdzIG5vdCBpbnRlcm5hbCBpZiB0aGUgZnJhbWUgaGFzIGEgcHJvdG9jb2wuIEluIG5vZGUsIHRoaXMgaXMgdXN1YWxseSB0aGUgY2FzZSBpZiB0aGUgZmlsZSBnb3QgcHJlLXByb2Nlc3NlZCB3aXRoIGEgYnVuZGxlciBsaWtlIHdlYnBhY2tcbiAgICAgICFmaWxlbmFtZS5tYXRjaCgvXlthLXpBLVpdKFthLXpBLVowLTkuXFwtK10pKjpcXC9cXC8vKSk7IC8vIFNjaGVtYSBmcm9tOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzY0MTc4MlxuXG4gIC8vIGluX2FwcCBpcyBhbGwgdGhhdCdzIG5vdCBhbiBpbnRlcm5hbCBOb2RlIGZ1bmN0aW9uIG9yIGEgbW9kdWxlIHdpdGhpbiBub2RlX21vZHVsZXNcbiAgLy8gbm90ZSB0aGF0IGlzTmF0aXZlIGFwcGVhcnMgdG8gcmV0dXJuIHRydWUgZXZlbiBmb3Igbm9kZSBjb3JlIGxpYnJhcmllc1xuICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9yYXZlbi1ub2RlL2lzc3Vlcy8xNzZcblxuICByZXR1cm4gIWlzSW50ZXJuYWwgJiYgZmlsZW5hbWUgIT09IHVuZGVmaW5lZCAmJiAhZmlsZW5hbWUuaW5jbHVkZXMoJ25vZGVfbW9kdWxlcy8nKTtcbn1cblxuLyoqIE5vZGUgU3RhY2sgbGluZSBwYXJzZXIgKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiBub2RlKGdldE1vZHVsZSkge1xuICBjb25zdCBGSUxFTkFNRV9NQVRDSCA9IC9eXFxzKlstXXs0LH0kLztcbiAgY29uc3QgRlVMTF9NQVRDSCA9IC9hdCAoPzphc3luYyApPyg/OiguKz8pXFxzK1xcKCk/KD86KC4rKTooXFxkKyk6KFxcZCspP3woW14pXSspKVxcKT8vO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gIHJldHVybiAobGluZSkgPT4ge1xuICAgIGNvbnN0IGxpbmVNYXRjaCA9IGxpbmUubWF0Y2goRlVMTF9NQVRDSCk7XG5cbiAgICBpZiAobGluZU1hdGNoKSB7XG4gICAgICBsZXQgb2JqZWN0O1xuICAgICAgbGV0IG1ldGhvZDtcbiAgICAgIGxldCBmdW5jdGlvbk5hbWU7XG4gICAgICBsZXQgdHlwZU5hbWU7XG4gICAgICBsZXQgbWV0aG9kTmFtZTtcblxuICAgICAgaWYgKGxpbmVNYXRjaFsxXSkge1xuICAgICAgICBmdW5jdGlvbk5hbWUgPSBsaW5lTWF0Y2hbMV07XG5cbiAgICAgICAgbGV0IG1ldGhvZFN0YXJ0ID0gZnVuY3Rpb25OYW1lLmxhc3RJbmRleE9mKCcuJyk7XG4gICAgICAgIGlmIChmdW5jdGlvbk5hbWVbbWV0aG9kU3RhcnQgLSAxXSA9PT0gJy4nKSB7XG4gICAgICAgICAgbWV0aG9kU3RhcnQtLTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtZXRob2RTdGFydCA+IDApIHtcbiAgICAgICAgICBvYmplY3QgPSBmdW5jdGlvbk5hbWUuc2xpY2UoMCwgbWV0aG9kU3RhcnQpO1xuICAgICAgICAgIG1ldGhvZCA9IGZ1bmN0aW9uTmFtZS5zbGljZShtZXRob2RTdGFydCArIDEpO1xuICAgICAgICAgIGNvbnN0IG9iamVjdEVuZCA9IG9iamVjdC5pbmRleE9mKCcuTW9kdWxlJyk7XG4gICAgICAgICAgaWYgKG9iamVjdEVuZCA+IDApIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uTmFtZSA9IGZ1bmN0aW9uTmFtZS5zbGljZShvYmplY3RFbmQgKyAxKTtcbiAgICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5zbGljZSgwLCBvYmplY3RFbmQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0eXBlTmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgaWYgKG1ldGhvZCkge1xuICAgICAgICB0eXBlTmFtZSA9IG9iamVjdDtcbiAgICAgICAgbWV0aG9kTmFtZSA9IG1ldGhvZDtcbiAgICAgIH1cblxuICAgICAgaWYgKG1ldGhvZCA9PT0gJzxhbm9ueW1vdXM+Jykge1xuICAgICAgICBtZXRob2ROYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICBmdW5jdGlvbk5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChmdW5jdGlvbk5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtZXRob2ROYW1lID0gbWV0aG9kTmFtZSB8fCAnPGFub255bW91cz4nO1xuICAgICAgICBmdW5jdGlvbk5hbWUgPSB0eXBlTmFtZSA/IGAke3R5cGVOYW1lfS4ke21ldGhvZE5hbWV9YCA6IG1ldGhvZE5hbWU7XG4gICAgICB9XG5cbiAgICAgIGxldCBmaWxlbmFtZSA9IGxpbmVNYXRjaFsyXSAmJiBsaW5lTWF0Y2hbMl0uc3RhcnRzV2l0aCgnZmlsZTovLycpID8gbGluZU1hdGNoWzJdLnNsaWNlKDcpIDogbGluZU1hdGNoWzJdO1xuICAgICAgY29uc3QgaXNOYXRpdmUgPSBsaW5lTWF0Y2hbNV0gPT09ICduYXRpdmUnO1xuXG4gICAgICBpZiAoIWZpbGVuYW1lICYmIGxpbmVNYXRjaFs1XSAmJiAhaXNOYXRpdmUpIHtcbiAgICAgICAgZmlsZW5hbWUgPSBsaW5lTWF0Y2hbNV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZpbGVuYW1lLFxuICAgICAgICBtb2R1bGU6IGdldE1vZHVsZSA/IGdldE1vZHVsZShmaWxlbmFtZSkgOiB1bmRlZmluZWQsXG4gICAgICAgIGZ1bmN0aW9uOiBmdW5jdGlvbk5hbWUsXG4gICAgICAgIGxpbmVubzogcGFyc2VJbnQobGluZU1hdGNoWzNdLCAxMCkgfHwgdW5kZWZpbmVkLFxuICAgICAgICBjb2xubzogcGFyc2VJbnQobGluZU1hdGNoWzRdLCAxMCkgfHwgdW5kZWZpbmVkLFxuICAgICAgICBpbl9hcHA6IGZpbGVuYW1lSXNJbkFwcChmaWxlbmFtZSwgaXNOYXRpdmUpLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAobGluZS5tYXRjaChGSUxFTkFNRV9NQVRDSCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZpbGVuYW1lOiBsaW5lLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xufVxuXG5leHBvcnQgeyBmaWxlbmFtZUlzSW5BcHAsIG5vZGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGUtc3RhY2stdHJhY2UuanMubWFwXG4iXSwibmFtZXMiOlsiZmlsZW5hbWVJc0luQXBwIiwiZmlsZW5hbWUiLCJpc05hdGl2ZSIsImlzSW50ZXJuYWwiLCJzdGFydHNXaXRoIiwiaW5jbHVkZXMiLCJtYXRjaCIsInVuZGVmaW5lZCIsIm5vZGUiLCJnZXRNb2R1bGUiLCJGSUxFTkFNRV9NQVRDSCIsIkZVTExfTUFUQ0giLCJsaW5lIiwibGluZU1hdGNoIiwib2JqZWN0IiwibWV0aG9kIiwiZnVuY3Rpb25OYW1lIiwidHlwZU5hbWUiLCJtZXRob2ROYW1lIiwibWV0aG9kU3RhcnQiLCJsYXN0SW5kZXhPZiIsInNsaWNlIiwib2JqZWN0RW5kIiwiaW5kZXhPZiIsIm1vZHVsZSIsImZ1bmN0aW9uIiwibGluZW5vIiwicGFyc2VJbnQiLCJjb2xubyIsImluX2FwcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/node-stack-trace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/node.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/node.js ***!
  \**************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dynamicRequire: () => (/* binding */ dynamicRequire),\n/* harmony export */   isNodeEnv: () => (/* binding */ isNodeEnv),\n/* harmony export */   loadModule: () => (/* binding */ loadModule)\n/* harmony export */ });\n/* harmony import */ var _env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./env.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/env.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */ /**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */ function isNodeEnv() {\n    // explicitly check for browser bundles as those can be optimized statically\n    // by terser/rollup.\n    return !(0,_env_js__WEBPACK_IMPORTED_MODULE_0__.isBrowserBundle)() && Object.prototype.toString.call(typeof process !== \"undefined\" ? process : 0) === \"[object process]\";\n}\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */ // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nfunction dynamicRequire(mod, request) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return mod.require(request);\n}\n/**\n * Helper for dynamically loading module that should work with linked dependencies.\n * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`\n * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during\n * build time. `require.resolve` is also not available in any other way, so we cannot create,\n * a fake helper like we do with `dynamicRequire`.\n *\n * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.\n * That is to mimic the behavior of `require.resolve` exactly.\n *\n * @param moduleName module name to require\n * @returns possibly required module\n */ function loadModule(moduleName) {\n    let mod;\n    try {\n        mod = dynamicRequire(module, moduleName);\n    } catch (e) {\n    // no-empty\n    }\n    try {\n        const { cwd } = dynamicRequire(module, \"process\");\n        mod = dynamicRequire(module, `${cwd()}/node_modules/${moduleName}`);\n    } catch (e) {\n    // no-empty\n    }\n    return mod;\n}\n //# sourceMappingURL=node.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9ub2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTJDO0FBRTNDOzs7Q0FHQyxHQUVEOzs7O0NBSUMsR0FDRCxTQUFTQztJQUNQLDRFQUE0RTtJQUM1RSxvQkFBb0I7SUFDcEIsT0FDRSxDQUFDRCx3REFBZUEsTUFDaEJFLE9BQU9DLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDQyxJQUFJLENBQUMsT0FBT0MsWUFBWSxjQUFjQSxVQUFVLE9BQU87QUFFckY7QUFFQTs7OztDQUlDLEdBQ0QsaUhBQWlIO0FBQ2pILFNBQVNDLGVBQWVDLEdBQUcsRUFBRUMsT0FBTztJQUNsQyxzRUFBc0U7SUFDdEUsT0FBT0QsSUFBSUUsT0FBTyxDQUFDRDtBQUNyQjtBQUVBOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUNELFNBQVNFLFdBQVdDLFVBQVU7SUFDNUIsSUFBSUo7SUFFSixJQUFJO1FBQ0ZBLE1BQU1ELGVBQWVNLFFBQVFEO0lBQy9CLEVBQUUsT0FBT0UsR0FBRztJQUNWLFdBQVc7SUFDYjtJQUVBLElBQUk7UUFDRixNQUFNLEVBQUVDLEdBQUcsRUFBRSxHQUFHUixlQUFlTSxRQUFRO1FBQ3ZDTCxNQUFNRCxlQUFlTSxRQUFRLENBQUMsRUFBRUUsTUFBTSxjQUFjLEVBQUVILFdBQVcsQ0FBQztJQUNwRSxFQUFFLE9BQU9FLEdBQUc7SUFDVixXQUFXO0lBQ2I7SUFFQSxPQUFPTjtBQUNUO0FBRWlELENBQ2pELGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL25vZGUuanM/NDYzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0Jyb3dzZXJCdW5kbGUgfSBmcm9tICcuL2Vudi5qcyc7XG5cbi8qKlxuICogTk9URTogSW4gb3JkZXIgdG8gYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLCBpZiB5b3UgYWRkIGEgZnVuY3Rpb24gdG8gdGhpcyBtb2R1bGUgYW5kIGl0IG5lZWRzIHRvIHByaW50IHNvbWV0aGluZyxcbiAqIHlvdSBtdXN0IGVpdGhlciBhKSB1c2UgYGNvbnNvbGUubG9nYCByYXRoZXIgdGhhbiB0aGUgbG9nZ2VyLCBvciBiKSBwdXQgeW91ciBmdW5jdGlvbiBlbHNld2hlcmUuXG4gKi9cblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB3ZSdyZSBpbiB0aGUgTm9kZS5qcyBvciBCcm93c2VyIGVudmlyb25tZW50XG4gKlxuICogQHJldHVybnMgQW5zd2VyIHRvIGdpdmVuIHF1ZXN0aW9uXG4gKi9cbmZ1bmN0aW9uIGlzTm9kZUVudigpIHtcbiAgLy8gZXhwbGljaXRseSBjaGVjayBmb3IgYnJvd3NlciBidW5kbGVzIGFzIHRob3NlIGNhbiBiZSBvcHRpbWl6ZWQgc3RhdGljYWxseVxuICAvLyBieSB0ZXJzZXIvcm9sbHVwLlxuICByZXR1cm4gKFxuICAgICFpc0Jyb3dzZXJCdW5kbGUoKSAmJlxuICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgPyBwcm9jZXNzIDogMCkgPT09ICdbb2JqZWN0IHByb2Nlc3NdJ1xuICApO1xufVxuXG4vKipcbiAqIFJlcXVpcmVzIGEgbW9kdWxlIHdoaWNoIGlzIHByb3RlY3RlZCBhZ2FpbnN0IGJ1bmRsZXIgbWluaWZpY2F0aW9uLlxuICpcbiAqIEBwYXJhbSByZXF1ZXN0IFRoZSBtb2R1bGUgcGF0aCB0byByZXNvbHZlXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBkeW5hbWljUmVxdWlyZShtb2QsIHJlcXVlc3QpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICByZXR1cm4gbW9kLnJlcXVpcmUocmVxdWVzdCk7XG59XG5cbi8qKlxuICogSGVscGVyIGZvciBkeW5hbWljYWxseSBsb2FkaW5nIG1vZHVsZSB0aGF0IHNob3VsZCB3b3JrIHdpdGggbGlua2VkIGRlcGVuZGVuY2llcy5cbiAqIFRoZSBwcm9ibGVtIGlzIHRoYXQgd2UgX3Nob3VsZF8gYmUgdXNpbmcgYHJlcXVpcmUocmVxdWlyZS5yZXNvbHZlKG1vZHVsZU5hbWUsIHsgcGF0aHM6IFtjd2QoKV0gfSkpYFxuICogSG93ZXZlciBpdCdzIF9ub3QgcG9zc2libGVfIHRvIGRvIHRoYXQgd2l0aCBXZWJwYWNrLCBhcyBpdCBoYXMgdG8ga25vdyBhbGwgdGhlIGRlcGVuZGVuY2llcyBkdXJpbmdcbiAqIGJ1aWxkIHRpbWUuIGByZXF1aXJlLnJlc29sdmVgIGlzIGFsc28gbm90IGF2YWlsYWJsZSBpbiBhbnkgb3RoZXIgd2F5LCBzbyB3ZSBjYW5ub3QgY3JlYXRlLFxuICogYSBmYWtlIGhlbHBlciBsaWtlIHdlIGRvIHdpdGggYGR5bmFtaWNSZXF1aXJlYC5cbiAqXG4gKiBXZSBhbHdheXMgcHJlZmVyIHRvIHVzZSBsb2NhbCBwYWNrYWdlLCB0aHVzIHRoZSB2YWx1ZSBpcyBub3QgcmV0dXJuZWQgZWFybHkgZnJvbSBlYWNoIGB0cnkvY2F0Y2hgIGJsb2NrLlxuICogVGhhdCBpcyB0byBtaW1pYyB0aGUgYmVoYXZpb3Igb2YgYHJlcXVpcmUucmVzb2x2ZWAgZXhhY3RseS5cbiAqXG4gKiBAcGFyYW0gbW9kdWxlTmFtZSBtb2R1bGUgbmFtZSB0byByZXF1aXJlXG4gKiBAcmV0dXJucyBwb3NzaWJseSByZXF1aXJlZCBtb2R1bGVcbiAqL1xuZnVuY3Rpb24gbG9hZE1vZHVsZShtb2R1bGVOYW1lKSB7XG4gIGxldCBtb2Q7XG5cbiAgdHJ5IHtcbiAgICBtb2QgPSBkeW5hbWljUmVxdWlyZShtb2R1bGUsIG1vZHVsZU5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gbm8tZW1wdHlcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBjd2QgfSA9IGR5bmFtaWNSZXF1aXJlKG1vZHVsZSwgJ3Byb2Nlc3MnKTtcbiAgICBtb2QgPSBkeW5hbWljUmVxdWlyZShtb2R1bGUsIGAke2N3ZCgpfS9ub2RlX21vZHVsZXMvJHttb2R1bGVOYW1lfWApIDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIG5vLWVtcHR5XG4gIH1cblxuICByZXR1cm4gbW9kO1xufVxuXG5leHBvcnQgeyBkeW5hbWljUmVxdWlyZSwgaXNOb2RlRW52LCBsb2FkTW9kdWxlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLmpzLm1hcFxuIl0sIm5hbWVzIjpbImlzQnJvd3NlckJ1bmRsZSIsImlzTm9kZUVudiIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsInByb2Nlc3MiLCJkeW5hbWljUmVxdWlyZSIsIm1vZCIsInJlcXVlc3QiLCJyZXF1aXJlIiwibG9hZE1vZHVsZSIsIm1vZHVsZU5hbWUiLCJtb2R1bGUiLCJlIiwiY3dkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/normalize.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/normalize.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   normalizeToSize: () => (/* binding */ normalizeToSize),\n/* harmony export */   walk: () => (/* binding */ visit)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _memo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./memo.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/memo.js\");\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _stacktrace_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stacktrace.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/stacktrace.js\");\n\n\n\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction normalize(input, depth = 100, maxProperties = +Infinity) {\n    try {\n        // since we're at the outermost level, we don't provide a key\n        return visit(\"\", input, depth, maxProperties);\n    } catch (err) {\n        return {\n            ERROR: `**non-serializable** (${err})`\n        };\n    }\n}\n/** JSDoc */ function normalizeToSize(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nobject, // Default Node.js REPL depth\ndepth = 3, // 100kB, as 200kB is max payload size, so half sounds reasonable\nmaxSize = 100 * 1024) {\n    const normalized = normalize(object, depth);\n    if (jsonSize(normalized) > maxSize) {\n        return normalizeToSize(object, depth - 1, maxSize);\n    }\n    return normalized;\n}\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */ function visit(key, value, depth = +Infinity, maxProperties = +Infinity, memo = (0,_memo_js__WEBPACK_IMPORTED_MODULE_0__.memoBuilder)()) {\n    const [memoize, unmemoize] = memo;\n    // Get the simple cases out of the way first\n    if (value == null || // this matches null and undefined -> eqeq not eqeqeq\n    [\n        \"number\",\n        \"boolean\",\n        \"string\"\n    ].includes(typeof value) && !(0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isNaN)(value)) {\n        return value;\n    }\n    const stringified = stringifyValue(key, value);\n    // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n    // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n    if (!stringified.startsWith(\"[object \")) {\n        return stringified;\n    }\n    // From here on, we can assert that `value` is either an object or an array.\n    // Do not normalize objects that we know have already been normalized. As a general rule, the\n    // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n    // have already been normalized.\n    if (value[\"__sentry_skip_normalization__\"]) {\n        return value;\n    }\n    // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n    // We keep a certain amount of depth.\n    // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n    const remainingDepth = typeof value[\"__sentry_override_normalization_depth__\"] === \"number\" ? value[\"__sentry_override_normalization_depth__\"] : depth;\n    // We're also done if we've reached the max depth\n    if (remainingDepth === 0) {\n        // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n        return stringified.replace(\"object \", \"\");\n    }\n    // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n    if (memoize(value)) {\n        return \"[Circular ~]\";\n    }\n    // If the value has a `toJSON` method, we call it to extract more information\n    const valueWithToJSON = value;\n    if (valueWithToJSON && typeof valueWithToJSON.toJSON === \"function\") {\n        try {\n            const jsonValue = valueWithToJSON.toJSON();\n            // We need to normalize the return value of `.toJSON()` in case it has circular references\n            return visit(\"\", jsonValue, remainingDepth - 1, maxProperties, memo);\n        } catch (err) {\n        // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n        }\n    }\n    // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n    // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n    // property/entry, and keep track of the number of items we add to it.\n    const normalized = Array.isArray(value) ? [] : {};\n    let numAdded = 0;\n    // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n    // properties are non-enumerable and otherwise would get missed.\n    const visitable = (0,_object_js__WEBPACK_IMPORTED_MODULE_2__.convertToPlainObject)(value);\n    for(const visitKey in visitable){\n        // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n        if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n            continue;\n        }\n        if (numAdded >= maxProperties) {\n            normalized[visitKey] = \"[MaxProperties ~]\";\n            break;\n        }\n        // Recursively visit all the child nodes\n        const visitValue = visitable[visitKey];\n        normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo);\n        numAdded++;\n    }\n    // Once we've visited all the branches, remove the parent from memo storage\n    unmemoize(value);\n    // Return accumulated values\n    return normalized;\n}\n/* eslint-disable complexity */ /**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */ function stringifyValue(key, // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n// our internal use, it'll do\nvalue) {\n    try {\n        if (key === \"domain\" && value && typeof value === \"object\" && value._events) {\n            return \"[Domain]\";\n        }\n        if (key === \"domainEmitter\") {\n            return \"[DomainEmitter]\";\n        }\n        // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n        // which won't throw if they are not present.\n        if (typeof global !== \"undefined\" && value === global) {\n            return \"[Global]\";\n        }\n        // eslint-disable-next-line no-restricted-globals\n        if (false) {}\n        // eslint-disable-next-line no-restricted-globals\n        if (typeof document !== \"undefined\" && value === document) {\n            return \"[Document]\";\n        }\n        if ((0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isVueViewModel)(value)) {\n            return \"[VueViewModel]\";\n        }\n        // React's SyntheticEvent thingy\n        if ((0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isSyntheticEvent)(value)) {\n            return \"[SyntheticEvent]\";\n        }\n        if (typeof value === \"number\" && value !== value) {\n            return \"[NaN]\";\n        }\n        if (typeof value === \"function\") {\n            return `[Function: ${(0,_stacktrace_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(value)}]`;\n        }\n        if (typeof value === \"symbol\") {\n            return `[${String(value)}]`;\n        }\n        // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n        if (typeof value === \"bigint\") {\n            return `[BigInt: ${String(value)}]`;\n        }\n        // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n        // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n        // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n        // we can make sure that only plain objects come out that way.\n        const objName = getConstructorName(value);\n        // Handle HTML Elements\n        if (/^HTML(\\w*)Element$/.test(objName)) {\n            return `[HTMLElement: ${objName}]`;\n        }\n        return `[object ${objName}]`;\n    } catch (err) {\n        return `**non-serializable** (${err})`;\n    }\n}\n/* eslint-enable complexity */ function getConstructorName(value) {\n    const prototype = Object.getPrototypeOf(value);\n    return prototype ? prototype.constructor.name : \"null prototype\";\n}\n/** Calculates bytes size of input string */ function utf8Length(value) {\n    // eslint-disable-next-line no-bitwise\n    return ~-encodeURI(value).split(/%..|./).length;\n}\n/** Calculates bytes size of input object */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value) {\n    return utf8Length(JSON.stringify(value));\n}\n //# sourceMappingURL=normalize.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/normalize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/object.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/object.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addNonEnumerableProperty: () => (/* binding */ addNonEnumerableProperty),\n/* harmony export */   convertToPlainObject: () => (/* binding */ convertToPlainObject),\n/* harmony export */   dropUndefinedKeys: () => (/* binding */ dropUndefinedKeys),\n/* harmony export */   extractExceptionKeysForMessage: () => (/* binding */ extractExceptionKeysForMessage),\n/* harmony export */   fill: () => (/* binding */ fill),\n/* harmony export */   getOriginalFunction: () => (/* binding */ getOriginalFunction),\n/* harmony export */   markFunctionWrapped: () => (/* binding */ markFunctionWrapped),\n/* harmony export */   objectify: () => (/* binding */ objectify),\n/* harmony export */   urlEncode: () => (/* binding */ urlEncode)\n/* harmony export */ });\n/* harmony import */ var _browser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./browser.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/browser.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/debug-build.js\");\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./string.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/string.js\");\n\n\n\n\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */ function fill(source, name, replacementFactory) {\n    if (!(name in source)) {\n        return;\n    }\n    const original = source[name];\n    const wrapped = replacementFactory(original);\n    // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n    // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n    if (typeof wrapped === \"function\") {\n        markFunctionWrapped(wrapped, original);\n    }\n    source[name] = wrapped;\n}\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */ function addNonEnumerableProperty(obj, name, value) {\n    try {\n        Object.defineProperty(obj, name, {\n            // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n            value: value,\n            writable: true,\n            configurable: true\n        });\n    } catch (o_O) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Failed to add non-enumerable property \"${name}\" to object`, obj);\n    }\n}\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */ function markFunctionWrapped(wrapped, original) {\n    try {\n        const proto = original.prototype || {};\n        wrapped.prototype = original.prototype = proto;\n        addNonEnumerableProperty(wrapped, \"__sentry_original__\", original);\n    } catch (o_O) {} // eslint-disable-line no-empty\n}\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */ function getOriginalFunction(func) {\n    return func.__sentry_original__;\n}\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */ function urlEncode(object) {\n    return Object.keys(object).map((key)=>`${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`).join(\"&\");\n}\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argurment itself, when value is neither an Event nor\n *  an Error.\n */ function convertToPlainObject(value) {\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isError)(value)) {\n        return {\n            message: value.message,\n            name: value.name,\n            stack: value.stack,\n            ...getOwnProperties(value)\n        };\n    } else if ((0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isEvent)(value)) {\n        const newObj = {\n            type: value.type,\n            target: serializeEventTarget(value.target),\n            currentTarget: serializeEventTarget(value.currentTarget),\n            ...getOwnProperties(value)\n        };\n        if (typeof CustomEvent !== \"undefined\" && (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isInstanceOf)(value, CustomEvent)) {\n            newObj.detail = value.detail;\n        }\n        return newObj;\n    } else {\n        return value;\n    }\n}\n/** Creates a string representation of the target of an `Event` object */ function serializeEventTarget(target) {\n    try {\n        return (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isElement)(target) ? (0,_browser_js__WEBPACK_IMPORTED_MODULE_3__.htmlTreeAsString)(target) : Object.prototype.toString.call(target);\n    } catch (_oO) {\n        return \"<unknown>\";\n    }\n}\n/** Filters out all but an object's own properties */ function getOwnProperties(obj) {\n    if (typeof obj === \"object\" && obj !== null) {\n        const extractedProps = {};\n        for(const property in obj){\n            if (Object.prototype.hasOwnProperty.call(obj, property)) {\n                extractedProps[property] = obj[property];\n            }\n        }\n        return extractedProps;\n    } else {\n        return {};\n    }\n}\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */ function extractExceptionKeysForMessage(exception, maxLength = 40) {\n    const keys = Object.keys(convertToPlainObject(exception));\n    keys.sort();\n    if (!keys.length) {\n        return \"[object has no keys]\";\n    }\n    if (keys[0].length >= maxLength) {\n        return (0,_string_js__WEBPACK_IMPORTED_MODULE_4__.truncate)(keys[0], maxLength);\n    }\n    for(let includedKeys = keys.length; includedKeys > 0; includedKeys--){\n        const serialized = keys.slice(0, includedKeys).join(\", \");\n        if (serialized.length > maxLength) {\n            continue;\n        }\n        if (includedKeys === keys.length) {\n            return serialized;\n        }\n        return (0,_string_js__WEBPACK_IMPORTED_MODULE_4__.truncate)(serialized, maxLength);\n    }\n    return \"\";\n}\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n */ function dropUndefinedKeys(inputValue) {\n    // This map keeps track of what already visited nodes map to.\n    // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n    // references as the input object.\n    const memoizationMap = new Map();\n    // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n    return _dropUndefinedKeys(inputValue, memoizationMap);\n}\nfunction _dropUndefinedKeys(inputValue, memoizationMap) {\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(inputValue)) {\n        // If this node has already been visited due to a circular reference, return the object it was mapped to in the new object\n        const memoVal = memoizationMap.get(inputValue);\n        if (memoVal !== undefined) {\n            return memoVal;\n        }\n        const returnValue = {};\n        // Store the mapping of this value in case we visit it again, in case of circular data\n        memoizationMap.set(inputValue, returnValue);\n        for (const key of Object.keys(inputValue)){\n            if (typeof inputValue[key] !== \"undefined\") {\n                returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);\n            }\n        }\n        return returnValue;\n    }\n    if (Array.isArray(inputValue)) {\n        // If this node has already been visited due to a circular reference, return the array it was mapped to in the new object\n        const memoVal = memoizationMap.get(inputValue);\n        if (memoVal !== undefined) {\n            return memoVal;\n        }\n        const returnValue = [];\n        // Store the mapping of this value in case we visit it again, in case of circular data\n        memoizationMap.set(inputValue, returnValue);\n        inputValue.forEach((item)=>{\n            returnValue.push(_dropUndefinedKeys(item, memoizationMap));\n        });\n        return returnValue;\n    }\n    return inputValue;\n}\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */ function objectify(wat) {\n    let objectified;\n    switch(true){\n        case wat === undefined || wat === null:\n            objectified = new String(wat);\n            break;\n        // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n        // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n        // an object in order to wrap it.\n        case typeof wat === \"symbol\" || typeof wat === \"bigint\":\n            objectified = Object(wat);\n            break;\n        // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n        case (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isPrimitive)(wat):\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            objectified = new wat.constructor(wat);\n            break;\n        // by process of elimination, at this point we know that `wat` must already be an object\n        default:\n            objectified = wat;\n            break;\n    }\n    return objectified;\n}\n //# sourceMappingURL=object.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/object.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/requestdata.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/requestdata.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_USER_INCLUDES: () => (/* binding */ DEFAULT_USER_INCLUDES),\n/* harmony export */   addRequestDataToEvent: () => (/* binding */ addRequestDataToEvent),\n/* harmony export */   addRequestDataToTransaction: () => (/* binding */ addRequestDataToTransaction),\n/* harmony export */   extractPathForTransaction: () => (/* binding */ extractPathForTransaction),\n/* harmony export */   extractRequestData: () => (/* binding */ extractRequestData),\n/* harmony export */   winterCGHeadersToDict: () => (/* binding */ winterCGHeadersToDict),\n/* harmony export */   winterCGRequestToRequestData: () => (/* binding */ winterCGRequestToRequestData)\n/* harmony export */ });\n/* harmony import */ var _cookie_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cookie.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/cookie.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/debug-build.js\");\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./logger.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _normalize_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./normalize.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/normalize.js\");\n/* harmony import */ var _url_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./url.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/url.js\");\n\n\n\n\n\n\nconst DEFAULT_INCLUDES = {\n    ip: false,\n    request: true,\n    transaction: true,\n    user: true\n};\nconst DEFAULT_REQUEST_INCLUDES = [\n    \"cookies\",\n    \"data\",\n    \"headers\",\n    \"method\",\n    \"query_string\",\n    \"url\"\n];\nconst DEFAULT_USER_INCLUDES = [\n    \"id\",\n    \"username\",\n    \"email\"\n];\n/**\n * Sets parameterized route as transaction name e.g.: `GET /users/:id`\n * Also adds more context data on the transaction from the request\n */ function addRequestDataToTransaction(transaction, req, deps) {\n    if (!transaction) return;\n    if (!transaction.metadata.source || transaction.metadata.source === \"url\") {\n        // Attempt to grab a parameterized route off of the request\n        transaction.setName(...extractPathForTransaction(req, {\n            path: true,\n            method: true\n        }));\n    }\n    transaction.setData(\"url\", req.originalUrl || req.url);\n    if (req.baseUrl) {\n        transaction.setData(\"baseUrl\", req.baseUrl);\n    }\n    transaction.setData(\"query\", extractQueryParams(req, deps));\n}\n/**\n * Extracts a complete and parameterized path from the request object and uses it to construct transaction name.\n * If the parameterized transaction name cannot be extracted, we fall back to the raw URL.\n *\n * Additionally, this function determines and returns the transaction name source\n *\n * eg. GET /mountpoint/user/:id\n *\n * @param req A request object\n * @param options What to include in the transaction name (method, path, or a custom route name to be\n *                used instead of the request's route)\n *\n * @returns A tuple of the fully constructed transaction name [0] and its source [1] (can be either 'route' or 'url')\n */ function extractPathForTransaction(req, options = {}) {\n    const method = req.method && req.method.toUpperCase();\n    let path = \"\";\n    let source = \"url\";\n    // Check to see if there's a parameterized route we can use (as there is in Express)\n    if (options.customRoute || req.route) {\n        path = options.customRoute || `${req.baseUrl || \"\"}${req.route && req.route.path}`;\n        source = \"route\";\n    } else if (req.originalUrl || req.url) {\n        path = (0,_url_js__WEBPACK_IMPORTED_MODULE_0__.stripUrlQueryAndFragment)(req.originalUrl || req.url || \"\");\n    }\n    let name = \"\";\n    if (options.method && method) {\n        name += method;\n    }\n    if (options.method && options.path) {\n        name += \" \";\n    }\n    if (options.path && path) {\n        name += path;\n    }\n    return [\n        name,\n        source\n    ];\n}\n/** JSDoc */ function extractTransaction(req, type) {\n    switch(type){\n        case \"path\":\n            {\n                return extractPathForTransaction(req, {\n                    path: true\n                })[0];\n            }\n        case \"handler\":\n            {\n                return req.route && req.route.stack && req.route.stack[0] && req.route.stack[0].name || \"<anonymous>\";\n            }\n        case \"methodPath\":\n        default:\n            {\n                // if exist _reconstructedRoute return that path instead of route.path\n                const customRoute = req._reconstructedRoute ? req._reconstructedRoute : undefined;\n                return extractPathForTransaction(req, {\n                    path: true,\n                    method: true,\n                    customRoute\n                })[0];\n            }\n    }\n}\n/** JSDoc */ function extractUserData(user, keys) {\n    const extractedUser = {};\n    const attributes = Array.isArray(keys) ? keys : DEFAULT_USER_INCLUDES;\n    attributes.forEach((key)=>{\n        if (user && key in user) {\n            extractedUser[key] = user[key];\n        }\n    });\n    return extractedUser;\n}\n/**\n * Normalize data from the request object, accounting for framework differences.\n *\n * @param req The request object from which to extract data\n * @param options.include An optional array of keys to include in the normalized data. Defaults to\n * DEFAULT_REQUEST_INCLUDES if not provided.\n * @param options.deps Injected, platform-specific dependencies\n * @returns An object containing normalized request data\n */ function extractRequestData(req, options) {\n    const { include = DEFAULT_REQUEST_INCLUDES, deps } = options || {};\n    const requestData = {};\n    // headers:\n    //   node, express, koa, nextjs: req.headers\n    const headers = req.headers || {};\n    // method:\n    //   node, express, koa, nextjs: req.method\n    const method = req.method;\n    // host:\n    //   express: req.hostname in > 4 and req.host in < 4\n    //   koa: req.host\n    //   node, nextjs: req.headers.host\n    const host = req.hostname || req.host || headers.host || \"<no host>\";\n    // protocol:\n    //   node, nextjs: <n/a>\n    //   express, koa: req.protocol\n    const protocol = req.protocol === \"https\" || req.socket && req.socket.encrypted ? \"https\" : \"http\";\n    // url (including path and query string):\n    //   node, express: req.originalUrl\n    //   koa, nextjs: req.url\n    const originalUrl = req.originalUrl || req.url || \"\";\n    // absolute url\n    const absoluteUrl = originalUrl.startsWith(protocol) ? originalUrl : `${protocol}://${host}${originalUrl}`;\n    include.forEach((key)=>{\n        switch(key){\n            case \"headers\":\n                {\n                    requestData.headers = headers;\n                    // Remove the Cookie header in case cookie data should not be included in the event\n                    if (!include.includes(\"cookies\")) {\n                        delete requestData.headers.cookie;\n                    }\n                    break;\n                }\n            case \"method\":\n                {\n                    requestData.method = method;\n                    break;\n                }\n            case \"url\":\n                {\n                    requestData.url = absoluteUrl;\n                    break;\n                }\n            case \"cookies\":\n                {\n                    // cookies:\n                    //   node, express, koa: req.headers.cookie\n                    //   vercel, sails.js, express (w/ cookie middleware), nextjs: req.cookies\n                    requestData.cookies = // TODO (v8 / #5257): We're only sending the empty object for backwards compatibility, so the last bit can\n                    // come off in v8\n                    req.cookies || headers.cookie && (0,_cookie_js__WEBPACK_IMPORTED_MODULE_1__.parseCookie)(headers.cookie) || {};\n                    break;\n                }\n            case \"query_string\":\n                {\n                    // query string:\n                    //   node: req.url (raw)\n                    //   express, koa, nextjs: req.query\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                    requestData.query_string = extractQueryParams(req, deps);\n                    break;\n                }\n            case \"data\":\n                {\n                    if (method === \"GET\" || method === \"HEAD\") {\n                        break;\n                    }\n                    // body data:\n                    //   express, koa, nextjs: req.body\n                    //\n                    //   when using node by itself, you have to read the incoming stream(see\n                    //   https://nodejs.dev/learn/get-http-request-body-data-using-nodejs); if a user is doing that, we can't know\n                    //   where they're going to store the final result, so they'll have to capture this data themselves\n                    if (req.body !== undefined) {\n                        requestData.data = (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isString)(req.body) ? req.body : JSON.stringify((0,_normalize_js__WEBPACK_IMPORTED_MODULE_3__.normalize)(req.body));\n                    }\n                    break;\n                }\n            default:\n                {\n                    if (({}).hasOwnProperty.call(req, key)) {\n                        requestData[key] = req[key];\n                    }\n                }\n        }\n    });\n    return requestData;\n}\n/**\n * Add data from the given request to the given event\n *\n * @param event The event to which the request data will be added\n * @param req Request object\n * @param options.include Flags to control what data is included\n * @param options.deps Injected platform-specific dependencies\n * @returns The mutated `Event` object\n */ function addRequestDataToEvent(event, req, options) {\n    const include = {\n        ...DEFAULT_INCLUDES,\n        ...options && options.include\n    };\n    if (include.request) {\n        const extractedRequestData = Array.isArray(include.request) ? extractRequestData(req, {\n            include: include.request,\n            deps: options && options.deps\n        }) : extractRequestData(req, {\n            deps: options && options.deps\n        });\n        event.request = {\n            ...event.request,\n            ...extractedRequestData\n        };\n    }\n    if (include.user) {\n        const extractedUser = req.user && (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(req.user) ? extractUserData(req.user, include.user) : {};\n        if (Object.keys(extractedUser).length) {\n            event.user = {\n                ...event.user,\n                ...extractedUser\n            };\n        }\n    }\n    // client ip:\n    //   node, nextjs: req.socket.remoteAddress\n    //   express, koa: req.ip\n    if (include.ip) {\n        const ip = req.ip || req.socket && req.socket.remoteAddress;\n        if (ip) {\n            event.user = {\n                ...event.user,\n                ip_address: ip\n            };\n        }\n    }\n    if (include.transaction && !event.transaction) {\n        // TODO do we even need this anymore?\n        // TODO make this work for nextjs\n        event.transaction = extractTransaction(req, include.transaction);\n    }\n    return event;\n}\nfunction extractQueryParams(req, deps) {\n    // url (including path and query string):\n    //   node, express: req.originalUrl\n    //   koa, nextjs: req.url\n    let originalUrl = req.originalUrl || req.url || \"\";\n    if (!originalUrl) {\n        return;\n    }\n    // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and\n    // hostname on the beginning. Since the point here is just to grab the query string, it doesn't matter what we use.\n    if (originalUrl.startsWith(\"/\")) {\n        originalUrl = `http://dogs.are.great${originalUrl}`;\n    }\n    try {\n        return req.query || typeof URL !== undefined && new URL(originalUrl).search.slice(1) || // In Node 8, `URL` isn't in the global scope, so we have to use the built-in module from Node\n        deps && deps.url && deps.url.parse(originalUrl).query || undefined;\n    } catch (e2) {\n        return undefined;\n    }\n}\n/**\n * Transforms a `Headers` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into a simple key-value dict.\n * The header keys will be lower case: e.g. A \"Content-Type\" header will be stored as \"content-type\".\n */ function winterCGHeadersToDict(winterCGHeaders) {\n    const headers = {};\n    try {\n        winterCGHeaders.forEach((value, key)=>{\n            if (typeof value === \"string\") {\n                // We check that value is a string even though it might be redundant to make sure prototype pollution is not possible.\n                headers[key] = value;\n            }\n        });\n    } catch (e) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_4__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_5__.logger.warn(\"Sentry failed extracting headers from a request object. If you see this, please file an issue.\");\n    }\n    return headers;\n}\n/**\n * Converts a `Request` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into the format that the `RequestData` integration understands.\n */ function winterCGRequestToRequestData(req) {\n    const headers = winterCGHeadersToDict(req.headers);\n    return {\n        method: req.method,\n        url: req.url,\n        headers\n    };\n}\n //# sourceMappingURL=requestdata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/requestdata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/severity.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/severity.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   severityFromString: () => (/* binding */ severityFromString),\n/* harmony export */   severityLevelFromString: () => (/* binding */ severityLevelFromString),\n/* harmony export */   validSeverityLevels: () => (/* binding */ validSeverityLevels)\n/* harmony export */ });\n// Note: Ideally the `SeverityLevel` type would be derived from `validSeverityLevels`, but that would mean either\n//\n// a) moving `validSeverityLevels` to `@sentry/types`,\n// b) moving the`SeverityLevel` type here, or\n// c) importing `validSeverityLevels` from here into `@sentry/types`.\n//\n// Option A would make `@sentry/types` a runtime dependency of `@sentry/utils` (not good), and options B and C would\n// create a circular dependency between `@sentry/types` and `@sentry/utils` (also not good). So a TODO accompanying the\n// type, reminding anyone who changes it to change this list also, will have to do.\nconst validSeverityLevels = [\n    \"fatal\",\n    \"error\",\n    \"warning\",\n    \"log\",\n    \"info\",\n    \"debug\"\n];\n/**\n * Converts a string-based level into a member of the deprecated {@link Severity} enum.\n *\n * @deprecated `severityFromString` is deprecated. Please use `severityLevelFromString` instead.\n *\n * @param level String representation of Severity\n * @returns Severity\n */ function severityFromString(level) {\n    return severityLevelFromString(level);\n}\n/**\n * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.\n *\n * @param level String representation of desired `SeverityLevel`.\n * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.\n */ function severityLevelFromString(level) {\n    return level === \"warn\" ? \"warning\" : validSeverityLevels.includes(level) ? level : \"log\";\n}\n //# sourceMappingURL=severity.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS9zZXZlcml0eS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxpSEFBaUg7QUFDakgsRUFBRTtBQUNGLHNEQUFzRDtBQUN0RCw2Q0FBNkM7QUFDN0MscUVBQXFFO0FBQ3JFLEVBQUU7QUFDRixvSEFBb0g7QUFDcEgsdUhBQXVIO0FBQ3ZILG1GQUFtRjtBQUVuRixNQUFNQSxzQkFBc0I7SUFBQztJQUFTO0lBQVM7SUFBVztJQUFPO0lBQVE7Q0FBUTtBQUVqRjs7Ozs7OztDQU9DLEdBQ0QsU0FBU0MsbUJBQW1CQyxLQUFLO0lBQy9CLE9BQU9DLHdCQUF3QkQ7QUFDakM7QUFFQTs7Ozs7Q0FLQyxHQUNELFNBQVNDLHdCQUF3QkQsS0FBSztJQUNwQyxPQUFRQSxVQUFVLFNBQVMsWUFBWUYsb0JBQW9CSSxRQUFRLENBQUNGLFNBQVNBLFFBQVE7QUFDdkY7QUFFNEUsQ0FDNUUsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vc2V2ZXJpdHkuanM/MmNjMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBOb3RlOiBJZGVhbGx5IHRoZSBgU2V2ZXJpdHlMZXZlbGAgdHlwZSB3b3VsZCBiZSBkZXJpdmVkIGZyb20gYHZhbGlkU2V2ZXJpdHlMZXZlbHNgLCBidXQgdGhhdCB3b3VsZCBtZWFuIGVpdGhlclxuLy9cbi8vIGEpIG1vdmluZyBgdmFsaWRTZXZlcml0eUxldmVsc2AgdG8gYEBzZW50cnkvdHlwZXNgLFxuLy8gYikgbW92aW5nIHRoZWBTZXZlcml0eUxldmVsYCB0eXBlIGhlcmUsIG9yXG4vLyBjKSBpbXBvcnRpbmcgYHZhbGlkU2V2ZXJpdHlMZXZlbHNgIGZyb20gaGVyZSBpbnRvIGBAc2VudHJ5L3R5cGVzYC5cbi8vXG4vLyBPcHRpb24gQSB3b3VsZCBtYWtlIGBAc2VudHJ5L3R5cGVzYCBhIHJ1bnRpbWUgZGVwZW5kZW5jeSBvZiBgQHNlbnRyeS91dGlsc2AgKG5vdCBnb29kKSwgYW5kIG9wdGlvbnMgQiBhbmQgQyB3b3VsZFxuLy8gY3JlYXRlIGEgY2lyY3VsYXIgZGVwZW5kZW5jeSBiZXR3ZWVuIGBAc2VudHJ5L3R5cGVzYCBhbmQgYEBzZW50cnkvdXRpbHNgIChhbHNvIG5vdCBnb29kKS4gU28gYSBUT0RPIGFjY29tcGFueWluZyB0aGVcbi8vIHR5cGUsIHJlbWluZGluZyBhbnlvbmUgd2hvIGNoYW5nZXMgaXQgdG8gY2hhbmdlIHRoaXMgbGlzdCBhbHNvLCB3aWxsIGhhdmUgdG8gZG8uXG5cbmNvbnN0IHZhbGlkU2V2ZXJpdHlMZXZlbHMgPSBbJ2ZhdGFsJywgJ2Vycm9yJywgJ3dhcm5pbmcnLCAnbG9nJywgJ2luZm8nLCAnZGVidWcnXTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZy1iYXNlZCBsZXZlbCBpbnRvIGEgbWVtYmVyIG9mIHRoZSBkZXByZWNhdGVkIHtAbGluayBTZXZlcml0eX0gZW51bS5cbiAqXG4gKiBAZGVwcmVjYXRlZCBgc2V2ZXJpdHlGcm9tU3RyaW5nYCBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGBzZXZlcml0eUxldmVsRnJvbVN0cmluZ2AgaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0gbGV2ZWwgU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIFNldmVyaXR5XG4gKiBAcmV0dXJucyBTZXZlcml0eVxuICovXG5mdW5jdGlvbiBzZXZlcml0eUZyb21TdHJpbmcobGV2ZWwpIHtcbiAgcmV0dXJuIHNldmVyaXR5TGV2ZWxGcm9tU3RyaW5nKGxldmVsKSA7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmctYmFzZWQgbGV2ZWwgaW50byBhIGBTZXZlcml0eUxldmVsYCwgbm9ybWFsaXppbmcgaXQgYWxvbmcgdGhlIHdheS5cbiAqXG4gKiBAcGFyYW0gbGV2ZWwgU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGRlc2lyZWQgYFNldmVyaXR5TGV2ZWxgLlxuICogQHJldHVybnMgVGhlIGBTZXZlcml0eUxldmVsYCBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBzdHJpbmcsIG9yICdsb2cnIGlmIHRoZSBzdHJpbmcgaXNuJ3QgYSB2YWxpZCBsZXZlbC5cbiAqL1xuZnVuY3Rpb24gc2V2ZXJpdHlMZXZlbEZyb21TdHJpbmcobGV2ZWwpIHtcbiAgcmV0dXJuIChsZXZlbCA9PT0gJ3dhcm4nID8gJ3dhcm5pbmcnIDogdmFsaWRTZXZlcml0eUxldmVscy5pbmNsdWRlcyhsZXZlbCkgPyBsZXZlbCA6ICdsb2cnKSA7XG59XG5cbmV4cG9ydCB7IHNldmVyaXR5RnJvbVN0cmluZywgc2V2ZXJpdHlMZXZlbEZyb21TdHJpbmcsIHZhbGlkU2V2ZXJpdHlMZXZlbHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldmVyaXR5LmpzLm1hcFxuIl0sIm5hbWVzIjpbInZhbGlkU2V2ZXJpdHlMZXZlbHMiLCJzZXZlcml0eUZyb21TdHJpbmciLCJsZXZlbCIsInNldmVyaXR5TGV2ZWxGcm9tU3RyaW5nIiwiaW5jbHVkZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/severity.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/stacktrace.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/stacktrace.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createStackParser: () => (/* binding */ createStackParser),\n/* harmony export */   filenameIsInApp: () => (/* reexport safe */ _node_stack_trace_js__WEBPACK_IMPORTED_MODULE_0__.filenameIsInApp),\n/* harmony export */   getFunctionName: () => (/* binding */ getFunctionName),\n/* harmony export */   nodeStackLineParser: () => (/* binding */ nodeStackLineParser),\n/* harmony export */   stackParserFromStackParserOptions: () => (/* binding */ stackParserFromStackParserOptions),\n/* harmony export */   stripSentryFramesAndReverse: () => (/* binding */ stripSentryFramesAndReverse)\n/* harmony export */ });\n/* harmony import */ var _node_stack_trace_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node-stack-trace.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/node-stack-trace.js\");\n\n\nconst STACKTRACE_FRAME_LIMIT = 50;\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\nconst STRIP_FRAME_REGEXP = /captureMessage|captureException/;\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */ function createStackParser(...parsers) {\n    const sortedParsers = parsers.sort((a, b)=>a[0] - b[0]).map((p)=>p[1]);\n    return (stack, skipFirst = 0)=>{\n        const frames = [];\n        const lines = stack.split(\"\\n\");\n        for(let i = skipFirst; i < lines.length; i++){\n            const line = lines[i];\n            // Ignore lines over 1kb as they are unlikely to be stack frames.\n            // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n            // input size. Huge strings can result in hangs/Denial of Service:\n            // https://github.com/getsentry/sentry-javascript/issues/2286\n            if (line.length > 1024) {\n                continue;\n            }\n            // https://github.com/getsentry/sentry-javascript/issues/5459\n            // Remove webpack (error: *) wrappers\n            const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, \"$1\") : line;\n            // https://github.com/getsentry/sentry-javascript/issues/7813\n            // Skip Error: lines\n            if (cleanedLine.match(/\\S*Error: /)) {\n                continue;\n            }\n            for (const parser of sortedParsers){\n                const frame = parser(cleanedLine);\n                if (frame) {\n                    frames.push(frame);\n                    break;\n                }\n            }\n            if (frames.length >= STACKTRACE_FRAME_LIMIT) {\n                break;\n            }\n        }\n        return stripSentryFramesAndReverse(frames);\n    };\n}\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */ function stackParserFromStackParserOptions(stackParser) {\n    if (Array.isArray(stackParser)) {\n        return createStackParser(...stackParser);\n    }\n    return stackParser;\n}\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */ function stripSentryFramesAndReverse(stack) {\n    if (!stack.length) {\n        return [];\n    }\n    const localStack = Array.from(stack);\n    // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n    if (/sentryWrapped/.test(localStack[localStack.length - 1].function || \"\")) {\n        localStack.pop();\n    }\n    // Reversing in the middle of the procedure allows us to just pop the values off the stack\n    localStack.reverse();\n    // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n    if (STRIP_FRAME_REGEXP.test(localStack[localStack.length - 1].function || \"\")) {\n        localStack.pop();\n        // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Sentry syntheticException')`\n        // is produced within the hub itself, making it:\n        //\n        //   Sentry.captureException()\n        //   getCurrentHub().captureException()\n        //\n        // instead of just the top `Sentry` call itself.\n        // This forces us to possibly strip an additional frame in the exact same was as above.\n        if (STRIP_FRAME_REGEXP.test(localStack[localStack.length - 1].function || \"\")) {\n            localStack.pop();\n        }\n    }\n    return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map((frame)=>({\n            ...frame,\n            filename: frame.filename || localStack[localStack.length - 1].filename,\n            function: frame.function || \"?\"\n        }));\n}\nconst defaultFunctionName = \"<anonymous>\";\n/**\n * Safely extract function name from itself\n */ function getFunctionName(fn) {\n    try {\n        if (!fn || typeof fn !== \"function\") {\n            return defaultFunctionName;\n        }\n        return fn.name || defaultFunctionName;\n    } catch (e) {\n        // Just accessing custom props in some Selenium environments\n        // can cause a \"Permission denied\" exception (see raven-js#495).\n        return defaultFunctionName;\n    }\n}\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/utils so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */ function nodeStackLineParser(getModule) {\n    return [\n        90,\n        (0,_node_stack_trace_js__WEBPACK_IMPORTED_MODULE_0__.node)(getModule)\n    ];\n}\n //# sourceMappingURL=stacktrace.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/stacktrace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/string.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/string.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isMatchingPattern: () => (/* binding */ isMatchingPattern),\n/* harmony export */   safeJoin: () => (/* binding */ safeJoin),\n/* harmony export */   snipLine: () => (/* binding */ snipLine),\n/* harmony export */   stringMatchesSomePattern: () => (/* binding */ stringMatchesSomePattern),\n/* harmony export */   truncate: () => (/* binding */ truncate)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/is.js\");\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */ function truncate(str, max = 0) {\n    if (typeof str !== \"string\" || max === 0) {\n        return str;\n    }\n    return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */ function snipLine(line, colno) {\n    let newLine = line;\n    const lineLength = newLine.length;\n    if (lineLength <= 150) {\n        return newLine;\n    }\n    if (colno > lineLength) {\n        // eslint-disable-next-line no-param-reassign\n        colno = lineLength;\n    }\n    let start = Math.max(colno - 60, 0);\n    if (start < 5) {\n        start = 0;\n    }\n    let end = Math.min(start + 140, lineLength);\n    if (end > lineLength - 5) {\n        end = lineLength;\n    }\n    if (end === lineLength) {\n        start = Math.max(end - 140, 0);\n    }\n    newLine = newLine.slice(start, end);\n    if (start > 0) {\n        newLine = `'{snip} ${newLine}`;\n    }\n    if (end < lineLength) {\n        newLine += \" {snip}\";\n    }\n    return newLine;\n}\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction safeJoin(input, delimiter) {\n    if (!Array.isArray(input)) {\n        return \"\";\n    }\n    const output = [];\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for(let i = 0; i < input.length; i++){\n        const value = input[i];\n        try {\n            // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n            // console warnings. This happens when a Vue template is rendered with\n            // an undeclared variable, which we try to stringify, ultimately causing\n            // Vue to issue another warning which repeats indefinitely.\n            // see: https://github.com/getsentry/sentry-javascript/pull/8981\n            if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isVueViewModel)(value)) {\n                output.push(\"[VueViewModel]\");\n            } else {\n                output.push(String(value));\n            }\n        } catch (e) {\n            output.push(\"[value cannot be serialized]\");\n        }\n    }\n    return output.join(delimiter);\n}\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */ function isMatchingPattern(value, pattern, requireExactStringMatch = false) {\n    if (!(0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isString)(value)) {\n        return false;\n    }\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isRegExp)(pattern)) {\n        return pattern.test(value);\n    }\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isString)(pattern)) {\n        return requireExactStringMatch ? value === pattern : value.includes(pattern);\n    }\n    return false;\n}\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */ function stringMatchesSomePattern(testString, patterns = [], requireExactStringMatch = false) {\n    return patterns.some((pattern)=>isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\n //# sourceMappingURL=string.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/string.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/tracing.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/tracing.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRACEPARENT_REGEXP: () => (/* binding */ TRACEPARENT_REGEXP),\n/* harmony export */   extractTraceparentData: () => (/* binding */ extractTraceparentData),\n/* harmony export */   generateSentryTraceHeader: () => (/* binding */ generateSentryTraceHeader),\n/* harmony export */   tracingContextFromHeaders: () => (/* binding */ tracingContextFromHeaders)\n/* harmony export */ });\n/* harmony import */ var _baggage_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baggage.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/baggage.js\");\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./misc.js */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/misc.js\");\n\n\nconst TRACEPARENT_REGEXP = new RegExp(\"^[ \\\\t]*\" + // whitespace\n\"([0-9a-f]{32})?\" + // trace_id\n\"-?([0-9a-f]{16})?\" + // span_id\n\"-?([01])?\" + // sampled\n\"[ \\\\t]*$\");\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */ function extractTraceparentData(traceparent) {\n    if (!traceparent) {\n        return undefined;\n    }\n    const matches = traceparent.match(TRACEPARENT_REGEXP);\n    if (!matches) {\n        return undefined;\n    }\n    let parentSampled;\n    if (matches[3] === \"1\") {\n        parentSampled = true;\n    } else if (matches[3] === \"0\") {\n        parentSampled = false;\n    }\n    return {\n        traceId: matches[1],\n        parentSampled,\n        parentSpanId: matches[2]\n    };\n}\n/**\n * Create tracing context from incoming headers.\n */ function tracingContextFromHeaders(sentryTrace, baggage) {\n    const traceparentData = extractTraceparentData(sentryTrace);\n    const dynamicSamplingContext = (0,_baggage_js__WEBPACK_IMPORTED_MODULE_0__.baggageHeaderToDynamicSamplingContext)(baggage);\n    const { traceId, parentSpanId, parentSampled } = traceparentData || {};\n    const propagationContext = {\n        traceId: traceId || (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)(),\n        spanId: (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)().substring(16),\n        sampled: parentSampled\n    };\n    if (parentSpanId) {\n        propagationContext.parentSpanId = parentSpanId;\n    }\n    if (dynamicSamplingContext) {\n        propagationContext.dsc = dynamicSamplingContext;\n    }\n    return {\n        traceparentData,\n        dynamicSamplingContext,\n        propagationContext\n    };\n}\n/**\n * Create sentry-trace header from span context values.\n */ function generateSentryTraceHeader(traceId = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)(), spanId = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)().substring(16), sampled) {\n    let sampledString = \"\";\n    if (sampled !== undefined) {\n        sampledString = sampled ? \"-1\" : \"-0\";\n    }\n    return `${traceId}-${spanId}${sampledString}`;\n}\n //# sourceMappingURL=tracing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS90cmFjaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFxRTtBQUNuQztBQUVsQyxNQUFNRSxxQkFBcUIsSUFBSUMsT0FDN0IsYUFBYSxhQUFhO0FBQ3hCLG9CQUFvQixXQUFXO0FBQy9CLHNCQUFzQixVQUFVO0FBQ2hDLGNBQWMsVUFBVTtBQUN4QjtBQUdKOzs7Ozs7Q0FNQyxHQUNELFNBQVNDLHVCQUF1QkMsV0FBVztJQUN6QyxJQUFJLENBQUNBLGFBQWE7UUFDaEIsT0FBT0M7SUFDVDtJQUVBLE1BQU1DLFVBQVVGLFlBQVlHLEtBQUssQ0FBQ047SUFDbEMsSUFBSSxDQUFDSyxTQUFTO1FBQ1osT0FBT0Q7SUFDVDtJQUVBLElBQUlHO0lBQ0osSUFBSUYsT0FBTyxDQUFDLEVBQUUsS0FBSyxLQUFLO1FBQ3RCRSxnQkFBZ0I7SUFDbEIsT0FBTyxJQUFJRixPQUFPLENBQUMsRUFBRSxLQUFLLEtBQUs7UUFDN0JFLGdCQUFnQjtJQUNsQjtJQUVBLE9BQU87UUFDTEMsU0FBU0gsT0FBTyxDQUFDLEVBQUU7UUFDbkJFO1FBQ0FFLGNBQWNKLE9BQU8sQ0FBQyxFQUFFO0lBQzFCO0FBQ0Y7QUFFQTs7Q0FFQyxHQUNELFNBQVNLLDBCQUNQQyxXQUFXLEVBQ1hDLE9BQU87SUFJUCxNQUFNQyxrQkFBa0JYLHVCQUF1QlM7SUFDL0MsTUFBTUcseUJBQXlCaEIsa0ZBQXFDQSxDQUFDYztJQUVyRSxNQUFNLEVBQUVKLE9BQU8sRUFBRUMsWUFBWSxFQUFFRixhQUFhLEVBQUUsR0FBR00sbUJBQW1CLENBQUM7SUFFckUsTUFBTUUscUJBQXFCO1FBQ3pCUCxTQUFTQSxXQUFXVCwrQ0FBS0E7UUFDekJpQixRQUFRakIsK0NBQUtBLEdBQUdrQixTQUFTLENBQUM7UUFDMUJDLFNBQVNYO0lBQ1g7SUFFQSxJQUFJRSxjQUFjO1FBQ2hCTSxtQkFBbUJOLFlBQVksR0FBR0E7SUFDcEM7SUFFQSxJQUFJSyx3QkFBd0I7UUFDMUJDLG1CQUFtQkksR0FBRyxHQUFHTDtJQUMzQjtJQUVBLE9BQU87UUFDTEQ7UUFDQUM7UUFDQUM7SUFDRjtBQUNGO0FBRUE7O0NBRUMsR0FDRCxTQUFTSywwQkFDUFosVUFBVVQsK0NBQUtBLEVBQUUsRUFDakJpQixTQUFTakIsK0NBQUtBLEdBQUdrQixTQUFTLENBQUMsR0FBRyxFQUM5QkMsT0FBTztJQUVQLElBQUlHLGdCQUFnQjtJQUNwQixJQUFJSCxZQUFZZCxXQUFXO1FBQ3pCaUIsZ0JBQWdCSCxVQUFVLE9BQU87SUFDbkM7SUFDQSxPQUFPLENBQUMsRUFBRVYsUUFBUSxDQUFDLEVBQUVRLE9BQU8sRUFBRUssY0FBYyxDQUFDO0FBQy9DO0FBRTRHLENBQzVHLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmFtLWxtcy1mZS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL3RyYWNpbmcuanM/Y2IxYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBiYWdnYWdlSGVhZGVyVG9EeW5hbWljU2FtcGxpbmdDb250ZXh0IH0gZnJvbSAnLi9iYWdnYWdlLmpzJztcbmltcG9ydCB7IHV1aWQ0IH0gZnJvbSAnLi9taXNjLmpzJztcblxuY29uc3QgVFJBQ0VQQVJFTlRfUkVHRVhQID0gbmV3IFJlZ0V4cChcbiAgJ15bIFxcXFx0XSonICsgLy8gd2hpdGVzcGFjZVxuICAgICcoWzAtOWEtZl17MzJ9KT8nICsgLy8gdHJhY2VfaWRcbiAgICAnLT8oWzAtOWEtZl17MTZ9KT8nICsgLy8gc3Bhbl9pZFxuICAgICctPyhbMDFdKT8nICsgLy8gc2FtcGxlZFxuICAgICdbIFxcXFx0XSokJywgLy8gd2hpdGVzcGFjZVxuKTtcblxuLyoqXG4gKiBFeHRyYWN0IHRyYW5zYWN0aW9uIGNvbnRleHQgZGF0YSBmcm9tIGEgYHNlbnRyeS10cmFjZWAgaGVhZGVyLlxuICpcbiAqIEBwYXJhbSB0cmFjZXBhcmVudCBUcmFjZXBhcmVudCBzdHJpbmdcbiAqXG4gKiBAcmV0dXJucyBPYmplY3QgY29udGFpbmluZyBkYXRhIGZyb20gdGhlIGhlYWRlciwgb3IgdW5kZWZpbmVkIGlmIHRyYWNlcGFyZW50IHN0cmluZyBpcyBtYWxmb3JtZWRcbiAqL1xuZnVuY3Rpb24gZXh0cmFjdFRyYWNlcGFyZW50RGF0YSh0cmFjZXBhcmVudCkge1xuICBpZiAoIXRyYWNlcGFyZW50KSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbnN0IG1hdGNoZXMgPSB0cmFjZXBhcmVudC5tYXRjaChUUkFDRVBBUkVOVF9SRUdFWFApO1xuICBpZiAoIW1hdGNoZXMpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgbGV0IHBhcmVudFNhbXBsZWQ7XG4gIGlmIChtYXRjaGVzWzNdID09PSAnMScpIHtcbiAgICBwYXJlbnRTYW1wbGVkID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChtYXRjaGVzWzNdID09PSAnMCcpIHtcbiAgICBwYXJlbnRTYW1wbGVkID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRyYWNlSWQ6IG1hdGNoZXNbMV0sXG4gICAgcGFyZW50U2FtcGxlZCxcbiAgICBwYXJlbnRTcGFuSWQ6IG1hdGNoZXNbMl0sXG4gIH07XG59XG5cbi8qKlxuICogQ3JlYXRlIHRyYWNpbmcgY29udGV4dCBmcm9tIGluY29taW5nIGhlYWRlcnMuXG4gKi9cbmZ1bmN0aW9uIHRyYWNpbmdDb250ZXh0RnJvbUhlYWRlcnMoXG4gIHNlbnRyeVRyYWNlLFxuICBiYWdnYWdlLFxuKVxuXG4ge1xuICBjb25zdCB0cmFjZXBhcmVudERhdGEgPSBleHRyYWN0VHJhY2VwYXJlbnREYXRhKHNlbnRyeVRyYWNlKTtcbiAgY29uc3QgZHluYW1pY1NhbXBsaW5nQ29udGV4dCA9IGJhZ2dhZ2VIZWFkZXJUb0R5bmFtaWNTYW1wbGluZ0NvbnRleHQoYmFnZ2FnZSk7XG5cbiAgY29uc3QgeyB0cmFjZUlkLCBwYXJlbnRTcGFuSWQsIHBhcmVudFNhbXBsZWQgfSA9IHRyYWNlcGFyZW50RGF0YSB8fCB7fTtcblxuICBjb25zdCBwcm9wYWdhdGlvbkNvbnRleHQgPSB7XG4gICAgdHJhY2VJZDogdHJhY2VJZCB8fCB1dWlkNCgpLFxuICAgIHNwYW5JZDogdXVpZDQoKS5zdWJzdHJpbmcoMTYpLFxuICAgIHNhbXBsZWQ6IHBhcmVudFNhbXBsZWQsXG4gIH07XG5cbiAgaWYgKHBhcmVudFNwYW5JZCkge1xuICAgIHByb3BhZ2F0aW9uQ29udGV4dC5wYXJlbnRTcGFuSWQgPSBwYXJlbnRTcGFuSWQ7XG4gIH1cblxuICBpZiAoZHluYW1pY1NhbXBsaW5nQ29udGV4dCkge1xuICAgIHByb3BhZ2F0aW9uQ29udGV4dC5kc2MgPSBkeW5hbWljU2FtcGxpbmdDb250ZXh0IDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHJhY2VwYXJlbnREYXRhLFxuICAgIGR5bmFtaWNTYW1wbGluZ0NvbnRleHQsXG4gICAgcHJvcGFnYXRpb25Db250ZXh0LFxuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZSBzZW50cnktdHJhY2UgaGVhZGVyIGZyb20gc3BhbiBjb250ZXh0IHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVTZW50cnlUcmFjZUhlYWRlcihcbiAgdHJhY2VJZCA9IHV1aWQ0KCksXG4gIHNwYW5JZCA9IHV1aWQ0KCkuc3Vic3RyaW5nKDE2KSxcbiAgc2FtcGxlZCxcbikge1xuICBsZXQgc2FtcGxlZFN0cmluZyA9ICcnO1xuICBpZiAoc2FtcGxlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc2FtcGxlZFN0cmluZyA9IHNhbXBsZWQgPyAnLTEnIDogJy0wJztcbiAgfVxuICByZXR1cm4gYCR7dHJhY2VJZH0tJHtzcGFuSWR9JHtzYW1wbGVkU3RyaW5nfWA7XG59XG5cbmV4cG9ydCB7IFRSQUNFUEFSRU5UX1JFR0VYUCwgZXh0cmFjdFRyYWNlcGFyZW50RGF0YSwgZ2VuZXJhdGVTZW50cnlUcmFjZUhlYWRlciwgdHJhY2luZ0NvbnRleHRGcm9tSGVhZGVycyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhY2luZy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJiYWdnYWdlSGVhZGVyVG9EeW5hbWljU2FtcGxpbmdDb250ZXh0IiwidXVpZDQiLCJUUkFDRVBBUkVOVF9SRUdFWFAiLCJSZWdFeHAiLCJleHRyYWN0VHJhY2VwYXJlbnREYXRhIiwidHJhY2VwYXJlbnQiLCJ1bmRlZmluZWQiLCJtYXRjaGVzIiwibWF0Y2giLCJwYXJlbnRTYW1wbGVkIiwidHJhY2VJZCIsInBhcmVudFNwYW5JZCIsInRyYWNpbmdDb250ZXh0RnJvbUhlYWRlcnMiLCJzZW50cnlUcmFjZSIsImJhZ2dhZ2UiLCJ0cmFjZXBhcmVudERhdGEiLCJkeW5hbWljU2FtcGxpbmdDb250ZXh0IiwicHJvcGFnYXRpb25Db250ZXh0Iiwic3BhbklkIiwic3Vic3RyaW5nIiwic2FtcGxlZCIsImRzYyIsImdlbmVyYXRlU2VudHJ5VHJhY2VIZWFkZXIiLCJzYW1wbGVkU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/tracing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/url.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/url.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getNumberOfUrlSegments: () => (/* binding */ getNumberOfUrlSegments),\n/* harmony export */   getSanitizedUrlString: () => (/* binding */ getSanitizedUrlString),\n/* harmony export */   parseUrl: () => (/* binding */ parseUrl),\n/* harmony export */   stripUrlQueryAndFragment: () => (/* binding */ stripUrlQueryAndFragment)\n/* harmony export */ });\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */ function parseUrl(url) {\n    if (!url) {\n        return {};\n    }\n    const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n    if (!match) {\n        return {};\n    }\n    // coerce to undefined values to empty string so we don't get 'undefined'\n    const query = match[6] || \"\";\n    const fragment = match[8] || \"\";\n    return {\n        host: match[4],\n        path: match[5],\n        protocol: match[2],\n        search: query,\n        hash: fragment,\n        relative: match[5] + query + fragment\n    };\n}\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */ function stripUrlQueryAndFragment(urlPath) {\n    // eslint-disable-next-line no-useless-escape\n    return urlPath.split(/[\\?#]/, 1)[0];\n}\n/**\n * Returns number of URL segments of a passed string URL.\n */ function getNumberOfUrlSegments(url) {\n    // split at '/' or at '\\/' to split regex urls correctly\n    return url.split(/\\\\?\\//).filter((s)=>s.length > 0 && s !== \",\").length;\n}\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span description\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */ function getSanitizedUrlString(url) {\n    const { protocol, host, path } = url;\n    const filteredHost = host && host// Always filter out authority\n    .replace(/^.*@/, \"[filtered]:[filtered]@\")// Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n    // TODO: Use new URL global if it exists\n    .replace(/(:80)$/, \"\").replace(/(:443)$/, \"\") || \"\";\n    return `${protocol ? `${protocol}://` : \"\"}${filteredHost}${path}`;\n}\n //# sourceMappingURL=url.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS91cmwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7Q0FNQyxHQUNELFNBQVNBLFNBQVNDLEdBQUc7SUFDbkIsSUFBSSxDQUFDQSxLQUFLO1FBQ1IsT0FBTyxDQUFDO0lBQ1Y7SUFFQSxNQUFNQyxRQUFRRCxJQUFJQyxLQUFLLENBQUM7SUFFeEIsSUFBSSxDQUFDQSxPQUFPO1FBQ1YsT0FBTyxDQUFDO0lBQ1Y7SUFFQSx5RUFBeUU7SUFDekUsTUFBTUMsUUFBUUQsS0FBSyxDQUFDLEVBQUUsSUFBSTtJQUMxQixNQUFNRSxXQUFXRixLQUFLLENBQUMsRUFBRSxJQUFJO0lBQzdCLE9BQU87UUFDTEcsTUFBTUgsS0FBSyxDQUFDLEVBQUU7UUFDZEksTUFBTUosS0FBSyxDQUFDLEVBQUU7UUFDZEssVUFBVUwsS0FBSyxDQUFDLEVBQUU7UUFDbEJNLFFBQVFMO1FBQ1JNLE1BQU1MO1FBQ05NLFVBQVVSLEtBQUssQ0FBQyxFQUFFLEdBQUdDLFFBQVFDO0lBQy9CO0FBQ0Y7QUFFQTs7Ozs7Q0FLQyxHQUNELFNBQVNPLHlCQUF5QkMsT0FBTztJQUN2Qyw2Q0FBNkM7SUFDN0MsT0FBT0EsUUFBUUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUU7QUFDckM7QUFFQTs7Q0FFQyxHQUNELFNBQVNDLHVCQUF1QmIsR0FBRztJQUNqQyx3REFBd0Q7SUFDeEQsT0FBT0EsSUFBSVksS0FBSyxDQUFDLFNBQVNFLE1BQU0sQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRUMsTUFBTSxHQUFHLEtBQUtELE1BQU0sS0FBS0MsTUFBTTtBQUN6RTtBQUVBOzs7Q0FHQyxHQUNELFNBQVNDLHNCQUFzQmpCLEdBQUc7SUFDaEMsTUFBTSxFQUFFTSxRQUFRLEVBQUVGLElBQUksRUFBRUMsSUFBSSxFQUFFLEdBQUdMO0lBRWpDLE1BQU1rQixlQUNKLFFBQ0VkLElBQ0UsOEJBQThCO0tBQzdCZSxPQUFPLENBQUMsUUFBUSx5QkFDakIsNEVBQTRFO0lBQzVFLHdDQUF3QztLQUN2Q0EsT0FBTyxDQUFDLFVBQVUsSUFDbEJBLE9BQU8sQ0FBQyxXQUFXLE9BQ3hCO0lBRUYsT0FBTyxDQUFDLEVBQUViLFdBQVcsQ0FBQyxFQUFFQSxTQUFTLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRVksYUFBYSxFQUFFYixLQUFLLENBQUM7QUFDcEU7QUFFNkYsQ0FDN0YsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vdXJsLmpzPzhmY2MiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQYXJzZXMgc3RyaW5nIGZvcm0gb2YgVVJMIGludG8gYW4gb2JqZWN0XG4gKiAvLyBib3Jyb3dlZCBmcm9tIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I2FwcGVuZGl4LUJcbiAqIC8vIGludGVudGlvbmFsbHkgdXNpbmcgcmVnZXggYW5kIG5vdCA8YS8+IGhyZWYgcGFyc2luZyB0cmljayBiZWNhdXNlIFJlYWN0IE5hdGl2ZSBhbmQgb3RoZXJcbiAqIC8vIGVudmlyb25tZW50cyB3aGVyZSBET00gbWlnaHQgbm90IGJlIGF2YWlsYWJsZVxuICogQHJldHVybnMgcGFyc2VkIFVSTCBvYmplY3RcbiAqL1xuZnVuY3Rpb24gcGFyc2VVcmwodXJsKSB7XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgY29uc3QgbWF0Y2ggPSB1cmwubWF0Y2goL14oKFteOi8/I10rKTopPyhcXC9cXC8oW14vPyNdKikpPyhbXj8jXSopKFxcPyhbXiNdKikpPygjKC4qKSk/JC8pO1xuXG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICAvLyBjb2VyY2UgdG8gdW5kZWZpbmVkIHZhbHVlcyB0byBlbXB0eSBzdHJpbmcgc28gd2UgZG9uJ3QgZ2V0ICd1bmRlZmluZWQnXG4gIGNvbnN0IHF1ZXJ5ID0gbWF0Y2hbNl0gfHwgJyc7XG4gIGNvbnN0IGZyYWdtZW50ID0gbWF0Y2hbOF0gfHwgJyc7XG4gIHJldHVybiB7XG4gICAgaG9zdDogbWF0Y2hbNF0sXG4gICAgcGF0aDogbWF0Y2hbNV0sXG4gICAgcHJvdG9jb2w6IG1hdGNoWzJdLFxuICAgIHNlYXJjaDogcXVlcnksXG4gICAgaGFzaDogZnJhZ21lbnQsXG4gICAgcmVsYXRpdmU6IG1hdGNoWzVdICsgcXVlcnkgKyBmcmFnbWVudCwgLy8gZXZlcnl0aGluZyBtaW51cyBvcmlnaW5cbiAgfTtcbn1cblxuLyoqXG4gKiBTdHJpcCB0aGUgcXVlcnkgc3RyaW5nIGFuZCBmcmFnbWVudCBvZmYgb2YgYSBnaXZlbiBVUkwgb3IgcGF0aCAoaWYgcHJlc2VudClcbiAqXG4gKiBAcGFyYW0gdXJsUGF0aCBGdWxsIFVSTCBvciBwYXRoLCBpbmNsdWRpbmcgcG9zc2libGUgcXVlcnkgc3RyaW5nIGFuZC9vciBmcmFnbWVudFxuICogQHJldHVybnMgVVJMIG9yIHBhdGggd2l0aG91dCBxdWVyeSBzdHJpbmcgb3IgZnJhZ21lbnRcbiAqL1xuZnVuY3Rpb24gc3RyaXBVcmxRdWVyeUFuZEZyYWdtZW50KHVybFBhdGgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG4gIHJldHVybiB1cmxQYXRoLnNwbGl0KC9bXFw/I10vLCAxKVswXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIG51bWJlciBvZiBVUkwgc2VnbWVudHMgb2YgYSBwYXNzZWQgc3RyaW5nIFVSTC5cbiAqL1xuZnVuY3Rpb24gZ2V0TnVtYmVyT2ZVcmxTZWdtZW50cyh1cmwpIHtcbiAgLy8gc3BsaXQgYXQgJy8nIG9yIGF0ICdcXC8nIHRvIHNwbGl0IHJlZ2V4IHVybHMgY29ycmVjdGx5XG4gIHJldHVybiB1cmwuc3BsaXQoL1xcXFw/XFwvLykuZmlsdGVyKHMgPT4gcy5sZW5ndGggPiAwICYmIHMgIT09ICcsJykubGVuZ3RoO1xufVxuXG4vKipcbiAqIFRha2VzIGEgVVJMIG9iamVjdCBhbmQgcmV0dXJucyBhIHNhbml0aXplZCBzdHJpbmcgd2hpY2ggaXMgc2FmZSB0byB1c2UgYXMgc3BhbiBkZXNjcmlwdGlvblxuICogc2VlOiBodHRwczovL2RldmVsb3Auc2VudHJ5LmRldi9zZGsvZGF0YS1oYW5kbGluZy8jc3RydWN0dXJpbmctZGF0YVxuICovXG5mdW5jdGlvbiBnZXRTYW5pdGl6ZWRVcmxTdHJpbmcodXJsKSB7XG4gIGNvbnN0IHsgcHJvdG9jb2wsIGhvc3QsIHBhdGggfSA9IHVybDtcblxuICBjb25zdCBmaWx0ZXJlZEhvc3QgPVxuICAgIChob3N0ICYmXG4gICAgICBob3N0XG4gICAgICAgIC8vIEFsd2F5cyBmaWx0ZXIgb3V0IGF1dGhvcml0eVxuICAgICAgICAucmVwbGFjZSgvXi4qQC8sICdbZmlsdGVyZWRdOltmaWx0ZXJlZF1AJylcbiAgICAgICAgLy8gRG9uJ3Qgc2hvdyBzdGFuZGFyZCA6ODAgKGh0dHApIGFuZCA6NDQzIChodHRwcykgcG9ydHMgdG8gcmVkdWNlIHRoZSBub2lzZVxuICAgICAgICAvLyBUT0RPOiBVc2UgbmV3IFVSTCBnbG9iYWwgaWYgaXQgZXhpc3RzXG4gICAgICAgIC5yZXBsYWNlKC8oOjgwKSQvLCAnJylcbiAgICAgICAgLnJlcGxhY2UoLyg6NDQzKSQvLCAnJykpIHx8XG4gICAgJyc7XG5cbiAgcmV0dXJuIGAke3Byb3RvY29sID8gYCR7cHJvdG9jb2x9Oi8vYCA6ICcnfSR7ZmlsdGVyZWRIb3N0fSR7cGF0aH1gO1xufVxuXG5leHBvcnQgeyBnZXROdW1iZXJPZlVybFNlZ21lbnRzLCBnZXRTYW5pdGl6ZWRVcmxTdHJpbmcsIHBhcnNlVXJsLCBzdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVybC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJwYXJzZVVybCIsInVybCIsIm1hdGNoIiwicXVlcnkiLCJmcmFnbWVudCIsImhvc3QiLCJwYXRoIiwicHJvdG9jb2wiLCJzZWFyY2giLCJoYXNoIiwicmVsYXRpdmUiLCJzdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQiLCJ1cmxQYXRoIiwic3BsaXQiLCJnZXROdW1iZXJPZlVybFNlZ21lbnRzIiwiZmlsdGVyIiwicyIsImxlbmd0aCIsImdldFNhbml0aXplZFVybFN0cmluZyIsImZpbHRlcmVkSG9zdCIsInJlcGxhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/url.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/worldwide.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/node/node_modules/@sentry/utils/esm/worldwide.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GLOBAL_OBJ: () => (/* binding */ GLOBAL_OBJ),\n/* harmony export */   getGlobalObject: () => (/* binding */ getGlobalObject),\n/* harmony export */   getGlobalSingleton: () => (/* binding */ getGlobalSingleton)\n/* harmony export */ });\n/** Internal global with common properties and Sentry extensions  */ // The code below for 'isGlobalObj' and 'GLOBAL_OBJ' was copied from core-js before modification\n// https://github.com/zloirock/core-js/blob/1b944df55282cdc99c90db5f49eb0b6eda2cc0a3/packages/core-js/internals/global.js\n// core-js has the following licence:\n//\n// Copyright (c) 2014-2022 Denis Pushkarev\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/** Returns 'obj' if it's the global object, otherwise returns undefined */ function isGlobalObj(obj) {\n    return obj && obj.Math == Math ? obj : undefined;\n}\n/** Get's the global object for the current JavaScript runtime */ const GLOBAL_OBJ = typeof globalThis == \"object\" && isGlobalObj(globalThis) || // eslint-disable-next-line no-restricted-globals\n false && 0 || typeof self == \"object\" && isGlobalObj(self) || typeof global == \"object\" && isGlobalObj(global) || function() {\n    return this;\n}() || {};\n/**\n * @deprecated Use GLOBAL_OBJ instead or WINDOW from @sentry/browser. This will be removed in v8\n */ function getGlobalObject() {\n    return GLOBAL_OBJ;\n}\n/**\n * Returns a global singleton contained in the global `__SENTRY__` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value\n * @returns the singleton\n */ function getGlobalSingleton(name, creator, obj) {\n    const gbl = obj || GLOBAL_OBJ;\n    const __SENTRY__ = gbl.__SENTRY__ = gbl.__SENTRY__ || {};\n    const singleton = __SENTRY__[name] || (__SENTRY__[name] = creator());\n    return singleton;\n}\n //# sourceMappingURL=worldwide.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2VzbS93b3JsZHdpZGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsa0VBQWtFLEdBRWxFLGdHQUFnRztBQUNoRyx5SEFBeUg7QUFDekgscUNBQXFDO0FBQ3JDLEVBQUU7QUFDRiwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLCtFQUErRTtBQUMvRSxnRkFBZ0Y7QUFDaEYsK0VBQStFO0FBQy9FLDRFQUE0RTtBQUM1RSx3RUFBd0U7QUFDeEUsMkRBQTJEO0FBQzNELEVBQUU7QUFDRiw2RUFBNkU7QUFDN0Usc0RBQXNEO0FBQ3RELEVBQUU7QUFDRiw2RUFBNkU7QUFDN0UsMkVBQTJFO0FBQzNFLDhFQUE4RTtBQUM5RSx5RUFBeUU7QUFDekUsZ0ZBQWdGO0FBQ2hGLDRFQUE0RTtBQUM1RSxnQkFBZ0I7QUFFaEIseUVBQXlFLEdBQ3pFLFNBQVNBLFlBQVlDLEdBQUc7SUFDdEIsT0FBT0EsT0FBT0EsSUFBSUMsSUFBSSxJQUFJQSxPQUFPRCxNQUFNRTtBQUN6QztBQUVBLCtEQUErRCxHQUMvRCxNQUFNQyxhQUNKLE9BQVFDLGNBQWMsWUFBWUwsWUFBWUssZUFDOUMsaURBQWlEO0FBQ2hELE1BQWlCLElBQVlMLENBQW1CTSxJQUNoRCxPQUFPQyxRQUFRLFlBQVlQLFlBQVlPLFNBQ3ZDLE9BQU9DLFVBQVUsWUFBWVIsWUFBWVEsV0FDMUM7SUFDRSxPQUFPLElBQUk7QUFDYixPQUNBLENBQUM7QUFFSDs7Q0FFQyxHQUNELFNBQVNDO0lBQ1AsT0FBT0w7QUFDVDtBQUVBOzs7Ozs7Ozs7O0NBVUMsR0FDRCxTQUFTTSxtQkFBbUJDLElBQUksRUFBRUMsT0FBTyxFQUFFWCxHQUFHO0lBQzVDLE1BQU1ZLE1BQU9aLE9BQU9HO0lBQ3BCLE1BQU1VLGFBQWNELElBQUlDLFVBQVUsR0FBR0QsSUFBSUMsVUFBVSxJQUFJLENBQUM7SUFDeEQsTUFBTUMsWUFBWUQsVUFBVSxDQUFDSCxLQUFLLElBQUtHLENBQUFBLFVBQVUsQ0FBQ0gsS0FBSyxHQUFHQyxTQUFRO0lBQ2xFLE9BQU9HO0FBQ1Q7QUFFMkQsQ0FDM0QscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vd29ybGR3aWRlLmpzPzVkODUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIEludGVybmFsIGdsb2JhbCB3aXRoIGNvbW1vbiBwcm9wZXJ0aWVzIGFuZCBTZW50cnkgZXh0ZW5zaW9ucyAgKi9cblxuLy8gVGhlIGNvZGUgYmVsb3cgZm9yICdpc0dsb2JhbE9iaicgYW5kICdHTE9CQUxfT0JKJyB3YXMgY29waWVkIGZyb20gY29yZS1qcyBiZWZvcmUgbW9kaWZpY2F0aW9uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9ibG9iLzFiOTQ0ZGY1NTI4MmNkYzk5YzkwZGI1ZjQ5ZWIwYjZlZGEyY2MwYTMvcGFja2FnZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzXG4vLyBjb3JlLWpzIGhhcyB0aGUgZm9sbG93aW5nIGxpY2VuY2U6XG4vL1xuLy8gQ29weXJpZ2h0IChjKSAyMDE0LTIwMjIgRGVuaXMgUHVzaGthcmV2XG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuLyoqIFJldHVybnMgJ29iaicgaWYgaXQncyB0aGUgZ2xvYmFsIG9iamVjdCwgb3RoZXJ3aXNlIHJldHVybnMgdW5kZWZpbmVkICovXG5mdW5jdGlvbiBpc0dsb2JhbE9iaihvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouTWF0aCA9PSBNYXRoID8gb2JqIDogdW5kZWZpbmVkO1xufVxuXG4vKiogR2V0J3MgdGhlIGdsb2JhbCBvYmplY3QgZm9yIHRoZSBjdXJyZW50IEphdmFTY3JpcHQgcnVudGltZSAqL1xuY29uc3QgR0xPQkFMX09CSiA9XG4gICh0eXBlb2YgZ2xvYmFsVGhpcyA9PSAnb2JqZWN0JyAmJiBpc0dsb2JhbE9iaihnbG9iYWxUaGlzKSkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiBpc0dsb2JhbE9iaih3aW5kb3cpKSB8fFxuICAodHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgaXNHbG9iYWxPYmooc2VsZikpIHx8XG4gICh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGlzR2xvYmFsT2JqKGdsb2JhbCkpIHx8XG4gIChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pKCkgfHxcbiAge307XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIEdMT0JBTF9PQkogaW5zdGVhZCBvciBXSU5ET1cgZnJvbSBAc2VudHJ5L2Jyb3dzZXIuIFRoaXMgd2lsbCBiZSByZW1vdmVkIGluIHY4XG4gKi9cbmZ1bmN0aW9uIGdldEdsb2JhbE9iamVjdCgpIHtcbiAgcmV0dXJuIEdMT0JBTF9PQkogO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBnbG9iYWwgc2luZ2xldG9uIGNvbnRhaW5lZCBpbiB0aGUgZ2xvYmFsIGBfX1NFTlRSWV9fYCBvYmplY3QuXG4gKlxuICogSWYgdGhlIHNpbmdsZXRvbiBkb2Vzbid0IGFscmVhZHkgZXhpc3QgaW4gYF9fU0VOVFJZX19gLCBpdCB3aWxsIGJlIGNyZWF0ZWQgdXNpbmcgdGhlIGdpdmVuIGZhY3RvcnlcbiAqIGZ1bmN0aW9uIGFuZCBhZGRlZCB0byB0aGUgYF9fU0VOVFJZX19gIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gbmFtZSBuYW1lIG9mIHRoZSBnbG9iYWwgc2luZ2xldG9uIG9uIF9fU0VOVFJZX19cbiAqIEBwYXJhbSBjcmVhdG9yIGNyZWF0b3IgRmFjdG9yeSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIHNpbmdsZXRvbiBpZiBpdCBkb2Vzbid0IGFscmVhZHkgZXhpc3Qgb24gYF9fU0VOVFJZX19gXG4gKiBAcGFyYW0gb2JqIChPcHRpb25hbCkgVGhlIGdsb2JhbCBvYmplY3Qgb24gd2hpY2ggdG8gbG9vayBmb3IgYF9fU0VOVFJZX19gLCBpZiBub3QgYEdMT0JBTF9PQkpgJ3MgcmV0dXJuIHZhbHVlXG4gKiBAcmV0dXJucyB0aGUgc2luZ2xldG9uXG4gKi9cbmZ1bmN0aW9uIGdldEdsb2JhbFNpbmdsZXRvbihuYW1lLCBjcmVhdG9yLCBvYmopIHtcbiAgY29uc3QgZ2JsID0gKG9iaiB8fCBHTE9CQUxfT0JKKSA7XG4gIGNvbnN0IF9fU0VOVFJZX18gPSAoZ2JsLl9fU0VOVFJZX18gPSBnYmwuX19TRU5UUllfXyB8fCB7fSk7XG4gIGNvbnN0IHNpbmdsZXRvbiA9IF9fU0VOVFJZX19bbmFtZV0gfHwgKF9fU0VOVFJZX19bbmFtZV0gPSBjcmVhdG9yKCkpO1xuICByZXR1cm4gc2luZ2xldG9uO1xufVxuXG5leHBvcnQgeyBHTE9CQUxfT0JKLCBnZXRHbG9iYWxPYmplY3QsIGdldEdsb2JhbFNpbmdsZXRvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d29ybGR3aWRlLmpzLm1hcFxuIl0sIm5hbWVzIjpbImlzR2xvYmFsT2JqIiwib2JqIiwiTWF0aCIsInVuZGVmaW5lZCIsIkdMT0JBTF9PQkoiLCJnbG9iYWxUaGlzIiwid2luZG93Iiwic2VsZiIsImdsb2JhbCIsImdldEdsb2JhbE9iamVjdCIsImdldEdsb2JhbFNpbmdsZXRvbiIsIm5hbWUiLCJjcmVhdG9yIiwiZ2JsIiwiX19TRU5UUllfXyIsInNpbmdsZXRvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/node_modules/@sentry/utils/esm/worldwide.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _optionalChain: () => (/* binding */ _optionalChain)\n/* harmony export */ });\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n * See https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The value of the expression\n */ function _optionalChain(ops) {\n    let lastAccessLHS = undefined;\n    let value = ops[0];\n    let i = 1;\n    while(i < ops.length){\n        const op = ops[i];\n        const fn = ops[i + 1];\n        i += 2;\n        // by checking for loose equality to `null`, we catch both `null` and `undefined`\n        if ((op === \"optionalAccess\" || op === \"optionalCall\") && value == null) {\n            // really we're meaning to return `undefined` as an actual value here, but it saves bytes not to write it\n            return;\n        }\n        if (op === \"access\" || op === \"optionalAccess\") {\n            lastAccessLHS = value;\n            value = fn(value);\n        } else if (op === \"call\" || op === \"optionalCall\") {\n            value = fn((...args)=>value.call(lastAccessLHS, ...args));\n            lastAccessLHS = undefined;\n        }\n    }\n    return value;\n}\n// Sucrase version\n// function _optionalChain(ops) {\n//   let lastAccessLHS = undefined;\n//   let value = ops[0];\n//   let i = 1;\n//   while (i < ops.length) {\n//     const op = ops[i];\n//     const fn = ops[i + 1];\n//     i += 2;\n//     if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n//       return undefined;\n//     }\n//     if (op === 'access' || op === 'optionalAccess') {\n//       lastAccessLHS = value;\n//       value = fn(value);\n//     } else if (op === 'call' || op === 'optionalCall') {\n//       value = fn((...args) => value.call(lastAccessLHS, ...args));\n//       lastAccessLHS = undefined;\n//     }\n//   }\n//   return value;\n// }\n //# sourceMappingURL=_optionalChain.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9lc20vYnVpbGRQb2x5ZmlsbHMvX29wdGlvbmFsQ2hhaW4uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNELFNBQVNBLGVBQWVDLEdBQUc7SUFDekIsSUFBSUMsZ0JBQWdCQztJQUNwQixJQUFJQyxRQUFRSCxHQUFHLENBQUMsRUFBRTtJQUNsQixJQUFJSSxJQUFJO0lBQ1IsTUFBT0EsSUFBSUosSUFBSUssTUFBTSxDQUFFO1FBQ3JCLE1BQU1DLEtBQUtOLEdBQUcsQ0FBQ0ksRUFBRTtRQUNqQixNQUFNRyxLQUFLUCxHQUFHLENBQUNJLElBQUksRUFBRTtRQUNyQkEsS0FBSztRQUNMLGlGQUFpRjtRQUNqRixJQUFJLENBQUNFLE9BQU8sb0JBQW9CQSxPQUFPLGNBQWEsS0FBTUgsU0FBUyxNQUFNO1lBQ3ZFLHlHQUF5RztZQUN6RztRQUNGO1FBQ0EsSUFBSUcsT0FBTyxZQUFZQSxPQUFPLGtCQUFrQjtZQUM5Q0wsZ0JBQWdCRTtZQUNoQkEsUUFBUUksR0FBR0o7UUFDYixPQUFPLElBQUlHLE9BQU8sVUFBVUEsT0FBTyxnQkFBZ0I7WUFDakRILFFBQVFJLEdBQUcsQ0FBQyxHQUFHQyxPQUFTLE1BQVNDLElBQUksQ0FBQ1Isa0JBQWtCTztZQUN4RFAsZ0JBQWdCQztRQUNsQjtJQUNGO0lBQ0EsT0FBT0M7QUFDVDtBQUVBLGtCQUFrQjtBQUNsQixpQ0FBaUM7QUFDakMsbUNBQW1DO0FBQ25DLHdCQUF3QjtBQUN4QixlQUFlO0FBQ2YsNkJBQTZCO0FBQzdCLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFDN0IsY0FBYztBQUNkLGlGQUFpRjtBQUNqRiwwQkFBMEI7QUFDMUIsUUFBUTtBQUNSLHdEQUF3RDtBQUN4RCwrQkFBK0I7QUFDL0IsMkJBQTJCO0FBQzNCLDJEQUEyRDtBQUMzRCxxRUFBcUU7QUFDckUsbUNBQW1DO0FBQ25DLFFBQVE7QUFDUixNQUFNO0FBQ04sa0JBQWtCO0FBQ2xCLElBQUk7QUFFc0IsQ0FDMUIsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFyYW0tbG1zLWZlLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZXNtL2J1aWxkUG9seWZpbGxzL19vcHRpb25hbENoYWluLmpzPzVkYTgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQb2x5ZmlsbCBmb3IgdGhlIG9wdGlvbmFsIGNoYWluIG9wZXJhdG9yLCBgPy5gLCBnaXZlbiBwcmV2aW91cyBjb252ZXJzaW9uIG9mIHRoZSBleHByZXNzaW9uIGludG8gYW4gYXJyYXkgb2YgdmFsdWVzLFxuICogZGVzY3JpcHRvcnMsIGFuZCBmdW5jdGlvbnMuXG4gKlxuICogQWRhcHRlZCBmcm9tIFN1Y3Jhc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlKVxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlL2Jsb2IvMjY1ODg3ODY4OTY2OTE3ZjNiOTI0Y2UzOGRmYWQwMWZiYWIxMzI5Zi9zcmMvdHJhbnNmb3JtZXJzL09wdGlvbmFsQ2hhaW5pbmdOdWxsaXNoVHJhbnNmb3JtZXIudHMjTDE1XG4gKlxuICogQHBhcmFtIG9wcyBBcnJheSByZXN1bHQgb2YgZXhwcmVzc2lvbiBjb252ZXJzaW9uXG4gKiBAcmV0dXJucyBUaGUgdmFsdWUgb2YgdGhlIGV4cHJlc3Npb25cbiAqL1xuZnVuY3Rpb24gX29wdGlvbmFsQ2hhaW4ob3BzKSB7XG4gIGxldCBsYXN0QWNjZXNzTEhTID0gdW5kZWZpbmVkO1xuICBsZXQgdmFsdWUgPSBvcHNbMF07XG4gIGxldCBpID0gMTtcbiAgd2hpbGUgKGkgPCBvcHMubGVuZ3RoKSB7XG4gICAgY29uc3Qgb3AgPSBvcHNbaV0gO1xuICAgIGNvbnN0IGZuID0gb3BzW2kgKyAxXSA7XG4gICAgaSArPSAyO1xuICAgIC8vIGJ5IGNoZWNraW5nIGZvciBsb29zZSBlcXVhbGl0eSB0byBgbnVsbGAsIHdlIGNhdGNoIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIGlmICgob3AgPT09ICdvcHRpb25hbEFjY2VzcycgfHwgb3AgPT09ICdvcHRpb25hbENhbGwnKSAmJiB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAvLyByZWFsbHkgd2UncmUgbWVhbmluZyB0byByZXR1cm4gYHVuZGVmaW5lZGAgYXMgYW4gYWN0dWFsIHZhbHVlIGhlcmUsIGJ1dCBpdCBzYXZlcyBieXRlcyBub3QgdG8gd3JpdGUgaXRcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG9wID09PSAnYWNjZXNzJyB8fCBvcCA9PT0gJ29wdGlvbmFsQWNjZXNzJykge1xuICAgICAgbGFzdEFjY2Vzc0xIUyA9IHZhbHVlO1xuICAgICAgdmFsdWUgPSBmbih2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChvcCA9PT0gJ2NhbGwnIHx8IG9wID09PSAnb3B0aW9uYWxDYWxsJykge1xuICAgICAgdmFsdWUgPSBmbigoLi4uYXJncykgPT4gKHZhbHVlICkuY2FsbChsYXN0QWNjZXNzTEhTLCAuLi5hcmdzKSk7XG4gICAgICBsYXN0QWNjZXNzTEhTID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbi8vIFN1Y3Jhc2UgdmVyc2lvblxuLy8gZnVuY3Rpb24gX29wdGlvbmFsQ2hhaW4ob3BzKSB7XG4vLyAgIGxldCBsYXN0QWNjZXNzTEhTID0gdW5kZWZpbmVkO1xuLy8gICBsZXQgdmFsdWUgPSBvcHNbMF07XG4vLyAgIGxldCBpID0gMTtcbi8vICAgd2hpbGUgKGkgPCBvcHMubGVuZ3RoKSB7XG4vLyAgICAgY29uc3Qgb3AgPSBvcHNbaV07XG4vLyAgICAgY29uc3QgZm4gPSBvcHNbaSArIDFdO1xuLy8gICAgIGkgKz0gMjtcbi8vICAgICBpZiAoKG9wID09PSAnb3B0aW9uYWxBY2Nlc3MnIHx8IG9wID09PSAnb3B0aW9uYWxDYWxsJykgJiYgdmFsdWUgPT0gbnVsbCkge1xuLy8gICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbi8vICAgICB9XG4vLyAgICAgaWYgKG9wID09PSAnYWNjZXNzJyB8fCBvcCA9PT0gJ29wdGlvbmFsQWNjZXNzJykge1xuLy8gICAgICAgbGFzdEFjY2Vzc0xIUyA9IHZhbHVlO1xuLy8gICAgICAgdmFsdWUgPSBmbih2YWx1ZSk7XG4vLyAgICAgfSBlbHNlIGlmIChvcCA9PT0gJ2NhbGwnIHx8IG9wID09PSAnb3B0aW9uYWxDYWxsJykge1xuLy8gICAgICAgdmFsdWUgPSBmbigoLi4uYXJncykgPT4gdmFsdWUuY2FsbChsYXN0QWNjZXNzTEhTLCAuLi5hcmdzKSk7XG4vLyAgICAgICBsYXN0QWNjZXNzTEhTID0gdW5kZWZpbmVkO1xuLy8gICAgIH1cbi8vICAgfVxuLy8gICByZXR1cm4gdmFsdWU7XG4vLyB9XG5cbmV4cG9ydCB7IF9vcHRpb25hbENoYWluIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fb3B0aW9uYWxDaGFpbi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJfb3B0aW9uYWxDaGFpbiIsIm9wcyIsImxhc3RBY2Nlc3NMSFMiLCJ1bmRlZmluZWQiLCJ2YWx1ZSIsImkiLCJsZW5ndGgiLCJvcCIsImZuIiwiYXJncyIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sentry/utils/esm/buildPolyfills/_optionalChain.js\n");

/***/ })

};
;