"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/body-scroll-lock";
exports.ids = ["vendor-chunks/body-scroll-lock"];
exports.modules = {

/***/ "(ssr)/./node_modules/body-scroll-lock/lib/bodyScrollLock.esm.js":
/*!*****************************************************************!*\
  !*** ./node_modules/body-scroll-lock/lib/bodyScrollLock.esm.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearAllBodyScrollLocks: () => (/* binding */ clearAllBodyScrollLocks),\n/* harmony export */   disableBodyScroll: () => (/* binding */ disableBodyScroll),\n/* harmony export */   enableBodyScroll: () => (/* binding */ enableBodyScroll)\n/* harmony export */ });\nfunction _toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n        for(var i = 0, arr2 = Array(arr.length); i < arr.length; i++){\n            arr2[i] = arr[i];\n        }\n        return arr2;\n    } else {\n        return Array.from(arr);\n    }\n}\n// Older browsers don't support event options, feature detect it.\n// Adopted and modified solution from Bohdan Didukh (2017)\n// https://stackoverflow.com/questions/41594997/ios-10-safari-prevent-scrolling-behind-a-fixed-overlay-and-maintain-scroll-posi\nvar hasPassiveEvents = false;\nif (false) { var passiveTestOptions; }\nvar isIosDevice =  false && (0);\nvar locks = [];\nvar documentListenerAdded = false;\nvar initialClientY = -1;\nvar previousBodyOverflowSetting = void 0;\nvar previousBodyPaddingRight = void 0;\n// returns true if `el` should be allowed to receive touchmove events.\nvar allowTouchMove = function allowTouchMove(el) {\n    return locks.some(function(lock) {\n        if (lock.options.allowTouchMove && lock.options.allowTouchMove(el)) {\n            return true;\n        }\n        return false;\n    });\n};\nvar preventDefault = function preventDefault(rawEvent) {\n    var e = rawEvent || window.event;\n    // For the case whereby consumers adds a touchmove event listener to document.\n    // Recall that we do document.addEventListener('touchmove', preventDefault, { passive: false })\n    // in disableBodyScroll - so if we provide this opportunity to allowTouchMove, then\n    // the touchmove event on document will break.\n    if (allowTouchMove(e.target)) {\n        return true;\n    }\n    // Do not prevent if the event has more than one touch (usually meaning this is a multi touch gesture like pinch to zoom).\n    if (e.touches.length > 1) return true;\n    if (e.preventDefault) e.preventDefault();\n    return false;\n};\nvar setOverflowHidden = function setOverflowHidden(options) {\n    // If previousBodyPaddingRight is already set, don't set it again.\n    if (previousBodyPaddingRight === undefined) {\n        var _reserveScrollBarGap = !!options && options.reserveScrollBarGap === true;\n        var scrollBarGap = window.innerWidth - document.documentElement.clientWidth;\n        if (_reserveScrollBarGap && scrollBarGap > 0) {\n            previousBodyPaddingRight = document.body.style.paddingRight;\n            document.body.style.paddingRight = scrollBarGap + \"px\";\n        }\n    }\n    // If previousBodyOverflowSetting is already set, don't set it again.\n    if (previousBodyOverflowSetting === undefined) {\n        previousBodyOverflowSetting = document.body.style.overflow;\n        document.body.style.overflow = \"hidden\";\n    }\n};\nvar restoreOverflowSetting = function restoreOverflowSetting() {\n    if (previousBodyPaddingRight !== undefined) {\n        document.body.style.paddingRight = previousBodyPaddingRight;\n        // Restore previousBodyPaddingRight to undefined so setOverflowHidden knows it\n        // can be set again.\n        previousBodyPaddingRight = undefined;\n    }\n    if (previousBodyOverflowSetting !== undefined) {\n        document.body.style.overflow = previousBodyOverflowSetting;\n        // Restore previousBodyOverflowSetting to undefined\n        // so setOverflowHidden knows it can be set again.\n        previousBodyOverflowSetting = undefined;\n    }\n};\n// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight#Problems_and_solutions\nvar isTargetElementTotallyScrolled = function isTargetElementTotallyScrolled(targetElement) {\n    return targetElement ? targetElement.scrollHeight - targetElement.scrollTop <= targetElement.clientHeight : false;\n};\nvar handleScroll = function handleScroll(event, targetElement) {\n    var clientY = event.targetTouches[0].clientY - initialClientY;\n    if (allowTouchMove(event.target)) {\n        return false;\n    }\n    if (targetElement && targetElement.scrollTop === 0 && clientY > 0) {\n        // element is at the top of its scroll.\n        return preventDefault(event);\n    }\n    if (isTargetElementTotallyScrolled(targetElement) && clientY < 0) {\n        // element is at the bottom of its scroll.\n        return preventDefault(event);\n    }\n    event.stopPropagation();\n    return true;\n};\nvar disableBodyScroll = function disableBodyScroll(targetElement, options) {\n    // targetElement must be provided\n    if (!targetElement) {\n        // eslint-disable-next-line no-console\n        console.error(\"disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.\");\n        return;\n    }\n    // disableBodyScroll must not have been called on this targetElement before\n    if (locks.some(function(lock) {\n        return lock.targetElement === targetElement;\n    })) {\n        return;\n    }\n    var lock = {\n        targetElement: targetElement,\n        options: options || {}\n    };\n    locks = [].concat(_toConsumableArray(locks), [\n        lock\n    ]);\n    if (isIosDevice) {\n        targetElement.ontouchstart = function(event) {\n            if (event.targetTouches.length === 1) {\n                // detect single touch.\n                initialClientY = event.targetTouches[0].clientY;\n            }\n        };\n        targetElement.ontouchmove = function(event) {\n            if (event.targetTouches.length === 1) {\n                // detect single touch.\n                handleScroll(event, targetElement);\n            }\n        };\n        if (!documentListenerAdded) {\n            document.addEventListener(\"touchmove\", preventDefault, hasPassiveEvents ? {\n                passive: false\n            } : undefined);\n            documentListenerAdded = true;\n        }\n    } else {\n        setOverflowHidden(options);\n    }\n};\nvar clearAllBodyScrollLocks = function clearAllBodyScrollLocks() {\n    if (isIosDevice) {\n        // Clear all locks ontouchstart/ontouchmove handlers, and the references.\n        locks.forEach(function(lock) {\n            lock.targetElement.ontouchstart = null;\n            lock.targetElement.ontouchmove = null;\n        });\n        if (documentListenerAdded) {\n            document.removeEventListener(\"touchmove\", preventDefault, hasPassiveEvents ? {\n                passive: false\n            } : undefined);\n            documentListenerAdded = false;\n        }\n        // Reset initial clientY.\n        initialClientY = -1;\n    } else {\n        restoreOverflowSetting();\n    }\n    locks = [];\n};\nvar enableBodyScroll = function enableBodyScroll(targetElement) {\n    if (!targetElement) {\n        // eslint-disable-next-line no-console\n        console.error(\"enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.\");\n        return;\n    }\n    locks = locks.filter(function(lock) {\n        return lock.targetElement !== targetElement;\n    });\n    if (isIosDevice) {\n        targetElement.ontouchstart = null;\n        targetElement.ontouchmove = null;\n        if (documentListenerAdded && locks.length === 0) {\n            document.removeEventListener(\"touchmove\", preventDefault, hasPassiveEvents ? {\n                passive: false\n            } : undefined);\n            documentListenerAdded = false;\n        }\n    } else if (!locks.length) {\n        restoreOverflowSetting();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/body-scroll-lock/lib/bodyScrollLock.esm.js\n");

/***/ })

};
;